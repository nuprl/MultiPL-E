language: java
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                smallestEven = Math.min(smallestEven, arr.get(i));\n\
    \                smallestIndex++;\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpno4dc1qz.java:38: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n  \
    \          if (arr.get(i) % 2 == 0) {\n                if (smallestEven == Long.MAX_VALUE)\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                } else if (arr.get(i) < smallestEven) {\n            \
    \        smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (smallestEven == Long.MAX_VALUE)\
    \ {\n            return res;\n        }\n        ArrayList<Long> evens = new ArrayList<>();\n\
    \        for (int i = 0; i < size; i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                evens.add(arr.get(i));\n            }\n        }\n      \
    \  evens.sort(Comparator.comparingLong(Long::longValue));\n        evens.remove(smallestEven);\n\
    \        evens.add(smallestEven);\n        res.add(smallestEven);\n        res.add(smallestIndex);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_index\
    \ != -1) {\n            result.add(smallest_value);\n            result.add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbk7xzxi4.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(smallestEven > arr.get(i)) {\n                 \
    \   smallestEven = arr.get(i);\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.add(smallestEven);\n \
    \       result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppruzd7yw.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                if (smallestEvenValue < arr.get(i)) {\n                 \
    \   smallestEvenValue = arr.get(i);\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphyq80_pw.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(smallestEvenValue\
    \ > value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = i;\n                }\n            }\n        }\n      \
    \  if(smallestEvenValue == Long.MIN_VALUE) {\n            return result;\n   \
    \     }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if(value % 2 == 0) {\n                evenValues.add(value);\n        \
    \    }\n        }\n        smallestEvenValue = Collections.min(evenValues);\n\
    \        smallestIndex = evenValues.indexOf(smallestEvenValue);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvkh1n0_.java:52: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgfwvw7v_.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ngxi_wv.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallestEven) {\n\
    \                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEven !=\
    \ Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcizdkfp.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        long smallestValue = 0;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) % 2 == 0) {\n                if(smallestEven ==\
    \ Long.MAX_VALUE) {\n                    smallestEven = arr.get(i);\n        \
    \            smallestIndex = i;\n                    smallestValue = arr.get(i);\n\
    \                } else if(arr.get(i) < smallestEven) {\n                    smallestEven\
    \ = arr.get(i);\n                    smallestIndex = i;\n                    smallestValue\
    \ = arr.get(i);\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbi607xg.java:51)\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        int index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = index;\n                }\n  \
    \              index++;\n            }\n        }\n        if(smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        ArrayList<Long>\
    \ evenValues = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if(value % 2 == 0) {\n\
    \                evenValues.add(value);\n            }\n        }\n        Collections.sort(evenValues);\n\
    \        for(long value : evenValues) {\n            if(value == smallestEvenValue)\
    \ {\n                result.add(smallestEvenValue);\n                result.add(smallestIndex);\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1vqqwst.java:55: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallestIndex);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                smallestEven = Math.min(smallestEven, arr.get(i));\n\
    \                smallestIndex = i;\n            }\n        }\n        if (smallestEven\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        smallestEven\
    \ = Math.min(smallestEven, arr.get(smallestIndex));\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsw6badal.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ long smallestValue = 0;\n        long largestValue = 0;\n        long largestIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = i;\n                }\n                if (smallestEvenValue\
    \ == value) {\n                    if (smallestIndex < i) {\n                \
    \        smallestIndex = i;\n                    }\n                }\n      \
    \      }\n            if (value > largestValue) {\n                largestValue\
    \ = value;\n                largestIndex = i;\n            }\n        }\n    \
    \    if (smallestEvenValue == 0) {\n            result.add(smallestValue);\n \
    \           result.add(smallestIndex);\n        } else {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n        }\n        if (largestValue ==\
    \ 0) {\n            result.add(largestValue);\n            result.add(largestIndex);\n\
    \        } else {\n            result.add(largestValue);\n            result.add(largestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4zghbyhe.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    /tmp/tmp4zghbyhe.java:56: error: incompatible types: int cannot be converted to\
    \ Long\n            result.add(smallestIndex);\n                       ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smalest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smalest_value) {\n\
    \                    smalest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if(smallest_index\
    \ != -1) {\n            res.add(smalest_value);\n            res.add(smallest_index);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxeruyiss.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallest_index);\n                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if((value & 1) == 0) {\n                if(value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEven ==\
    \ Long.MAX_VALUE) {\n            return result;\n        }\n        ArrayList<Long>\
    \ evens = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if((value & 1) == 0) {\n  \
    \              evens.add(value);\n            }\n        }\n        Collections.sort(evens);\n\
    \        for(int i = 0; i < evens.size(); i++) {\n            if(evens.get(i)\
    \ == smallestEven) {\n                result.add(smallestEven);\n            \
    \    result.add(smallestIndex);\n                break;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9nrytx2n.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallestIndex);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (smallestEven > value)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjhzod42.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy9nok5ql.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest_value);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hqk4run.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        int smallestIndex =\
    \ 0;\n        int index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = index;\n                }\n  \
    \              index++;\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbwl916n.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int index = 0;\n        for(Long val : arr) {\n            if(val % 2\
    \ == 0) {\n                if(smallestEven == Long.MAX_VALUE) {\n            \
    \        smallestEven = val;\n                    smallestIndex = index;\n   \
    \             }\n                else {\n                    if(val < smallestEven)\
    \ {\n                        smallestEven = val;\n                        smallestIndex\
    \ = index;\n                    }\n                }\n            }\n        \
    \    index++;\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_sf95ve2.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(long value : arr) {\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.indexOf(value);\n        \
    \        }\n            }\n        }\n        if(smallestEvenValue == Long.MAX_VALUE)\
    \ {\n            return result;\n        }\n        for(long value : arr) {\n\
    \            if(value % 2 == 0) {\n                if(value == smallestEvenValue)\
    \ {\n                    result.add(smallestEvenValue);\n                    result.add(smallestIndex);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkq1n8qim.java:45: error: incompatible types: int cannot be converted\
    \ to Long\n                    result.add(smallestIndex);\n                  \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(smallestEvenValue < value)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value % 2 == 0)\
    \ {\n                if(smallestEvenValue == value) {\n                    result.add(smallestEvenValue);\n\
    \                    result.add(smallestIndex);\n                }\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoumnw80c.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n                    result.add(smallestIndex);\n                  \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven == Long.MAX_VALUE) {\n         \
    \           smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                } else if (arr.get(i) < smallestEven) {\n                   \
    \ smallestEven = arr.get(i);\n                    smallestIndex = i;\n       \
    \         }\n            }\n        }\n        result.add(smallestEven);\n   \
    \     result.add(smallestIndex);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppj_7p1l1.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        int smallestIndex = -1;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(smallestEven == Long.MIN_VALUE)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                } else if(value < smallestEven) {\n                  \
    \  smallestEven = value;\n                    smallestIndex = i;\n           \
    \     }\n            }\n        }\n        if(smallestEven != Long.MIN_VALUE)\
    \ {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt8p5uvm_.java:44: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_57rw41.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        int index = 0;\n        for (Long node : arr) {\n            if\
    \ (node % 2 == 0) {\n                if (smallestEvenValue > node) {\n       \
    \             smallestEvenValue = node;\n                    smallestIndex = index;\n\
    \                }\n                index++;\n            }\n        }\n     \
    \   result.add(smallestEvenValue);\n        result.add(smallestIndex);\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0zfussx9.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  int count = 0;\n        for (long i : arr) {\n            if (i % 2 == 0) {\n\
    \                smallestEvenValue = i;\n                smallestIndex = count;\n\
    \            }\n            count++;\n        }\n        if (count == 0) {\n \
    \           return result;\n        }\n        long smallestValue = smallestEvenValue;\n\
    \        long smallestIndex = smallestIndex;\n        int count = 0;\n       \
    \ for (long i : arr) {\n            if (i % 2 == 0) {\n                if (i ==\
    \ smallestEvenValue) {\n                    smallestValue = i;\n             \
    \       smallestIndex = count;\n                }\n                count++;\n\
    \            }\n        }\n        if (count == 0) {\n            return result;\n\
    \        }\n        ArrayList<Long> temp = new ArrayList<>();\n        long smallestValue\
    \ = smallestEvenValue;\n        long smallestIndex = smallestIndex;\n        int\
    \ count = 0;\n        for (long i : arr) {\n            if (i % 2 == 0) {\n  \
    \              if (i == smallestEvenValue) {\n                    smallestValue\
    \ = i;\n                    smallestIndex = count;\n                }\n      \
    \          count++;\n            }\n        }\n        if (count == 0) {\n   \
    \         return result;\n        }\n        long smallestValue = smallestEvenValue;\n\
    \        long smallestIndex = smallestIndex;\n        int count = 0;\n       \
    \ for (long i : arr) {\n            if (i % 2 == 0) {\n                if (i ==\
    \ smallestEvenValue) {\n                    smallestValue = i;\n             \
    \       smallestIndex = count;\n                }\n                count++;\n\
    \            }\n        }\n        if (count == 0) {\n            return result;\n\
    \        }\n        ArrayList<Long> temp = new ArrayList<>();\n        long smallestValue\
    \ = smallestEvenValue;\n        long smallestIndex = smallestIndex;\n        int\
    \ count = 0;\n        for (long i : arr) {\n            if (i % 2 == 0) {\n  \
    \              if (i == smallestEvenValue) {\n                    smallestValue\
    \ = i;\n                    smallestIndex = count;\n                }\n      \
    \          count++;\n            }\n        }\n        if (count == 0) {\n   \
    \         return result;\n        }\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestValue = smallestEvenValue;\n        long smallestIndex =\
    \ smallestIndex;\n        int count = 0;\n        for (long i : arr) {\n     \
    \       if (i % 2 == 0) {\n                if (i == smallestEvenValue) {\n   \
    \                 smallestValue = i;\n                    smallestIndex = count;\n\
    \                }\n                count++;\n            }\n        }\n     \
    \   if (count == 0) {\n            return result;\n        }\n        ArrayList<Long>\
    \ temp = new ArrayList<>();\n        long smallestValue = smallestEvenValue;\n\
    \        long smallestIndex = smallestIndex;\n        int count = 0;\n       \
    \ for (long i : arr) {\n            if (i % 2 == 0) {\n                if (i ==\
    \ smallestEvenValue) {\n                    smallestValue = i;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe88sodpi.java:129: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                smallestEven = Math.min(smallestEven, arr.get(i));\n\
    \                smallestIndex = i;\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3xau9ix.java:38: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n  \
    \          if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedg5q6jz.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n  \
    \          long value = arr.get(i);\n            if (value % 2 == 0) {\n     \
    \           if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_index != -1) {\n            result.add(smallest_value);\n\
    \            result.add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp52v9lx4l.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(smallestEven > arr.get(i)) {\n                 \
    \   smallestEven = arr.get(i);\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.add(smallestEven);\n \
    \       result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppruzd7yw.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ngxi_wv.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                if (smallestEvenValue < arr.get(i)) {\n                 \
    \   smallestEvenValue = arr.get(i);\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphyq80_pw.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        ArrayList<Long>\
    \ evens = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            evens.add(value);\n            }\n        }\n        Collections.sort(evens);\n\
    \        for(int i = 0; i < evens.size(); i++) {\n            if(evens.get(i)\
    \ == smallestEvenValue) {\n                result.add(smallestEvenValue);\n  \
    \              result.add(smallestIndex);\n                break;\n          \
    \  }\n        }\n        if(result.isEmpty()) {\n            return result;\n\
    \        }\n        Collections.sort(result);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpown1g51x.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallestIndex);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8yd88x2n.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_index\
    \ != -1) {\n            result.add(smallest_value);\n            result.add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbk7xzxi4.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            res.add(smallestEven);\n            res.add(smallestIndex);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpencd4dq6.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(Long node : arr) {\n            if(node % 2 == 0) {\n      \
    \          if(smallestEvenValue < node) {\n                    smallestEvenValue\
    \ = node;\n                    smallestIndex = arr.indexOf(node);\n          \
    \      }\n            }\n        }\n        result.add(smallestEvenValue);\n \
    \       result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1bkx1h_7.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                if (smallestEvenValue < arr.get(i)) {\n                 \
    \   smallestEvenValue = arr.get(i);\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (smallestEvenValue ==\
    \ 0) {\n            return result;\n        }\n        ArrayList<Long> evens =\
    \ new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n   \
    \         }\n        }\n        Collections.sort(evens);\n        Collections.reverse(evens);\n\
    \        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3inkxx7q.java:50: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(long val : arr) {\n            if(val % 2 == 0) {\n             \
    \   if(smallestEven > val) {\n                    smallestEven = val;\n      \
    \              smallestIndex = arr.indexOf(val);\n                }\n        \
    \    }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo3v_ve0u.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(long val : arr) {\n            if(val % 2 == 0) {\n        \
    \        if(smallestEvenValue > val) {\n                    smallestEvenValue\
    \ = val;\n                    smallestIndex = arr.indexOf(val);\n            \
    \    }\n            }\n        }\n        result.add(smallestEvenValue);\n   \
    \     result.add(smallestIndex);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz78iejk.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smalest_value = 0;\n        int smalest_index = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n     \
    \           if(smalest_value < arr.get(i)) {\n                    smalest_value\
    \ = arr.get(i);\n                    smalest_index = i;\n                }\n \
    \           }\n        }\n        if(smalest_value == 0) {\n            return\
    \ res;\n        }\n        for(int i = 0; i < arr.size(); i++) {\n           \
    \ if(arr.get(i) % 2 == 0) {\n                if(arr.get(i) == smalest_value) {\n\
    \                    res.add(smalest_value);\n                    res.add(smalest_index);\n\
    \                }\n            }\n        }\n        return res;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxf530g66.java:45: error: incompatible types: int cannot be converted\
    \ to Long\n                    res.add(smalest_index);\n                     \
    \       ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        res.add(smallestEven);\n \
    \       res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppfql0m62.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n  \
    \          long value = arr.get(i);\n            if (value % 2 == 0) {\n     \
    \           if (value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if (smallestEven != Long.MAX_VALUE) {\n            res.add(smallestEven);\n\
    \            res.add(smallestIndex);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pq83jho.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        int count = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                smallestEvenValue\
    \ = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(smallestEvenValue > arr.get(i)) {\n            \
    \        smallestEvenValue = arr.get(i);\n                    smallestIndex =\
    \ i;\n                }\n            }\n        }\n        smallestValue = smallestEvenValue;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(smallestEvenValue > arr.get(i)) {\n            \
    \        smallestEvenValue = arr.get(i);\n                    smallestIndex =\
    \ i;\n                }\n            }\n        }\n        while(smallestEvenValue\
    \ != 0) {\n            smallestEvenValue /= 2;\n            smallestValue += smallestEvenValue;\n\
    \            count++;\n        }\n        if(count == 0) {\n            return\
    \ result;\n        }\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    if(arr.get(i) % 2 == 0) {\n                if(smallestEvenValue > arr.get(i))\
    \ {\n                    smallestEvenValue = arr.get(i);\n                   \
    \ smallestIndex = i;\n                }\n            }\n        }\n        result.add(smallestValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhhm40bt.java:76)\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long currentSmallestEvenValue = 0;\n        long currentSmallestIndex = 0;\n\
    \        long currentSmallestEvenValueIndex = 0;\n        long currentSmallestEvenValueIndex2\
    \ = 0;\n        long currentSmallestEvenValueIndex3 = 0;\n        long currentSmallestEvenValueIndex4\
    \ = 0;\n        long currentSmallestEvenValueIndex5 = 0;\n        long currentSmallestEvenValueIndex6\
    \ = 0;\n        long currentSmallestEvenValueIndex7 = 0;\n        long currentSmallestEvenValueIndex8\
    \ = 0;\n        long currentSmallestEvenValueIndex9 = 0;\n        long currentSmallestEvenValueIndex10\
    \ = 0;\n        long currentSmallestEvenValueIndex11 = 0;\n        long currentSmallestEvenValueIndex12\
    \ = 0;\n        long currentSmallestEvenValueIndex13 = 0;\n        long currentSmallestEvenValueIndex14\
    \ = 0;\n        long currentSmallestEvenValueIndex15 = 0;\n        long currentSmallestEvenValueIndex16\
    \ = 0;\n        long currentSmallestEvenValueIndex17 = 0;\n        long currentSmallestEvenValueIndex18\
    \ = 0;\n        long currentSmallestEvenValueIndex19 = 0;\n        long currentSmallestEvenValueIndex20\
    \ = 0;\n        long currentSmallestEvenValueIndex21 = 0;\n        long currentSmallestEvenValueIndex22\
    \ = 0;\n        long currentSmallestEvenValueIndex23 = 0;\n        long currentSmallestEvenValueIndex24\
    \ = 0;\n        long currentSmallestEvenValueIndex25 = 0;\n        long currentSmallestEvenValueIndex26\
    \ = 0;\n        long currentSmallestEvenValueIndex27 = 0;\n        long currentSmallestEvenValueIndex28\
    \ = 0;\n        long currentSmallestEvenValueIndex29 = 0;\n        long currentSmallestEvenValueIndex30\
    \ = 0;\n        long currentSmallestEvenValueIndex31 = 0;\n        long currentSmallestEvenValueIndex32\
    \ = 0;\n        long currentSmallestEvenValueIndex33 = 0;\n        long currentSmallestEvenValueIndex34\
    \ = 0;\n        long currentSmallestEvenValueIndex35 = 0;\n        long currentSmallestEvenValueIndex36\
    \ = 0;\n        long currentSmallestEvenValueIndex37 = 0;\n        long currentSmallestEvenValueIndex38\
    \ = 0;\n        long currentSmallestEvenValueIndex39 = 0;\n        long currentSmallest\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp87la84yf.java:71: error: ';' expected\n        long currentSmallest\n\
    \                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659976323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest_value);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1om7n800.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = arr.get(0);\n        int smallestIndex = 0;\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEvenValue < arr.get(i)) {\n         \
    \           smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7a_tg1n8.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smalest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smalest_value)\
    \ {\n                    smalest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smalest_value\
    \ == Long.MAX_VALUE) {\n            return res;\n        }\n        ArrayList<Long>\
    \ smallest = new ArrayList<>();\n        smallest.add(smalest_value);\n      \
    \  smallest.add(smallest_index);\n        res.add(smallest);\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4jraxrc0.java:44: error: incompatible types: int cannot be converted\
    \ to Long\n        smallest.add(smallest_index);\n                     ^\n/tmp/tmp4jraxrc0.java:45:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \     res.add(smallest);\n                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return res;\n        }\n        ArrayList<Long>\
    \ evens = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            evens.add(value);\n            }\n        }\n        Collections.sort(evens);\n\
    \        for(int i = 0; i < evens.size(); i++) {\n            if(evens.get(i)\
    \ == smallestEvenValue) {\n                res.add(smallestEvenValue);\n     \
    \           res.add(smallestIndex);\n                break;\n            }\n \
    \       }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvchox99k.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n                res.add(smallestIndex);\n                        ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        int smallestIndex =\
    \ 0;\n        int size = arr.size();\n        for(int i = 0; i < size; i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbe8g8az_.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(smallestEvenValue < value)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value % 2 == 0)\
    \ {\n                if(smallestEvenValue == value) {\n                    result.add(smallestEvenValue);\n\
    \                    result.add(smallestIndex);\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdrssxhy.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n                    result.add(smallestIndex);\n                  \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        for(int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if(value % 2 == 0) {\n                smallestEvenValue\
    \ = value;\n                foundSmallestEvenValue = true;\n            }\n  \
    \          if(value == smallestEvenValue) {\n                smallestIndex = i;\n\
    \                foundSmallestIndex = true;\n            }\n        }\n      \
    \  if(foundSmallestEvenValue) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n        }\n        if(foundSmallestIndex)\
    \ {\n            result.add(smallestIndex);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyh0z2hl3.java:53)\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (arr.get(i) < smallest_value) {\n            \
    \        smallest_value = arr.get(i);\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        result.add(smallest_value);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpci4ub9qt.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                smallestEvenValue = arr.get(i);\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenValue == 0) {\n    \
    \        return result;\n        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                evenValues.add(arr.get(i));\n            }\n    \
    \    }\n        Collections.sort(evenValues);\n        if (evenValues.size() ==\
    \ 1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \            return result;\n        }\n        ArrayList<Long> evenValues2 =\
    \ new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     if (arr.get(i) % 2 == 0) {\n                evenValues2.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(evenValues2);\n        if\
    \ (evenValues2.size() == 1) {\n            result.add(smallestEvenValue);\n  \
    \          result.add(smallestIndex);\n            return result;\n        }\n\
    \        ArrayList<Long> evenValues3 = new ArrayList<>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
    \          evenValues3.add(arr.get(i));\n            }\n        }\n        Collections.sort(evenValues3);\n\
    \        if (evenValues3.size() == 1) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n            return result;\n        }\n\
    \        ArrayList<Long> evenValues4 = new ArrayList<>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
    \          evenValues4.add(arr.get(i));\n            }\n        }\n        Collections.sort(evenValues4);\n\
    \        if (evenValues4.size() == 1) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n            return result;\n        }\n\
    \        ArrayList<Long> evenValues5 = new ArrayList<>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
    \          evenValues5.add(arr.get(i));\n            }\n        }\n        Collections.sort(evenValues5);\n\
    \        if (evenValues5.size() == 1) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n            return result;\n        }\n\
    \        ArrayList<Long> evenValues6 = new ArrayList<>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
    \          evenValues6.add(arr.get(i));\n            }\n        }\n        Collections.sort(evenValues6);\n\
    \        if (evenValues6.size() == 1) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n            return result;\n        }\n\
    \        ArrayList<Long> evenValues7\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_lz51gj.java:111: error: ';' expected\n        ArrayList<Long>\
    \ evenValues7\n                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8yd88x2n.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(smallestEven == Long.MAX_VALUE) {\n            \
    \        smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                } else if(arr.get(i) < smallestEven) {\n                    smallestEven\
    \ = arr.get(i);\n                    smallestIndex = i;\n                }\n \
    \           }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6b0tnnmi.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n \
    \           if (value % 2 == 0) {\n                evenValues.add(value);\n  \
    \          }\n        }\n        Collections.sort(evenValues);\n        evenValues.remove(smallestEvenValue);\n\
    \        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6rlpeunh.java:52: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n     \
    \       long value = arr.get(i);\n            if((value % 2) == 0) {\n       \
    \         if(value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if(smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvuhu6g0.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven == Long.MIN_VALUE) {\n         \
    \           smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                } else {\n                    if (arr.get(i) < smallestEven)\
    \ {\n                        smallestEven = arr.get(i);\n                    \
    \    smallestIndex = i;\n                    }\n                }\n          \
    \  }\n        }\n        res.add(smallestEven);\n        res.add(smallestIndex);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphtiqox23.java:44: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(long value : arr) {\n            if(value % 2 == 0) {\n    \
    \            if(smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.indexOf(value);\n        \
    \        }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkrpfgo20.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (arr.get(i) < smallest_value) {\n            \
    \        smallest_value = arr.get(i);\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        res.add(smallest_value);\n\
    \        res.add(smallest_index);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1esfhep.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallest_index);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                if (smallestEvenValue < arr.get(i)) {\n                 \
    \   smallestEvenValue = arr.get(i);\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (smallestEvenValue ==\
    \ 0) {\n            return result;\n        }\n        ArrayList<Long> evenValues\
    \ = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) % 2 == 0) {\n                evenValues.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(evenValues);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0nobli_s.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            res.add(smallestEven);\n            res.add(smallestIndex);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpencd4dq6.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ngxi_wv.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(arr.get(i) < smallestEven) {\n                 \
    \   smallestEven = arr.get(i);\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.add(smallestEven);\n \
    \       result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihbz6ajy.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smalest_value = 0;\n        int smalest_index = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if(value % 2 == 0) {\n                if(value < smalest_value) {\n   \
    \                 smalest_value = value;\n                    smalest_index =\
    \ i;\n                }\n            }\n        }\n        if(smalest_index !=\
    \ 0) {\n            res.add(smalest_value);\n            res.add(smalest_index);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbfbwzfn9.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smalest_index);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n    \
    \        return result;\n        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n\
    \        for (int i = 0; i < size; i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                evenValues.add(value);\n \
    \           }\n        }\n        Collections.sort(evenValues);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw681zuu1.java:52: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgxqackbw.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgqsi38rk.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = arr.get(0);\n        int smallestIndex = 0;\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n         \
    \           smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppolitz6v.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        long smallestIndex\
    \ = -1;\n        long smallestValue = 0;\n        for(long value : arr) {\n  \
    \          if(value % 2 == 0) {\n                if(smallestEvenValue < value)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = arr.indexOf(value);\n                }\n                if(smallestEvenValue\
    \ == value) {\n                    if(smallestIndex == -1) {\n               \
    \         smallestIndex = arr.indexOf(value);\n                    } else {\n\
    \                        if(smallestIndex < arr.indexOf(value)) {\n          \
    \                  smallestIndex = arr.indexOf(value);\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \      if(smallestEvenValue == 0) {\n            return result;\n        }\n \
    \       for(long i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == smallestEvenValue)\
    \ {\n                result.add(smallestEvenValue);\n                result.add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1vzklhz.java:52: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) == smallestEvenValue) {\n      \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallest_even_value = Long.MAX_VALUE;\n        int smallest_even_index\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if (value % 2 == 0) {\n                if (smallest_even_value\
    \ < value) {\n                    smallest_even_value = value;\n             \
    \       smallest_even_index = i;\n                }\n            }\n        }\n\
    \        if (smallest_even_value == Long.MAX_VALUE) {\n            return res;\n\
    \        }\n        long smallest_even_value_2 = smallest_even_value / 2;\n  \
    \      for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (smallest_even_value ==\
    \ value) {\n                    res.add(smallest_even_value_2);\n            \
    \        res.add(i);\n                }\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1ity002.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n                    res.add(i);\n                            ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        int smallest_even_count = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if(value % 2 == 0) {\n                smallest_even_count++;\n        \
    \        if(smallest_even_count == 1) {\n                    smallest_even_value\
    \ = value;\n                }\n                if(smallest_even_count > 1) {\n\
    \                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if(smallest_even_count\
    \ == 0) {\n            return result;\n        }\n        else if(smallest_even_count\
    \ == 1) {\n            smallest_value = smallest_even_value;\n            smallest_index\
    \ = smallest_index;\n        }\n        else if(smallest_even_count > 1) {\n \
    \           smallest_value = smallest_value;\n            smallest_index = smallest_index;\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if(value % 2 == 0) {\n                result.add(smallest_value);\n\
    \                result.add(smallest_index);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9kch6koq.java:60: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallest_index);\n                     \
    \      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven == Long.MAX_VALUE) {\n         \
    \           smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                } else if (arr.get(i) < smallestEven) {\n                   \
    \ smallestEven = arr.get(i);\n                    smallestIndex = i;\n       \
    \         }\n            }\n        }\n        res.add(smallestEven);\n      \
    \  res.add(smallestIndex);\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2gtvxptd.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallestEven) {\n\
    \                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEven !=\
    \ Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcizdkfp.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_57rw41.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_57rw41.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        if (smallestEven != Long.MAX_VALUE)\
    \ {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpozw68c61.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(smallestEven > arr.get(i)) {\n                 \
    \   smallestEven = arr.get(i);\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.add(smallestEven);\n \
    \       result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppruzd7yw.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallestEven) {\n\
    \                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEven !=\
    \ Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcizdkfp.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int index = 0;\n        for(Long val : arr) {\n            if(val % 2\
    \ == 0) {\n                if(smallestEven > val) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = index;\n                }\n    \
    \            index++;\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9rkmfyyw.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallestEven) {\n\
    \                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg03qjxsv.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        long smallestIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = i;\n                }\n            }\n        }\n      \
    \  if (smallestEvenValue == Long.MIN_VALUE) {\n            return res;\n     \
    \   }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if (value % 2 == 0) {\n                evenValues.add(value);\n       \
    \     }\n        }\n        evenValues.sort((a, b) -> a - b);\n        smallestEvenValue\
    \ = evenValues.get(0);\n        smallestIndex = evenValues.get(0);\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n \
    \           if (value % 2 == 0) {\n                if (smallestEvenValue < value)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        res.add(smallestEvenValue);\n\
    \        res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoaj3q31k.java:49: error: incompatible types: bad return type in\
    \ lambda expression\n        evenValues.sort((a, b) -> a - b);\n             \
    \                       ^\n    possible lossy conversion from long to int\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_even = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (smallest_even > value)\
    \ {\n                    smallest_even = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_even\
    \ != Long.MAX_VALUE) {\n            result.add(smallest_even);\n            result.add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzids0fwe.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(smallestEvenValue < value)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ != 0) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq2sxa8zt.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        int count = 0;\n        for (long val : arr) {\n            if (val %\
    \ 2 == 0) {\n                if (smallestEven > val) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = count;\n                }\n    \
    \            count++;\n            }\n        }\n        if (smallestEven != Long.MAX_VALUE)\
    \ {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr7jcl2w.java:48)\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgxqackbw.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2v0b6dna.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (arr.get(i) < smallest_value) {\n            \
    \        smallest_value = arr.get(i);\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        result.add(smallest_value);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpci4ub9qt.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        long smallestIndex\
    \ = 0;\n        long smallestValue = Long.MAX_VALUE;\n        int index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                    smallestValue = value;\n                }\n      \
    \      } else if (value < smallestValue) {\n                smallestEvenValue\
    \ = value;\n                smallestIndex = i;\n                smallestValue\
    \ = value;\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ffc4omx.java:52)\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        long largestValue = 0;\n        long largestIndex\
    \ = 0;\n        long largestEvenValue = 0;\n        long largestEvenIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if((value & 1) == 0) {\n                smallestEvenValue = value;\n\
    \                smallestIndex = i;\n            }\n            else if(value\
    \ >= largestEvenValue) {\n                largestEvenValue = value;\n        \
    \        largestEvenIndex = i;\n            }\n            else if(value >= smallestEvenValue)\
    \ {\n                smallestEvenValue = value;\n                smallestEvenIndex\
    \ = i;\n            }\n            else if(value < smallestEvenValue) {\n    \
    \            smallestEvenValue = value;\n                smallestEvenIndex = i;\n\
    \            }\n            else if(value < largestValue) {\n                largestValue\
    \ = value;\n                largestIndex = i;\n            }\n            else\
    \ if(value > largestValue) {\n                largestValue = value;\n        \
    \        largestIndex = i;\n            }\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        else if(smallestEvenIndex\
    \ == arr.size() - 1) {\n            result.add(smallestEvenValue);\n         \
    \   return result;\n        }\n        else {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n            return result;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfama7eql.java:47: error: cannot find symbol\n                smallestEvenIndex\
    \ = i;\n                ^\n  symbol:   variable smallestEvenIndex\n  location:\
    \ class Problem\n/tmp/tmpfama7eql.java:51: error: cannot find symbol\n       \
    \         smallestEvenIndex = i;\n                ^\n  symbol:   variable smallestEvenIndex\n\
    \  location: class Problem\n/tmp/tmpfama7eql.java:65: error: cannot find symbol\n\
    \        else if(smallestEvenIndex == arr.size() - 1) {\n                ^\n \
    \ symbol:   variable smallestEvenIndex\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        long smallestIndex = Long.MIN_VALUE;\n\
    \        long smallestIndexOfSmallestEven = Long.MIN_VALUE;\n        long smallestIndexOfSmallestEvenIndex\
    \ = Long.MIN_VALUE;\n        long smallestIndexOfSmallestEvenValue = 0;\n    \
    \    long smallestIndexOfSmallestEvenValueIndex = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndex\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndex\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndex\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt77dh91b.java:42: error: variable smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ is already defined in method pluck(ArrayList<Long>)\n        long smallestIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValueIndexOfSmallestEvenValue\
    \ = 0;\n             ^\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        long smallestIndex2 = 0;\n        long smallestValue2\
    \ = 0;\n        long smallestIndex3 = 0;\n        long smallestValue3 = 0;\n \
    \       long smallestIndex4 = 0;\n        long smallestValue4 = 0;\n        long\
    \ smallestIndex5 = 0;\n        long smallestValue5 = 0;\n        long smallestIndex6\
    \ = 0;\n        long smallestValue6 = 0;\n        long smallestIndex7 = 0;\n \
    \       long smallestValue7 = 0;\n        long smallestIndex8 = 0;\n        long\
    \ smallestValue8 = 0;\n        long smallestIndex9 = 0;\n        long smallestValue9\
    \ = 0;\n        long smallestIndex10 = 0;\n        long smallestValue10 = 0;\n\
    \        long smallestIndex11 = 0;\n        long smallestValue11 = 0;\n      \
    \  long smallestIndex12 = 0;\n        long smallestValue12 = 0;\n        long\
    \ smallestIndex13 = 0;\n        long smallestValue13 = 0;\n        long smallestIndex14\
    \ = 0;\n        long smallestValue14 = 0;\n        long smallestIndex15 = 0;\n\
    \        long smallestValue15 = 0;\n        long smallestIndex16 = 0;\n      \
    \  long smallestValue16 = 0;\n        long smallestIndex17 = 0;\n        long\
    \ smallestValue17 = 0;\n        long smallestIndex18 = 0;\n        long smallestValue18\
    \ = 0;\n        long smallestIndex19 = 0;\n        long smallestValue19 = 0;\n\
    \        long smallestIndex20 = 0;\n        long smallestValue20 = 0;\n      \
    \  long smallestIndex21 = 0;\n        long smallestValue21 = 0;\n        long\
    \ smallestIndex22 = 0;\n        long smallestValue22 = 0;\n        long smallestIndex23\
    \ = 0;\n        long smallestValue23 = 0;\n        long smallestIndex24 = 0;\n\
    \        long smallestValue24 = 0;\n        long smallestIndex25 = 0;\n      \
    \  long smallestValue25 = 0;\n        long smallestIndex26 = 0;\n        long\
    \ smallestValue26 = 0;\n        long smallestIndex27 = 0;\n        long smallestValue27\
    \ = 0;\n        long smallestIndex28 = 0;\n        long smallestValue28 = 0;\n\
    \        long smallestIndex29 = 0;\n        long smallestValue29 = 0;\n      \
    \  long smallestIndex30 = 0;\n        long smallestValue30 = 0;\n        long\
    \ smallestIndex31 = 0;\n        long smallestValue31 = 0;\n        long smallestIndex32\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsmoenix.java:93: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n     \
    \       long value = arr.get(i);\n            if(value % 2 == 0) {\n         \
    \       if(value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if(smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohjg8c4y.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ long smallestValue = 0;\n        boolean isSmallestEvenValueFound = false;\n\
    \        boolean isSmallestIndexFound = false;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value % 2 == 0)\
    \ {\n                isSmallestEvenValueFound = true;\n                smallestEvenValue\
    \ = value;\n                smallestIndex = i;\n                smallestValue\
    \ = value;\n            }\n            else if(value < smallestEvenValue) {\n\
    \                isSmallestEvenValueFound = false;\n                smallestEvenValue\
    \ = value;\n                smallestIndex = i;\n                smallestValue\
    \ = value;\n            }\n            else if(value == smallestEvenValue) {\n\
    \                isSmallestEvenValueFound = true;\n                smallestIndex\
    \ = i;\n                smallestValue = value;\n            }\n        }\n   \
    \     if(isSmallestEvenValueFound) {\n            smallestValue = smallestEvenValue;\n\
    \        }\n        else if(smallestIndex == arr.size() - 1) {\n            smallestValue\
    \ = arr.get(smallestIndex);\n        }\n        else {\n            smallestValue\
    \ = arr.get(smallestIndex);\n            smallestIndex = smallestIndex + 1;\n\
    \        }\n        result.add(smallestValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmg61yegs.java:64: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        long index = 0;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp318hbabg.java:84: error: ';' expected\n        boolean foundSmallestValue\n\
    \                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_index\
    \ != 0) {\n            result.add(smallest_value);\n            result.add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps53e4q07.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ int size = arr.size();\n        for(int i = 0; i < size; i++) {\n          \
    \  long value = arr.get(i);\n            if(value % 2 == 0) {\n              \
    \  smallestEvenValue = value;\n                smallestIndex = i;\n          \
    \  }\n        }\n        if(smallestEvenValue == 0) {\n            return result;\n\
    \        }\n        for(int i = 0; i < size; i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu16k0n0a.java:51: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallest_value < arr.get(i)) {\n            \
    \        smallest_value = arr.get(i);\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (smallest_index != -1)\
    \ {\n            result.add(smallest_value);\n            result.add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jq3bxtf.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n  \
    \          long value = arr.get(i);\n            if (value % 2 == 0) {\n     \
    \           if (value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if (smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0u56qefe.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgxqackbw.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        long smallestValue = arr[smallestIndex];\n        long smallestEvenValueIndex\
    \ = arr[smallestIndex];\n        for (int i = smallestIndex + 1; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0)\
    \ {\n                if (value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestEvenValueIndex = i;\n                }\n\
    \            }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestEvenValueIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvwt56kfx.java:42: error: array required, but ArrayList<Long> found\n\
    \        long smallestValue = arr[smallestIndex];\n                          \
    \      ^\n/tmp/tmpvwt56kfx.java:43: error: array required, but ArrayList<Long>\
    \ found\n        long smallestEvenValueIndex = arr[smallestIndex];\n         \
    \                                ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        long smallestIndex\
    \ = 0;\n        int i = 0;\n        while (i < arr.size()) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0) {\n                if (value\
    \ < smallestEvenValue) {\n                    smallestEvenValue = value;\n   \
    \                 smallestIndex = i;\n                }\n            } else if\
    \ (value < smallestEvenValue) {\n                smallestEvenValue = value;\n\
    \                smallestIndex = i;\n            }\n            i++;\n       \
    \ }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        evenValues.add(smallestEvenValue);\n\
    \        evenValues.addAll(arr.subList(smallestIndex + 1, arr.size()));\n    \
    \    evenValues.sort((a, b) -> a - b);\n        smallestEvenValue = evenValues.get(0);\n\
    \        smallestIndex = evenValues.get(1);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpld14tlff.java:49: error: incompatible types: possible lossy conversion\
    \ from long to int\n        evenValues.addAll(arr.subList(smallestIndex + 1, arr.size()));\n\
    \                                                    ^\n/tmp/tmpld14tlff.java:50:\
    \ error: incompatible types: bad return type in lambda expression\n        evenValues.sort((a,\
    \ b) -> a - b);\n                                    ^\n    possible lossy conversion\
    \ from long to int\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = i;\n                }\n            }\n        }\n      \
    \  if (smallestEvenValue == Long.MIN_VALUE) {\n            return result;\n  \
    \      }\n        ArrayList<Long> evens = new ArrayList<>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if (value % 2 == 0) {\n                evens.add(value);\n            }\n\
    \        }\n        Collections.sort(evens);\n        smallestEvenValue = evens.get(0);\n\
    \        smallestIndex = evens.get(0);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8_d7f6k.java:51: error: incompatible types: Long cannot be converted\
    \ to int\n        smallestIndex = evens.get(0);\n                            \
    \     ^\n/tmp/tmps8_d7f6k.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n    \
    \        return result;\n        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n\
    \        for (int i = 0; i < size; i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                evenValues.add(value);\n \
    \           }\n        }\n        Collections.sort(evenValues);\n        smallestEvenValue\
    \ = evenValues.get(0);\n        smallestIndex = evenValues.get(0);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqktwun79.java:52: error: incompatible types: Long cannot be converted\
    \ to int\n        smallestIndex = evenValues.get(0);\n                       \
    \               ^\n/tmp/tmpqktwun79.java:54: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long currentSmallestEvenValue = 0;\n        long currentSmallestIndex = 0;\n\
    \        long currentSmallestValue = 0;\n        long currentSmallestIndex2 =\
    \ 0;\n        long currentSmallestValue2 = 0;\n        long currentSmallestIndex3\
    \ = 0;\n        long currentSmallestValue3 = 0;\n        long currentSmallestIndex4\
    \ = 0;\n        long currentSmallestValue4 = 0;\n        long currentSmallestIndex5\
    \ = 0;\n        long currentSmallestValue5 = 0;\n        long currentSmallestIndex6\
    \ = 0;\n        long currentSmallestValue6 = 0;\n        long currentSmallestIndex7\
    \ = 0;\n        long currentSmallestValue7 = 0;\n        long currentSmallestIndex8\
    \ = 0;\n        long currentSmallestValue8 = 0;\n        long currentSmallestIndex9\
    \ = 0;\n        long currentSmallestValue9 = 0;\n        long currentSmallestIndex10\
    \ = 0;\n        long currentSmallestValue10 = 0;\n        long currentSmallestIndex11\
    \ = 0;\n        long currentSmallestValue11 = 0;\n        long currentSmallestIndex12\
    \ = 0;\n        long currentSmallestValue12 = 0;\n        long currentSmallestIndex13\
    \ = 0;\n        long currentSmallestValue13 = 0;\n        long currentSmallestIndex14\
    \ = 0;\n        long currentSmallestValue14 = 0;\n        long currentSmallestIndex15\
    \ = 0;\n        long currentSmallestValue15 = 0;\n        long currentSmallestIndex16\
    \ = 0;\n        long currentSmallestValue16 = 0;\n        long currentSmallestIndex17\
    \ = 0;\n        long currentSmallestValue17 = 0;\n        long currentSmallestIndex18\
    \ = 0;\n        long currentSmallestValue18 = 0;\n        long currentSmallestIndex19\
    \ = 0;\n        long currentSmallestValue19 = 0;\n        long currentSmallestIndex20\
    \ = 0;\n        long currentSmallestValue20 = 0;\n        long currentSmallestIndex21\
    \ = 0;\n        long currentSmallestValue21 = 0;\n        long currentSmallestIndex22\
    \ = 0;\n        long currentSmallestValue22 = 0;\n        long currentSmallestIndex23\
    \ = 0;\n        long currentSmallestValue23 = 0;\n        long currentSmallestIndex24\
    \ = 0;\n        long currentSmallestValue24 = 0;\n        long currentSmallestIndex25\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjn1scyo_.java:79: error: ';' expected\n        long currentSmallestIndex25\n\
    \                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (smallestEven > value)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_57rw41.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ long smallestValue = 0;\n        long temp = 0;\n        long temp2 = 0;\n \
    \       long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n  \
    \      long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n   \
    \     long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n  \
    \      long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n\
    \        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n\
    \        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy2soxpab.java:113: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int index = 0;\n        for (Long val : arr) {\n            if (val %\
    \ 2 == 0) {\n                if (smallestEven > val) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = index;\n                }\n    \
    \            index++;\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4wdemllt.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        long largestValue = 0;\n        long largestIndex\
    \ = 0;\n        boolean isEven = false;\n        boolean isSmallestEven = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isLargestEven = false;\n\
    \        boolean isLargestIndex = false;\n        boolean isLargestValue = false;\n\
    \        boolean isSmallestValue = false;\n        boolean isLargestIndex = false;\n\
    \        boolean isLargestValue = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestValue = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestIndex = false;\n\
    \        boolean \n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy48z242_.java:85: error: not a statement\n        boolean \n  \
    \      ^\n/tmp/tmpy48z242_.java:85: error: ';' expected\n        boolean \n  \
    \             ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ long smallestValue = 0;\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         long value = arr.get(i);\n            if(value % 2 == 0) {\n       \
    \         if(smallestEvenValue == 0) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                    smallestValue\
    \ = value;\n                }\n                else if(smallestEvenValue == value)\
    \ {\n                    smallestIndex = i;\n                    smallestValue\
    \ = value;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ != 0) {\n            smallestValue = smallestEvenValue;\n        }\n       \
    \ result.add(smallestValue);\n        result.add(smallestIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4emj_7n.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ int size = arr.size();\n        for (int i = 0; i < size; i++) {\n         \
    \   if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue < arr.get(i))\
    \ {\n                    smallestEvenValue = arr.get(i);\n                   \
    \ smallestIndex = i;\n                }\n            }\n        }\n        if\
    \ (smallestEvenValue == 0) {\n            return result;\n        }\n        ArrayList<Long>\
    \ evenValues = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                evenValues.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(evenValues);\n        if (evenValues.size()\
    \ == 1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \            return result;\n        }\n        ArrayList<Long> evenValues2 =\
    \ new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            if\
    \ (arr.get(i) % 2 == 0) {\n                evenValues2.add(arr.get(i));\n    \
    \        }\n        }\n        Collections.sort(evenValues2);\n        if (evenValues2.size()\
    \ == 1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \            return result;\n        }\n        ArrayList<Long> evenValues3 =\
    \ new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            if\
    \ (arr.get(i) % 2 == 0) {\n                evenValues3.add(arr.get(i));\n    \
    \        }\n        }\n        Collections.sort(evenValues3);\n        if (evenValues3.size()\
    \ == 1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \            return result;\n        }\n        ArrayList<Long> evenValues4 =\
    \ new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            if\
    \ (arr.get(i) % 2 == 0) {\n                evenValues4.add(arr.get(i));\n    \
    \        }\n        }\n        Collections.sort(evenValues4);\n        if (evenValues4.size()\
    \ == 1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \            return result;\n        }\n        ArrayList<Long> evenValues5 =\
    \ new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            if\
    \ (arr.get(i) % 2 == 0) {\n                evenValues5.add(arr.get(i));\n    \
    \        }\n        }\n        Collections.sort(evenValues5);\n        if (evenValues5.size()\
    \ == 1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \            return result;\n        }\n        ArrayList<Long> evenValues6 =\
    \ new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            if\
    \ (arr.get(i) % 2 == 0) {\n                evenValues6.add(arr.get(i));\n    \
    \        }\n        }\n        Collections.sort(evenValues6);\n        if (evenValues6.size()\
    \ == 1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjec_35t.java:114: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(smallestEvenValue < value)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        ArrayList<Long> evenValues\
    \ = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n      \
    \      long value = arr.get(i);\n            if(value % 2 == 0) {\n          \
    \      evenValues.add(value);\n            }\n        }\n        Collections.sort(evenValues);\n\
    \        for(int i = 0; i < evenValues.size(); i++) {\n            if(evenValues.get(i)\
    \ == smallestEvenValue) {\n                result.add(smallestEvenValue);\n  \
    \              result.add(smallestIndex);\n                break;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2f7t6gj5.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallestIndex);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(smallestEvenValue < value)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value % 2 == 0)\
    \ {\n                if(smallestEvenValue == value) {\n                    result.add(smallestEvenValue);\n\
    \                    result.add(smallestIndex);\n                }\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoumnw80c.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n                    result.add(smallestIndex);\n                  \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        long smallestEvenValueIndex\
    \ = smallestIndex;\n        for(int i = 0; i < arr.size(); i++) {\n          \
    \  long value = arr.get(i);\n            if(value % 2 == 0) {\n              \
    \  if(value < smallestEvenValue) {\n                    smallestEvenValue = value;\n\
    \                    smallestEvenValueIndex = i;\n                }\n        \
    \    }\n        }\n        result.add(smallestEvenValue, smallestEvenValueIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4m77debn.java:52: error: incompatible types: possible lossy conversion\
    \ from long to int\n        result.add(smallestEvenValue, smallestEvenValueIndex);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(smallestEven > arr.get(i)) {\n                 \
    \   smallestEven = arr.get(i);\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.add(smallestEven);\n \
    \       result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppruzd7yw.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest_value);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hqk4run.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_even_value = arr.get(0);\n        int smallest_even_index\
    \ = -1;\n        int smallest_even_index_in_arr = -1;\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n           \
    \     if (smallest_even_value < arr.get(i)) {\n                    smallest_even_value\
    \ = arr.get(i);\n                    smallest_even_index = i;\n              \
    \      smallest_even_index_in_arr = i;\n                }\n            }\n   \
    \     }\n        if (smallest_even_index == -1) {\n            return result;\n\
    \        }\n        ArrayList<Long> smallest_even_value_and_index = new ArrayList<>();\n\
    \        smallest_even_value_and_index.add(smallest_even_value);\n        smallest_even_value_and_index.add(smallest_even_index);\n\
    \        smallest_even_value_and_index.add(smallest_even_index_in_arr);\n    \
    \    result.add(smallest_even_value_and_index);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplo7oiwbo.java:45: error: incompatible types: int cannot be converted\
    \ to Long\n        smallest_even_value_and_index.add(smallest_even_index);\n \
    \                                         ^\n/tmp/tmplo7oiwbo.java:46: error:\
    \ incompatible types: int cannot be converted to Long\n        smallest_even_value_and_index.add(smallest_even_index_in_arr);\n\
    \                                          ^\n/tmp/tmplo7oiwbo.java:47: error:\
    \ incompatible types: ArrayList<Long> cannot be converted to Long\n        result.add(smallest_even_value_and_index);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n\
    \                if (smallest_value < arr.get(i)) {\n                    smallest_value\
    \ = arr.get(i);\n                    smallest_index = i;\n                }\n\
    \            }\n        }\n        result.add(smallest_value);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplep9omdr.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        int index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            int evenValue = value % 2 ==\
    \ 0 ? value : value + 1;\n            if(evenValue < smallestEvenValue) {\n  \
    \              smallestEvenValue = evenValue;\n                smallestIndex =\
    \ i;\n            }\n            if(evenValue == smallestEvenValue) {\n      \
    \          result.add(smallestEvenValue);\n                result.add(smallestIndex);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66cxh6p3.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int evenValue = value % 2 == 0 ? value : value\
    \ + 1;\n                                           ^\n/tmp/tmp66cxh6p3.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \ result.add(smallestIndex);\n                           ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smalest_value = 0;\n        int smalest_index = 0;\n        long\
    \ smalest_value_even = 0;\n        int smalest_index_even = 0;\n        long smalest_value_odd\
    \ = 0;\n        int smalest_index_odd = 0;\n        long smalest_value_even_index\
    \ = 0;\n        int smalest_index_even_index = 0;\n        long smalest_value_odd_index\
    \ = 0;\n        int smalest_index_odd_index = 0;\n        long smalest_value_even_index_index\
    \ = 0;\n        int smalest_index_even_index_index = 0;\n        long smalest_value_odd_index_index\
    \ = 0;\n        int smalest_index_odd_index_index = 0;\n        long smalest_value_even_index_index_index\
    \ = 0;\n        int smalest_index_even_index_index_index = 0;\n        long smalest_value_odd_index_index_index\
    \ = 0;\n        int smalest_index_odd_index_index_index = 0;\n        long smalest_value_even_index_index_index_index\
    \ = 0;\n        int smalest_index_even_index_index_index_index = 0;\n        long\
    \ smalest_value_odd_index_index_index_index = 0;\n        int smalest_index_odd_index_index_index_index\
    \ = 0;\n        long smalest_value_even_index_index_index_index_index = 0;\n \
    \       int smalest_index_even_index_index_index_index = 0;\n        long smalest_value_odd_index_index_index_index\
    \ = 0;\n        int smalest_index_odd_index_index_index_index = 0;\n        long\
    \ smalest_value_even_index_index_index_index_index = 0;\n        int smalest_index_even_index_index_index_index_index\
    \ = 0;\n        long smalest_value_odd_index_index_index_index_index = 0;\n  \
    \      int smalest_index_odd_index_index_index_index_index = 0;\n        long\
    \ smalest_value_even_index_index_index_index_index_index = 0;\n        int smalest_index_even_index_index_index_index_index_index\
    \ = 0;\n        long smalest_value_odd_index_index_index_index_index_index = 0;\n\
    \        int smalest_index_odd_index_index_index_index_index_index = 0;\n    \
    \    long smalest_value_even_index_index_index_index_index_index = 0;\n      \
    \  int smalest_index_even_index_index_index_index_index_index = 0;\n        long\
    \ smalest_value_odd_index_index_index_index_index_index_index = 0;\n        int\
    \ smalest_index_odd_index_index_index_index_index_index_index = 0;\n        long\
    \ smalest_value_even_index_index_index_index_index_index_index = 0;\n        int\
    \ smalest_index_even_index_index_index_index_index_index_index = 0;\n        long\
    \ smalest_value_odd_\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx07l32o8.java:68: error: ';' expected\n        long smalest_value_odd_\n\
    \                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy9nok5ql.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallestEven) {\n\
    \                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEven !=\
    \ Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcizdkfp.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = i;\n                }\n            }\n        }\n      \
    \  if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n  \
    \      }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n\
    \                evenValues.add(arr.get(i));\n            }\n        }\n     \
    \   Collections.sort(evenValues);\n        smallestEvenValue = evenValues.get(0);\n\
    \        smallestIndex = evenValues.get(0);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq6kdujq3.java:50: error: incompatible types: Long cannot be converted\
    \ to int\n        smallestIndex = evenValues.get(0);\n                       \
    \               ^\n/tmp/tmpq6kdujq3.java:52: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (smallestEven > value)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjhzod42.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_index\
    \ == -1) {\n            return result;\n        }\n        smallest_value = arr[smallest_index];\n\
    \        result.add(smallest_value);\n        result.add(smallest_index);\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln9juhx2.java:42: error: array required, but ArrayList<Long> found\n\
    \        smallest_value = arr[smallest_index];\n                            ^\n\
    /tmp/tmpln9juhx2.java:44: error: incompatible types: int cannot be converted to\
    \ Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(smallestEvenValue < value)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value % 2 == 0)\
    \ {\n                if(smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpelxkrzis.java:52: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        res.add(smallestEven);\n \
    \       res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppfql0m62.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        int i = 0;\n        while (i < arr.size()) {\n            long value\
    \ = arr.get(i);\n            if (value % 2 == 0) {\n                if (value\
    \ < smallestEvenValue) {\n                    smallestEvenValue = value;\n   \
    \                 smallestIndex = i;\n                }\n            }\n     \
    \       i++;\n        }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n\
    \            return result;\n        }\n        long smallestEvenValueIndex =\
    \ smallestIndex + 1;\n        result.add(smallestEvenValue);\n        result.add(smallestEvenValueIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6s55f5pz.java:50)\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ % 2 == 0) {\n                if(smallestEvenValue > arr.get(i)) {\n        \
    \            smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ff28bbz.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smalest_value = Long.MIN_VALUE;\n        int smalest_index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smalest_value < arr.get(i)) {\n             \
    \       smalest_value = arr.get(i);\n                    smalest_index = i;\n\
    \                }\n            }\n        }\n        if (smalest_value == Long.MIN_VALUE)\
    \ {\n            return res;\n        }\n        res.add(smalest_value);\n   \
    \     res.add(smalest_index);\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5thfi1aw.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smalest_index);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        int smallestIndex = 0;\n\
    \        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n    \
    \        if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ == Long.MIN_VALUE) {\n            return result;\n        }\n        smallestEven\
    \ = smallestEven % 2;\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnsrsjx1q.java:44: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long currentIndex = 0;\n        for(long i : arr) {\n            if(i%2 ==\
    \ 0) {\n                smallestEvenValue = i;\n                smallestIndex\
    \ = currentIndex;\n            }\n            currentIndex++;\n        }\n   \
    \     if(smallestEvenValue == 0) {\n            return result;\n        }\n  \
    \      for(long i : arr) {\n            if(i%2 == 0) {\n                if(i ==\
    \ smallestEvenValue) {\n                    result.add(smallestEvenValue);\n \
    \                   result.add(smallestIndex);\n                }\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr2v0ina8.java:55)\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ngxi_wv.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n    \
    \        return result;\n        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n\
    \        for (int i = 0; i < size; i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                evenValues.add(value);\n \
    \           }\n        }\n        Collections.sort(evenValues);\n        if (evenValues.size()\
    \ == 1) {\n            smallestEvenValue = evenValues.get(0);\n            smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwytk81ka.java:56: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2\
    \ == 0) {\n                if(smallestEven > arr.get(i)) {\n                 \
    \   smallestEven = arr.get(i);\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.add(smallestEven);\n \
    \       result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppruzd7yw.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0) {\n                if (val < smallestEven) {\n\
    \                    smallestEven = val;\n                    smallestIndex =\
    \ i;\n                }\n            }\n        }\n        if (smallestEven !=\
    \ Long.MAX_VALUE) {\n            res.add(smallestEven);\n            res.add(smallestIndex);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkm3hkl_6.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        ArrayList<Long>\
    \ evenValues = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if(value % 2 == 0) {\n\
    \                evenValues.add(value);\n            }\n        }\n        Collections.sort(evenValues);\n\
    \        for(int i = 0; i < evenValues.size(); i++) {\n            if(evenValues.get(i)\
    \ == smallestEvenValue) {\n                result.add(smallestEvenValue);\n  \
    \              result.add(smallestIndex);\n                break;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdps1abyd.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallestIndex);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        int smallestIndex = 0;\n\
    \        int size = arr.size();\n        for(int i = 0; i < size; i++) {\n   \
    \         long value = arr.get(i);\n            if(value % 2 == 0) {\n       \
    \         if(smallestEven > value) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if(smallestEven != Long.MIN_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnjov_4we.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        int smallestIndex = 0;\n\
    \        boolean foundSmallestEven = false;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(!foundSmallestEven)\
    \ {\n                if(value % 2 == 0) {\n                    smallestEven =\
    \ value;\n                    foundSmallestEven = true;\n                }\n \
    \           }\n            else if(value < smallestEven) {\n                smallestEven\
    \ = value;\n                smallestIndex = i;\n            }\n        }\n   \
    \     if(smallestEven == Long.MIN_VALUE) {\n            return result;\n     \
    \   }\n        else if(smallestIndex == 0) {\n            result.add(smallestEven);\n\
    \            return result;\n        }\n        else {\n            ArrayList<Long>\
    \ temp = new ArrayList<>();\n            for(int i = 0; i < arr.size(); i++) {\n\
    \                if(i != smallestIndex) {\n                    temp.add(arr.get(i));\n\
    \                }\n            }\n            result.add(smallestEven);\n   \
    \         result.add(smallestIndex);\n            return temp;\n        }\n  \
    \  }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpic_rni33.java:59: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        int smallestIndex = 0;\n\
    \        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n  \
    \          if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        res.add(smallestEven);\n\
    \        res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi0_bxznj.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        long index = 0;\n        for(long i : arr)\
    \ {\n            if(i%2 == 0) {\n                smallestEvenValue = i;\n    \
    \            smallestIndex = i;\n                smallestValue = i;\n        \
    \        index = i;\n            }\n            if(i == smallestEvenValue) {\n\
    \                smallestValue = i;\n                smallestIndex = i;\n    \
    \            index = i;\n            }\n        }\n        result.add(smallestValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcu6aevfw.java:50)\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(long value : arr) {\n            if(value % 2 == 0) {\n    \
    \            if(smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.indexOf(value);\n        \
    \        }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkrpfgo20.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEvenValue = arr.get(0);\n        int smallestIndex = 0;\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEvenValue < arr.get(i)) {\n         \
    \           smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        res.add(smallestEvenValue);\n\
    \        res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptequ2pwi.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976329
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven == Long.MAX_VALUE) {\n         \
    \           smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                } else if (arr.get(i) < smallestEven) {\n                   \
    \ smallestEven = arr.get(i);\n                    smallestIndex = i;\n       \
    \         }\n            }\n        }\n        result.add(smallestEven);\n   \
    \     result.add(smallestIndex);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2er3hcg6.java:48)\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue < arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjt3w5lv8.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest_value);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hqk4run.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallestEven) {\n\
    \                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEven !=\
    \ Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcizdkfp.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        int count = 0;\n        for (Long val : arr) {\n            if (val %\
    \ 2 == 0) {\n                if (smallestEven == Long.MAX_VALUE) {\n         \
    \           smallestEven = val;\n                    smallestIndex = count;\n\
    \                } else if (val < smallestEven) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = count;\n                }\n    \
    \            count++;\n            }\n        }\n        if (smallestEven == Long.MAX_VALUE)\
    \ {\n            return result;\n        }\n        ArrayList<Long> evens = new\
    \ ArrayList<>();\n        evens.add(smallestEven);\n        evens.add(smallestIndex);\n\
    \        evens.addAll(arr.subList(1, arr.size()));\n        Collections.sort(evens);\n\
    \        result.add(evens.get(0));\n        result.add(evens.get(1));\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02jfhv4b.java:56)\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        int index = 0;\n        for (Long val : arr) {\n            if (val %\
    \ 2 == 0) {\n                if (smallestEven > val) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = index;\n                }\n    \
    \            index++;\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4wdemllt.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                if (smallestEvenValue < arr.get(i)) {\n                 \
    \   smallestEvenValue = arr.get(i);\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (smallestEvenValue ==\
    \ 0) {\n            return result;\n        }\n        ArrayList<Long> evenValues\
    \ = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) % 2 == 0) {\n                evenValues.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(evenValues);\n        smallestEvenValue\
    \ = evenValues.get(0);\n        smallestIndex = evenValues.get(0);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0yyw6sr.java:49: error: incompatible types: Long cannot be converted\
    \ to int\n        smallestIndex = evenValues.get(0);\n                       \
    \               ^\n/tmp/tmpj0yyw6sr.java:51: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (arr.get(i) < smallest_value) {\n            \
    \        smallest_value = arr.get(i);\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        result.add(smallest_value);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpce50u6eo.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallestEven) {\n\
    \                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEven !=\
    \ Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcizdkfp.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ long smallestValue = 0;\n        boolean isSmallestEvenValue = false;\n    \
    \    boolean isSmallestIndex = false;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0)\
    \ {\n                smallestEvenValue = value;\n                smallestIndex\
    \ = i;\n                isSmallestEvenValue = true;\n            }\n         \
    \   if (value == smallestEvenValue) {\n                smallestValue = value;\n\
    \                isSmallestEvenValue = true;\n                isSmallestIndex\
    \ = true;\n            }\n        }\n        if (isSmallestEvenValue) {\n    \
    \        if (smallestIndex == arr.size() - 1) {\n                result.add(smallestValue);\n\
    \            } else {\n                result.add(smallestValue, smallestIndex);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp30d9ks4n.java:50: error: incompatible types: possible lossy conversion\
    \ from long to int\n                result.add(smallestValue, smallestIndex);\n\
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if((value & 1) == 0) {\n                if(smallestEven == Long.MAX_VALUE)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                } else if(value < smallestEven) {\n                  \
    \  smallestEven = value;\n                    smallestIndex = i;\n           \
    \     }\n            }\n        }\n        result.add(smallestEven);\n       \
    \ result.add(smallestIndex);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkfroggvs.java:43: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if((value & 1) == 0) {\n                if(value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if(smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if((value & 1) == 0) {\n                evenValues.add(value);\n      \
    \      }\n        }\n        Collections.sort(evenValues);\n        for(int i\
    \ = 0; i < evenValues.size(); i++) {\n            if(evenValues.get(i) == smallestEvenValue)\
    \ {\n                result.add(smallestEvenValue);\n                result.add(smallestIndex);\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2s5bbaiq.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallestIndex);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        if (smallestEven != Long.MAX_VALUE)\
    \ {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpozw68c61.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallestEven) {\n\
    \                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEven !=\
    \ Long.MAX_VALUE) {\n            res.add(smallestEven);\n            res.add(smallestIndex);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqn56u0f.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        evenValues.add(smallestEvenValue);\n\
    \        evenValues.addAll(arr.subList(smallestIndex + 1, arr.size()));\n    \
    \    evenValues.sort((a, b) -> a - b);\n        smallestEvenValue = evenValues.get(0);\n\
    \        smallestIndex = evenValues.get(1);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphz8ydqog.java:45: error: incompatible types: bad return type in\
    \ lambda expression\n        evenValues.sort((a, b) -> a - b);\n             \
    \                       ^\n    possible lossy conversion from long to int\n/tmp/tmphz8ydqog.java:47:\
    \ error: incompatible types: Long cannot be converted to int\n        smallestIndex\
    \ = evenValues.get(1);\n                                      ^\n/tmp/tmphz8ydqog.java:49:\
    \ error: incompatible types: int cannot be converted to Long\n        result.add(smallestIndex);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallest_even_value = Long.MIN_VALUE;\n        int smallest_even_index\
    \ = -1;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (smallest_even_value < value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_even_index = index;\n               \
    \ }\n                index++;\n            }\n        }\n        if (smallest_even_index\
    \ == -1) {\n            return res;\n        }\n        smallest_even_index--;\n\
    \        res.add(smallest_even_value);\n        res.add(smallest_even_index);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcg15s2vz.java:46: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallest_even_index);\n                ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smalest_value = Long.MAX_VALUE;\n        int smalest_index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smalest_value < arr.get(i)) {\n             \
    \       smalest_value = arr.get(i);\n                    smalest_index = i;\n\
    \                }\n            }\n        }\n        res.add(smalest_value);\n\
    \        res.add(smalest_index);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnkvdlni.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smalest_index);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        long largestEvenValue = 0;\n        long largestIndex\
    \ = 0;\n        long largestValue = 0;\n        long largestEvenValueIndex = 0;\n\
    \        long largestEvenValueIndex2 = 0;\n        long largestEvenValueIndex3\
    \ = 0;\n        long largestEvenValueIndex4 = 0;\n        long largestEvenValueIndex5\
    \ = 0;\n        long largestEvenValueIndex6 = 0;\n        long largestEvenValueIndex7\
    \ = 0;\n        long largestEvenValueIndex8 = 0;\n        long largestEvenValueIndex9\
    \ = 0;\n        long largestEvenValueIndex10 = 0;\n        long largestEvenValueIndex11\
    \ = 0;\n        long largestEvenValueIndex12 = 0;\n        long largestEvenValueIndex13\
    \ = 0;\n        long largestEvenValueIndex14 = 0;\n        long largestEvenValueIndex15\
    \ = 0;\n        long largestEvenValueIndex16 = 0;\n        long largestEvenValueIndex17\
    \ = 0;\n        long largestEvenValueIndex18 = 0;\n        long largestEvenValueIndex19\
    \ = 0;\n        long largestEvenValueIndex20 = 0;\n        long largestEvenValueIndex21\
    \ = 0;\n        long largestEvenValueIndex22 = 0;\n        long largestEvenValueIndex23\
    \ = 0;\n        long largestEvenValueIndex24 = 0;\n        long largestEvenValueIndex25\
    \ = 0;\n        long largestEvenValueIndex26 = 0;\n        long largestEvenValueIndex27\
    \ = 0;\n        long largestEvenValueIndex28 = 0;\n        long largestEvenValueIndex29\
    \ = 0;\n        long largestEvenValueIndex30 = 0;\n        long largestEvenValueIndex31\
    \ = 0;\n        long largestEvenValueIndex32 = 0;\n        long largestEvenValueIndex33\
    \ = 0;\n        long largestEvenValueIndex34 = 0;\n        long largestEvenValueIndex35\
    \ = 0;\n        long largestEvenValueIndex36 = 0;\n        long largestEvenValueIndex37\
    \ = 0;\n        long largestEvenValueIndex38 = 0;\n        long largestEvenValueIndex39\
    \ = 0;\n        long largestEvenValueIndex40 = 0;\n        long largestEvenValueIndex41\
    \ = 0;\n        long largestEvenValueIndex42 = 0;\n        long largestEvenValueIndex43\
    \ = 0;\n        long largestEvenValueIndex44 = 0;\n        long largestEvenValueIndex45\
    \ = 0;\n        long largestEvenValueIndex46 = 0;\n        long largest\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6j_lkbis.java:80: error: ';' expected\n        long largest\n \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(long val : arr) {\n            if(val % 2 == 0) {\n             \
    \   if(smallestEven > val) {\n                    smallestEven = val;\n      \
    \              smallestIndex = arr.indexOf(val);\n                }\n        \
    \    }\n        }\n        if(smallestEven == Long.MAX_VALUE) {\n            return\
    \ res;\n        }\n        for(long val : arr) {\n            if(val % 2 == 0)\
    \ {\n                if(smallestEven > val) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = arr.indexOf(val);\n            \
    \    }\n            }\n        }\n        res.add(smallestEven);\n        res.add(smallestIndex);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4qks39p.java:50: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smalest_value = Long.MIN_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smalest_value < arr.get(i)) {\n             \
    \       smalest_value = arr.get(i);\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (smalest_value == Long.MIN_VALUE)\
    \ {\n            return res;\n        }\n        res.add(smalest_value);\n   \
    \     res.add(smallest_index);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5d68o9n_.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallest_index);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n\
    \                if (smallest_value == 0) {\n                    smallest_value\
    \ = arr.get(i);\n                    smallest_index = i;\n                } else\
    \ if (arr.get(i) < smallest_value) {\n                    smallest_value = arr.get(i);\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        result.add(smallest_value);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkh1g2cm2.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallest_index);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        long largestEvenValue = 0;\n        long largestIndex\
    \ = 0;\n        long largestValue = 0;\n        long largestIndex2 = 0;\n    \
    \    long largestValue2 = 0;\n        long largestIndex3 = 0;\n        long largestValue3\
    \ = 0;\n        long largestIndex4 = 0;\n        long largestValue4 = 0;\n   \
    \     long largestIndex5 = 0;\n        long largestValue5 = 0;\n        long largestIndex6\
    \ = 0;\n        long largestValue6 = 0;\n        long largestIndex7 = 0;\n   \
    \     long largestValue7 = 0;\n        long largestIndex8 = 0;\n        long largestValue8\
    \ = 0;\n        long largestIndex9 = 0;\n        long largestValue9 = 0;\n   \
    \     long largestIndex10 = 0;\n        long largestValue10 = 0;\n        long\
    \ largestIndex11 = 0;\n        long largestValue11 = 0;\n        long largestIndex12\
    \ = 0;\n        long largestValue12 = 0;\n        long largestIndex13 = 0;\n \
    \       long largestValue13 = 0;\n        long largestIndex14 = 0;\n        long\
    \ largestValue14 = 0;\n        long largestIndex15 = 0;\n        long largestValue15\
    \ = 0;\n        long largestIndex16 = 0;\n        long largestValue16 = 0;\n \
    \       long largestIndex17 = 0;\n        long largestValue17 = 0;\n        long\
    \ largestIndex18 = 0;\n        long largestValue18 = 0;\n        long largestIndex19\
    \ = 0;\n        long largestValue19 = 0;\n        long largestIndex20 = 0;\n \
    \       long largestValue20 = 0;\n        long largestIndex21 = 0;\n        long\
    \ largestValue21 = 0;\n        long largestIndex22 = 0;\n        long largestValue22\
    \ = 0;\n        long largestIndex23 = 0;\n        long largestValue23 = 0;\n \
    \       long largestIndex24 = 0;\n        long largestValue24 = 0;\n        long\
    \ largestIndex25 = 0;\n        long largestValue25 = 0;\n        long largestIndex26\
    \ = 0;\n        long largestValue26 = 0;\n        long largestIndex27 = 0;\n \
    \       long largestValue27 = 0;\n        long largestIndex28 = 0;\n        long\
    \ largestValue28 = 0;\n        long largestIndex29 = 0;\n        long largestValue29\
    \ = 0;\n        long largestIndex30 = 0;\n        long largestValue30 = 0;\n \
    \       long lar\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4jc_u6s.java:92: error: ';' expected\n        long lar\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for(Long node : arr) {\n            if(node % 2 == 0) {\n           \
    \     if(node < smallestEven) {\n                    smallestEven = node;\n  \
    \                  smallestIndex = arr.indexOf(node);\n                }\n   \
    \         }\n        }\n        if(smallestEven != Long.MAX_VALUE) {\n       \
    \     result.add(smallestEven);\n            result.add(smallestIndex);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe51vnk56.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        long smallestEvenValueIndex\
    \ = smallestIndex;\n        for(int i = 0; i < arr.size(); i++) {\n          \
    \  long value = arr.get(i);\n            if(value % 2 == 0) {\n              \
    \  if(value == smallestEvenValue) {\n                    smallestEvenValueIndex\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestEvenValueIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        int index = 0;\n        for(Long val : arr) {\n            if(val\
    \ % 2 == 0) {\n                if(smallestEvenValue > val) {\n               \
    \     smallestEvenValue = val;\n                    smallestIndex = index;\n \
    \               }\n                index++;\n            }\n        }\n      \
    \  result.add(smallestEvenValue);\n        result.add(smallestIndex);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmcam5lyu.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976330
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest_value = Long.MAX_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallest_value < arr.get(i)) {\n            \
    \        smallest_value = arr.get(i);\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (smallest_index != -1)\
    \ {\n            result.add(smallest_value);\n            result.add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jq3bxtf.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = arr.get(0);\n        long smallestIndex = 0;\n\
    \        boolean foundSmallestEvenValue = false;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            long value = arr.get(i);\n            if (value\
    \ % 2 == 0) {\n                if (smallestEvenValue < value) {\n            \
    \        smallestEvenValue = value;\n                    smallestIndex = i;\n\
    \                    foundSmallestEvenValue = true;\n                }\n     \
    \       }\n        }\n        if (foundSmallestEvenValue) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo7pl6sb3.java:48)\n"
  stdout: ''
  timestamp: 1659976331
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long currentSmallestEvenValue = 0;\n        long currentSmallestIndex = 0;\n\
    \        long currentSmallestValue = 0;\n        long currentSmallestIndex2 =\
    \ 0;\n        long currentSmallestValue2 = 0;\n        long currentSmallestIndex3\
    \ = 0;\n        long currentSmallestValue3 = 0;\n        long currentSmallestIndex4\
    \ = 0;\n        long currentSmallestValue4 = 0;\n        long currentSmallestIndex5\
    \ = 0;\n        long currentSmallestValue5 = 0;\n        long currentSmallestIndex6\
    \ = 0;\n        long currentSmallestValue6 = 0;\n        long currentSmallestIndex7\
    \ = 0;\n        long currentSmallestValue7 = 0;\n        long currentSmallestIndex8\
    \ = 0;\n        long currentSmallestValue8 = 0;\n        long currentSmallestIndex9\
    \ = 0;\n        long currentSmallestValue9 = 0;\n        long currentSmallestIndex10\
    \ = 0;\n        long currentSmallestValue10 = 0;\n        long currentSmallestIndex11\
    \ = 0;\n        long currentSmallestValue11 = 0;\n        long currentSmallestIndex12\
    \ = 0;\n        long currentSmallestValue12 = 0;\n        long currentSmallestIndex13\
    \ = 0;\n        long currentSmallestValue13 = 0;\n        long currentSmallestIndex14\
    \ = 0;\n        long currentSmallestValue14 = 0;\n        long currentSmallestIndex15\
    \ = 0;\n        long currentSmallestValue15 = 0;\n        long currentSmallestIndex16\
    \ = 0;\n        long currentSmallestValue16 = 0;\n        long currentSmallestIndex17\
    \ = 0;\n        long currentSmallestValue17 = 0;\n        long currentSmallestIndex18\
    \ = 0;\n        long currentSmallestValue18 = 0;\n        long currentSmallestIndex19\
    \ = 0;\n        long currentSmallestValue19 = 0;\n        long currentSmallestIndex20\
    \ = 0;\n        long currentSmallestValue20 = 0;\n        long currentSmallestIndex21\
    \ = 0;\n        long currentSmallestValue21 = 0;\n        long currentSmallestIndex22\
    \ = 0;\n        long currentSmallestValue22 = 0;\n        long currentSmallestIndex23\
    \ = 0;\n        long currentSmallestValue23 = 0;\n        long currentSmallestIndex24\
    \ = 0;\n        long currentSmallestValue24 = 0;\n        long currentSmallestIndex25\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjn1scyo_.java:79: error: ';' expected\n        long currentSmallestIndex25\n\
    \                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                smallestEven = Math.min(smallestEven, arr.get(i));\n\
    \                smallestIndex = i;\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3xau9ix.java:38: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if(value % 2 == 0) {\n                if(value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if(smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        ArrayList<Long>\
    \ evenValues = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if(value % 2 == 0) {\n\
    \                evenValues.add(value);\n            }\n        }\n        Collections.sort(evenValues);\n\
    \        for(long value : evenValues) {\n            if(value == smallestEvenValue)\
    \ {\n                result.add(smallestEvenValue);\n                result.add(smallestIndex);\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpchhc9b6h.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallestIndex);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976331
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        long index = 0;\n        boolean found = false;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if((value & 1) == 0) {\n                found = true;\n         \
    \       smallestEvenValue = value;\n                smallestIndex = i;\n     \
    \           smallestValue = value;\n                index = i;\n            }\n\
    \        }\n        if(!found) {\n            return result;\n        }\n    \
    \    for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if((value & 1) == 0) {\n                if(smallestValue > value)\
    \ {\n                    smallestValue = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4a_qiga7.java:63)\n"
  stdout: ''
  timestamp: 1659976331
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MIN_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven == Long.MIN_VALUE) {\n         \
    \           smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                } else {\n                    if (arr.get(i) < smallestEven)\
    \ {\n                        smallestEven = arr.get(i);\n                    \
    \    smallestIndex = i;\n                    }\n                }\n          \
    \  }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0sosrnw.java:44: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976331
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcsnbr6.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = arr.get(0);\n        int smallestIndex = 0;\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n         \
    \           smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppolitz6v.java:39: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long>\
    \ pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        long smallestValue = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEven\
    \ == Long.MAX_VALUE) {\n                    smallestEven = arr.get(i);\n     \
    \               smallestIndex = i;\n                    smallestValue = arr.get(i);\n\
    \                } else {\n                    if (arr.get(i) < smallestEven)\
    \ {\n                        smallestEven = arr.get(i);\n                    \
    \    smallestIndex = i;\n                        smallestValue = arr.get(i);\n\
    \                    }\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7ibjqdo.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976331
