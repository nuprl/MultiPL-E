name: HumanEval_26_remove_duplicates
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // From a list of integers, remove all elements that occur\
  \ more than once.\n    // Keep order of elements left the same as in the input.\n\
  \    public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> numbers)\
  \ {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(removeDuplicates((new ArrayList<Integer>(Arrays.asList()))).equals((new\
  \ ArrayList<Integer>(Arrays.asList()))));\n    assert(removeDuplicates((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4)))));\n    assert(removeDuplicates((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)2, (int)4, (int)3, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)4, (int)5)))));\n    }\n\n}\n"
completions: ["        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set = new HashSet<>();\n        for (Integer i : numbers) {\n            if\
    \ (set.contains(i)) {\n                continue;\n            }\n            result.add(i);\n\
    \            set.add(numbers.get(i));\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer>\
    \ set = new HashSet<Integer>();\n        for (Integer i : numbers) {\n       \
    \     if (!set.contains(i)) {\n                result.add(i);\n              \
    \  set.add(i);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : numbers) {\n            if(!map.containsKey(i)) {\n     \
    \           map.put(i, 1);\n                result.add(i);\n            } else\
    \ {\n                map.put(i, map.get(i) + 1);\n            }\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            result.add(i);\n            set.add(numbers.get(i));\n    \
    \    }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> seen = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (!seen.contains(i)) {\n                result.add(i);\n  \
    \              seen.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(Integer i : numbers) {\n            map.put(i,\
    \ map.getOrDefault(i, 0) + 1);\n        }\n        for(Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            if(entry.getValue() > 1) {\n        \
    \        result.add(entry.getKey());\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for (Integer i : numbers) {\n     \
    \       if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n\
    \            } else {\n                map.put(i, 1);\n            }\n       \
    \ }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n    \
    \        if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n\
    \        for (Integer i : numbers) {\n            if (!seen.contains(i)) {\n \
    \               result.add(i);\n                seen.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n \
    \       for(int i : numbers) {\n            map.put(i, map.getOrDefault(i, 0)\
    \ + 1);\n        }\n        for(int i : map.keySet()) {\n            if(map.get(i)\
    \ > 1) {\n                result.add(i);\n                map.put(i, map.get(i)\
    \ - 1);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (set.contains(i)) {\n    \
    \            continue;\n            }\n            set.add(number);\n        \
    \    result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            Integer number = numbers.get(i);\n            Integer count\
    \ = map.get(number);\n            if(count == null) {\n                map.put(number,\
    \ 1);\n            } else {\n                map.put(number, count + 1);\n   \
    \         }\n        }\n        for(int i = 0; i < numbers.size(); i++) {\n  \
    \          Integer number = numbers.get(i);\n            Integer count = map.get(number);\n\
    \            if(count == 1) {\n                result.add(number);\n         \
    \   }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (set.contains(i)) {\n              \
    \  continue;\n            }\n            set.add(numbers);\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if (!seen.contains(i)) {\n                result.add(i);\n\
    \                seen.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(Integer i : numbers) {\n        \
    \    if(!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int num : numbers) {\n            if(!map.containsKey(num)) {\n \
    \               map.put(num, 1);\n                result.add(num);\n         \
    \   } else {\n                map.put(num, map.get(num) + 1);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (Integer\
    \ i : numbers) {\n            if (set.contains(i)) {\n                continue;\n\
    \            }\n            result.add(i);\n            set.add(numbers.get(i));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (Integer\
    \ i : numbers) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(Integer i : numbers)\
    \ {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        for(Integer\
    \ i : map.keySet()) {\n            if(map.get(i) > 1) {\n                result.add(i);\n\
    \                map.put(i, map.get(i) - 1);\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        HashMap<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for (Integer i : numbers) {\n            if (map.containsKey(i))\
    \ {\n                map.put(i, map.get(i) + 1);\n            } else {\n     \
    \           map.put(i, 1);\n            }\n        }\n        for (Integer i :\
    \ map.keySet()) {\n            if (map.get(i) > 1) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for(Integer i : numbers) {\n            if(!set.contains(i)) {\n     \
    \           result.add(i);\n                set.add(i);\n            }\n     \
    \   }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            set.add(i);\n            result.add(i);\n        }\n      \
    \  return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (!set.contains(i)) {\n                result.add(i);\n   \
    \             set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i : numbers) {\n          \
    \  map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        for(int i : map.keySet())\
    \ {\n            if(map.get(i) > 1) {\n                result.add(i);\n      \
    \          map.put(i, map.get(i) - 1);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n   \
    \     for(Integer i : numbers) {\n            if(!map.containsKey(i)) {\n    \
    \            map.put(i, 1);\n                result.add(i);\n            } else\
    \ {\n                map.put(i, map.get(i) + 1);\n            }\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ numbers.size(); i++) {\n            Integer n = numbers.get(i);\n          \
    \  Integer count = map.get(n);\n            if(count == null) {\n            \
    \    map.put(n, 1);\n                result.add(n);\n            } else {\n  \
    \              map.put(n, count + 1);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (set.contains(i)) {\n              \
    \  continue;\n            }\n            set.add(numbers);\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (Integer\
    \ i : numbers) {\n            if (set.contains(i)) {\n                continue;\n\
    \            }\n            result.add(i);\n            set.add(numbers.get(i));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (set.contains(i))\
    \ {\n                continue;\n            }\n            set.add(i);\n     \
    \       result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for (Integer i : numbers) {\n    \
    \        if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n\
    \            } else {\n                map.put(i, 1);\n            }\n       \
    \ }\n        for (Integer i : map.keySet()) {\n            if (map.get(i) > 1)\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ seen = new HashSet<>();\n        for (Integer i : numbers) {\n            if\
    \ (seen.contains(i)) {\n                continue;\n            }\n           \
    \ result.add(i);\n            seen.add(i);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : numbers) {\n            map.put(i, map.getOrDefault(i, 0)\
    \ + 1);\n        }\n        for(Integer i : map.keySet()) {\n            if(map.get(i)\
    \ > 1) {\n                result.add(i);\n                map.put(i, map.get(i)\
    \ - 1);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (set.contains(i)) {\n    \
    \            continue;\n            }\n            set.add(numbers);\n       \
    \     result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (!set.contains(i)) {\n   \
    \             result.add(i);\n                set.add(i);\n            }\n   \
    \     }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<>();\n        for (Integer\
    \ i : numbers) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n      \
    \  }\n        for (Integer i : map.keySet()) {\n            if (map.get(i) > 1)\
    \ {\n                result.add(i);\n                map.put(i, map.get(i) - 1);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for (Integer i : numbers) {\n    \
    \        if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n\
    \            } else {\n                map.put(i, 1);\n            }\n       \
    \ }\n        for (Integer i : map.keySet()) {\n            if (map.get(i) > 1)\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n   \
    \     for (Integer i : numbers) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : numbers) {\n            if(!map.containsKey(i)) {\n     \
    \           map.put(i, 1);\n                result.add(i);\n            } else\
    \ {\n                map.put(i, map.get(i) + 1);\n            }\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                set.add(i);\n                result.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : numbers) {\n            if (map.containsKey(i)) {\n\
    \                map.put(i, map.get(i) + 1);\n            } else {\n         \
    \       map.put(i, 1);\n            }\n        }\n        for (Integer i : map.keySet())\
    \ {\n            if (map.get(i) > 1) {\n                result.add(i);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(Integer i : numbers) {\n            if(!map.containsKey(i)) {\n \
    \               map.put(i, 1);\n                result.add(i);\n            }\
    \ else {\n                map.put(i, map.get(i) + 1);\n            }\n       \
    \ }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i :\
    \ numbers) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n\
    \        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n         \
    \   if(entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : numbers) {\n            if(!set.contains(i)) {\n    \
    \            result.add(i);\n                set.add(i);\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n  \
    \      for (Integer i : numbers) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(Integer i : numbers) {\n            if(!map.containsKey(i)) {\n \
    \               map.put(i, 1);\n                result.add(i);\n            }\
    \ else {\n                map.put(i, map.get(i) + 1);\n            }\n       \
    \ }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : numbers) {\n            if (!set.contains(i)) {\n  \
    \              result.add(i);\n                set.add(i);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            set.add(number);\n            result.add(i);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> seen\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!seen.contains(i))\
    \ {\n                result.add(i);\n                seen.add(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : numbers) {\n            if(!set.contains(i)) {\n    \
    \            result.add(i);\n                set.add(i);\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            result.add(i);\n            set.add(numbers.get(i));\n    \
    \    }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            set.add(numbers);\n            result.add(i);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (!set.contains(i)) {\n                result.add(i);\n   \
    \             set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i : numbers) {\n          \
    \  if(!map.containsKey(i)) {\n                map.put(i, 1);\n               \
    \ result.add(i);\n            } else {\n                map.put(i, map.get(i)\
    \ + 1);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : numbers) {\n            if (!set.contains(i)) {\n  \
    \              result.add(i);\n                set.add(i);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(Integer i : numbers) {\n        \
    \    if(!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (set.contains(i)) {\n    \
    \            continue;\n            }\n            result.add(i);\n          \
    \  set.add(numbers.get(i));\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n\
    \        for (Integer i : numbers) {\n            if (!seen.contains(i)) {\n \
    \               result.add(i);\n                seen.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (Integer\
    \ i : numbers) {\n            if (set.contains(i)) {\n                continue;\n\
    \            }\n            result.add(i);\n            set.add(numbers.get(i));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n \
    \       for(int i = 0; i < numbers.size(); i++) {\n            Integer number\
    \ = numbers.get(i);\n            Integer count = map.get(number);\n          \
    \  map.put(number, count == null ? 1 : count + 1);\n        }\n        for(int\
    \ i = 0; i < numbers.size(); i++) {\n            Integer number = numbers.get(i);\n\
    \            Integer count = map.get(number);\n            if(count > 1) {\n \
    \               result.add(number);\n                map.put(number, count - 1);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(Integer i : numbers) {\n     \
    \       if(!map.containsKey(i)) {\n                map.put(i, 1);\n          \
    \      result.add(i);\n            } else {\n                map.put(i, map.get(i)\
    \ + 1);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (!set.contains(i)) {\n   \
    \             result.add(i);\n                set.add(i);\n            }\n   \
    \     }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n  \
    \      for (Integer i : numbers) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for (Integer i : map.keySet()) {\n            if\
    \ (map.get(i) > 1) {\n                result.add(i);\n                map.put(i,\
    \ map.get(i) - 1);\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for (Integer i : numbers) {\n       \
    \     if (!set.contains(i)) {\n                result.add(i);\n              \
    \  set.add(i);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for(int i : numbers) {\n            if(!set.contains(i)) {\n         \
    \       result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> counts = new HashMap<>();\n        for (Integer\
    \ i : numbers) {\n            if (counts.containsKey(i)) {\n                counts.put(i,\
    \ counts.get(i) + 1);\n            } else {\n                counts.put(i, 1);\n\
    \            }\n        }\n        for (Integer i : counts.keySet()) {\n     \
    \       if (counts.get(i) > 1) {\n                result.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (set.contains(i)) {\n              \
    \  continue;\n            }\n            set.add(numbers.get(i));\n          \
    \  result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int num : numbers) {\n            if(!map.containsKey(num)) {\n \
    \               map.put(num, 1);\n                result.add(num);\n         \
    \   } else {\n                map.put(num, map.get(num) + 1);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (Integer\
    \ i : numbers) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (Integer i : numbers) {\n            map.put(i,\
    \ map.getOrDefault(i, 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            if (entry.getValue() > 1) {\n       \
    \         result.add(entry.getKey());\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ seen = new HashSet<>();\n        for (Integer i : numbers) {\n            if\
    \ (!seen.contains(i)) {\n                result.add(i);\n                seen.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (!set.contains(i)) {\n   \
    \             result.add(i);\n                set.add(i);\n            }\n   \
    \     }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(int i : numbers) {\n\
    \            if(!set.contains(i)) {\n                set.add(i);\n           \
    \     result.add(i);\n            }\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> seen\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!seen.contains(i))\
    \ {\n                result.add(i);\n                seen.add(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n        for\
    \ (Integer num : numbers) {\n            if (seen.add(num)) {\n              \
    \  result.add(num);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(Integer i : numbers) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            if(entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : numbers) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for (Integer i : map.keySet()) {\n            if\
    \ (map.get(i) > 1) {\n                result.add(i);\n                map.put(i,\
    \ map.get(i) - 1);\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set =\
    \ new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                set.add(i);\n                result.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (!set.contains(i)) {\n             \
    \   result.add(i);\n                set.add(i);\n            }\n        }\n  \
    \      return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        HashMap<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for(Integer i : numbers) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for(Integer i : map.keySet()) {\n            if(map.get(i)\
    \ > 1) {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set = new HashSet<>();\n        for (Integer i : numbers) {\n            if\
    \ (!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for(Integer i : numbers) {\n            if(set.contains(i)) {\n      \
    \          continue;\n            }\n            set.add(i);\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for (Integer i : numbers) {\n     \
    \       if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n\
    \            } else {\n                map.put(i, 1);\n            }\n       \
    \ }\n        for (Integer i : map.keySet()) {\n            if (map.get(i) > 1)\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i : numbers) {\n          \
    \  if(!map.containsKey(i)) {\n                map.put(i, 1);\n               \
    \ result.add(i);\n            } else {\n                int count = map.get(i);\n\
    \                map.put(i, count + 1);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for (Integer i : numbers) {\n     \
    \       if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n\
    \            } else {\n                map.put(i, 1);\n            }\n       \
    \ }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n    \
    \        if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n\
    \        for (Integer i : numbers) {\n            if (!seen.contains(i)) {\n \
    \               result.add(i);\n                seen.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (Integer\
    \ i : numbers) {\n            if (set.contains(i)) {\n                continue;\n\
    \            }\n            set.add(i);\n            result.add(i);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            set.add(i);\n            result.add(i);\n        }\n      \
    \  return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            result.add(i);\n            set.add(numbers.get(i));\n    \
    \    }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : numbers) {\n            if(!set.contains(i)) {\n    \
    \            result.add(i);\n                set.add(i);\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i :\
    \ numbers) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n\
    \        for(int i : map.keySet()) {\n            if(map.get(i) > 1) {\n     \
    \           result.add(i);\n                map.put(i, map.get(i) - 1);\n    \
    \        }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (set.contains(i))\
    \ {\n                continue;\n            }\n            result.add(i);\n  \
    \          set.add(numbers.get(i));\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : numbers) {\n            if (set.contains(i)) {\n   \
    \             continue;\n            }\n            set.add(number);\n       \
    \     result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : numbers) {\n            if (map.containsKey(i)) {\n\
    \                map.put(i, map.get(i) + 1);\n            } else {\n         \
    \       map.put(i, 1);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() > 1) {\n\
    \                result.add(entry.getKey());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (set.contains(i)) {\n              \
    \  continue;\n            }\n            set.add(numbers.get(i));\n          \
    \  result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashSet<Integer> set = new HashSet<>();\n\
    \        for (Integer i : numbers) {\n            if (!set.contains(i)) {\n  \
    \              result.add(i);\n                set.add(numbers.get(i));\n    \
    \        }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (!set.contains(i)) {\n             \
    \   result.add(i);\n                set.add(i);\n            }\n        }\n  \
    \      return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (!set.contains(i)) {\n                result.add(i);\n   \
    \             set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(Integer i : numbers) {\n      \
    \      map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        for(Integer\
    \ i : map.keySet()) {\n            if(!map.containsKey(i)) {\n               \
    \ result.add(i);\n            }\n        }\n        return result;", "       \
    \ ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> seen =\
    \ new HashSet<>();\n        for (Integer i : numbers) {\n            if (!seen.contains(i))\
    \ {\n                result.add(i);\n                seen.add(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (!set.contains(i)) {\n             \
    \   result.add(i);\n                set.add(i);\n            }\n        }\n  \
    \      return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            set.add(numbers);\n            result.add(i);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<>();\n        for (Integer\
    \ i : numbers) {\n            if (map.containsKey(i)) {\n                map.put(i,\
    \ map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n   \
    \         }\n        }\n        for (Integer i : map.keySet()) {\n           \
    \ if (map.get(i) > 1) {\n                result.add(i);\n            }\n     \
    \   }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(int i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                set.add(i);\n\
    \                result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (set.contains(i))\
    \ {\n                continue;\n            }\n            result.add(i);\n  \
    \          set.add(numbers.get(i));\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (Integer i : numbers) {\n            if\
    \ (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n      \
    \      } else {\n                map.put(i, 1);\n            }\n        }\n  \
    \      for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n          \
    \  if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n\
    \        for (Integer i : numbers) {\n            if (!seen.contains(i)) {\n \
    \               result.add(i);\n                seen.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> counts = new HashMap<>();\n  \
    \      for (Integer i : numbers) {\n            counts.merge(i, 1, Integer::sum);\n\
    \        }\n        for (Integer i : counts.keySet()) {\n            if (counts.get(i)\
    \ > 1) {\n                result.add(i);\n                counts.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : numbers) {\n            if(!map.containsKey(i)) {\n     \
    \           map.put(i, 1);\n                result.add(i);\n            } else\
    \ {\n                map.put(i, map.get(i) + 1);\n            }\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i : numbers) {\n          \
    \  map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        for(int i : map.keySet())\
    \ {\n            if(map.get(i) > 1) {\n                result.add(i);\n      \
    \          map.put(i, map.get(i) - 1);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(Integer i : numbers) {\n      \
    \      map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            if(entry.getValue() > 1) {\n\
    \                result.add(entry.getKey());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ count = new HashMap<>();\n        for (Integer i : numbers) {\n            count.merge(i,\
    \ 1, Integer::sum);\n        }\n        for (Map.Entry<Integer, Integer> entry\
    \ : count.entrySet()) {\n            if (entry.getValue() > 1) {\n           \
    \     result.add(entry.getKey());\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ counts = new HashMap<>();\n        for(Integer i : numbers) {\n            counts.merge(i,\
    \ 1, Integer::sum);\n        }\n        for(Integer i : counts.keySet()) {\n \
    \           if(counts.get(i) > 1) {\n                result.add(i);\n        \
    \    }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : numbers) {\n            if(!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(numbers.get(i));\n          \
    \  }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : numbers) {\n            if (!set.contains(i)) {\n  \
    \              result.add(i);\n                set.add(i);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i :\
    \ numbers) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (set.contains(i)) {\n              \
    \  continue;\n            }\n            set.add(number);\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (!set.contains(i)) {\n             \
    \   result.add(i);\n                set.add(i);\n            }\n        }\n  \
    \      return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> seen = new HashSet<>();\n        for(Integer i : numbers)\
    \ {\n            if(!seen.contains(i)) {\n                result.add(i);\n   \
    \             seen.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                set.add(i);\n                result.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (!set.contains(i)) {\n             \
    \   result.add(i);\n                set.add(i);\n            }\n        }\n  \
    \      return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (!set.contains(i)) {\n                result.add(i);\n   \
    \             set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(Integer i : numbers) {\n      \
    \      if(!map.containsKey(i)) {\n                map.put(i, 1);\n           \
    \     result.add(i);\n            } else {\n                map.put(i, map.get(i)\
    \ + 1);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : numbers) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (set.contains(i)) {\n    \
    \            continue;\n            }\n            set.add(numbers);\n       \
    \     result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n\
    \        for (Integer i : numbers) {\n            if (!seen.contains(i)) {\n \
    \               result.add(i);\n                seen.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                set.add(i);\n\
    \                result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (Integer i : numbers) {\n            map.put(i,\
    \ map.getOrDefault(i, 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            if (entry.getValue() > 1) {\n       \
    \         result.add(entry.getKey());\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n   \
    \     for (Integer i : numbers) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() == 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n\
    \        for (Integer i : numbers) {\n            if (!seen.contains(i)) {\n \
    \               result.add(i);\n                seen.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        HashMap<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for(int i : numbers) {\n            if(!map.containsKey(i))\
    \ {\n                map.put(i, 1);\n                result.add(i);\n        \
    \    } else {\n                map.put(i, map.get(i) + 1);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : numbers) {\n            if (map.containsKey(i)) {\n\
    \                map.put(i, map.get(i) + 1);\n            } else {\n         \
    \       map.put(i, 1);\n            }\n        }\n        for (Integer i : map.keySet())\
    \ {\n            if (map.get(i) > 1) {\n                result.add(i);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        HashSet<Integer> set = new HashSet<>();\n    \
    \    for(Integer i : numbers) {\n            if(!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i :\
    \ numbers) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> seen\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!seen.contains(i))\
    \ {\n                result.add(i);\n                seen.add(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : numbers) {\n            if(!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> seen = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (!seen.contains(i)) {\n                result.add(i);\n  \
    \              seen.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(Integer i : numbers) {\n        \
    \    if(!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (!set.contains(i)) {\n   \
    \             result.add(i);\n                set.add(i);\n            }\n   \
    \     }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> seen = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (!seen.contains(i)) {\n                result.add(i);\n  \
    \              seen.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (set.contains(i))\
    \ {\n                continue;\n            }\n            set.add(numbers.get(i));\n\
    \            result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : numbers) {\n            if (set.contains(i)) {\n    \
    \            continue;\n            }\n            set.add(number);\n        \
    \    result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for(Integer i : numbers) {\n            if(set.contains(i)) {\n      \
    \          continue;\n            }\n            set.add(i);\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (Integer i : numbers) {\n            map.put(i,\
    \ map.getOrDefault(i, 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            if (entry.getValue() == 1) {\n      \
    \          result.add(entry.getKey());\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : numbers)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> seen\
    \ = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!seen.contains(i))\
    \ {\n                result.add(i);\n                seen.add(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : numbers) {\n            if (set.contains(i)) {\n   \
    \             continue;\n            }\n            result.add(i);\n         \
    \   set.add(numbers.get(i));\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : numbers) {\n            if (map.containsKey(i)) {\n\
    \                map.put(i, map.get(i) + 1);\n            } else {\n         \
    \       map.put(i, 1);\n            }\n        }\n        for (Integer i : map.keySet())\
    \ {\n            if (map.get(i) > 1) {\n                result.add(i);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (!set.contains(i)) {\n             \
    \   set.add(i);\n                result.add(i);\n            }\n        }\n  \
    \      return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> seen = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (!seen.contains(i)) {\n                result.add(i);\n  \
    \              seen.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : numbers) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n        for(Integer\
    \ i : numbers) {\n            if (!seen.contains(i)) {\n                result.add(i);\n\
    \                seen.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ numbers.size(); i++) {\n            Integer n = numbers.get(i);\n          \
    \  if(!map.containsKey(n)) {\n                map.put(n, 1);\n               \
    \ result.add(n);\n            } else {\n                int count = map.get(n);\n\
    \                map.put(n, count + 1);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for (Integer i : numbers) {\n     \
    \       if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n\
    \            } else {\n                map.put(i, 1);\n            }\n       \
    \ }\n        for (Integer i : map.keySet()) {\n            if (map.get(i) > 1)\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            Integer number = numbers.get(i);\n            if(!map.containsKey(number))\
    \ {\n                map.put(number, 1);\n                result.add(number);\n\
    \            } else {\n                map.put(number, map.get(number) + 1);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashSet<Integer> set = new HashSet<>();\n\
    \        for(Integer i : numbers) {\n            if(!set.contains(i)) {\n    \
    \            result.add(i);\n                set.add(numbers.get(i));\n      \
    \      }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : numbers) {\n            if (set.contains(i)) {\n              \
    \  continue;\n            }\n            set.add(numbers.get(i));\n          \
    \  result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for (Integer i : numbers) {\n    \
    \        if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n\
    \            } else {\n                map.put(i, 1);\n            }\n       \
    \ }\n        for (Integer i : map.keySet()) {\n            if (map.get(i) > 1)\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            Integer n = numbers.get(i);\n            Integer count =\
    \ map.get(n);\n            if(count == null) {\n                map.put(n, 1);\n\
    \                result.add(n);\n            } else {\n                map.put(n,\
    \ count + 1);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < numbers.size(); i++) {\n            Integer number\
    \ = numbers.get(i);\n            Integer count = map.get(number);\n          \
    \  if(count == null) {\n                map.put(number, 1);\n            } else\
    \ {\n                map.put(number, count + 1);\n            }\n        }\n \
    \       for(int i = 0; i < numbers.size(); i++) {\n            Integer number\
    \ = numbers.get(i);\n            Integer count = map.get(number);\n          \
    \  if(count > 1) {\n                result.add(number);\n            }\n     \
    \   }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers)\
    \ {\n            if (set.contains(i)) {\n                continue;\n         \
    \   }\n            set.add(number);\n            result.add(i);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<>();\n        for (Integer\
    \ i : numbers) {\n            if (map.containsKey(i)) {\n                map.put(i,\
    \ map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n   \
    \         }\n        }\n        for (Integer i : map.keySet()) {\n           \
    \ if (map.get(i) > 1) {\n                result.add(i);\n            }\n     \
    \   }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> countMap = new HashMap<>();\n        for (Integer\
    \ i : numbers) {\n            Integer count = countMap.get(i);\n            if\
    \ (count == null) {\n                count = 1;\n            } else {\n      \
    \          count++;\n            }\n            countMap.put(i, count);\n    \
    \    }\n        for (Integer i : countMap.keySet()) {\n            if (countMap.get(i)\
    \ > 1) {\n                result.add(i);\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
