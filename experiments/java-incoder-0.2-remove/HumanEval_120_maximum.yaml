completions:
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        if (k > n) {\n            k = n;\n       \
  \ }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i\
  \ < len; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        for (int i = 0; i < len; i++) {\n           \
  \ if (max < arr.get(i)) {\n                result.add(max);\n                max\
  \ = arr.get(i);\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = 0;\n        for (int i = 0; i <\
  \ k; i++) {\n            max = Math.max(max, arr.get(i));\n        }\n        for\
  \ (int i = 0; i < n; i++) {\n            if (arr.get(i) == max) {\n            \
  \    result.add(arr.get(i));\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        if (k > n) {\n            k = n - 1;\n   \
  \     }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            int max = 0;\n            for(int j = 0; j < arr.size(); j++) {\n\
  \                if(arr.get(i) > arr.get(j)) {\n                    max = arr.get(i);\n\
  \                }\n            }\n            if(max > k) {\n                result.add(max);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int len = arr.size();\n        int max = Integer.MIN_VALUE;\n        for\
  \ (int i = 0; i < len; i++) {\n            if (max < arr.get(i)) {\n           \
  \     max = arr.get(i);\n            }\n        }\n        int count = 0;\n    \
  \    for (int i = 0; i < len; i++) {\n            if (arr.get(i) == max) {\n   \
  \             count++;\n            }\n        }\n        if (count > k) {\n   \
  \         k = count;\n        }\n        for (int i = 0; i < len; i++) {\n     \
  \       if (arr.get(i) == max) {\n                result.add(max);\n           \
  \ }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (len > k) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        if (k > n) {\n            k = n - 1;\n   \
  \     }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n        \
  \        pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            if(pq.size() == k) {\n                pq.add(arr.get(i));\n\
  \            }\n        }\n        while(pq.size() > 0) {\n            result.add(pq.poll());\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n  \
  \      }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n  \
  \      }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        for(int i = 0; i < k; i++) {\n     \
  \       int max = 0;\n            for(int j = 0; j < arr.size(); j++) {\n      \
  \          if(arr.get(j) > max) {\n                    max = arr.get(j);\n     \
  \           }\n            }\n            temp.add(max);\n        }\n        for(int\
  \ i = 0; i < k; i++) {\n            int max = 0;\n            for(int j = 0; j <\
  \ arr.size(); j++) {\n                if(arr.get(j) > max) {\n                 \
  \   max = arr.get(j);\n                }\n            }\n            result.add(max);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if (pq.size() > k) {\n       \
  \         pq.poll();\n            }\n        }\n        while (pq.size() > 0) {\n\
  \            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        if (k > n) {\n            k = n;\n       \
  \ }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n        \
  \        pq.poll();\n            }\n        }\n        while(pq.size() > k) {\n\
  \            pq.poll();\n        }\n        for(int i = 0; i < k; i++) {\n     \
  \       result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int n =\
  \ arr.size();\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i <\
  \ n; i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n\
  \            }\n        }\n        int count = 0;\n        for(int i = 0; i < n;\
  \ i++) {\n            if(arr.get(i) == max) {\n                result.add(max);\n\
  \                count++;\n            }\n        }\n        if(count < k) {\n \
  \           for(int i = count; i < k; i++) {\n                result.add(max);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Collections.sort(arr);\n\
  \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n  \
  \      }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        pq.add(arr.get(0));\n        for (int\
  \ i = 1; i < arr.size(); i++) {\n            if (pq.poll() > arr.get(i)) {\n   \
  \             pq.add(arr.get(i));\n            }\n        }\n        while (pq.size()\
  \ > k) {\n            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n        \
  \        pq.poll();\n            }\n        }\n        for(int i = 0; i < k; i++)\
  \ {\n            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ max = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < arr.size(); i++) {\n            int curr = arr.get(i);\n\
  \            if(curr <= 0) {\n                temp.add(curr);\n            }\n \
  \           else if(curr <= max.get(k)) {\n                temp.add(curr);\n   \
  \         }\n            else {\n                max.addAll(temp);\n           \
  \     temp = new ArrayList<Integer>();\n                temp.add(curr);\n      \
  \      }\n        }\n        max.addAll(temp);\n        Collections.sort(max);\n\
  \        result.addAll(max);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            int max = 0;\n            for(int j = 0; j < k; j++) {\n      \
  \          if(arr.get(i) > max) {\n                    max = arr.get(i);\n     \
  \           }\n            }\n            if(!result.contains(max)) {\n        \
  \        result.add(max);\n                temp.add(max);\n            }\n     \
  \   }\n        for(int i = 0; i < k; i++) {\n            int max = 0;\n        \
  \    for(int j = 0; j < result.size(); j++) {\n                if(temp.get(i) >\
  \ max) {\n                    max = temp.get(i);\n                }\n          \
  \  }\n            result.add(max);\n            temp.add(max);\n        }\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int maxSize = arr.size();\n        int maxIndex = maxSize - 1;\n      \
  \  for(int i = 0; i < maxSize; i++) {\n            int currentMax = arr.get(i);\n\
  \            int currentIndex = i;\n            while(currentIndex >= 0 && currentMax\
  \ < arr.get(currentIndex)) {\n                currentMax = arr.get(currentIndex);\n\
  \                currentIndex--;\n            }\n            result.add(currentMax);\n\
  \            currentIndex++;\n        }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        for(int i=0;i<k;i++) {\n            res.add(arr.get(i));\n\
  \        }\n        for(int i=k;i<len;i++) {\n            res.add(arr.get(i));\n\
  \        }\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ tmp = new ArrayList<Integer>();\n        for(int i = 0; i < k; i++) {\n      \
  \      tmp.add(arr.get(i));\n        }\n        Collections.sort(tmp);\n       \
  \ for(int i = 0; i < k; i++) {\n            result.add(tmp.get(i));\n        }\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        for(int i = 0; i < k; i++) {\n           \
  \ result.add(arr.get(i));\n        }\n        for(int i = k; i < n; i++) {\n   \
  \         int max = 0;\n            for(int j = 0; j < k; j++) {\n             \
  \   if(arr.get(j) > arr.get(max)) {\n                    max = j;\n            \
  \    }\n            }\n            result.add(arr.get(max));\n        }\n      \
  \  return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int m = arr.size();\n        int max = 0;\n\
  \        for (int i = 0; i < k; i++) {\n            if (max < arr.get(i)) {\n  \
  \              max = arr.get(i);\n            }\n        }\n        for (int i =\
  \ 0; i < n; i++) {\n            if (max < arr.get(i)) {\n                result.add(max);\n\
  \                max = arr.get(i);\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int m = arr.size();\n        int max = 0;\n\
  \        int maxIndex = 0;\n        int maxValue = 0;\n        for (int i = 0; i\
  \ < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n                maxValue = max;\n            }\n\
  \        }\n        for (int i = n-1; i >= 0; i--) {\n            if (max < arr.get(i))\
  \ {\n                max = arr.get(i);\n                maxIndex = i;\n        \
  \        maxValue = max;\n            }\n        }\n        for (int i = 0; i <\
  \ k; i++) {\n            if (maxIndex == i) {\n                result.add(maxValue);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = 0;\n        for (int i = 0; i <\
  \ k; i++) {\n            max = Math.max(max, arr.get(i));\n        }\n        for\
  \ (int i = 0; i < n; i++) {\n            if (arr.get(i) == max) {\n            \
  \    result.add(arr.get(i));\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        pq.add(arr.get(0));\n        for (int\
  \ i = 1; i < arr.size(); i++) {\n            if (pq.poll() < arr.get(i)) {\n   \
  \             pq.add(arr.get(i));\n            }\n        }\n        while (pq.size()\
  \ > k) {\n            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i\
  \ < len; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        if (k > len) {\n            k = len - 1;\n  \
  \      }\n        for (int i = 0; i < k; i++) {\n            result.add(max);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        for(int i = 0; i < k; i++) {\n           \
  \ result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Collections.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n  \
  \      }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if (pq.size() > k) {\n       \
  \         pq.poll();\n            }\n        }\n        while (pq.size() > 0) {\n\
  \            res.add(pq.poll());\n        }\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n        \
  \        pq.poll();\n            }\n        }\n        while(pq.size() > k) {\n\
  \            pq.poll();\n        }\n        for(int i = 0; i < k; i++) {\n     \
  \       result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
  \ max = new ArrayList<>();\n        ArrayList<Integer> temp = new ArrayList<>();\n\
  \        int i = 0;\n        int j = 0;\n        int maxIndex = 0;\n        int\
  \ maxValue = Integer.MIN_VALUE;\n        int tempMaxValue = Integer.MIN_VALUE;\n\
  \        int tempMaxIndex = 0;\n        int tempMaxIndex2 = 0;\n        int tempMaxValue2\
  \ = 0;\n        int tempMaxValue3 = 0;\n        int tempMaxValue4 = 0;\n       \
  \ int tempMaxValue5 = 0;\n        int tempMaxValue6 = 0;\n        int tempMaxValue7\
  \ = 0;\n        int tempMaxValue8 = 0;\n        int tempMaxValue9 = 0;\n       \
  \ int tempMaxValue10 = 0;\n        int tempMaxValue11 = 0;\n        int tempMaxValue12\
  \ = 0;\n        int tempMaxValue13 = 0;\n        int tempMaxValue14 = 0;\n     \
  \   int tempMaxValue15 = 0;\n        int tempMaxValue16 = 0;\n        int tempMaxValue17\
  \ = 0;\n        int tempMaxValue18 = 0;\n        int tempMaxValue19 = 0;\n     \
  \   int tempMaxValue20 = 0;\n        int tempMaxValue21 = 0;\n        int tempMaxValue22\
  \ = 0;\n        int tempMaxValue23 = 0;\n        int tempMaxValue24 = 0;\n     \
  \   int tempMaxValue25 = 0;\n        int tempMaxValue26 = 0;\n        int tempMaxValue27\
  \ = 0;\n        int tempMaxValue28 = 0;\n        int tempMaxValue29 = 0;\n     \
  \   int tempMaxValue30 = 0;\n        int tempMaxValue31 = 0;\n        int tempMaxValue32\
  \ = 0;\n        int tempMaxValue33 = 0;\n        int tempMaxValue34 = 0;\n     \
  \   int tempMaxValue35 = 0;\n        int tempMaxValue36 = 0;\n        int tempMaxValue37\
  \ = 0;\n        int tempMaxValue38 = 0;\n        int tempMaxValue39 = 0;\n     \
  \   int tempMaxValue40 = 0;\n        int tempMaxValue41 = 0;\n        int tempMaxValue42\
  \ = 0;\n        int tempMaxValue43 = 0;\n        int tempMaxValue44 = 0;\n     \
  \   int tempMaxValue45 = 0;\n        int tempMaxValue46 = 0;\n        int tempMaxValue47\
  \ = 0;\n        int tempMaxValue48 = 0;\n        int tempMaxValue49 = 0;\n     \
  \   int tempMaxValue50 = 0;\n        int tempMaxValue51 = 0;\n        int tempMaxValue52\
  \ = 0;\n        int tempMaxValue53 = 0;\n        int tempMaxValue54 = 0;\n     \
  \   int tempMaxValue55 = 0;\n        int tempMaxValue56 = 0;\n        int tempMaxValue57\
  \ = 0;\n        int tempMaxValue58 = 0;\n        int tempMaxValue59 = 0;\n     \
  \   int tempMaxValue60 = 0;\n        int tempMaxValue61 = 0;\n        int tempMaxValue62\
  \ = 0;\n        int tempMaxValue63 = 0;\n        int tempMaxValue64 = 0;\n     \
  \   int tempMaxValue65 = 0;\n"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.offer(arr.get(i));\n            if(k == pq.size()) {\n     \
  \           result.addAll(pq);\n                break;\n            }\n        }\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ max = new ArrayList<Integer>();\n        ArrayList<Integer> min = new ArrayList<Integer>();\n\
  \        int n = arr.size();\n        int m = arr.size();\n        int maxCount\
  \ = 0;\n        int minCount = 0;\n        int maxCount2 = 0;\n        int minCount2\
  \ = 0;\n        int maxCount3 = 0;\n        int minCount3 = 0;\n        int maxCount4\
  \ = 0;\n        int minCount4 = 0;\n        int maxCount5 = 0;\n        int minCount5\
  \ = 0;\n        int maxCount6 = 0;\n        int minCount6 = 0;\n        int maxCount7\
  \ = 0;\n        int minCount7 = 0;\n        int maxCount8 = 0;\n        int minCount8\
  \ = 0;\n        int maxCount9 = 0;\n        int minCount9 = 0;\n        int maxCount10\
  \ = 0;\n        int minCount10 = 0;\n        int maxCount11 = 0;\n        int minCount11\
  \ = 0;\n        int maxCount12 = 0;\n        int minCount12 = 0;\n        int maxCount13\
  \ = 0;\n        int minCount13 = 0;\n        int maxCount14 = 0;\n        int minCount14\
  \ = 0;\n        int maxCount15 = 0;\n        int minCount15 = 0;\n        int maxCount16\
  \ = 0;\n        int minCount16 = 0;\n        int maxCount17 = 0;\n        int minCount17\
  \ = 0;\n        int maxCount18 = 0;\n        int minCount18 = 0;\n        int maxCount19\
  \ = 0;\n        int minCount19 = 0;\n        int maxCount20 = 0;\n        int minCount20\
  \ = 0;\n        int maxCount21 = 0;\n        int minCount21 = 0;\n        int maxCount22\
  \ = 0;\n        int minCount22 = 0;\n        int maxCount23 = 0;\n        int minCount23\
  \ = 0;\n        int maxCount24 = 0;\n        int minCount24 = 0;\n        int maxCount25\
  \ = 0;\n        int minCount25 = 0;\n        int maxCount26 = 0;\n        int minCount26\
  \ = 0;\n        int maxCount27 = 0;\n        int minCount27 = 0;\n        int maxCount28\
  \ = 0;\n        int minCount28 = 0;\n        int maxCount29 = 0;\n        int minCount29\
  \ = 0;\n        int maxCount30 = 0;\n        int minCount30 = 0;\n        int maxCount31\
  \ = 0;\n        int minCount31 = 0;\n        int maxCount32 = 0;\n        int minCount32\
  \ = 0;\n        int maxCount33 = 0;\n        int minCount33 = 0;\n        int maxCount34\
  \ = 0;\n        int minCount34 = 0;\n        int maxCount35 = 0;\n        int minCount35\
  \ = 0;\n        int maxCount36 = 0;\n        int minCount36 = 0;\n        int maxCount37\
  \ = 0;\n        int minCount37 = 0;\n        int maxCount38 = 0;\n        int minCount38\
  \ = 0;\n        int maxCount39 = 0;\n        int minCount39 = 0;\n        int maxCount40\
  \ = 0;\n        int minCount40 = 0;\n"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int maxIndex = arr.size() - 1;\n        for (int i = 0; i < k; i++) {\n\
  \            result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Collections.sort(arr);\n\
  \        int n = arr.size();\n        int m = arr.size();\n        int max = 0;\n\
  \        int maxIndex = 0;\n        for (int i = 0; i < n; i++) {\n            if\
  \ (max < arr.get(i)) {\n                max = arr.get(i);\n                maxIndex\
  \ = i;\n            }\n        }\n        for (int i = maxIndex; i < n; i++) {\n\
  \            if (max < arr.get(i)) {\n                max = arr.get(i);\n      \
  \          maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        for (int i = maxIndex;\
  \ i < n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int max = arr.get(k);\n        int i = 0;\n        while (i < k) {\n  \
  \          if (arr.get(i) > max) {\n                max = arr.get(i);\n        \
  \    }\n            i++;\n        }\n        result.add(max);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Collections.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        for(int i = 0; i < k; i++) {\n         \
  \   result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int n =\
  \ arr.size();\n        Arrays.sort(arr);\n        for (int i = 0; i < k; i++) {\n\
  \            result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n  \
  \      }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ max = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            if(num > max.get(k - 1))\n                max.add(num);\n         \
  \   else if(num == max.get(k - 1))\n                temp.add(num);\n           \
  \ else if(num < max.get(k - 1))\n                max.add(num);\n        }\n    \
  \    for(int i = 0; i < k; i++) {\n            result.add(max.get(i));\n       \
  \ }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int n =\
  \ arr.size();\n        int m = arr.size();\n        int max = 0;\n        int maxIndex\
  \ = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m;\
  \ j++) {\n                if(arr.get(i) > arr.get(j)) {\n                    max\
  \ = arr.get(i);\n                    maxIndex = i;\n                }\n        \
  \    }\n            result.add(max);\n            max = arr.get(maxIndex);\n   \
  \         maxIndex = 0;\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n  \
  \      }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = arr.get(0);\n        for (int i\
  \ = 1; i < n; i++) {\n            if (arr.get(i) > max) {\n                max =\
  \ arr.get(i);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n\
  \            result.add(max);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int n = arr.size();\n\
  \        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < k; i++) {\n \
  \           int maxIndex = i;\n            for (int j = i + 1; j < n; j++) {\n \
  \               if (arr.get(i) > arr.get(j)) {\n                    maxIndex = j;\n\
  \                }\n            }\n            result.add(arr.get(maxIndex));\n\
  \            max = Math.max(max, arr.get(maxIndex));\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
  \ max = new ArrayList<>();\n        ArrayList<Integer> temp = new ArrayList<>();\n\
  \        for(int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n\
  \            if(max.size() < k) {\n                max.add(value);\n           \
  \ }\n            else if(value == max.get(k)) {\n                temp.add(value);\n\
  \            }\n            else {\n                result.add(max);\n         \
  \       max.clear();\n                temp.add(value);\n            }\n        }\n\
  \        result.add(max);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ max = new ArrayList<Integer>();\n        ArrayList<Integer> tmp = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < arr.size(); i++) {\n            tmp.add(arr.get(i));\n\
  \            if(tmp.size() > k) {\n                tmp.remove(tmp.size() - 1);\n\
  \            }\n        }\n        for(int i = 0; i < tmp.size(); i++) {\n     \
  \       max.add(tmp.get(i));\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(arr.get(i) > max.get(k - 1) && arr.get(i) < max.get(k))\
  \ {\n                result.add(arr.get(i));\n            }\n        }\n       \
  \ return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i\
  \ < len; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        if (k > len) {\n            k = len - 1;\n  \
  \      }\n        for (int i = 0; i < k; i++) {\n            result.add(max);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ maxHeap = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            maxHeap.add(arr.get(i));\n        }\n        while(maxHeap.size()\
  \ > k) {\n            int maxElement = maxHeap.poll();\n            result.add(maxElement);\n\
  \            for(int i = 0; i < arr.size(); i++) {\n                if(arr.get(i)\
  \ > maxElement) {\n                    maxHeap.add(arr.get(i));\n              \
  \  }\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>(k);\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if (pq.size() == k) {\n      \
  \          result.add(pq.poll());\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int len = arr.size();\n        for(int i = 0; i < k; i++) {\n         \
  \   result.add(arr.get(i));\n        }\n        for(int i = k; i < len; i++) {\n\
  \            int max = Integer.MIN_VALUE;\n            for(int j = 0; j < k; j++)\
  \ {\n                if(arr.get(j) > max) {\n                    max = arr.get(j);\n\
  \                }\n            }\n            result.add(max);\n        }\n   \
  \     return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
  \            if (max < arr.get(i)) {\n                max = arr.get(i);\n      \
  \          index = i;\n            }\n        }\n        result.add(max);\n    \
  \    for (int i = index; i < arr.size(); i++) {\n            if (max < arr.get(i))\
  \ {\n                max = arr.get(i);\n                result.add(max);\n     \
  \       }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ max = new ArrayList<Integer>();\n        ArrayList<Integer> min = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > arr.get(i\
  \ + 1))\n                max.add(arr.get(i));\n            else\n              \
  \  min.add(arr.get(i));\n        }\n        if(max.size() > k) {\n            for(int\
  \ i = 0; i < k - max.size(); i++) {\n                result.add(max.get(i));\n \
  \           }\n        }\n        if(min.size() > k) {\n            for(int i =\
  \ 0; i < k - min.size(); i++) {\n                result.add(min.get(i));\n     \
  \       }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        for(int i = 0; i < k; i++) {\n           \
  \ result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            res.add(arr.get(i));\n\
  \        }\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        for(int i = 0; i < k; i++) {\n           \
  \ result.add(arr.get(i));\n        }\n        for(int i = k; i < n; i++) {\n   \
  \         int max = 0;\n            for(int j = 0; j < k; j++) {\n             \
  \   if(arr.get(i) > arr.get(j)) {\n                    max = arr.get(j);\n     \
  \           }\n            }\n            result.add(max);\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i\
  \ < len; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        if (max >= k) {\n            for (int i = 0;\
  \ i < len; i++) {\n                if (arr.get(i) == max) {\n                  \
  \  result.add(arr.get(i));\n                }\n            }\n        }\n      \
  \  return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int max = arr.get(k - 1);\n        for (int i = 0; i < k; i++) {\n    \
  \        if (arr.get(i) > max) {\n                max = arr.get(i);\n          \
  \  }\n        }\n        result.add(max);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int max = 0;\n        int i = 0;\n        while (i < arr.size() && max\
  \ < k) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n\
  \            }\n            i++;\n        }\n        result.add(max);\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (len <= k) {\n            result.addAll(Arrays.copyOf(arr,\
  \ k));\n            return result;\n        }\n        int mid = len / 2;\n    \
  \    ArrayList<Integer> left = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ right = new ArrayList<Integer>();\n        for (int i = 0; i < mid; i++) {\n \
  \           left.add(arr.get(i));\n        }\n        for (int i = mid; i < len;\
  \ i++) {\n            right.add(arr.get(i));\n        }\n        left = maximum(left,\
  \ k);\n        right = maximum(right, k);\n        result.addAll(left);\n      \
  \  result.addAll(right);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (len > k) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (len > k) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Collections.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = 0;\n        for (int i = 0; i <\
  \ k; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        for (int i = 0; i < n; i++) {\n            if\
  \ (arr.get(i) == max) {\n                result.add(arr.get(i));\n            }\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int n =\
  \ arr.size();\n        for(int i = 0; i < k; i++) {\n            int max = 0;\n\
  \            for(int j = 0; j < n; j++) {\n                if(arr.get(j) > max)\
  \ {\n                    max = arr.get(j);\n                }\n            }\n \
  \           result.add(max);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = 0;\n        for (int i = 0; i <\
  \ n; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        int count = 0;\n        for (int i = 0; i < n;\
  \ i++) {\n            if (max < arr.get(i)) {\n                result.add(max);\n\
  \                count++;\n            }\n        }\n        if (count > k) {\n\
  \            k = count;\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int m = arr.size();\n        for(int i=0;i<k;i++)\
  \ {\n            int max = 0;\n            for(int j=0;j<n;j++) {\n            \
  \    if(arr[j]>max) {\n                    max = arr[j];\n                }\n  \
  \          }\n            result.add(max);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int n =\
  \ arr.size();\n        int m = arr.size();\n        Arrays.sort(arr);\n        for(int\
  \ i = 0; i < k; i++) {\n            int max = 0;\n            for(int j = 0; j <\
  \ n; j++) {\n                if(arr[j] > max) {\n                    max = arr[j];\n\
  \                }\n            }\n            result.add(max);\n        }\n   \
  \     return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i=0;i<k;i++) {\n            res.add(arr.get(i));\n        }\n \
  \       return res;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int max = 0;\n        int i = 0;\n        while (i < arr.size() && max\
  \ < k) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n\
  \            }\n            i++;\n        }\n        result.add(max);\n        while\
  \ (i < arr.size() && max >= k) {\n            if (arr.get(i) > max) {\n        \
  \        max = arr.get(i);\n            }\n            i++;\n        }\n       \
  \ result.add(max);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        Collections.sort(arr);\n        int\
  \ i = 0;\n        int j = 0;\n        int max = 0;\n        int maxIndex = 0;\n\
  \        while (i < arr.size()) {\n            if (j == k) {\n                result.add(temp);\n\
  \                temp = new ArrayList<Integer>();\n                j = 0;\n    \
  \        }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n\
  \                maxIndex = i;\n            }\n            i++;\n            j++;\n\
  \        }\n        result.add(temp);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        PriorityQueue<Integer>\
  \ maxHeap = new PriorityQueue<>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            maxHeap.add(arr.get(i));\n            while(maxHeap.size() > k)\
  \ {\n                maxHeap.poll();\n            }\n        }\n        while(!maxHeap.isEmpty())\
  \ {\n            result.add(maxHeap.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
  \ max = new ArrayList<>();\n        ArrayList<Integer> temp = new ArrayList<>();\n\
  \        for(int i = 0; i < arr.size(); i++) {\n            int curr = arr.get(i);\n\
  \            if(curr <= 0) {\n                result.add(curr);\n              \
  \  max.add(curr);\n            }\n            else {\n                max.add(curr);\n\
  \                for(int j = 0; j < k; j++) {\n                    if(curr > max.get(j))\
  \ {\n                        result.add(curr);\n                        max.add(curr);\n\
  \                        break;\n                    }\n                }\n    \
  \        }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n        }\n        for(int i = 0; i < k; i++)\
  \ {\n            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (len <= k) {\n            for (int i\
  \ = 0; i < k; i++) {\n                result.add(arr.get(i));\n            }\n \
  \           return result;\n        }\n        int start = 0;\n        int end =\
  \ len - k;\n        int mid = len / 2;\n        while (start < end) {\n        \
  \    if (arr[mid] < arr[mid+1]) {\n                result.add(arr[mid]);\n     \
  \           mid++;\n            } else {\n                result.add(arr[mid+1]);\n\
  \                mid++;\n            }\n            mid = len / 2;\n        }\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int m = arr.size() - k;\n        for(int i\
  \ = 0; i < m; i++) {\n            result.add(arr.get(i));\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int size = arr.size();\n        int maxSize = size - k;\n        for (int\
  \ i = 0; i < maxSize; i++) {\n            result.add(arr.get(i));\n        }\n \
  \       return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<>();\n        pq.add(arr.get(0));\n        for (int i =\
  \ 1; i < arr.size(); i++) {\n            if (pq.poll() > arr.get(i)) {\n       \
  \         pq.add(arr.get(i));\n            }\n        }\n        while (pq.size()\
  \ > k) {\n            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int n = arr.size();\n\
  \        Arrays.sort(arr);\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int max = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n\
  \        while (i < arr.size()) {\n            if (max < arr.get(i)) {\n       \
  \         max = arr.get(i);\n                k = i;\n            }\n           \
  \ i++;\n        }\n        while (j < arr.size()) {\n            if (max < arr.get(j))\
  \ {\n                max = arr.get(j);\n                k = j;\n            }\n\
  \            j++;\n        }\n        if (k == arr.size()) {\n            result.add(max);\n\
  \        } else {\n            result.add(arr.get(k));\n            result.add(max);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = 0;\n        for (int i = 0; i <\
  \ k; i++) {\n            max = Math.max(max, arr.get(i));\n        }\n        for\
  \ (int i = 0; i < n; i++) {\n            if (arr.get(i) == max) {\n            \
  \    result.add(arr.get(i));\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            return result;\n\
  \        }\n        if (k == len) {\n            result.add(arr.get(0));\n     \
  \       return result;\n        }\n        int mid = len / 2;\n        ArrayList<Integer>\
  \ left = new ArrayList<Integer>();\n        ArrayList<Integer> right = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < mid; i++) {\n            left.add(arr.get(i));\n  \
  \      }\n        for (int i = mid; i < len; i++) {\n            right.add(arr.get(i));\n\
  \        }\n        ArrayList<Integer> leftMax = maximum(left, k - 1);\n       \
  \ ArrayList<Integer> rightMax = maximum(right, k - 1);\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>();\n        result.addAll(leftMax);\n        result.addAll(rightMax);\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ max = new ArrayList<Integer>();\n        int maxIndex = 0;\n        int maxValue\
  \ = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n       \
  \     if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n   \
  \             maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
  \                maxIndex = i;\n            }\n        }\n        max.add(maxValue);\n\
  \        result.add(maxValue);\n        for (int i = maxIndex + 1; i < arr.size();\
  \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue = arr"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        Arrays.sort(arr);\n        int n = arr.size();\n\
  \        int m = k;\n        int max = 0;\n        int i = 0;\n        while (i\
  \ < n) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n            if (m == 0) {\n                break;\n            }\n\
  \            if (max < arr.get(i)) {\n                result.add(max);\n       \
  \         m--;\n            }\n            if (m == 0) {\n                break;\n\
  \            }\n            if (arr.get(i) > arr.get(i + 1)) {\n               \
  \ temp.add(arr.get(i));\n                i++;\n            } else {\n          \
  \      temp.add(arr.get(i + 1));\n                i++;\n            }\n        }\n\
  \        if (m != 0) {\n            result.addAll(temp);\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        if (k > n) {\n            k = n - 1;\n   \
  \     }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int max = 0;\n        int i = 0;\n        while (i < arr.size() && max\
  \ < k) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n\
  \            }\n            i++;\n        }\n        while (i < arr.size() && max\
  \ >= k) {\n            if (arr.get(i) > max) {\n                result.add(max);\n\
  \                max -= 1;\n            } else {\n                result.add(arr.get(i));\n\
  \                i++;\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i\
  \ < len; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        for (int i = 0; i < len; i++) {\n           \
  \ if (max < arr.get(i) && result.size() < k) {\n                result.add(max);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            int max = 0;\n            for(int j = 0; j < k; j++) {\n      \
  \          if(arr.get(i) > arr.get(j)) {\n                    max = arr.get(j);\n\
  \                }\n            }\n            if(!result.contains(max)) {\n   \
  \             result.add(max);\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n        \
  \        pq.poll();\n            }\n        }\n        for(int i = 0; i < k; i++)\
  \ {\n            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i\
  \ < k; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        for (int i = 0; i < len; i++) {\n           \
  \ if (arr.get(i) == max) {\n                res.add(arr.get(i));\n            }\n\
  \        }\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ max = new ArrayList<Integer>();\n        int n = arr.size();\n        for(int\
  \ i = 0; i < n; i++) {\n            int max = Integer.MIN_VALUE;\n            for(int\
  \ j = 0; j < k; j++) {\n                if(arr.get(i) > max) {\n               \
  \     max = arr.get(i);\n                }\n            }\n            result.add(max);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = 0;\n        for (int i = 0; i <\
  \ k; i++) {\n            max = Math.max(max, arr.get(i));\n        }\n        for\
  \ (int i = 0; i < n; i++) {\n            if (arr.get(i) == max) {\n            \
  \    result.add(arr.get(i));\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        if (k > n) {\n            return result;\n\
  \        }\n        int m = arr.size() - k;\n        for (int i = 0; i < m; i++)\
  \ {\n            result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>(arr.size());\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            pq.add(arr.get(i));\n        }\n        for(int i = 0; i <\
  \ k; i++) {\n            if(pq.size() > 0) {\n                result.add(pq.poll());\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i\
  \ < len; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        if (k == max) {\n            return arr;\n  \
  \      }\n        if (k > max) {\n            return arr;\n        }\n        int\
  \ start = 0;\n        int end = arr.size() - 1;\n        while (start <= end) {\n\
  \            int mid = (start + end) / 2;\n            if (k == max) {\n       \
  \         result.add(max);\n                return result;\n            }\n    \
  \        if (k > max) {\n                end = mid - 1;\n            } else {\n\
  \                start = mid + 1;\n            }\n        }\n        return arr;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
  \ max = new ArrayList<>();\n        ArrayList<Integer> tmp = new ArrayList<>();\n\
  \        int n = arr.size();\n        int m = arr.size();\n        int count = 0;\n\
  \        int maxCount = 0;\n        int maxCountIndex = 0;\n        int maxCountValue\
  \ = 0;\n        int maxCountValueIndex = 0;\n        int maxCountValueValue = 0;\n\
  \        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue =\
  \ 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;\n        int maxCountValueValueValue\
  \ = 0;\n        int maxCountValueValueIndex = 0;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        int n = arr.size();\n        int m =\
  \ arr.size();\n        int max = Integer.MIN_VALUE;\n        int maxIndex = 0;\n\
  \        int i;\n        int j;\n        int tempMax;\n        int tempIndex;\n\
  \        int tempMaxIndex;\n        int tempMaxValue;\n        int tempMaxValueIndex;\n\
  \        int tempMaxValueValue;\n        int tempMaxValueValueIndex;\n        int\
  \ tempMaxValueValueValue;\n        int tempMaxValueValueValueIndex;\n        int\
  \ tempMaxValueValueValueValue;\n        int tempMaxValueValueValueIndexValue;\n\
  \        int tempMaxValueValueValueValueIndex;\n        int tempMaxValueValueValueValueValue;\n\
  \        int tempMaxValueValueValueValueIndexValue;\n        int tempMaxValueValueValueValueIndexValue;\n\
  \        int tempMaxValueValueValueValueIndexValue;\n        int tempMaxValueValueValueValueIndexValueIndex;\n\
  \        int tempMaxValueValueValueValueIndexValueValue;\n        int tempMaxValueValueValueIndexValueValueIndex;\n\
  \        int tempMaxValueValueValueIndexValueValueValueIndex;\n        int tempMaxValueValueValueIndexValueValueValueIndex;\n\
  \        int tempMaxValueValueIndexValueValueValueValueIndex;\n        int tempMaxValueValueIndexValueValueValueValueIndexValue;\n\
  \        int tempMaxValueValueIndexValueValueValueValueIndexValue;\n        int\
  \ tempMaxValueValueIndexValueValueValueIndexValueValue;\n        int tempMaxValueValueIndexValueValueValueIndexValueValue;\n\
  \        int tempMaxValueValueIndexValueValueValueIndexValueValue;\n        int\
  \ tempMaxValueValueIndexValueValueValueIndexValueValue;\n        int tempMaxValueValueIndexValueValueValueIndexValueValueIndex;\n\
  \        int tempMaxValueValueIndexValueValueValueIndexValueValueValueIndex;\n \
  \       int tempMaxValueValueIndexValueValueValueIndexValueValueValueIndex;\n  \
  \      int tempMaxValueValueIndexValueValueValueIndexValueValueValueIndexValue;\n\
  \        int tempMaxValueValueIndexValueValueValueIndexValueValueIndexValueValue;\n\
  \        int tempMaxValueValueIndexValueValueValueIndexValueValueIndexValueValue;\n\
  \        int tempMaxValueValueIndexValueValueIndexValueValueIndexValueValueIndex;\n\
  \        int tempMaxValueValueIndexValueValueIndexValueValueIndexValueValueIndex;\n\
  \        int tempMaxValueValueIndexValueValueIndexValueIndexValueValueIndexValue;\n\
  \        int tempMaxValueValueIndexValueValueIndexValueIndexValueValueIndexValue;\n\
  \        int tempMaxValueValueIndexValueValueIndexValueIndexValueIndexValueIndexValue;\n\
  \        int tempMaxValueValueIndexValueValueIndexValueIndexValueIndexValueIndexValueIndex;\n\
  \        int tempMaxValueValue"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (len < k) {\n            return result;\n\
  \        }\n        int maxIndex = len - k;\n        for (int i = 0; i < maxIndex;\
  \ i++) {\n            result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (len > k) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (len < k) {\n            return result;\n\
  \        }\n        int start = 0;\n        int end = len - 1;\n        while (start\
  \ < end) {\n            int mid = (start + end) / 2;\n            if (arr[mid] >\
  \ k) {\n                end = mid - 1;\n            } else {\n                start\
  \ = mid + 1;\n            }\n        }\n        Arrays.sort(arr, start, end);\n\
  \        ArrayList<Integer> tmp = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < k; i++) {\n            tmp.add(arr.get(i));\n        }\n        result.addAll(tmp);\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int i = 0;\n        while (i < arr.size()) {\n            if (max\
  \ < arr.get(i)) {\n                max = arr.get(i);\n            }\n          \
  \  i++;\n        }\n        if (max >= k) {\n            while (i < arr.size())\
  \ {\n                if (max < arr.get(i)) {\n                    max = arr.get(i);\n\
  \                }\n                i++;\n            }\n        }\n        int\
  \ j = 0;\n        while (j < k) {\n            if (max < arr.get(j)) {\n       \
  \         result.add(max);\n                max = 0;\n            }\n          \
  \  j++;\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        pq.add(arr.get(0));\n        for (int\
  \ i = 1; i < arr.size(); i++) {\n            if (pq.poll() < arr.get(i)) {\n   \
  \             pq.add(arr.get(i));\n            }\n        }\n        while (pq.size()\
  \ > k) {\n            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n        \
  \        pq.poll();\n            }\n        }\n        while(pq.size() > k) {\n\
  \            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ tmp = new ArrayList<Integer>();\n        for(int i = 0; i < arr.size(); i++) {\n\
  \            tmp.add(arr.get(i));\n        }\n        Collections.sort(tmp);\n \
  \       for(int i = 0; i < k; i++) {\n            result.add(tmp.get(i));\n    \
  \    }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int len = arr.size();\n        for(int i = 0; i < len; i++) {\n\
  \            if(arr.get(i) > max) {\n                max = arr.get(i);\n       \
  \     }\n        }\n        for(int i = 0; i < len; i++) {\n            if(arr.get(i)\
  \ == max) {\n                result.add(max);\n            }\n        }\n      \
  \  return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>(arr.size());\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            pq.add(arr.get(i));\n        }\n        for(int i = 0; i <\
  \ k; i++) {\n            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = arr.get(0);\n        for (int i\
  \ = 1; i < n; i++) {\n            if (arr.get(i) > max) {\n                max =\
  \ arr.get(i);\n            }\n        }\n        int count = 0;\n        for (int\
  \ i = 0; i < n; i++) {\n            if (arr.get(i) == max) {\n                result.add(max);\n\
  \                count++;\n            }\n        }\n        if (count > k) {\n\
  \            k = count;\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int size = arr.size();\n        int maxSize = size;\n        for(int i\
  \ = 1; i < size; i++) {\n            if(arr.get(i) > arr.get(i - 1)) {\n       \
  \         maxSize = i;\n            }\n        }\n        for(int i = 0; i < k;\
  \ i++) {\n            result.add(arr.get(maxSize));\n            maxSize--;\n  \
  \      }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        for(int i = 0; i < k; i++) {\n         \
  \   result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        for(int i = 0; i < k; i++) {\n         \
  \   res.add(arr.get(i));\n        }\n        for(int i = k; i < len; i++) {\n  \
  \          int max = 0;\n            for(int j = 0; j < k; j++) {\n            \
  \    if(arr.get(j) > arr.get(max)) {\n                    max = j;\n           \
  \     }\n            }\n            res.add(arr.get(max));\n        }\n        return\
  \ res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int size = arr.size();\n        int maxSize = size;\n        for(int i\
  \ = 0; i < k; i++) {\n            int maxIndex = size - 1;\n            int maxValue\
  \ = arr.get(maxIndex);\n            for(int j = size - 1; j > i; j--) {\n      \
  \          if(arr.get(j) > maxValue) {\n                    maxValue = arr.get(j);\n\
  \                    maxIndex = j;\n                }\n            }\n         \
  \   result.add(maxValue);\n            size = maxIndex;\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int max = arr.get(k);\n        for (int i = 0; i < k; i++) {\n        \
  \    if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n\
  \        }\n        result.add(max);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        for(int i = 0; i < k; i++) {\n         \
  \   result.add(arr.get(i));\n        }\n        for(int i = k; i < len; i++) {\n\
  \            int max = 0;\n            for(int j = 0; j < k; j++) {\n          \
  \      if(arr.get(j) > arr.get(max)) {\n                    max = j;\n         \
  \       }\n            }\n            result.add(arr.get(max));\n        }\n   \
  \     return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n   \
  \         int max = Integer.MIN_VALUE;\n            for(int j = 0; j < arr.size();\
  \ j++) {\n                if(arr.get(i) > arr.get(j)) {\n                    max\
  \ = arr.get(i);\n                }\n            }\n            if(max > result.size())\
  \ {\n                result.add(max);\n            }\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int max = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
  \ > max) {\n                max = arr.get(i);\n            }\n        }\n      \
  \  result.add(max);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int m = arr.size();\n        int max = arr.get(0);\n\
  \        for (int i = 1; i < k; i++) {\n            if (arr.get(i) > max) {\n  \
  \              max = arr.get(i);\n            }\n        }\n        for (int i =\
  \ 0; i < n; i++) {\n            if (arr.get(i) == max) {\n                result.add(max);\n\
  \                m -= 1;\n                if (m == 0) {\n                    break;\n\
  \                }\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if (pq.size() > k) {\n       \
  \         pq.poll();\n            }\n        }\n        while (pq.size() > 0) {\n\
  \            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int n = arr.size();\n        for(int i = 0; i < k; i++) {\n           \
  \ result.add(arr.get(i));\n        }\n        for(int i = k; i < n; i++) {\n   \
  \         int max = 0;\n            for(int j = 0; j < k; j++) {\n             \
  \   if(arr.get(j) > max) {\n                    max = arr.get(j);\n            \
  \    }\n            }\n            result.add(max);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        for(int i = 0; i < k; i++) {\n     \
  \       temp.clear();\n            for(int j = 0; j < arr.size(); j++) {\n     \
  \           if(arr.get(j) < arr.get(i)) {\n                    temp.add(arr.get(j));\n\
  \                }\n            }\n            result.addAll(temp);\n        }\n\
  \        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        for (int i = 0; i < k; i++) {\n            res.add(arr.get(i));\n     \
  \   }\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i\
  \ < len; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        int count = 0;\n        for (int i = 0; i < len;\
  \ i++) {\n            if (arr.get(i) == max) {\n                count++;\n     \
  \       }\n        }\n        if (count > k) {\n            k = count;\n       \
  \ }\n        for (int i = 0; i < len; i++) {\n            if (arr.get(i) == max)\
  \ {\n                result.add(arr.get(i));\n            }\n        }\n       \
  \ return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
  \ max = new ArrayList<>();\n        ArrayList<Integer> min = new ArrayList<>();\n\
  \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > arr.get(i\
  \ + k)) {\n                max.add(arr.get(i));\n            } else {\n        \
  \        min.add(arr.get(i));\n            }\n        }\n        Collections.sort(max);\n\
  \        Collections.sort(min);\n        for(int i = 0; i < min.size(); i++) {\n\
  \            if(min.get(i) < max.get(i)) {\n                result.add(min.get(i));\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>(k);\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n        \
  \        pq.poll();\n            }\n        }\n        while(pq.size() > 0) {\n\
  \            result.add(pq.poll());\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        int max = Integer.MIN_VALUE;\n     \
  \   int maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n        \
  \    if (arr.get(i) > max) {\n                max = arr.get(i);\n              \
  \  maxIndex = i;\n            }\n        }\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (i == maxIndex) {\n                temp.add(arr.get(i));\n\
  \            } else {\n                temp.add(arr.get(i));\n            }\n  \
  \      }\n        if (k == temp.size()) {\n            result.addAll(temp);\n  \
  \      } else {\n            for (int i = 0; i < k; i++) {\n                result.add(temp.get(i));\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<>(arr.size());\n        for(int i : arr) {\n          \
  \  pq.offer(i);\n            if(pq.size() > k) {\n                pq.poll();\n \
  \           }\n        }\n        while(pq.size() > k) {\n            res.add(pq.poll());\n\
  \        }\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int max = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
  \ > max) {\n                max = arr.get(i);\n            }\n        }\n      \
  \  for (int i = 0; i < k; i++) {\n            if (arr.get(i) == max) {\n       \
  \         result.add(max);\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<Integer>();\n        for(int i = 0; i < k; i++) {\n     \
  \       temp.clear();\n            for(int j = 0; j < arr.size(); j++) {\n     \
  \           if(arr.get(j) > arr.get(i)) {\n                    temp.add(arr.get(j));\n\
  \                }\n            }\n            result.addAll(temp);\n        }\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>();\n        for(int i = 0; i < arr.size(); i++)\
  \ {\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n        \
  \        pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n     \
  \           pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n     \
  \           pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n     \
  \           pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n     \
  \           pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n     \
  \           pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n     \
  \           pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n     \
  \           pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr.get(i));\n            if(pq.size() > k) {\n     \
  \           pq.poll();\n            }\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(pq.size() > k) {\n                pq.poll();\n        \
  \    }\n            pq.add(arr"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int n =\
  \ arr.size();\n        Arrays.sort(arr);\n        int max = 0;\n        for (int\
  \ i = 0; i < k; i++) {\n            if (max < arr.get(i)) {\n                max\
  \ = arr.get(i);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n\
  \            if (max < arr.get(i)) {\n                result.add(arr.get(i));\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>(arr.size());\n        arr.stream().sorted().forEach(pq::offer);\n\
  \        while (pq.size() > k) {\n            Integer max = pq.poll();\n       \
  \     result.add(max);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ max = new ArrayList<Integer>();\n        ArrayList<Integer> tmp = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < arr.size(); i++) {\n            tmp.add(arr.get(i));\n\
  \        }\n        Collections.sort(tmp);\n        for(int i = 0; i < k; i++) {\n\
  \            max.add(tmp.get(i));\n        }\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            if(tmp.get(i) == max.get(i)) {\n                result.add(arr.get(i));\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int m = arr.size();\n        int max = Integer.MIN_VALUE;\n\
  \        int maxIndex = 0;\n        for (int i = 0; i < n; i++) {\n            if\
  \ (max < arr[i]) {\n                max = arr[i];\n                maxIndex = i;\n\
  \            }\n        }\n        for (int i = maxIndex; i < n; i++) {\n      \
  \      if (arr[i] > max) {\n                max = arr[i];\n                maxIndex\
  \ = i;\n            }\n        }\n        for (int i = maxIndex; i < k; i++) {\n\
  \            result.add(max);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int n = arr.size();\n        int max = 0;\n        for (int i = 0; i <\
  \ k; i++) {\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
  \            }\n        }\n        for (int i = 0; i < k; i++) {\n            if\
  \ (arr.get(i) == max) {\n                result.add(max);\n            }\n     \
  \   }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
  \ temp = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n   \
  \         int max = 0;\n            for(int j = 0; j < arr.size(); j++) {\n    \
  \            if(arr.get(i) < arr.get(j)) {\n                    max = arr.get(i);\n\
  \                } else {\n                    max = arr.get(j);\n             \
  \   }\n            }\n            if(max > temp.size()) {\n                temp.add(max);\n\
  \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n    \
  \        if(temp.get(i) > result.size()) {\n                result.add(temp.get(i));\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        int len = arr.size();\n        if (k > len) {\n            k = len;\n \
  \       }\n        for (int i = 0; i < k; i++) {\n            res.add(arr.get(i));\n\
  \        }\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n\
  \        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(arr);\n\
  \        int len = arr.size();\n        for(int i = 0; i < k; i++) {\n         \
  \   result.add(arr.get(i));\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<>(arr.size());\n        arr.stream().sorted().forEach(i\
  \ -> pq.offer(i));\n        while (pq.size() > k) {\n            int max = pq.poll();\n\
  \            result.add(max);\n            pq.offer(max);\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
  \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n  \
  \      }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
  \ pq = new PriorityQueue<Integer>(arr.size());\n        for(int i = 0; i < arr.size();\
  \ i++) {\n            pq.add(arr.get(i));\n        }\n        for(int i = 0; i <\
  \ k; i++) {\n            if(pq.size() > 0) {\n                result.add(pq.poll());\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        Collections.sort(arr);\n\
  \        int max = 0;\n        for (int i = 0; i < k; i++) {\n            if (max\
  \ < arr.get(i)) {\n                max = arr.get(i);\n            }\n        }\n\
  \        result.add(max);\n        return result;"
language: java
name: HumanEval_120_maximum
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array arr of integers and a positive integer k,\
  \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
  \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    // 1.\
  \ The length of the array will be in the range of [1, 1000].\n    // 2. The elements\
  \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
  \    public static ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
  \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
  \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123, (int)20,\
  \ (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
  \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
  \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
  \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
  \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n    assert(maximum((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5, (int)-7))), (1)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)-4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n\
  \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
  \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n  \
  \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
  \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
  \    }\n\n}\n"
