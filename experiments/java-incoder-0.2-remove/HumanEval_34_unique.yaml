name: HumanEval_34_unique
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return sorted unique elements in a list\n    public static\
  \ ArrayList<Integer> unique(ArrayList<Integer> l) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(unique((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)3, (int)5, (int)2, (int)3, (int)3, (int)9, (int)0, (int)123)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)2, (int)3, (int)5, (int)9, (int)123)))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Integer> result = new ArrayList<Integer>();\n   \
    \     Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : l) {\n\
    \            if(!set.contains(i)) {\n                result.add(i);\n        \
    \        set.add(i);\n            }\n        }\n        return result;", "   \
    \     ArrayList<Integer> u = new ArrayList<>();\n        for(Integer i : l) {\n\
    \            if(!u.contains(i)) {\n                u.add(i);\n            }\n\
    \        }\n        return u;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        HashSet<Integer> hs = new HashSet<Integer>();\n        for(Integer i\
    \ : l) {\n            if(!hs.add(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : l) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for (Integer i : l) {\n            if\
    \ (!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(Integer i : l) {\n            if(!result.contains(i)) {\n        \
    \        result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>(l);\n        for(Integer i : set) {\n           \
    \ result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for(Integer i : l) {\n            if(!set.contains(i)) {\n           \
    \     result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        l.stream().distinct().forEach(i -> result.add(i));\n        return result;",
  "        ArrayList<Integer> u = new ArrayList<>();\n        for(Integer i : l)\n\
    \            if(!u.contains(i))\n                u.add(i);\n        return u;",
  "        ArrayList<Integer> u = new ArrayList<Integer>();\n        for(int i : l)\
    \ {\n            if(!u.contains(i)) {\n                u.add(i);\n           \
    \ }\n        }\n        return u;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!result.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().sorted().forEach(result\
    \ -> result.add(l.get(result.size()-1)));\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> u = new ArrayList<>();\n        for(int\
    \ i : l)\n            if(!u.contains(i))\n                u.add(i);\n        return\
    \ u;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  l.stream().distinct().forEach(result -> result.add(l));\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().forEach(result\
    \ -> result.add(l.remove(l)));\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        l.stream().distinct().forEach(x -> result.add(x));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        l.stream().distinct().forEach(e -> result.add(e));\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        for(Integer i :\
    \ l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            if (set.contains(i)) {\n         \
    \       continue;\n            }\n            result.add(i);\n            set.add(i);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().forEach(e\
    \ -> result.add(e));\n        return result;", "        ArrayList<Integer> u =\
    \ new ArrayList<Integer>();\n        for(Integer i : l) {\n            if(!u.contains(i))\
    \ {\n                u.add(i);\n            }\n        }\n        return u;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        for(Integer i :\
    \ l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        l.sort(null);\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            if(!result.contains(l.get(i))) {\n         \
    \       result.add(l.get(i));\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        l.stream().distinct().sorted().forEach(result\
    \ -> result.add(l.get(result.size()-1)));\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : l) {\n            if(!set.contains(i)) {\n          \
    \      result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n\
    \            if (!set.contains(i)) {\n                result.add(i);\n       \
    \         set.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            if (!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!result.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>(l);\n        for(Integer i : set) {\n           \
    \ result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>(l);\n\
    \        for(Integer i : set) {\n            result.add(i);\n        }\n     \
    \   return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!u.contains(i)) {\n            \
    \    u.add(i);\n            }\n        }\n        return u;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n      \
    \  for(int i = 0; i < l.size(); i++) {\n            if(!u.contains(l.get(i)))\
    \ {\n                u.add(l.get(i));\n            }\n        }\n        return\
    \ u;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  Set<Integer> set = new HashSet<Integer>(l);\n        for(Integer i : set) {\n\
    \            result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        l.sort(null);\n        for(Integer i :\
    \ l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        l.stream().distinct().forEach(x -> result.add(x));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : l)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> u = new ArrayList<Integer>();\n        for(int i :\
    \ l)\n            if(!u.contains(i))\n                u.add(i);\n        return\
    \ u;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  for(Integer i : l) {\n            if(!result.contains(i)) {\n             \
    \   result.add(i);\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        for(Integer i : l)\
    \ {\n            if(!result.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(Integer i : l) {\n            if(!result.contains(i)) {\n        \
    \        result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>(l);\n\
    \        for(Integer i : set) {\n            result.add(i);\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        l.stream().distinct().forEach(result -> result.add(l.remove(l)));\n \
    \       return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(int i : l) {\n            if(!u.contains(i)) {\n                u.add(i);\n\
    \            }\n        }\n        return u;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            if (!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n\
    \            if (!set.contains(i)) {\n                result.add(i);\n       \
    \         set.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>(l);\n\
    \        for(Integer i : set) {\n            result.add(i);\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(Integer i : l) {\n            if(!result.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> u = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!u.contains(i)) {\n                u.add(i);\n    \
    \        }\n        }\n        return u;", "        ArrayList<Integer> u = new\
    \ ArrayList<Integer>();\n        for(Integer i : l)\n            if(!u.contains(i))\n\
    \                u.add(i);\n        return u;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        l.stream().distinct().forEach(result ->\
    \ result.add(l.remove(l)));\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            if (!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> u = new ArrayList<>();\n\
    \        for(Integer i : l)\n            if(!u.contains(i))\n                u.add(i);\n\
    \        return u;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(int i : l) {\n            if(!u.contains(i)) {\n                u.add(i);\n\
    \            }\n        }\n        return u;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        for(int i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(int i : l) {\n            if(!result.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int i\
    \ : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for(Integer i : l) {\n            if(!set.contains(i)) {\n           \
    \     result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!u.contains(i)) {\n            \
    \    u.add(i);\n            }\n        }\n        return u;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for(Integer i : l) {\n            if(!set.contains(i)) {\n           \
    \     result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(Integer i : l) {\n            if(!result.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : l) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().forEach(e\
    \ -> result.add(e));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : l)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(Integer i : l) {\n         \
    \   if(!result.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> u = new ArrayList<>();\n\
    \        for(Integer i : l) {\n            if(!u.contains(i)) {\n            \
    \    u.add(i);\n            }\n        }\n        return u;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(Integer i : l) {\n         \
    \   if(!result.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : l) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        for(int i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(Integer i : l) {\n            if(!result.contains(i)) {\n        \
    \        result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer>\
    \ hs = new HashSet<Integer>();\n        for (Integer i : l) {\n            if\
    \ (!hs.add(i)) {\n                result.add(i);\n            }\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        l.stream().distinct().sorted().forEach(result -> result.add(l.get(l.indexOf(l)))\
    \ );\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : l) {\n \
    \           if(!set.contains(i)) {\n                result.add(i);\n         \
    \       set.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        for(Integer i : l)\
    \ {\n            if(!result.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        l.stream().distinct().forEach(result ->\
    \ result.add(l));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n      \
    \  for(int i : l) {\n            if(!u.contains(i)) {\n                u.add(i);\n\
    \            }\n        }\n        return u;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        l.stream().distinct().forEach(e -> result.add(e));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i :\
    \ l) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l)\
    \ {\n            if (!set.contains(i)) {\n                result.add(i);\n   \
    \             set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : l) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!u.contains(i)) {\n            \
    \    u.add(i);\n            }\n        }\n        return u;", "        ArrayList<Integer>\
    \ u = new ArrayList<Integer>();\n        for(Integer i : l) {\n            if(!u.contains(i))\
    \ {\n                u.add(i);\n            }\n        }\n        return u;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        l.stream().distinct().sorted().forEach(result::add);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for(Integer i : l) {\n \
    \           if(!set.contains(i)) {\n                result.add(i);\n         \
    \       set.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().sorted().forEach(result\
    \ -> result.add(l.remove(l)));\n        return result;", "        ArrayList<Integer>\
    \ u = new ArrayList<Integer>();\n        for(Integer i : l) {\n            if(!u.contains(i))\
    \ {\n                u.add(i);\n            }\n        }\n        return u;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : l) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(Integer\
    \ i : l) {\n            if(!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : l) {\n            if (!set.contains(i)) {\n         \
    \       result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : l)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            if(!result.contains(l.get(i))) {\n\
    \                result.add(l.get(i));\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l)\
    \ {\n            if (!set.contains(i)) {\n                result.add(i);\n   \
    \             set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for(Integer i : l) {\n            if(!set.contains(i)) {\n           \
    \     result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>(l);\n        for(Integer i :\
    \ set) {\n            result.add(i);\n        }\n        return result;", "  \
    \      ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer>\
    \ hs = new HashSet<Integer>();\n        for(Integer i : l) {\n            if(!hs.add(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n      \
    \  for(Integer i : l) {\n            if(!u.contains(i)) {\n                u.add(i);\n\
    \            }\n        }\n        return u;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            if (!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n\
    \            if (!set.contains(i)) {\n                result.add(i);\n       \
    \         set.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Integer> u = new ArrayList<Integer>();\n        for(int i : l)\
    \ {\n            if(!u.contains(i)) {\n                u.add(i);\n           \
    \ }\n        }\n        return u;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : l)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : l) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(int i : l)\n            if(!u.contains(i))\n                u.add(i);\n\
    \        return u;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!result.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>(l);\n        for(Integer i : set) {\n           \
    \ result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : l) {\n            if(!set.contains(i)) {\n          \
    \      result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : l)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> u = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l.size(); i++) {\n            if(!u.contains(l.get(i))) {\n         \
    \       u.add(l.get(i));\n            }\n        }\n        return u;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        for(Integer i : l)\
    \ {\n            if(!result.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : l) {\n            if(!set.contains(i)) {\n          \
    \      result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        l.stream().distinct().forEach(result -> result.add(l));\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(Integer i : l) {\n            if(!result.contains(i)) {\n        \
    \        result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        l.stream().distinct().forEach(result -> result.add(l));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(Integer i : l) {\n            if(!result.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().forEach(x\
    \ -> result.add(x));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : l) {\n            if(!set.contains(i)) {\n          \
    \      result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(Integer i : l) {\n            if(!result.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : l) {\n            if(!set.contains(i)) {\n          \
    \      result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i :\
    \ l) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : l) {\n            if(!set.contains(i)) {\n          \
    \      result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(int i : l) {\n            if(!u.contains(i)) {\n                u.add(i);\n\
    \            }\n        }\n        return u;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            if (!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        l.sort(null);\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : l)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().forEach(e\
    \ -> result.add(e));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            if (!set.contains(i)) {\n        \
    \        result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!u.contains(i)) {\n            \
    \    u.add(i);\n            }\n        }\n        return u;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Set<Integer> set = new HashSet<Integer>();\n        for(Integer i : l)\
    \ {\n            if(!set.contains(i)) {\n                result.add(i);\n    \
    \            set.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> u = new ArrayList<>();\n\
    \        for(Integer i : l) {\n            if(!u.contains(i)) {\n            \
    \    u.add(i);\n            }\n        }\n        return u;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : l) {\n            if (!set.contains(i)) {\n         \
    \       result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        l.stream().distinct().forEach(result -> result.add(l));\n        return\
    \ result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n      \
    \  for(Integer i : l) {\n            if(!u.contains(i)) {\n                u.add(i);\n\
    \            }\n        }\n        return u;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>(l);\n\
    \        for(Integer i : set) {\n            result.add(i);\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>(l);\n        for(Integer i :\
    \ set) {\n            result.add(i);\n        }\n        return result;", "  \
    \      ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().forEach(result\
    \ -> result.add(l.remove(l)));\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(int i : l) {\n            if(!result.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Integer> u = new ArrayList<Integer>();\n        for(int i : l)\n\
    \            if(!u.contains(i))\n                u.add(i);\n        return u;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().sorted().forEach(result\
    \ -> result.add(l));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for\
    \ (Integer i : l) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> u = new ArrayList<Integer>();\n        for(Integer i\
    \ : l) {\n            if(!u.contains(i)) {\n                u.add(i);\n      \
    \      }\n        }\n        return u;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l)\
    \ {\n            if (!set.contains(i)) {\n                result.add(i);\n   \
    \             set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>(l);\n        for(Integer i : set) {\n           \
    \ result.add(i);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n \
    \       for (Integer i : l) {\n            if (!set.contains(i)) {\n         \
    \       result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!u.contains(i)) {\n            \
    \    u.add(i);\n            }\n        }\n        return u;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        l.stream().distinct().forEach(result ->\
    \ result.add(l));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        l.stream().distinct().sorted().forEach(result\
    \ -> result.add(l.get(result.size() - 1)));\n        return result;", "      \
    \  ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set =\
    \ new HashSet<>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> u = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!u.contains(i)) {\n            \
    \    u.add(i);\n            }\n        }\n        return u;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(Integer i : l) {\n         \
    \   if(!result.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        for(int\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ u = new ArrayList<Integer>();\n        for(Integer i : l) {\n            if(!u.contains(i))\
    \ {\n                u.add(i);\n            }\n        }\n        return u;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for (Integer i : l) {\n            if\
    \ (!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set = new HashSet<>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        for(Integer i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set = new HashSet<>();\n        for(Integer i : l) {\n            if(!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : l) {\n            if(!set.contains(i)) {\n          \
    \      result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i :\
    \ l) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set\
    \ = new HashSet<>();\n        for (Integer i : l) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Integer> result =\
    \ new ArrayList<>();\n        l.stream().distinct().sorted().forEach(result ->\
    \ result.add(l.remove(l)));\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(Integer i : l) {\n            if(!set.contains(i)) {\n          \
    \      result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i :\
    \ l) {\n            if (!set.contains(i)) {\n                result.add(i);\n\
    \                set.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        for(Integer i :\
    \ l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(Integer i : l) {\n         \
    \   if(!result.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>(l);\n\
    \        for(Integer i : set) {\n            result.add(i);\n        }\n     \
    \   return result;", "        ArrayList<Integer> u = new ArrayList<>();\n    \
    \    for(Integer i : l)\n            if(!u.contains(i))\n                u.add(i);\n\
    \        return u;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(Integer i : l) {\n            if(!result.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
    \ i : l) {\n            if(!result.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i : l) {\n            if(!result.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        l.stream().distinct().forEach(e\
    \ -> result.add(e));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        l.stream().distinct().forEach(result -> result.add(l));\n\
    \        return result;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
