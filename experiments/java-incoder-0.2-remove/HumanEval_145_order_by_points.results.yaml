language: java
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            int index = map.get(sum);\n            if(index ==\
    \ -1) {\n                index = result.size();\n                result.add(nums.get(i));\n\
    \                map.put(sum, index);\n            } else {\n                result.add(nums.get(index));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpuzw3jriw.java:22)\n\tat Problem.main(tmpuzw3jriw.java:34)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            int sum = 0;\n            while\
    \ (i != 0) {\n                sum += i % 10;\n                i /= 10;\n     \
    \       }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n\
    \        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n        \
    \    Integer key = entry.getKey();\n            Integer value = entry.getValue();\n\
    \            while (value > 1) {\n                result.add(key);\n         \
    \       value /= 10;\n            }\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxq_rc1o.java:36)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> sorted = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n    \
    \        int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n  \
    \              sum += nums.get(j);\n                if(sum > i) {\n          \
    \          sorted.add(nums.get(j));\n                    break;\n            \
    \    }\n            }\n            result.add(sorted);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9efe3bw_.java:26: error: incompatible types: ArrayList<Integer>\
    \ cannot be converted to Integer\n            result.add(sorted);\n          \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            int sum = 0;\n            while\
    \ (i != 0) {\n                sum += i % 10;\n                i /= 10;\n     \
    \       }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n\
    \        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n        \
    \    Integer count = entry.getValue();\n            Integer index = entry.getKey();\n\
    \            for (int i = 0; i < count; i++) {\n                result.add(index);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvb5oo6f3.java:35)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if(sum == i) {\n\
    \                    result.add(j);\n                }\n            }\n      \
    \  }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphucuwkkl.java:28)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl36mcdh5.java:32)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = nums.get(i).intValue();\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfat71nn9.java:28)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            int sum = 0;\n            for (int\
    \ j = 0; j < index; j++) {\n                sum += nums.get(j);\n            }\n\
    \            result.add(sum);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmpli39ylu8.java:22)\n\tat Problem.main(tmpli39ylu8.java:29)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int digit = nums.get(i) % 10;\n            if (map.containsKey(digit))\
    \ {\n                map.put(digit, map.get(digit) + 1);\n            } else {\n\
    \                map.put(digit, 1);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int count = entry.getValue();\n\
    \            int index = entry.getKey();\n            while (count > 0) {\n  \
    \              result.add(index);\n                count--;\n                index++;\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_5jsxiw.java:37)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = nums.get(i);\n            int index = map.get(sum);\n \
    \           if(index == null) {\n                map.put(sum, i);\n          \
    \      result.add(sum);\n            } else {\n                Collections.swap(result,\
    \ index, i);\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgqs5drjc.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(index == null) {\n                     ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011348
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (Integer num : nums) {\n         \
    \   int sum = 0;\n            while (num != 0) {\n                sum += num %\
    \ 10;\n                num /= 10;\n            }\n            map.put(sum, map.getOrDefault(sum,\
    \ 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int index = entry.getValue();\n            int sum = 0;\n   \
    \         while (index != 0) {\n                sum += index % 10;\n         \
    \       index /= 10;\n            }\n            int index = entry.getKey();\n\
    \            int sum = 0;\n            while (index != 0) {\n                sum\
    \ += index % 10;\n                index /= 10;\n            }\n            if\
    \ (sum == entry.getKey()) {\n                result.add(entry.getKey());\n   \
    \         }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3202gs4c.java:32: error: variable index is already defined in method\
    \ orderByPoints(ArrayList<Integer>)\n            int index = entry.getKey();\n\
    \                ^\n/tmp/tmp3202gs4c.java:33: error: variable sum is already defined\
    \ in method orderByPoints(ArrayList<Integer>)\n            int sum = 0;\n    \
    \            ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011348
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for (int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            if (map.containsKey(sum))\
    \ {\n                map.put(sum, map.get(sum) + i);\n            } else {\n \
    \               map.put(sum, i);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1d23wy9.java:34)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            int sum = 0;\n            while\
    \ (i > 0) {\n                sum += i % 10;\n                i /= 10;\n      \
    \      }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n\
    \        map.entrySet().stream().sorted(Map.Entry.<Integer, Integer>comparingByValue().reversed()).forEach(e\
    \ -> result.add(e.getKey()));\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfa5efzc.java:29)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int index = map.get(digit);\n            if (index == null)\
    \ {\n                index = result.size();\n                map.put(digit, index);\n\
    \                result.add(digit);\n            } else {\n                result.add(index);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpapip2h01.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (index == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer num : nums) {\n            int digitSum = num % 10;\n  \
    \          int index = map.get(digitSum);\n            if (index == null) {\n\
    \                index = result.size();\n                map.put(digitSum, index);\n\
    \                result.add(num);\n            } else {\n                result.add(index,\
    \ num);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbf91v8tx.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (index == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int index = result.indexOf(entry.getValue());\n\
    \            if (index == -1) {\n                result.add(entry.getValue());\n\
    \            } else {\n                Collections.swap(result, index, result.indexOf(entry.getValue()));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpebtp814o.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011348
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = 0;\n            }\n            sum += nums.get(i);\n  \
    \          map.put(digit, sum);\n        }\n        Set<Integer> keySet = map.keySet();\n\
    \        List<Integer> list = new ArrayList<>(keySet);\n        Collections.sort(list);\n\
    \        for (int i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplugynauj.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj9vy5hrv.java:30)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n\
    \            if(!map.containsKey(sum)) {\n                map.put(sum, i);\n \
    \               result.add(nums.get(i));\n            }\n        }\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n\
    \            int index = map.get(sum);\n            Collections.swap(result, index,\
    \ i);\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpio6mfbjr.java:32)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Your\
    \ code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpqgi0jl67.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            map.put(sum, i);\n        }\n        Collections.sort(nums,\
    \ (a, b) -> map.get(b) - map.get(a));\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            int sum = nums.get(i) % 10;\n            int index = map.get(sum);\n\
    \            result.add(index, nums.get(i));\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.lambda$orderByPoints$0(tmpjv69gz91.java:21)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1307)\n\
    \tat java.base/java.util.ArrayList.sort(ArrayList.java:1721)\n\tat java.base/java.util.Collections.sort(Collections.java:179)\n\
    \tat Problem.orderByPoints(tmpjv69gz91.java:21)\n\tat Problem.main(tmpjv69gz91.java:30)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            if (map.containsKey(sum)) {\n                map.put(sum,\
    \ map.get(sum) + i);\n            } else {\n                map.put(sum, i);\n\
    \            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int index = entry.getValue();\n            int sum = entry.getKey();\n\
    \            while (index > 0) {\n                result.add(sum * 10 + index--);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfkcjqlyd.java:35)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            result.add(nums.get(index));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -12 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmpkb1axfz0.java:20)\n\tat Problem.main(tmpkb1axfz0.java:25)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            map.put(sum, i);\n        }\n        Set<Integer> keySet\
    \ = map.keySet();\n        Collections.sort(keySet);\n        for (int i = 0;\
    \ i < keySet.size(); i++) {\n            result.add(map.get(keySet.get(i)));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptam5iy9d.java:22: error: no suitable method found for sort(Set<Integer>)\n\
    \        Collections.sort(keySet);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Integer> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmptam5iy9d.java:24: error: cannot find symbol\n         \
    \   result.add(map.get(keySet.get(i)));\n                                    \
    \ ^\n  symbol:   method get(int)\n  location: variable keySet of type Set<Integer>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfs60j0x8.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = digit;\n              \
    \  map.put(digit, sum);\n            } else {\n                map.put(digit,\
    \ sum + digit);\n            }\n        }\n        List<Map.Entry<Integer, Integer>>\
    \ list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        list.forEach((entry) -> {\n            result.add(entry.getKey());\n\
    \        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mo0n1b6.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if (map.containsKey(sum)) {\n                map.put(sum, map.get(sum)\
    \ + 1);\n            } else {\n                map.put(sum, 1);\n            }\n\
    \        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            int count = entry.getValue();\n            int index = entry.getKey();\n\
    \            while (count > 0) {\n                result.add(index);\n       \
    \         count--;\n                index++;\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9du2tvz.java:37)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            if (map.containsKey(digit)) {\n                map.put(digit,\
    \ map.get(digit) + 1);\n            } else {\n                map.put(digit, 1);\n\
    \            }\n        }\n        map.forEach((k, v) -> {\n            if (v\
    \ > 1) {\n                result.add((k * 10) + v);\n            }\n        });\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf6j5fe7a.java:33)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer num : nums) {\n            int digit = num % 10;\n     \
    \       int sum = map.get(digit);\n            if (sum == null) {\n          \
    \      sum = digit;\n            } else {\n                sum += digit;\n   \
    \         }\n            map.put(digit, sum);\n        }\n        for (Integer\
    \ num : nums) {\n            int digit = num % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = digit;\n            } else\
    \ {\n                sum += digit;\n            }\n            if (sum > result.size())\
    \ {\n                result.add(num);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq90vtssg.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n/tmp/tmpq90vtssg.java:30: error: bad operand types\
    \ for binary operator '=='\n            if (sum == null) {\n                 \
    \   ^\n  first type:  int\n  second type: <null>\n2 errors\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if (map.containsKey(sum)) {\n                map.put(sum, map.get(sum)\
    \ + i);\n            } else {\n                map.put(sum, i);\n            }\n\
    \        }\n        map.forEach((sum, index) -> {\n            if (map.get(sum)\
    \ != null) {\n                result.add(map.get(sum));\n                map.remove(sum);\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.ConcurrentModificationException\n\
    \tat java.base/java.util.HashMap.forEach(HashMap.java:1424)\n\tat Problem.orderByPoints(tmpwu512ktu.java:25)\n\
    \tat Problem.main(tmpwu512ktu.java:34)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = new int[10];\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            sums[nums.get(i) - '0']++;\n\
    \        }\n        for (int i = 0; i < 10; i++) {\n            if (sums[i] >\
    \ 1) {\n                Collections.sort(result, new Comparator<Integer>() {\n\
    \                    public int compare(Integer o1, Integer o2) {\n          \
    \              return sums[i] - sums[o1 - '0'] - sums[o2 - '0'];\n           \
    \         }\n                });\n                break;\n            }\n    \
    \    }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpid894s2i.java:24: error: local variables referenced from an inner\
    \ class must be final or effectively final\n                        return sums[i]\
    \ - sums[o1 - '0'] - sums[o2 - '0'];\n                                    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums.length - 1 - i;\n            if (sums[i] == sums[index])\
    \ {\n                result.add(nums.get(index));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_r_rfhx2.java:27)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n                if(map.containsKey(sum))\
    \ {\n                    int index = map.get(sum);\n                    if(i !=\
    \ index) {\n                        result.add(i, index);\n                  \
    \      map.put(sum, i);\n                    }\n                }\n          \
    \  }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7evqke7.java:33)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl36mcdh5.java:32)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // TODO:\
    \ Write your code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpkrdz121a.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if (map.containsKey(sum)) {\n                    int index =\
    \ map.get(sum);\n                    result.add(index, nums.get(j));\n       \
    \             map.put(sum, j);\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvlxlqclf.java:32)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqcr9ubck.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.getOrDefault(digit, 0);\n            map.put(digit,\
    \ sum + nums.get(i));\n        }\n        map.entrySet().stream().sorted(Map.Entry.<Integer,\
    \ Integer>comparingByValue()).forEach(e -> result.add(e.getKey()));\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuc0rkdsp.java:26)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if(sum == null) {\n                sum = 0;\n            }\n    \
    \        sum += nums.get(i);\n            map.put(digit, sum);\n        }\n  \
    \      for(int i = 0; i < map.size(); i++) {\n            int digit = map.get(i);\n\
    \            int index = i;\n            while(index > 0 && map.get(index - 1)\
    \ == digit) {\n                index--;\n            }\n            result.add(index);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspz2bl0l.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(sum == null) {\n                   ^\n  first type:  int\n\
    \  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            result.add(entry.getValue());\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmyf_fgdo.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl36mcdh5.java:32)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int index = map.get(digit);\n            if (index == null)\
    \ {\n                index = result.size();\n                result.add(digit);\n\
    \                map.put(digit, index);\n            } else {\n              \
    \  result.add(index, digit);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88gy2pev.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (index == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = new int[10];\n    \
    \    for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n     \
    \       for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            sums[sum % 10] += 1;\n        }\n        for (int\
    \ i = 0; i < 10; i++) {\n            if (sums[i] != 0) {\n                result.add(sums[i]);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -2 out of bounds for length 10\n\tat Problem.orderByPoints(tmpxc9pbkm6.java:22)\n\
    \tat Problem.main(tmpxc9pbkm6.java:33)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        List<Integer>\
    \ list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).map(Map.Entry::getKey).collect(Collectors.toList());\n\
    \        for (int i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpslbpnthy.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = new int[10];\n    \
    \    for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n\
    \            int sum = 0;\n            for (int j = 0; j < num.length(); j++)\
    \ {\n                sum += num.charAt(j) - '0';\n            }\n            sums[sum\
    \ % 10] += num;\n        }\n        for (int i = 0; i < 10; i++) {\n         \
    \   if (sums[i] != 0) {\n                result.add(sums[i]);\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxy6g3m0.java:20: error: int cannot be dereferenced\n         \
    \   for (int j = 0; j < num.length(); j++) {\n                               \
    \    ^\n/tmp/tmpfxy6g3m0.java:21: error: int cannot be dereferenced\n        \
    \        sum += num.charAt(j) - '0';\n                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> sorted = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n    \
    \        int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n  \
    \              sum += nums.get(j);\n                if(sum == nums.get(i)) {\n\
    \                    sorted.add(j);\n                }\n            }\n      \
    \  }\n        for(int i = 0; i < sorted.size(); i++) {\n            result.add(sorted.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyv0ngzoi.java:32)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            if (map.containsKey(digit)) {\n                map.put(digit,\
    \ map.get(digit) + 1);\n            } else {\n                map.put(digit, 1);\n\
    \            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int count = entry.getValue();\n            int index = entry.getKey();\n\
    \            while (count > 0) {\n                result.add(index);\n       \
    \         count--;\n                index++;\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8kw7_9k2.java:37)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Your\
    \ code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpqgi0jl67.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqcr9ubck.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Integer key : map.keySet()) {\n            result.add(key);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp27x5mx3.java:30)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n                if(map.containsKey(sum))\
    \ {\n                    int index = map.get(sum);\n                    if(i !=\
    \ index) {\n                        result.add(i, index);\n                  \
    \      map.put(sum, i);\n                    }\n                    break;\n \
    \               }\n                map.put(sum, i);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 1, Size: 0\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:756)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:481)\n\tat Problem.orderByPoints(tmpb8yqmb6h.java:24)\n\
    \tat Problem.main(tmpb8yqmb6h.java:35)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int digit = i % 10;\n            int\
    \ sum = map.get(digit);\n            map.put(digit, sum + 1);\n        }\n   \
    \     for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            int\
    \ index = nums.indexOf(entry.getKey());\n            result.add(index);\n    \
    \    }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmp8lcw499z.java:19)\n\tat Problem.main(tmp8lcw499z.java:29)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(int i = 0;\
    \ i < nums.size(); i++){\n            int sum = 0;\n            for(int j = 0;\
    \ j < nums.size(); j++){\n                sum += nums.get(j);\n            }\n\
    \            if(map.containsKey(sum)){\n                result.add(map.get(sum));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_xk3cysg.java:36)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if(!map.containsKey(sum)) {\n                map.put(sum, i);\n \
    \               result.add(sum);\n            }\n        }\n        for(int i\
    \ = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n         \
    \   int index = map.get(sum);\n            Collections.swap(nums, index, i);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzy8ki2to.java:32)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        ArrayList<Integer> temp = new ArrayList<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(sum == nums.get(i)) {\n                    temp.add(j);\n\
    \                }\n            }\n            result.add(temp.get(i));\n    \
    \        temp.remove(i);\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmp9aol2m_s.java:25)\n\tat Problem.main(tmp9aol2m_s.java:31)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<>();\n   \
    \     Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i <\
    \ nums.size(); i++){\n            int sum = 0;\n            for(int j = 0; j <\
    \ nums.size(); j++){\n                sum += nums.get(j);\n            }\n   \
    \         map.put(sum, i);\n        }\n        for(int i = 0; i < nums.size();\
    \ i++){\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++){\n                sum += nums.get(j);\n            }\n            if(map.containsKey(sum)){\n\
    \                result.add(map.get(sum));\n            }\n        }\n       \
    \ return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolff6g11.java:37)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digitSum = nums.get(i)\
    \ % 10;\n            int index = map.get(digitSum);\n            if (index ==\
    \ -1) {\n                index = result.size();\n                result.add(nums.get(i));\n\
    \                map.put(digitSum, index);\n            } else {\n           \
    \     result.add(nums.get(index));\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpg83e8lz7.java:19)\n\tat Problem.main(tmpg83e8lz7.java:31)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = nums.get(i).intValue();\n            Integer key = map.get(sum);\n\
    \            if(key == null) {\n                key = i;\n                map.put(sum,\
    \ i);\n            }\n            result.add(nums.get(key));\n        }\n    \
    \    return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplxw8e7rr.java:29)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl36mcdh5.java:32)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0jp7b6b.java:30)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if (map.containsKey(sum)) {\n                int index = map.get(sum);\n\
    \                result.add(index, nums.get(i));\n            } else {\n     \
    \           map.put(sum, i);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzvx5ikqz.java:29)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<>();\n   \
    \     for(int i=0;i<nums.size();i++){\n            int sum = 0;\n            for(int\
    \ j=0;j<nums.size();j++){\n                sum = sum + nums.get(j);\n        \
    \    }\n            int index = i;\n            while(sum != 0){\n           \
    \     if(sum % 10 == 0){\n                    result.add(nums.get(index));\n \
    \                   sum = 0;\n                }\n                sum = (sum -\
    \ nums.get(index)) % 10;\n                index++;\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmpcfuhnjnu.java:28)\n\tat Problem.main(tmpcfuhnjnu.java:35)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            while (index > 0) {\n         \
    \       result.add(nums.get(index--));\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 11 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmp_t6uopdk.java:21)\n\tat Problem.main(tmp_t6uopdk.java:27)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = 0;\n            }\n            sum += nums.get(i);\n  \
    \          map.put(digit, sum);\n        }\n        for (Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            int index = entry.getKey();\n       \
    \     int value = entry.getValue();\n            int sum = 0;\n            for\
    \ (int i = 0; i < index; i++) {\n                sum += nums.get(i);\n       \
    \     }\n            if (sum > value) {\n                result.add(index);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_lo2azn9.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(map.containsKey(sum))\
    \ {\n                    int index = map.get(sum);\n                    if(index\
    \ < i) {\n                        index = i;\n                    }\n        \
    \            result.add(index, nums.get(j));\n                    map.put(sum,\
    \ index + 1);\n                }\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqcfo_09.java:34)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            map.put(digit, sum\
    \ + nums.get(i));\n        }\n        for(Map.Entry<Integer, Integer> entry :\
    \ map.entrySet()) {\n            int sum = entry.getValue();\n            int\
    \ index = entry.getKey();\n            while(sum > 0) {\n                result.add(index);\n\
    \                sum -= 10;\n                index++;\n            }\n       \
    \ }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmprbp492zm.java:19)\n\tat Problem.main(tmprbp492zm.java:34)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int sum = 0;\n            while(i !=\
    \ 0) {\n                sum += i % 10;\n                i /= 10;\n           \
    \ }\n            map.put(sum, i);\n        }\n        for(int i : map.values())\
    \ {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcrxd9tmc.java:32)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.getOrDefault(digit, 0);\n            map.put(digit,\
    \ sum + 1);\n        }\n        map.entrySet().stream().sorted(Map.Entry.<Integer,\
    \ Integer>comparingByValue()).forEach(e -> result.add(e.getKey()));\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7iuqqa8z.java:26)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums.length - 1 - i;\n            if (sums[index] ==\
    \ sums[i]) {\n                result.add(nums.get(index));\n            }\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5b8skeon.java:27)\n"
  stdout: ''
  timestamp: 1660011353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(map.containsKey(sum))\
    \ {\n                    int index = map.get(sum);\n                    result.add(index,\
    \ nums.get(j));\n                    map.put(sum, j);\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwy821qry.java:32)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Your\
    \ code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpqgi0jl67.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl36mcdh5.java:32)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl36mcdh5.java:32)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        map.forEach((k,\
    \ v) -> result.add(k));\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp64ygadvx.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int sum = 0;\n            while(i !=\
    \ 0) {\n                sum += i % 10;\n                i /= 10;\n           \
    \ }\n            map.put(sum, i);\n        }\n        for(int i : map.keySet())\
    \ {\n            result.add(map.get(i));\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp782nuuo4.java:31)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           int digit = nums.get(i);\n            while (digit > 0) {\n      \
    \          sum += digit % 10;\n                digit /= 10;\n            }\n \
    \           if (map.containsKey(sum)) {\n                map.put(sum, map.get(sum)\
    \ + i);\n            } else {\n                map.put(sum, i);\n            }\n\
    \        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            result.add(entry.getValue());\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsiim1ly8.java:36)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> tmp = new ArrayList<Integer>();\n\
    \        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if (sum > 9) {\n                sum -=\
    \ 10;\n                tmp.add(sum);\n            } else {\n                tmp.add(sum);\n\
    \            }\n        }\n        Collections.sort(tmp);\n        for (int i\
    \ = 0; i < tmp.size(); i++) {\n            result.add(tmp.get(i));\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcgtna3o.java:34)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = 0;\n            }\n            sum += nums.get(i);\n  \
    \          map.put(digit, sum);\n        }\n        for (Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            int index = entry.getKey();\n       \
    \     int value = entry.getValue();\n            int sum = sumOfDigits(value);\n\
    \            while (sum > 0) {\n                result.add(index);\n         \
    \       sum -= 10;\n                index++;\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp648df8m3.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n/tmp/tmp648df8m3.java:29: error: cannot find symbol\n\
    \            int sum = sumOfDigits(value);\n                      ^\n  symbol:\
    \   method sumOfDigits(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // TODO:\
    \ write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphy_10i8y.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<>();\n   \
    \     for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n      \
    \      for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp647_twmd.java:30)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = nums.get(i);\n\
    \            int index = map.get(sum);\n            if(index == null){\n     \
    \           index = i;\n                map.put(sum, index);\n            }\n\
    \            result.add(nums.get(index));\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprm5nahzs.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(index == null){\n                     ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> numsSorted = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                numsSorted.add(nums.get(i));\n\
    \            }\n        }\n        return numsSorted;\n}\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpigwxvjbv.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = Arrays.binarySearch(sums, sums[i]);\n            if (index\
    \ >= 0) {\n                result.add(nums.get(index));\n            }\n     \
    \   }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpboqrs_nt.java:27)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if (map.containsKey(sum)) {\n                map.put(sum, map.get(sum)\
    \ + i);\n            } else {\n                map.put(sum, i);\n            }\n\
    \        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            int index = entry.getValue();\n            int sum = 0;\n       \
    \     while (index > 0) {\n                sum += nums.get(index--);\n       \
    \     }\n            result.add(sum);\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi59pe2ih.java:36)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        List<Map.Entry<Integer,\
    \ Integer>> list = map.entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toList());\n\
    \        list.forEach((entry) -> result.add(entry.getValue()));\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdvba2rb1.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if(sum == nums.get(i))\
    \ {\n                    result.add(j);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuemseyyj.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int digit = nums.get(i) % 10;\n            int sum = digit + map.get(digit);\n\
    \            map.put(digit, sum);\n        }\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int digit = nums.get(i) % 10;\n            int sum = digit\
    \ + map.get(digit);\n            if(!map.containsKey(sum)) {\n               \
    \ result.add(nums.get(i));\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpt_at_e31.java:19)\n\tat Problem.main(tmpt_at_e31.java:32)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            map.put(digit, sum + 1);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int index = nums.indexOf(entry.getKey());\n\
    \            int value = entry.getValue();\n            int sum = 0;\n       \
    \     for(int i = 0; i < value; i++) {\n                sum += nums.get(index++)\
    \ % 10;\n            }\n            result.add(sum);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpfti0_sla.java:19)\n\tat Problem.main(tmpfti0_sla.java:34)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ziglrxs.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        ArrayList<Integer> tmp = new ArrayList<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(sum == i) {\n                    tmp.add(j);\n           \
    \     }\n            }\n            Collections.sort(tmp);\n            for(int\
    \ j = 0; j < tmp.size(); j++) {\n                result.add(tmp.get(j));\n   \
    \         }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8vy45h0q.java:33)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    Collections.swap(nums, index, j);\n                    Collections.swap(result,\
    \ index, j);\n                    map.put(sum, j);\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vvsvp36.java:33)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            Integer sum = map.get(i);\n   \
    \         if (sum == null) {\n                sum = i;\n                map.put(i,\
    \ sum);\n            } else {\n                sum += i;\n                map.put(i,\
    \ sum);\n            }\n        }\n        for (Integer i : map.keySet()) {\n\
    \            Integer sum = map.get(i);\n            if (sum > 0) {\n         \
    \       result.add(i);\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcs75avp7.java:36)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<>();\n   \
    \     for(int i=0;i<nums.size();i++){\n            int sum = 0;\n            for(int\
    \ j=0;j<nums.size();j++){\n                sum += nums.get(j);\n            }\n\
    \            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3c7j56nc.java:30)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(map.containsKey(sum))\
    \ {\n                    int index = map.get(sum);\n                    if(i !=\
    \ index) {\n                        result.add(i, index);\n                  \
    \      map.put(sum, i);\n                    }\n                }\n          \
    \  }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuq34m774.java:33)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            int index = map.get(sum);\n            if(index == -1) {\n      \
    \          index = result.size();\n                result.add(sum);\n        \
    \        map.put(sum, index);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmp0smfsega.java:19)\n\tat Problem.main(tmp0smfsega.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0;\
    \ j < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            if(map.containsKey(sum)) {\n                result.add(map.get(sum));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5k6ji3wa.java:36)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if(sum == null) {\n                sum = digit;\n               \
    \ map.put(digit, sum);\n            } else {\n                map.put(digit, sum\
    \ + digit);\n            }\n        }\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            int index = i;\n            while(sum > 0) {\n                index--;\n\
    \                sum -= map.get(index);\n            }\n            result.add(index);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpss9wdhhh.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(sum == null) {\n                   ^\n  first type:  int\n\
    \  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqcr9ubck.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n            }\n            if(sum\
    \ == nums.get(i)) {\n                result.add(nums.get(i));\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30cy2j4c.java:28)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpph5uio7_.java:30)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if (map.containsKey(sum)) {\n                map.put(sum, map.get(sum)\
    \ + i);\n            } else {\n                map.put(sum, i);\n            }\n\
    \        }\n        Set<Integer> keys = map.keySet();\n        List<Integer> list\
    \ = new ArrayList<>(keys);\n        Collections.sort(list);\n        for (int\
    \ i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n     \
    \   }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82_hbvlq.java:34)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = nums.get(i);\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(sum);\n    \
    \        }\n        }\n        for(int i = 0; i < nums.size(); i++) {\n      \
    \      int sum = nums.get(i);\n            int index = map.get(sum);\n       \
    \     int temp = nums.get(index);\n            nums.set(index, nums.get(i));\n\
    \            nums.set(i, temp);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx6c0qozx.java:34)\n"
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer num : nums) {\n            int digit = num % 10;\n     \
    \       int sum = map.get(digit);\n            if (sum == null) {\n          \
    \      sum = digit;\n            } else {\n                sum += digit;\n   \
    \         }\n            map.put(digit, sum);\n        }\n        map.entrySet().stream().sorted(Map.Entry.<Integer,\
    \ Integer>comparingByValue()).forEach(e -> result.add(e.getKey()));\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphffosu_d.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpph5uio7_.java:30)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            if (map.containsKey(digit)) {\n                map.put(digit,\
    \ map.get(digit) + 1);\n            } else {\n                map.put(digit, 1);\n\
    \            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int count = entry.getValue();\n            int index = entry.getKey();\n\
    \            while (count > 0) {\n                result.add(index);\n       \
    \         count--;\n                index++;\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8kw7_9k2.java:37)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(map.containsKey(sum))\
    \ {\n                    int index = map.get(sum);\n                    if(index\
    \ != i) {\n                        result.add(index, nums.get(j));\n         \
    \               map.put(sum, j);\n                    }\n                }\n \
    \           }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmuwkx1d.java:33)\n"
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpph5uio7_.java:30)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n\
    \            if (map.containsKey(sum)) {\n                map.put(sum, map.get(sum)\
    \ + i);\n            } else {\n                map.put(sum, i);\n            }\n\
    \        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            int index = entry.getValue();\n            int value = entry.getKey();\n\
    \            result.add(value);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpix0yqti8.java:33)\n"
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            if (map.containsKey(sum)) {\n                map.put(sum,\
    \ map.get(sum) + 1);\n            } else {\n                map.put(sum, 1);\n\
    \            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int count = entry.getValue();\n            int index = entry.getKey();\n\
    \            while (count > 0) {\n                result.add(index);\n       \
    \         count--;\n                index++;\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbs545dod.java:37)\n"
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if(sum == null){\n\
    \                map.put(digit, i);\n                result.add(nums.get(i));\n\
    \            }\n            else{\n                int index = map.get(digit);\n\
    \                Collections.swap(result, index, i);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdja5yewi.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(sum == null){\n                   ^\n  first type:  int\n\
    \  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // TODO:\
    \ Write your code here\n        ArrayList<Integer> numsSorted = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                numsSorted.add(nums.get(i));\n\
    \            }\n        }\n        return numsSorted;\n}\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxqegky0.java:29)\n"
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int sum = 0;\n            while(i !=\
    \ 0) {\n                sum += i % 10;\n                i /= 10;\n           \
    \ }\n            map.put(sum, i);\n        }\n        for(int i : map.values())\
    \ {\n            result.add(i);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaopud8rx.java:31)\n"
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp96djmrmu.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if(sum == nums.get(i))\
    \ {\n                    result.add(j);\n                }\n            }\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfgbbvna.java:28)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if(sum == nums.get(i))\
    \ {\n                    result.add(j);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuemseyyj.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Integer sum : map.values()) {\n            result.add(sum);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5t0ji042.java:30)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                result.add(nums.get(i));\n                map.put(sum, i);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3r21f2mt.java:30)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(!map.containsKey(sum)) {\n                result.add(nums.get(i));\n\
    \                map.put(sum, i);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_4do6v9.java:30)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = nums.get(i);\n            Integer key = map.get(sum);\n\
    \            if (key == null) {\n                key = i;\n                map.put(sum,\
    \ key);\n            }\n            result.add(key);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5uwvd1oi.java:29)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int digit = nums.get(i) % 10;\n            int sum = digit +\
    \ map.get(digit);\n            map.put(digit, sum);\n        }\n        map.forEach((k,\
    \ v) -> result.add(k));\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpidcica7m.java:19)\n\tat Problem.main(tmpidcica7m.java:26)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = new int[10];\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for\
    \ (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n \
    \           }\n            sums[sum % 10] = sums[sum % 10] + 1;\n        }\n \
    \       for (int i = 0; i < 10; i++) {\n            if (sums[i] != 0) {\n    \
    \            result.add(sums[i]);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -2 out of bounds for length 10\n\tat Problem.orderByPoints(tmpcl3_m111.java:22)\n\
    \tat Problem.main(tmpcl3_m111.java:32)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            int index = map.get(sum);\n            if (index == -1) {\n     \
    \           index = result.size();\n                result.add(sum);\n       \
    \         map.put(sum, index);\n            } else {\n                result.add(index,\
    \ sum);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpbp0zhryn.java:19)\n\tat Problem.main(tmpbp0zhryn.java:31)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int digit = i % 10;\n            int\
    \ sum = map.getOrDefault(digit, 0) + digit;\n            map.put(digit, sum);\n\
    \        }\n        for(int i : map.keySet()) {\n            int sum = map.get(i);\n\
    \            int index = i;\n            while(sum > 0) {\n                sum\
    \ += nums.get(index--);\n            }\n            result.add(i);\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmp9fbcdr25.java:26)\n\tat Problem.main(tmp9fbcdr25.java:33)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        List<Map.Entry<Integer, Integer>> list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        for (Map.Entry<Integer, Integer> entry : list) {\n            result.add(entry.getKey());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp58pk3aws.java:27)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                result.add(nums.get(i));\n                map.put(sum, i);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3r21f2mt.java:30)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Your\
    \ code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpqgi0jl67.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int digit = i % 10;\n            int\
    \ sum = map.get(digit);\n            map.put(digit, sum == null ? i : sum + i);\n\
    \        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            int index = nums.indexOf(entry.getValue());\n            result.add(index);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6inf0_xc.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(digit, sum == null ? i : sum + i);\n             \
    \                  ^\n  first type:  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            result.add(entry.getValue());\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmyf_fgdo.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = 0;\n            }\n            sum += nums.get(i);\n  \
    \          map.put(digit, sum);\n        }\n        map.forEach((k, v) -> {\n\
    \            if (v > 0) {\n                result.add(k);\n            }\n   \
    \     });\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemo5t5mi.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            if (map.containsKey(sum)) {\n                map.put(sum,\
    \ map.get(sum) + 1);\n            } else {\n                map.put(sum, 1);\n\
    \            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int index = nums.indexOf(entry.getKey());\n            int count\
    \ = entry.getValue();\n            while (index >= 0) {\n                nums.remove(index);\n\
    \                index--;\n                count--;\n            }\n         \
    \   result.add(count);\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp536av1p7.java:38)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Integer key : map.keySet()) {\n            result.add(key);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu90jaq93.java:30)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if(sum == nums.get(i))\
    \ {\n                    result.add(j);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuemseyyj.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if(!map.containsKey(sum)) {\n                map.put(sum, i);\n \
    \               result.add(sum);\n            }\n        }\n        for(int i\
    \ = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n         \
    \   int index = map.get(sum);\n            Collections.swap(nums, index, i);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzy8ki2to.java:32)\n"
  stdout: ''
  timestamp: 1660011352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(int i = 0; i < nums.size(); i++) {\n           \
    \ int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n         \
    \       sum += nums.get(j);\n            }\n            if(map.containsKey(sum))\
    \ {\n                result.add(map.get(sum));\n            }\n        }\n   \
    \     return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp183w5cwp.java:36)\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           int digit = nums.get(i);\n            while (digit > 0) {\n      \
    \          sum += digit % 10;\n                digit /= 10;\n            }\n \
    \           map.put(sum, i);\n        }\n        for (Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            int index = entry.getValue();\n     \
    \       int value = entry.getKey();\n            int index = nums.get(index);\n\
    \            int value = nums.get(value);\n            result.add(value);\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw03k_hyq.java:29: error: variable index is already defined in method\
    \ orderByPoints(ArrayList<Integer>)\n            int index = nums.get(index);\n\
    \                ^\n/tmp/tmpw03k_hyq.java:30: error: variable value is already\
    \ defined in method orderByPoints(ArrayList<Integer>)\n            int value =\
    \ nums.get(value);\n                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n\
    \            if(!map.containsKey(sum)) {\n                map.put(sum, i);\n \
    \               result.add(nums.get(i));\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjkzllwtf.java:27)\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            int index = i;\n            while(sum > 0){\n    \
    \            sum += nums.get(index);\n                index++;\n            }\n\
    \            result.add(nums.get(index));\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpier014ux.java:32)\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i\
    \ = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int index\
    \ = i;\n            while (index >= 0) {\n                sum += nums.get(index);\n\
    \                index--;\n            }\n            if (sum != 0) {\n      \
    \          result.add(sum);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm3bstot9.java:16: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfs60j0x8.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            int index = map.get(sum);\n            if (index == -1) {\n     \
    \           index = result.size();\n                result.add(sum);\n       \
    \         map.put(sum, index);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpr5b2rm_y.java:19)\n\tat Problem.main(tmpr5b2rm_y.java:29)\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.getOrDefault(digit, 0);\n            map.put(digit,\
    \ sum + 1);\n        }\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       int digit = nums.get(i) % 10;\n            int sum = map.getOrDefault(digit,\
    \ 0);\n            if(sum > 0) {\n                result.add(nums.get(i));\n \
    \           }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6v7_nm50.java:32)\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            int index = map.get(sum);\n            if(index == null)\
    \ {\n                index = result.size();\n                map.put(sum, index);\n\
    \                result.add(nums.get(i));\n            } else {\n            \
    \    result.add(nums.get(index));\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsornm03l.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(index == null) {\n                     ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (Integer i : nums) {\n           \
    \ int digit = i % 10;\n            int sum = digit + map.getOrDefault(digit, 0);\n\
    \            map.put(digit, sum);\n        }\n        map.entrySet().stream().sorted(Map.Entry.<Integer,\
    \ Integer>comparingByValue()).forEach(e -> result.add(e.getKey()));\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8w9lxwg0.java:26)\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        Set<Integer>\
    \ keys = map.keySet();\n        List<Integer> list = keys.stream().sorted().collect(Collectors.toList());\n\
    \        for (int i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdqnqf89k.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp96djmrmu.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer num : nums) {\n            int digit = num % 10;\n     \
    \       int sum = map.get(digit);\n            if (sum == null) {\n          \
    \      sum = 0;\n            }\n            map.put(digit, sum + 1);\n       \
    \ }\n        for (Integer num : nums) {\n            int digit = num % 10;\n \
    \           int sum = map.get(digit);\n            if (sum > 0) {\n          \
    \      result.add(num);\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22c4gi3z.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            while (index != 0) {\n        \
    \        result.add(nums[index]);\n                index--;\n            }\n \
    \       }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1g97giuy.java:21: error: array required, but ArrayList<Integer>\
    \ found\n                result.add(nums[index]);\n                          \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if (map.containsKey(sum)) {\n                    int index =\
    \ map.get(sum);\n                    result.add(index, nums.get(j));\n       \
    \             map.put(sum, j);\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvlxlqclf.java:32)\n"
  stdout: ''
  timestamp: 1660011351
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            int sum = 0;\n            while\
    \ (i != 0) {\n                sum += i % 10;\n                i /= 10;\n     \
    \       }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            Integer key = entry.getKey();\n\
    \            Integer value = entry.getValue();\n            result.add(value);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3y1lpek.java:33)\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> sorted = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n    \
    \        int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n  \
    \              sum += nums.get(j);\n            }\n            if(sorted.contains(sum))\
    \ {\n                Collections.sort(sorted, new Comparator<Integer>() {\n  \
    \                  public int compare(Integer o1, Integer o2) {\n            \
    \            return Integer.compare(o1, o2);\n                    }\n        \
    \        });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o2);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o1);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o2);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o1);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o2);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o1);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o2);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o1);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o2);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o1);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o2) {\n      \
    \                  return Integer.compare(i, o2);\n                    }\n   \
    \             });\n                Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n                    public int compare(Integer o1, Integer o\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl9a39w1t.java:84: error: ',', ')', or '[' expected\n          \
    \          public int compare(Integer o1, Integer o\n                        \
    \                                    ^\n/tmp/tmpl9a39w1t.java:85: error: ')' expected\n\
    }\n ^\n/tmp/tmpl9a39w1t.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl36mcdh5.java:32)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            result.add(nums.get(index));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -12 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmpkb1axfz0.java:20)\n\tat Problem.main(tmpkb1axfz0.java:25)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = Arrays.binarySearch(sums, sums[i]);\n            if (index\
    \ < 0) {\n                index = -index - 1;\n            }\n            result.add(nums.get(index));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcosvcm7c.java:28)\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // TODO:\
    \ Write your code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpkrdz121a.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            int digit = i % 10;\n         \
    \   int sum = map.getOrDefault(digit, 0) + digit;\n            map.put(digit,\
    \ sum);\n        }\n        map.forEach((k, v) -> {\n            int index = result.indexOf(k);\n\
    \            if (index != -1) {\n                result.add(index, v);\n     \
    \       } else {\n                result.add(v);\n            }\n        });\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprob0w48.java:33)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        Set<Integer>\
    \ keys = map.keySet();\n        List<Integer> list = keys.stream().sorted().collect(Collectors.toList());\n\
    \        for (int i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj20ogai2.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if (sum > 9) {\n                sum -=\
    \ 10;\n                temp.add(sum);\n            } else {\n                temp.add(sum);\n\
    \            }\n        }\n        Collections.sort(temp);\n        for (int i\
    \ = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n       \
    \ }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa51yh4d8.java:34)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i=0;i<nums.size();i++){\n            int sum = 0;\n         \
    \   for(int j=0;j<nums.size();j++){\n                sum+=nums.get(j);\n     \
    \       }\n            if(sum==nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr4eg9n6t.java:30)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            map.put(digit, sum\
    \ + nums.get(i));\n        }\n        for(Map.Entry<Integer, Integer> entry :\
    \ map.entrySet()){\n            int index = result.size();\n            int sum\
    \ = entry.getValue();\n            while(sum > 0){\n                sum -= result.get(index--);\n\
    \            }\n            result.add(index, entry.getKey());\n        }\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmptu0hspg5.java:19)\n\tat Problem.main(tmptu0hspg5.java:33)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            map.put(digit, sum + 1);\n        }\n        for(int i = 0; i < map.size();\
    \ i++) {\n            int value = map.get(i);\n            int index = i;\n  \
    \          while(index > 0 && map.get(index - 1) == value) {\n               \
    \ index--;\n            }\n            result.add(index);\n        }\n       \
    \ return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmp5yd07iwq.java:19)\n\tat Problem.main(tmp5yd07iwq.java:33)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ziglrxs.java:29)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           while (nums.size() > 0) {\n                sum += nums.remove(0);\n\
    \            }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ucrq_p5.java:30)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if (map.containsKey(sum)) {\n                Integer index = map.get(sum);\n\
    \                result.add(index, nums.get(i));\n            } else {\n     \
    \           map.put(sum, i);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp041eqj5m.java:29)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = nums.get(i).intValue();\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < nums.size(); i++) {\n  \
    \          int sum = nums.get(i).intValue();\n            int index = map.get(sum);\n\
    \            if(index != i) {\n                Collections.swap(nums, i, index);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ibez7uh.java:34)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = new int[10];\n    \
    \    for (int i = 0; i < nums.size(); i++) {\n            int digitSum = 0;\n\
    \            while (nums.get(i) > 0) {\n                digitSum += nums.get(i)\
    \ % 10;\n                nums.get(i) /= 10;\n            }\n            sums[digitSum]++;\n\
    \        }\n        for (int i = 0; i < sums.length; i++) {\n            if (sums[i]\
    \ > 1) {\n                result.add(sums[i]);\n            }\n        }\n   \
    \     return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7i2jtazw.java:21: error: unexpected type\n                nums.get(i)\
    \ /= 10;\n                        ^\n  required: variable\n  found:    value\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // TODO:\
    \ Write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprj8h1id7.java:30)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        ArrayList<Integer> temp = new ArrayList<>();\n\
    \        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if (sum > 9) {\n                sum -=\
    \ 10;\n                temp.add(sum);\n            } else {\n                temp.add(sum);\n\
    \            }\n        }\n        Collections.sort(temp);\n        for (int i\
    \ = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n       \
    \ }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpse4xyhu5.java:34)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj9vy5hrv.java:30)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqcr9ubck.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i=0;i<nums.size();i++){\n            int sum = 0;\n         \
    \   for(int j=0;j<nums.size();j++){\n                sum += nums.get(j);\n   \
    \         }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa1o8i70x.java:30)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int index = nums.indexOf(entry.getValue());\n\
    \            result.add(index);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaka93y6u.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfs60j0x8.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Integer sum : map.values()) {\n            result.add(sum);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5t0ji042.java:30)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> sorted = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n    \
    \        int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n  \
    \              sum += nums.get(j);\n                if(sum == i) {\n         \
    \           sorted.add(j);\n                }\n            }\n        }\n    \
    \    for(int i = 0; i < sorted.size(); i++) {\n            result.add(sorted.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxag3b_o0.java:32)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (Integer num : nums) {\n         \
    \   int digit = num % 10;\n            int sum = map.get(digit);\n           \
    \ if (sum == null) {\n                sum = digit;\n            } else {\n   \
    \             sum += digit;\n            }\n            map.put(digit, sum);\n\
    \        }\n        List<Map.Entry<Integer, Integer>> list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        for (Map.Entry<Integer, Integer> entry : list) {\n            result.add(entry.getKey());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptlgmfcp_.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int sum = 0;\n            while(i !=\
    \ 0) {\n                sum += i % 10;\n                i /= 10;\n           \
    \ }\n            map.put(sum, i);\n        }\n        for(int i : map.keySet())\
    \ {\n            int index = i;\n            while(index != 0) {\n           \
    \     result.add(map.get(index));\n                index /= 10;\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpobmhf97z.java:35)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp96djmrmu.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if (sum > 9) {\n                sum -=\
    \ 10;\n                temp.add(sum);\n            } else {\n                temp.add(sum);\n\
    \            }\n        }\n        Collections.sort(temp);\n        for (int i\
    \ = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n       \
    \ }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa51yh4d8.java:34)\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int index = nums.indexOf(entry.getValue());\n\
    \            result.add(index);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaka93y6u.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if(sum == null) {\n                sum = digit;\n               \
    \ map.put(digit, sum);\n            } else {\n                map.put(digit, sum\
    \ + digit);\n            }\n        }\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            int index = i;\n            while(index > 0 && map.get(index - 1)\
    \ == sum) {\n                index--;\n            }\n            result.add(index);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpofkug92m.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(sum == null) {\n                   ^\n  first type:  int\n\
    \  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        \n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if(sum == i) {\n\
    \                    result.add(j);\n                }\n            }\n      \
    \  }\n        \n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxf87n0fx.java:30)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Integer key : map.keySet()) {\n            result.add(map.get(key));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpch_8rbji.java:30)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj9vy5hrv.java:30)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfs60j0x8.java:30)\n"
  stdout: ''
  timestamp: 1660011350
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            result.add(nums.get(index));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -12 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmpkb1axfz0.java:20)\n\tat Problem.main(tmpkb1axfz0.java:25)\n"
  stdout: ''
  timestamp: 1660011349
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if(sum == nums.get(i))\
    \ {\n                    result.add(j);\n                }\n            }\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfgbbvna.java:28)\n"
  stdout: ''
  timestamp: 1660011356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = nums.get(i);\n            Integer\
    \ index = map.get(sum);\n            if(index != null && index != i) {\n     \
    \           Collections.swap(nums, i, index);\n            }\n        }\n    \
    \    return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdyz46k8r.java:34)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int digit = i % 10;\n            int\
    \ sum = map.get(digit);\n            map.put(digit, sum + i);\n        }\n   \
    \     for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            int\
    \ digit = entry.getKey();\n            int sum = entry.getValue();\n         \
    \   int index = nums.indexOf(sum);\n            result.add(index, digit);\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpq_tn5tjv.java:19)\n\tat Problem.main(tmpq_tn5tjv.java:31)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(map.containsKey(sum))\
    \ {\n                    int index = map.get(sum);\n                    if(index\
    \ != i) {\n                        result.add(index, nums.get(j));\n         \
    \               map.put(sum, j);\n                    }\n                    break;\n\
    \                }\n                map.put(sum, j);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwg72c2r.java:35)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(int i = 0; i < nums.size(); i++) {\n           \
    \ int index = map.get(nums.get(i));\n            if(index != i) {\n          \
    \      result.add(nums.get(index));\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpqc10oysl.java:25)\n\tat Problem.main(tmpqc10oysl.java:34)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            int index = i;\n            while(sum > 0) {\n   \
    \             sum -= nums.get(index);\n                index++;\n            }\n\
    \            result.add(index);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpciib1ico.java:32)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp96djmrmu.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Integer key : map.keySet()) {\n            int index\
    \ = map.get(key);\n            result.add(nums.get(index));\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfyu9msc.java:31)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        ArrayList<Integer> tmp = new ArrayList<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            tmp.add(sum);\n        }\n        Collections.sort(tmp);\n\
    \        for(int i = 0; i < tmp.size(); i++) {\n            int index = Collections.binarySearch(tmp,\
    \ tmp.get(i));\n            result.add(index, nums.get(i));\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 2, Size: 0\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:756)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:481)\n\tat Problem.orderByPoints(tmpcx_xiq07.java:27)\n\
    \tat Problem.main(tmpcx_xiq07.java:32)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpph5uio7_.java:30)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = 0;\n            }\n            sum += nums.get(i);\n  \
    \          map.put(digit, sum);\n        }\n        map.forEach((k, v) -> {\n\
    \            Integer value = v;\n            Integer sum = k;\n            if\
    \ (sum > value) {\n                result.add(value);\n            }\n       \
    \ });\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)11,\
    \ (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpak1l49ie.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (sum == null) {\n                    ^\n  first type: \
    \ int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if (map.containsKey(sum)) {\n                map.put(sum,\
    \ map.get(sum) + i);\n            } else {\n                map.put(sum, i);\n\
    \            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            result.add(entry.getValue());\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpakg55w35.java:34)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(!map.containsKey(sum)) {\n                map.put(sum,\
    \ i);\n                result.add(nums.get(i));\n            }\n        }\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lqui3m7.java:30)\n"
  stdout: ''
  timestamp: 1660011359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<>();\n   \
    \     for(int i=0;i<nums.size();i++){\n            int sum = 0;\n            for(int\
    \ j=0;j<nums.size();j++){\n                sum += nums.get(j);\n            }\n\
    \            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
    \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
    \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3c7j56nc.java:30)\n"
  stdout: ''
  timestamp: 1660011354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    public static\
    \ ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           int digit = 0;\n            while (nums.get(i) > 0) {\n          \
    \      digit = nums.get(i) % 10;\n                sum += digit;\n            \
    \    nums.remove(i);\n            }\n            map.put(sum, i);\n        }\n\
    \        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n        \
    \    result.add(entry.getValue());\n        }\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
    \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
    \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
    \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
    \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
    \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
    \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
    \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
    \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
    \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvseqv5dc.java:33)\n"
  stdout: ''
  timestamp: 1660011359
