name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    public static int largestPrimeFactor(int n) {\n"
tests: "return 0;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
  \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
  \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
  \ == (29));\n    }\n\n}\n"
completions: ["        int largestPrimeFactor = 0;\n        int i = 2;\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 1;\n        }\n\
    \        return largestPrimeFactor;", "        int largestPrimeFactor = n;\n \
    \       for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n  \
    \              largestPrimeFactor = i;\n                break;\n            }\n\
    \        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i += 1;\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n\
    \ / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n            i++;\n        }\n   \
    \     return largestPrimeFactor;", "        int largestPrimeFactor = 0;\n    \
    \    int i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n            i++;\n        }\n        return largestPrimeFactor;", "     \
    \   int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;", "        if (n <= 1) {\n\
    \            return n;\n        }\n        int largestPrimeFactor = n;\n     \
    \   for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                factors.add(i);\n           \
    \ }\n        }\n        return factors.stream().max(Comparator.naturalOrder()).get();",
  "        int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n            }\n        }\n     \
    \   return largestPrimeFactor;", "        int largestPrimeFactor = n;\n      \
    \  for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        if (n <=\
    \ 1) return n;\n        int largestPrimeFactor = n;\n        for (int i = 2; i\
    \ <= n / 2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largestPrimeFactor = i;\n     \
    \           break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 0;\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                maxFactor = i;\n                break;\n            }\n\
    \        }\n        return maxFactor;", "        int largestPrimeFactor = n;\n\
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                maxFactor = i;\n                break;\n            }\n\
    \        }\n        return maxFactor;", "        int largestPrimeFactor = n;\n\
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n            }\n        \
    \    i += 1;\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                factors.add(i);\n        \
    \    }\n        }\n        if (factors.size() == 0) {\n            return n;\n\
    \        }\n        int largest = factors.get(0);\n        for (int i = 1; i <\
    \ factors.size(); i++) {\n            if (factors.get(i) > largest) {\n      \
    \          largest = factors.get(i);\n            }\n        }\n        return\
    \ largest;", "        Set<Integer> factors = new HashSet<>();\n        for(int\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i == 0) {\n             \
    \   factors.add(i);\n                while(n % i == 0) {\n                   \
    \ factors.add(i);\n                    n /= i;\n                }\n          \
    \  }\n        }\n        return factors.isEmpty() ? n : factors.last();", "  \
    \      int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = 0;\n        int i = 2;\n        while (i <= n/2) {\n  \
    \          if (n % i == 0) {\n                maxFactor = i;\n            }\n\
    \            i++;\n        }\n        return maxFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                factors.add(i);\n           \
    \ }\n        }\n        Collections.sort(factors);\n        return factors.get(factors.size()-1);",
  "        int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for(int i = 2; i <= n/2; i++) {\n            if(n%i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = 0;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                maxFactor = i;\n            }\n            i++;\n\
    \        }\n        return maxFactor;", "        int largestPrimeFactor = 0;\n\
    \        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n \
    \               largestPrimeFactor = i;\n                break;\n            }\n\
    \        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n % i\
    \ == 0) {\n                largestPrimeFactor = i;\n                break;\n \
    \           }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        int i = 2;\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                while (n % i\
    \ == 0) {\n                    n /= i;\n                }\n            }\n   \
    \         i++;\n        }\n        return largestPrimeFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                factors.add(i);\n        \
    \    }\n        }\n        int largestPrimeFactor = factors.stream().max((a, b)\
    \ -> {\n            return Integer.compare(a, b);\n        }).get();\n       \
    \ return largestPrimeFactor;", "        int largestPrimeFactor = 0;\n        int\
    \ i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0) {\n      \
    \          largestPrimeFactor = i;\n                while (n % i == 0) {\n   \
    \                 n = n / i;\n                }\n            }\n            i++;\n\
    \        }\n        return largestPrimeFactor;", "        int maxFactor = n;\n\
    \        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i == 0) {\n\
    \                maxFactor = i;\n                break;\n            }\n     \
    \   }\n        return maxFactor;", "        int largestPrimeFactor = 0;\n    \
    \    for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n     \
    \           largestPrimeFactor = i;\n                break;\n            }\n \
    \       }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                factors.add(i);\n           \
    \ }\n        }\n        if(factors.size() > 0) {\n            return factors.get(factors.size()-1);\n\
    \        } else {\n            return n;\n        }", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = n;\n        int i = 2;\n        while (i <= Math.sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                maxFactor = i;\n                break;\n   \
    \         }\n            i++;\n        }\n        return maxFactor;", "      \
    \  List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \          n /= i;\n            }\n        }\n        return factors.isEmpty()\
    \ ? n : factors.get(factors.size()-1);", "        int largestPrimeFactor = n;\n\
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                factors.add(i);\n           \
    \ }\n        }\n        return factors.stream().max(Comparator.naturalOrder()).get();",
  "        int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if(n % i == 0) {\n                maxFactor = i;\n              \
    \  break;\n            }\n        }\n        return maxFactor;", "        int\
    \ largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = n;\n        int i = 2;\n        while (i <= Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                maxFactor = i;\n         \
    \       break;\n            }\n            i += 1;\n        }\n        return\
    \ maxFactor;", "        List<Integer> factors = new ArrayList<>();\n        for(int\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i == 0) {\n             \
    \   factors.add(i);\n            }\n        }\n        Collections.sort(factors);\n\
    \        return factors.get(factors.size()-1);", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;",
  "        if (n <= 1) return n;\n        int maxFactor = n;\n        for (int i =\
    \ 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n              \
    \  maxFactor = i;\n                break;\n            }\n        }\n        return\
    \ maxFactor;", "        int largestPrimeFactor = 0;\n        int i = 2;\n    \
    \    while (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        int largestPrimeFactor = n;\n  \
    \      for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestPrimeFactor = i;\n                break;\n            }\n\
    \        }\n        return largestPrimeFactor;", "        int maxFactor = n;\n\
    \        int factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        int maxFactor\
    \ = 0;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                maxFactor = i;\n            }\n            i += 2;\n\
    \        }\n        return maxFactor;", "        int largestPrimeFactor = 0;\n\
    \        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n \
    \               largestPrimeFactor = i;\n                break;\n            }\n\
    \        }\n        return largestPrimeFactor;", "        int maxFactor = n;\n\
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                maxFactor = i;\n                break;\n            }\n \
    \       }\n        return maxFactor;", "        int largestPrimeFactor = 0;\n\
    \        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           largestPrimeFactor = i;\n                break;\n            }\n \
    \       }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        Set<Integer>\
    \ factors = new HashSet<>();\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                factors.add(i);\n        \
    \    }\n        }\n        if (factors.size() == 0) {\n            return n;\n\
    \        }\n        int largest = factors.stream().max(Comparator.naturalOrder()).orElse(1);\n\
    \        for (int i : factors) {\n            if (largest % i == 0) {\n      \
    \          largest = i;\n            }\n        }\n        return largest;", " \
    \       int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 0;\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        Set<Integer> factors = new HashSet<>();\n        int largestPrimeFactor\
    \ = n;\n        while (factors.size() < n) {\n            while (n % 2 == 0) {\n\
    \                factors.add(2);\n                n = n / 2;\n            }\n\
    \            while (n % 3 == 0) {\n                factors.add(3);\n         \
    \       n = n / 3;\n            }\n            while (n % 5 == 0) {\n        \
    \        factors.add(5);\n                n = n / 5;\n            }\n        \
    \    while (n % 7 == 0) {\n                factors.add(7);\n                n\
    \ = n / 7;\n            }\n            while (n % 11 == 0) {\n               \
    \ factors.add(11);\n                n = n / 11;\n            }\n            while\
    \ (n % 13 == 0) {\n                factors.add(13);\n                n = n / 13;\n\
    \            }\n            while (n % 17 == 0) {\n                factors.add(17);\n\
    \                n = n / 17;\n            }\n            while (n % 19 == 0) {\n\
    \                factors.add(19);\n                n = n / 19;\n            }\n\
    \            while (n % 23 == 0) {\n                factors.add(23);\n       \
    \         n = n / 23;\n            }\n            while (n % 29 == 0) {\n    \
    \            factors.add(29);\n                n = n / 29;\n            }\n  \
    \          while (n % 31 == 0) {\n                factors.add(31);\n         \
    \       n = n / 31;\n            }\n            while (n % 37 == 0) {\n      \
    \          factors.add(37);\n                n = n / 37;\n            }\n    \
    \        while (n % 41 == 0) {\n                factors.add(41);\n           \
    \     n = n / 41;\n            }\n            while (n % 43 == 0) {\n        \
    \        factors.add(43);\n                n = n / 43;\n            }\n      \
    \      while (n % 47 == 0) {\n                factors.add(47);\n             \
    \   n = n / 47;\n            }\n            while (n % 53 == 0) {\n          \
    \      factors.add(53);\n                n = n / 53;\n            }\n        \
    \    while (n % 59 == 0) {\n                factors.add(59);\n               \
    \ n = n / 59;\n            }\n            while (n % 61 == 0) {\n            \
    \    factors.add(61);\n                n = n / 61;\n            }\n          \
    \  while (n % 67 == 0) {\n                factors.add(67);\n                n\
    \ = n / 67;\n            }\n            while (n % 71 == 0) {\n              \
    \  factors.add(71);\n                n = n / 71;\n            }\n            while\
    \ (n % 73 == 0) {\n                factors.add(73);\n                n = n / 73;\n\
    \            }\n            while (n % 79 == 0) {\n                factors.add(79);\n\
    \                n = n / 79;\n            }\n            while (n % 83 == 0) {\n\
    \                factors.add(83);\n                n = n / 83;\n            }\n\
    \            while (n % 89 == 0) {\n                factors.add(89);\n       \
    \         n = n / ", "        int largestPrimeFactor = 0;\n        for(int i =\
    \ 2; i <= n/2; i++) {\n            if(n%i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = 0;\n        int i = 2;\n        while (i <= n) {\n    \
    \        if (n % i == 0) {\n                maxFactor = i;\n            }\n  \
    \          i++;\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        int i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if (n % i == 0) {\n                maxFactor = i;\n             \
    \   break;\n            }\n        }\n        return maxFactor;", "        int\
    \ maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n         \
    \   if(n%i == 0) {\n                maxFactor = i;\n                break;\n \
    \           }\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for(int i = 2; i <= n/2; i++) {\n            if(n%i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = n;\n        int i = 2;\n        while (i <= Math.sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                maxFactor = i;\n                break;\n   \
    \         }\n            i++;\n        }\n        return maxFactor;", "      \
    \  int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n    \
    \        if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = n;\n        int i = 2;\n        while (i <= maxFactor) {\n            if (n\
    \ % i == 0) {\n                maxFactor = i;\n            }\n            i++;\n\
    \        }\n        return maxFactor;", "        int largestPrimeFactor = n;\n\
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        if (n\
    \ == 1) return 1;\n        if (n == 2) return 2;\n        if (n % 2 == 0) return\
    \ 2;\n        if (n % 3 == 0) return 3;\n        if (n % 5 == 0) return 5;\n \
    \       if (n % 7 == 0) return 7;\n        int max = 2;\n        int maxDivisor\
    \ = 3;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n\
    \ % i == 0) {\n                maxDivisor = i;\n                max = i;\n   \
    \         }\n        }\n        if (maxDivisor == 3) {\n            if (n % maxDivisor\
    \ == 0) return maxDivisor;\n        }\n        return max;", "        int maxFactor\
    \ = 0;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                maxFactor = i;\n            }\n            i++;\n\
    \        }\n        return maxFactor;", "        int largestPrimeFactor = 1;\n\
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n            }\n        }\n  \
    \      return largestPrimeFactor;", "        int largestPrimeFactor = n;\n   \
    \     for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        int maxFactor =\
    \ 0;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n % i\
    \ == 0) {\n                maxFactor = i;\n            }\n            i += 2;\n\
    \        }\n        return maxFactor;", "        if (n <= 1) return n;\n     \
    \   int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if (n % i == 0) {\n                maxFactor = i;\n             \
    \   break;\n            }\n        }\n        return maxFactor;", "        int\
    \ maxFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n        \
    \    if (n % i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                factors.add(i);\n           \
    \ }\n        }\n        Collections.sort(factors);\n        return factors.get(factors.size()-1);",
  "        if (n <= 1) return n;\n        int largestPrimeFactor = n;\n        for\
    \ (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n     \
    \           largestPrimeFactor = i;\n                break;\n            }\n \
    \       }\n        return largestPrimeFactor;", "        int maxFactor = n;\n\
    \        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i == 0) {\n\
    \                maxFactor = i;\n                break;\n            }\n     \
    \   }\n        return maxFactor;", "        int largestPrimeFactor = 0;\n    \
    \    int i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n            i++;\n        }\n        return largestPrimeFactor;", "     \
    \   int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = n;\n        int factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;", "        int largestPrimeFactor = n;\n        for\
    \ (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n     \
    \           largestPrimeFactor = i;\n                break;\n            }\n \
    \       }\n        return largestPrimeFactor;", "        Set<Integer> factors\
    \ = new HashSet<>();\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n % i == 0) {\n                factors.add(i);\n            }\n   \
    \     }\n        return factors.stream().max().getAsInt();", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n            }\n        }\n  \
    \      return largestPrimeFactor;", "        int largestPrimeFactor = n;\n   \
    \     int i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n            i += 2;\n        }\n        return largestPrimeFactor;", "  \
    \      Set<Integer> factors = new HashSet<>();\n        for(int i = 1; i <= n;\
    \ i++) {\n            while(n % i == 0) {\n                factors.add(i);\n \
    \               n /= i;\n            }\n        }\n        return factors.isEmpty()\
    \ ? n : factors.stream().max().getAsInt();", "        int maxFactor = 0;\n   \
    \     for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n\
    \                while (n % i == 0) {\n                    maxFactor = i;\n  \
    \                  n = n / i;\n                }\n            }\n        }\n \
    \       return maxFactor;", "        int largestPrimeFactor = 0;\n        for(int\
    \ i = 2; i <= n/2; i++) {\n            if(n%i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        if (n < 2) {\n            return n;\n        }\n        ArrayList<Integer>\
    \ factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                factors.add(i);\n        \
    \    }\n        }\n        if (factors.size() > 0) {\n            return factors.get(factors.size()\
    \ - 1);\n        }\n        return n;", "        int largestPrimeFactor = n;\n\
    \        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                maxFactor = i;\n                break;\n            }\n\
    \        }\n        return maxFactor;", "        int largestPrimeFactor = n;\n\
    \        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i == 0) {\n\
    \                largestPrimeFactor = i;\n                break;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        int i = 2;\n        while (i < n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        int largestPrimeFactor = 0;\n        for\
    \ (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n     \
    \           factors.add(i);\n                if (i > largestPrimeFactor) {\n \
    \                   largestPrimeFactor = i;\n                }\n            }\n\
    \        }\n        return largestPrimeFactor;", "        List<Integer> factors\
    \ = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n  \
    \          if (n % i == 0) {\n                factors.add(i);\n            }\n\
    \        }\n        Collections.sort(factors);\n        return factors.get(factors.size()\
    \ - 1);", "        if (n < 2) {\n            return n;\n        }\n        int\
    \ i = 2;\n        while (i <= n / i) {\n            if (n % i == 0) {\n      \
    \          n = n / i;\n                return i;\n            }\n            i++;\n\
    \        }\n        return n;", "        int largestPrimeFactor = 0;\n       \
    \ for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n        \
    \        largestPrimeFactor = i;\n                break;\n            }\n    \
    \    }\n        return largestPrimeFactor;", "        int maxFactor = n;\n   \
    \     int i = 2;\n        while (i <= Math.sqrt(n)) {\n            if (n % i ==\
    \ 0) {\n                maxFactor = i;\n                break;\n            }\n\
    \            i++;\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                maxFactor = i;\n                break;\n            }\n\
    \        }\n        return maxFactor;", "        int largestPrimeFactor = n;\n\
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        int i = 2;\n        while (i <= Math.sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = 0;\n        int i = 2;\n        while (i <= n / 2) {\n\
    \            if (n % i == 0) {\n                maxFactor = i;\n            }\n\
    \            i++;\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = 0;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                while (n % i == 0) {\n                    largestPrimeFactor\
    \ = i;\n                    n = n / i;\n                }\n            }\n   \
    \     }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        if (n\
    \ < 2) return n;\n        int largestPrimeFactor = n;\n        for (int i = 2;\
    \ i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;", "        int maxFactor\
    \ = 0;\n        int i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                maxFactor = i;\n                while (n % i == 0)\
    \ {\n                    n /= i;\n                }\n            }\n         \
    \   i++;\n        }\n        return maxFactor;", "        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        List<Integer>\
    \ factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                factors.add(i);\n           \
    \     n = n/i;\n            }\n        }\n        return factors.stream().max().getAsInt();",
  "        if (n == 1) {\n            return 1;\n        }\n        int largestPrimeFactor\
    \ = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        int maxFactor\
    \ = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n%i ==\
    \ 0) {\n                maxFactor = i;\n                break;\n            }\n\
    \        }\n        return maxFactor;", "        int maxFactor = 0;\n        int\
    \ i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0) {\n      \
    \          maxFactor = i;\n            }\n            i++;\n        }\n      \
    \  return maxFactor;", "        int largestPrimeFactor = 0;\n        for (int\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n          \
    \      largestPrimeFactor = i;\n                break;\n            }\n      \
    \  }\n        return largestPrimeFactor;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
