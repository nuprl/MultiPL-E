language: java
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            long sum2 = 0;\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    sum2 += a[k] * a[k] * a[k];\n                }\n                if (sum2\
    \ > sum) {\n                    sum = sum2;\n                    triple = a[i]\
    \ + a[j] + a[k];\n                }\n            }\n        }\n        return\
    \ triple;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6fjpw61.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpj6fjpw61.java:31: error: cannot find symbol\n                \
    \    triple = a[i] + a[j] + a[k];\n                                          \
    \   ^\n  symbol:   variable k\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] < a[j] && a[i] < a[k]) {\n         \
    \               triples += 1;\n                    }\n                }\n    \
    \        }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprt_5y7v0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i\
    \ -> {\n            long temp = (i * i - i + 1);\n            int j = 0;\n   \
    \         while (j < i) {\n                temp += a[j];\n                j++;\n\
    \            }\n            a[i] = temp;\n        });\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for (int i = 0; i < a.length; i++) {\n       \
    \     sum += a[i];\n        }\n        return sum % 3 == 0 ? sum : -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1u19yhv.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n/tmp/tmpx1u19yhv.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n            a[i] = temp;\n              ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        long triple = 0;\n    \
    \    for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n\
    \                for(int k = j; k < n; k++) {\n                    if(a[i] + a[j]\
    \ + a[k] == 3) {\n                        triple++;\n                    }\n \
    \               }\n            }\n            sum += triple;\n            triple\
    \ = 0;\n        }\n        max = sum % 3;\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8_j3hjfz.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        for (int i = 0; i < a.length; i++) {\n     \
    \       for (int j = i + 1; j < a.length; j++) {\n                for (int k =\
    \ j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k]) {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6cvkerl.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    long sum = a[i] + a[j] +\
    \ a[k];\n                    if (sum % 3 == 0) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppavuknzu.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmppavuknzu.java:26: error: variable sum is already defined in method\
    \ getMaxTriples(long)\n                    long sum = a[i] + a[j] + a[k];\n  \
    \                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        long sum = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    count++;\n                        sum += a[i];\n        \
    \            }\n                }\n            }\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6b2297e.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples += 3;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1srqif9r.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    triple++;\n                    }\n                }\n   \
    \         }\n        }\n        return triple;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplliyz4e_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum += a[i];\n                        sum += a[j];\n  \
    \                      sum += a[k];\n                        triples += 1;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt9lvjoo0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2go6x2w0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++)\
    \ {\n                    if(a[i] + a[j] + a[k] == 3) {\n                     \
    \   triples++;\n                    }\n                }\n            }\n    \
    \    }\n        return triples;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfinwbpll.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        long sum2 = 0;\n  \
    \      for(int i = 1; i < n; i++) {\n            sum += a[i];\n            sum2\
    \ += a[i];\n            for(int j = i; j < n; j++) {\n                if(a[j]\
    \ == sum) {\n                    for(int k = j; k < n; k++) {\n              \
    \          if(a[k] == sum2) {\n                            if(k > i) {\n     \
    \                           triples += 3;\n                                break;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return triples;\n \
    \   }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj1auqbpk.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2go6x2w0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k]) {\n                 \
    \       ans += 1;\n                    }\n                }\n            }\n \
    \       }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwl4ka5n6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k]) {\n                 \
    \       count++;\n                    }\n                }\n            }\n  \
    \      }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpryfzcvix.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            if(a[i] > a[i-1]) {\n                sum += a[i] - a[i-1];\n\
    \                max = Math.max(max, sum);\n            }\n        }\n       \
    \ return max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsq8sfpw.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        sum +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4w5ygobs.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i\
    \ -> {\n            Arrays.stream(a).forEach(j -> {\n                Arrays.stream(a).forEach(k\
    \ -> {\n                    if (i < j && j < k && i < k) {\n                 \
    \       long triple = i + j + k;\n                        if (triple % 3 == 0)\
    \ {\n                            a[i] = a[j];\n                            a[j]\
    \ = a[k];\n                            a[k] = triple;\n                      \
    \  }\n                    }\n                });\n            });\n        });\n\
    \        return Arrays.stream(a).filter(t -> t % 3 == 0).count();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2u2uamg.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n/tmp/tmpf2u2uamg.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n                            a[i] = a[j];\n               \
    \               ^\n/tmp/tmpf2u2uamg.java:26: error: incompatible types: possible\
    \ lossy conversion from long to int\n                            a[i] = a[j];\n\
    \                                     ^\n/tmp/tmpf2u2uamg.java:27: error: incompatible\
    \ types: possible lossy conversion from long to int\n                        \
    \    a[j] = a[k];\n                              ^\n/tmp/tmpf2u2uamg.java:27:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \                        a[j] = a[k];\n                                     ^\n\
    /tmp/tmpf2u2uamg.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                            a[k] = triple;\n             \
    \                 ^\n6 errors\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += a[i];\n              \
    \          triple += a[i];\n                        triples++;\n             \
    \       }\n                }\n            }\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwujibm8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplifxpmdz.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int max = 0;\n        for(int i = 1; i < a.length; i++) {\n         \
    \   for(int j = i; j < a.length; j++) {\n                for(int k = j; k < a.length;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        max++;\n                    }\n                }\n            }\n   \
    \     }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl516kim6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplk4c8hac.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            long j = i + 1;\n            while (j < n) {\n      \
    \          long k = j + 1;\n                while (k < n) {\n                \
    \    long l = k + 1;\n                    while (l < n) {\n                  \
    \      if (l*l == i*i + j*j + k*k) {\n                            triple++;\n\
    \                        }\n                        l++;\n                   \
    \ }\n                    k++;\n                }\n                j++;\n     \
    \       }\n            sum += triple;\n            triple = 0;\n        }\n  \
    \      return sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4f6tistm.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long max = 0;\n        for(int i = 0; i <\
    \ n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triples++;\n                        if(max < triples)\
    \ {\n                            max = triples;\n                        }\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjobe2yqn.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuoyot1ar.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triple++;\n                    }\n                }\n\
    \            }\n        }\n        return triple;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19idtwen.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i\
    \ -> {\n            int j = i + 1;\n            int k = j + 1;\n            while\
    \ (j < k) {\n                a[i] = a[j] + a[k];\n                j++;\n     \
    \           k++;\n            }\n        });\n        long sum = 0;\n        for\
    \ (int i = 0; i < a.length; i++) {\n            sum += a[i];\n        }\n    \
    \    return sum % 3 == 0 ? sum : 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3jc6nfa.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triples += 1;\n                        sum += a[i];\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplzncfd7u.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ppdf5yo.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhvia47e.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < a.length; i++) {\n      \
    \      for (int j = i + 1; j < a.length; j++) {\n                for (int k =\
    \ j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k]) {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_wgnryz_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               sum += 1;\n                        if(sum > max) {\n         \
    \                   max = sum;\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ckpopcb.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum += a[i];\n                        sum += a[j];\n  \
    \                      sum += a[k];\n                        triples += 1;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt9lvjoo0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < a.length - 1; i++) {\n\
    \            for (int j = i + 1; j < a.length; j++) {\n                for (int\
    \ k = j + 1; k < a.length; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ == 3 * 3) {\n                        triples += 1;\n                    }\n\
    \                }\n            }\n        }\n        return triples;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ddssar7.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < a.length; i++) {\n      \
    \      for (int j = i + 1; j < a.length; j++) {\n                for (int k =\
    \ j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[i] < a[k])\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyqs4uiy.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        long count = 0;\n     \
    \   for(int i = 0; i < a.length; i++){\n            if(a[i] > 0){\n          \
    \      for(int j = i+1; j < a.length; j++){\n                    if(a[j] > 0){\n\
    \                        for(int k = j+1; k < a.length; k++){\n              \
    \              if(a[k] > 0){\n                                if(a[i] + a[j] +\
    \ a[k] == 3){\n                                    count++;\n                \
    \                    sum += a[i];\n                                    max = Math.max(max,\
    \ a[i]);\n                                }\n                            }\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_i6ox8f.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            sum += a[i];\n            if (sum % 3 == 0) {\n     \
    \           triples++;\n            }\n        }\n        return triples;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn93l8d4r.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 0) {\n                        ans += 1;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4eo4q5ri.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqfy8u2c.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 0; i < n; i++)\
    \ {\n            for(int j = i + 1; j < n; j++) {\n                for(int k =\
    \ j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum += 1;\n                        if(sum > max) {\n  \
    \                          max = sum;\n                        }\n           \
    \         }\n                }\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyevqrrj8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2aaeotf.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpo2aaeotf.java:23: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:24:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:25: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:26: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:27: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:28:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:29: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:30: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:31: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:32:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:33: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:34: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:35: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:36:\
    \ error: variable triples is already defined in method getMa"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ayqvo3j.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples += 3;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf76wuy5p.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples++;\n                    }\n                }\n     \
    \       }\n        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplrkonspl.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8nicsay.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for(int i = 0; i < a.length;\
    \ i++) {\n            for(int j = i + 1; j < a.length; j++) {\n              \
    \  for(int k = j + 1; k < a.length; k++) {\n                    if(a[i] + a[j]\
    \ + a[k] == 3) {\n                        triple++;\n                    }\n \
    \               }\n            }\n        }\n        return triple;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9i7x_idu.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for (int i = 0; i < a.length; i++) {\n       \
    \     for (int j = i + 1; j < a.length; j++) {\n                for (int k = j\
    \ + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[j] < a[k])\
    \ {\n                        ans += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5iswd_er.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    sum += a[k];\n                   \
    \ if(sum % 3 == 0) {\n                        triples++;\n                   \
    \ }\n                }\n            }\n        }\n        return triples;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8s__ie3.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        long triple4 = 0;\n        long triple5 =\
    \ 0;\n        long triple6 = 0;\n        long triple7 = 0;\n        long triple8\
    \ = 0;\n        long triple9 = 0;\n        long triple10 = 0;\n        long triple11\
    \ = 0;\n        long triple12 = 0;\n        long triple13 = 0;\n        long triple14\
    \ = 0;\n        long triple15 = 0;\n        long triple16 = 0;\n        long triple17\
    \ = 0;\n        long triple18 = 0;\n        long triple19 = 0;\n        long triple20\
    \ = 0;\n        long triple21 = 0;\n        long triple22 = 0;\n        long triple23\
    \ = 0;\n        long triple24 = 0;\n        long triple25 = 0;\n        long triple26\
    \ = 0;\n        long triple27 = 0;\n        long triple28 = 0;\n        long triple29\
    \ = 0;\n        long triple30 = 0;\n        long triple31 = 0;\n        long triple32\
    \ = 0;\n        long triple33 = 0;\n        long triple34 = 0;\n        long triple35\
    \ = 0;\n        long triple36 = 0;\n        long triple37 = 0;\n        long triple38\
    \ = 0;\n        long triple39 = 0;\n        long triple40 = 0;\n        long triple41\
    \ = 0;\n        long triple42 = 0;\n        long triple43 = 0;\n        long triple44\
    \ = 0;\n        long triple45 = 0;\n        long triple46 = 0;\n        long triple47\
    \ = 0;\n        long triple48 = 0;\n        long triple49 = 0;\n        long triple50\
    \ = 0;\n        long triple51 = 0;\n        long triple52 = 0;\n        long triple53\
    \ = 0;\n        long triple54 = 0;\n        long triple55 = 0;\n        long triple56\
    \ = 0;\n        long triple57 = 0;\n        long triple58 = 0;\n        long triple59\
    \ = 0;\n        long triple60 = 0;\n        long triple61 = 0;\n        long triple62\
    \ = 0;\n        long triple63 = 0;\n        long triple64 = 0;\n        long triple65\
    \ = 0;\n        long triple66 = 0;\n        long triple67 = 0;\n        long triple68\
    \ = 0;\n        long triple69 = 0;\n        long triple70 = 0;\n        long triple71\
    \ = 0;\n        long triple72 = 0;\n        long triple73 = 0;\n        long triple74\
    \ = 0;\n        long triple75 = 0;\n        long triple76 = 0;\n        long triple77\
    \ = 0;\n        long triple78 = 0;\n        long triple79 = 0;\n        long triple80\
    \ = 0;\n        long triple81 = 0;\n        long triple82 = 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0_5mr9t.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long count = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    sum += a[i];\n                        sum += a[j];\n    \
    \                    sum += a[k];\n                        count++;\n        \
    \            }\n                }\n            }\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1h8fc7yk.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8suszzme.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 0; i < a.length; i++) {\n        \
    \    for(int j = i + 1; j < a.length; j++) {\n                for(int k = j +\
    \ 1; k < a.length; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        ans += 1;\n                    }\n                }\n\
    \            }\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprfn7agfw.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        sum += 1;\n                        triple += 1;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9tr5i9u6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n                 \
    \       count++;\n                    }\n                }\n            }\n  \
    \      }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkexirqzx.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            sum += a[i];\n            for(int j = i; j < n; j++) {\n    \
    \            sum += a[j];\n                for(int k = j; k < n; k++) {\n    \
    \                sum += a[k];\n                    if(sum % 3 == 0) {\n      \
    \                  ans += 1;\n                        sum = 0;\n             \
    \       }\n                }\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpghs81bt8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            sum += a[i];\n            if(sum % 3 == 0) {\n              \
    \  ans += 1;\n            }\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3j3ozc74.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        long max = 0;\n   \
    \     for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n\
    \                for(int k = j; k < n; k++) {\n                    if(a[i] + a[j]\
    \ + a[k] == 3) {\n                        sum = a[i] + a[j] + a[k];\n        \
    \                if(sum > max) {\n                            max = sum;\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3taols_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2go6x2w0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  triple = 0;\n            triple2 = 0;\n            triple3 = 0;\n         \
    \   for (int j = 0; j < n; j++) {\n                if (i != j) {\n           \
    \         for (int k = 0; k < n; k++) {\n                        if (i != k &&\
    \ j != k) {\n                            triple = a[i] + a[j] + a[k];\n      \
    \                      if (triple % 3 == 0) {\n                              \
    \  triple2++;\n                                if (triple == 3) {\n          \
    \                          triple3++;\n                                }\n   \
    \                         }\n                        }\n                    }\n\
    \                }\n            }\n            if (triple2 > triple) {\n     \
    \           triples = triples;\n                triple = triple2;\n          \
    \      triple2 = triple3;\n            }\n        }\n        return triples;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbpc8byh7.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for (int i = 0; i < n; i++) {\n           \
    \ for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n;\
    \ k++) {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n            \
    \            result += a[i] - a[j] - a[k];\n                    }\n          \
    \      }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggq1yg8r.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for (int i = 0; i < a.length; i++) {\n       \
    \     int j = i;\n            while (j > 0 && a[j] == a[j - 1]) {\n          \
    \      j--;\n            }\n            int k = i;\n            while (k > 0 &&\
    \ a[k] == a[k - 1]) {\n                k--;\n            }\n            sum +=\
    \ a[i] + a[j] + a[k];\n        }\n        return sum % 3 == 0 ? sum : 0;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphz1tpqhn.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7jfoiku1.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n               \
    \         ans += 1;\n                    }\n                }\n            }\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpucrmnxuv.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmnrya_t8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3duxj91l.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 0) {\n                        continue;\n\
    \                    }\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      ans += 1;\n                        break;\n           \
    \         }\n                }\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ko0510m.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            triple = 0;\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    triple = a[i] + a[j] + a[k];\n                    if\
    \ (triple == 3) {\n                        sum += triple;\n                  \
    \      triples++;\n                    }\n                }\n            }\n \
    \       }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzc5isww7.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        long sum = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    count++;\n                        sum += a[i];\n        \
    \            }\n                }\n            }\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6b2297e.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long max = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      triples += 1;\n                        max = Math.max(max,\
    \ a[i]);\n                        max = Math.max(max, a[j]);\n               \
    \         max = Math.max(max, a[k]);\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6xrbucl.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2go6x2w0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++)\
    \ {\n                    if(a[i] + a[j] + a[k] == 3) {\n                     \
    \   triples++;\n                    }\n                }\n            }\n    \
    \    }\n        return triples;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfinwbpll.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < a.length - 1; i++) {\n\
    \            for (int j = i + 1; j < a.length; j++) {\n                for (int\
    \ k = j + 1; k < a.length; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ == 3) {\n                        triples += 1;\n                    }\n    \
    \            }\n            }\n        }\n        return triples;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpei315x51.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long max = 0;\n        long sum = 0;\n        for(int i = 0; i < n; i++)\
    \ {\n            sum += a[i];\n            if((sum % 3) == 0) {\n            \
    \    max = Math.max(max, sum);\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp286uecj1.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i\
    \ -> {\n            int j = i + 1;\n            int k = j + 1;\n            while\
    \ (j < k) {\n                a[i] = a[j] + a[k];\n                j++;\n     \
    \           k++;\n            }\n        });\n        return Arrays.stream(a).filter(i\
    \ -> i % 3 == 0).count();\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2mrq70.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] + a[j] + a[k] == 3) {\n            \
    \            triples++;\n                    }\n                }\n          \
    \  }\n        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpykw7d1h4.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 0; i < a.length; i++){\n      \
    \      for(int j = i+1; j < a.length; j++){\n                for(int k = j+1;\
    \ k < a.length; k++){\n                    if(a[i] + a[j] + a[k] == 3){\n    \
    \                    result++;\n                    }\n                }\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0mwi5i.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            if(a[i] > a[i-1]) {\n                sum += a[i] - a[i-1];\n\
    \                max = Math.max(max, sum);\n            }\n        }\n       \
    \ return max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsq8sfpw.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6gsvqp9.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 0);\n        Arrays.parallelSetAll(a,\
    \ i -> i * i - i + 1);\n        Arrays.sort(a);\n        long result = 0;\n  \
    \      for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1; j\
    \ < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++) {\n\
    \                    if (a[i] < a[j] && a[j] < a[k]) {\n                     \
    \   result += a[i] - a[j] - a[k];\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf1yhefp_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        long triples = 0;\n        long max = 0;\n\
    \        long maxTriple = 0;\n        for(int i = 1; i < n; i++) {\n         \
    \   for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                        if(triple > max) {\n                            max =\
    \ triple;\n                            maxTriple = i;\n                      \
    \      triples = 0;\n                        }\n                    }\n      \
    \          }\n            }\n        }\n        return maxTriple;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzs908s_x.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] && a[j]\
    \ == a[k]) {\n                        triple++;\n                    }\n     \
    \           }\n            }\n        }\n        return triple;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxn72q6id.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               sum += 1;\n                        max = Math.max(max, sum);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28wua9ol.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 0);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for (int i = 0; i < a.length; i++) {\n    \
    \        for (int j = i + 1; j < a.length; j++) {\n                for (int k\
    \ = j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[i] <\
    \ a[k] && a[j] < a[k]) {\n                        result += 3;\n             \
    \       }\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphimc37i6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2aaeotf.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpo2aaeotf.java:23: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:24:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:25: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:26: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:27: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:28:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:29: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:30: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:31: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:32:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:33: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:34: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:35: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:36:\
    \ error: variable triples is already defined in method getMa"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        long sum2 = 0;\n  \
    \      long sum3 = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum++;\n\
    \                        sum2 += a[i];\n                        sum3 += a[j];\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsplk4gu.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    triple++;\n                    }\n                }\n   \
    \         }\n        }\n        return triple;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplliyz4e_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphvpep0y7.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        sum +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4w5ygobs.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               ans += 1;\n                        sum += a[i];\n            \
    \            sum += a[j];\n                        sum += a[k];\n            \
    \        }\n                }\n            }\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhx2i_o5.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < a.length; i++) {\n      \
    \      for (int j = i + 1; j < a.length; j++) {\n                for (int k =\
    \ j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[i] < a[k])\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwgz57tcv.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7acgldyg.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \       sum += a[i];\n                        sum += a[j];\n                 \
    \       sum += a[k];\n                        triples += 1;\n                \
    \    }\n                }\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9cwvrq6p.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += a[i];\n              \
    \          triple += a[i];\n                        triples++;\n             \
    \       }\n                }\n            }\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt66vjgf4.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        long sum = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            if(a[i] > a[i-1]) {\n                sum += a[i] - a[i-1];\n\
    \                count++;\n            }\n        }\n        return sum % 3 ==\
    \ 0 ? count : 0;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptcl317zk.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long max = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            sum += a[i];\n            if(sum % 3 == 0) {\n              \
    \  max = Math.max(max, sum);\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4425v37n.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6gsvqp9.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples += 1;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe02inoys.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        long sum = 0;\n        long temp = 0;\n    \
    \    for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 0) {\n                        continue;\n                 \
    \   }\n                    if(a[i] + a[j] + a[k] == 3) {\n                   \
    \     count++;\n                        sum += a[i];\n                       \
    \ sum += a[j];\n                        sum += a[k];\n                    }\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1mlf5p4y.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ayqvo3j.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for (int i = 0; i < a.length; i++) {\n    \
    \        for (int j = i + 1; j < a.length; j++) {\n                for (int k\
    \ = j + 1; k < a.length; k++) {\n                    long triple = i + j + k;\n\
    \                    if (triple % 3 == 0) {\n                        result +=\
    \ triple;\n                    }\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp52kaua3b.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for (int i = 0; i < a.length; i++) {\n       \
    \     for (int j = i + 1; j < a.length; j++) {\n                for (int k = j\
    \ + 1; k < a.length; k++) {\n                    long triple = a[i] + a[j] + a[k];\n\
    \                    if (triple % 3 == 0) {\n                        sum += triple;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcl4dlvcw.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 0; i <\
    \ n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        sum += 1;\n                    }\n                }\n\
    \            }\n        }\n        System.out.println(sum);\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuggm9__j.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6gsvqp9.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8nicsay.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n         \
    \               triples += 1;\n                    }\n                }\n    \
    \        }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mn4mmrq.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        long triple4 = 0;\n        long triple5 =\
    \ 0;\n        long triple6 = 0;\n        long triple7 = 0;\n        long triple8\
    \ = 0;\n        long triple9 = 0;\n        long triple10 = 0;\n        long triple11\
    \ = 0;\n        long triple12 = 0;\n        long triple13 = 0;\n        long triple14\
    \ = 0;\n        long triple15 = 0;\n        long triple16 = 0;\n        long triple17\
    \ = 0;\n        long triple18 = 0;\n        long triple19 = 0;\n        long triple20\
    \ = 0;\n        long triple21 = 0;\n        long triple22 = 0;\n        long triple23\
    \ = 0;\n        long triple24 = 0;\n        long triple25 = 0;\n        long triple26\
    \ = 0;\n        long triple27 = 0;\n        long triple28 = 0;\n        long triple29\
    \ = 0;\n        long triple30 = 0;\n        long triple31 = 0;\n        long triple32\
    \ = 0;\n        long triple33 = 0;\n        long triple34 = 0;\n        long triple35\
    \ = 0;\n        long triple36 = 0;\n        long triple37 = 0;\n        long triple38\
    \ = 0;\n        long triple39 = 0;\n        long triple40 = 0;\n        long triple41\
    \ = 0;\n        long triple42 = 0;\n        long triple43 = 0;\n        long triple44\
    \ = 0;\n        long triple45 = 0;\n        long triple46 = 0;\n        long triple47\
    \ = 0;\n        long triple48 = 0;\n        long triple49 = 0;\n        long triple50\
    \ = 0;\n        long triple51 = 0;\n        long triple52 = 0;\n        long triple53\
    \ = 0;\n        long triple54 = 0;\n        long triple55 = 0;\n        long triple56\
    \ = 0;\n        long triple57 = 0;\n        long triple58 = 0;\n        long triple59\
    \ = 0;\n        long triple60 = 0;\n        long triple61 = 0;\n        long triple62\
    \ = 0;\n        long triple63 = 0;\n        long triple64 = 0;\n        long triple65\
    \ = 0;\n        long triple66 = 0;\n        long triple67 = 0;\n        long triple68\
    \ = 0;\n        long triple69 = 0;\n        long triple70 = 0;\n        long triple71\
    \ = 0;\n        long triple72 = 0;\n        long triple73 = 0;\n        long triple74\
    \ = 0;\n        long triple75 = 0;\n        long triple76 = 0;\n        long triple77\
    \ = 0;\n        long triple78 = 0;\n        long triple79 = 0;\n        long triple80\
    \ = 0;\n        long triple81 = 0;\n        long triple82 = 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0_5mr9t.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < a.length - 1; i++) {\n  \
    \          for (int j = i + 1; j < a.length; j++) {\n                for (int\
    \ k = j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k]) {\n                        count++;\n               \
    \     }\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxft0znu.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++)\
    \ {\n                    if(a[i] + a[j] + a[k] == 3) {\n                     \
    \   triples++;\n                    }\n                }\n            }\n    \
    \    }\n        return triples;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfinwbpll.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        long sum = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        count++;\n                        sum += a[i];\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2oqt_gx3.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples += 3;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf76wuy5p.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhvia47e.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples++;\n                    }\n                }\n     \
    \       }\n        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplrkonspl.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    triple = a[i] + a[j] + a[k];\n\
    \                    if (triple % 3 == 0) {\n                        sum += triple;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp68gv1o85.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8nicsay.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7jfoiku1.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    sum += a[k];\n                   \
    \ if(sum % 3 == 0) {\n                        triples++;\n                   \
    \ }\n                }\n            }\n        }\n        return triples;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8s__ie3.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplk4c8hac.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n       \
    \                 triples += 1;\n                    }\n                }\n  \
    \          }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplg3cyds7.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < a.length; i++) {\n      \
    \      for (int j = i + 1; j < a.length; j++) {\n                for (int k =\
    \ j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[i] < a[k])\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwgz57tcv.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            long\
    \ sum = 0;\n            for (int j = i + 1; j < n; j++) {\n                sum\
    \ += a[j];\n            }\n            if (sum % 3 == 0) {\n                ans\
    \ += 1;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3t6awhlk.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        long sum = 0;\n        for(int i = 0; i < n; i++)\
    \ {\n            for(int j = i + 1; j < n; j++) {\n                for(int k =\
    \ j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      ans += 1;\n                        sum += a[i];\n     \
    \                   sum += a[j];\n                        sum += a[k];\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp183zze6h.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ayqvo3j.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 0; i < n; i++) {\n           \
    \ for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        triples++;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_c49mza8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long max = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        max = Math.max(max,\
    \ i + j + k);\n                    }\n                }\n            }\n     \
    \   }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwpx193uj.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ayqvo3j.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \       sum += a[i];\n                        sum += a[j];\n                 \
    \       sum += a[k];\n                        triples += 1;\n                \
    \    }\n                }\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_86flap.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 0; i < n; i++) {\n           \
    \ for(int j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++)\
    \ {\n                    if(a[i] + a[j] + a[k] == 3) {\n                     \
    \   triples++;\n                    }\n                }\n            }\n    \
    \    }\n        return triples;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h82pokn.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 0);\n        Arrays.parallelSetAll(a,\
    \ i -> i * i - i + 1);\n        return Arrays.stream(a).filter(i -> i < n && i\
    \ < n && i < n).count();\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4d625807.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n  \
    \                      ans += 1;\n                    }\n                }\n \
    \           }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtmq2koq.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ayqvo3j.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2aaeotf.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpo2aaeotf.java:23: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:24:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:25: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:26: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:27: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:28:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:29: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:30: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:31: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:32:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpo2aaeotf.java:33: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpo2aaeotf.java:34: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpo2aaeotf.java:35: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpo2aaeotf.java:36:\
    \ error: variable triples is already defined in method getMa"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    sum += a[i];\n          \
    \          sum += a[j];\n                    sum += a[k];\n                  \
    \  if (sum % 3 == 0) {\n                        triples += 1;\n              \
    \      }\n                }\n            }\n        }\n        return triples;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5tx85k7.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    triple = a[i] + a[j] + a[k];\n              \
    \      if (triple == 3) {\n                        triples += 1;\n           \
    \         }\n                    if (triple == 2) {\n                        triple2\
    \ += 1;\n                    }\n                    if (triple == 1) {\n     \
    \                   triple3 += 1;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9jnosvjy.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8suszzme.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        long triple = 0;\n    \
    \    for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \       sum += a[i];\n                        max = Math.max(max, a[i]);\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_tvqwd8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triples = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum += a[i];\n                        sum += a[j];\n  \
    \                      sum += a[k];\n                        triples++;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1z1_s0lj.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        triples++;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph4ozvwbx.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               sum += 1;\n                        max = Math.max(max, sum);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28wua9ol.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6gsvqp9.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        long sum = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            sum += a[i];\n            for(int j = i; j < n; j++) {\n    \
    \            sum += a[j];\n                for(int k = j; k < n; k++) {\n    \
    \                sum += a[k];\n                    if(sum % 3 == 0) {\n      \
    \                  ans += 1;\n                        sum = 0;\n             \
    \       }\n                }\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn88zu4ol.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7acgldyg.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphyeimvjj.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 0);\n        Arrays.parallelSetAll(a,\
    \ i -> i * i - i + 1);\n        return Arrays.stream(a).filter(i -> i < a.length\
    \ && i < a.length + 1 && i < a.length + 2).count();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp693__sab.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ayqvo3j.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    triple++;\n                    }\n                }\n   \
    \         }\n        }\n        return triple;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplliyz4e_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpddbu3twz.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 0; i < n; i++) {\n           \
    \ for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        triples++;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_c49mza8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    triple = a[i] + a[j] + a[k];\n\
    \                    if (triple % 3 == 0) {\n                        sum += triple;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplvg6g5fm.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i\
    \ -> {\n            long temp = a[i] + a[j] + a[k];\n            if (temp % 3\
    \ == 0) {\n                a[i] = temp;\n            }\n        });\n        return\
    \ Arrays.stream(a).filter(i -> i % 3 == 0).count();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1u7xvry.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n/tmp/tmpt1u7xvry.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            long temp = a[i] + a[j] + a[k];\n            \
    \              ^\n/tmp/tmpt1u7xvry.java:21: error: cannot find symbol\n      \
    \      long temp = a[i] + a[j] + a[k];\n                                 ^\n \
    \ symbol:   variable j\n  location: class Problem\n/tmp/tmpt1u7xvry.java:21: error:\
    \ cannot find symbol\n            long temp = a[i] + a[j] + a[k];\n          \
    \                              ^\n  symbol:   variable k\n  location: class Problem\n\
    /tmp/tmpt1u7xvry.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n                a[i] = temp;\n                  ^\n5 errors\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n  \
    \                      count++;\n                    }\n                }\n  \
    \          }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo09qgbg9.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long max = 0;\n        long triple = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    triple++;\n                        if(triple > max) {\n \
    \                           max = triple;\n                        }\n       \
    \             }\n                }\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcws7kf8i.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8nicsay.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0x7lcgs.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmxnu4cu3.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    triple = a[i] + a[j] + a[k];\n                    if (triple % 3 == 0) {\n\
    \                        triples++;\n                    }\n                }\n\
    \            }\n        }\n        return triples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8t5tg6p.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0e6o21v8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2go6x2w0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i\
    \ -> {\n            long sum = 0;\n            for (int j = 0; j < i; j++) {\n\
    \                sum += a[j];\n            }\n            a[i] = i * i - i + 1;\n\
    \            a[i] = sum;\n        });\n        long max = 0;\n        for (int\
    \ i = 0; i < a.length; i++) {\n            long sum = 0;\n            for (int\
    \ j = 0; j < i; j++) {\n                sum += a[j];\n            }\n        \
    \    if (sum % 3 == 0) {\n                max = Math.max(max, sum);\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvcctfjh.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n/tmp/tmpyvcctfjh.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            a[i] = i * i - i + 1;\n              ^\n/tmp/tmpyvcctfjh.java:26:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        a[i] = sum;\n              ^\n3 errors\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triples = 0;\n        for(int i = 0; i <\
    \ n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        sum += a[i];\n                        sum += a[j];\n\
    \                        sum += a[k];\n                        triples++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_bjg_6h.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k])\
    \ {\n                        long sum = a[i] + a[j] + a[k];\n                \
    \        if (sum % 3 == 0) {\n                            triples++;\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd3amvork.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum++;\n                    }\n                }\n    \
    \        }\n        }\n        System.out.println(sum);\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptrfg8rpl.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g_9q1k_.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.parallelSort(a);\n\
    \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptqkcze26.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphyeimvjj.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkpybar6.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               sum += 1;\n                        if(sum > max) {\n         \
    \                   max = sum;\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ckpopcb.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triple++;\n                    }\n                }\n\
    \            }\n        }\n        return triple;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19idtwen.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long max = 0;\n        long min = 0;\n   \
    \     long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                        sum += a[i];\n                        sum +=\
    \ a[j];\n                        sum += a[k];\n                        if(max\
    \ < sum) {\n                            max = sum;\n                         \
    \   min = i;\n                            max = k;\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplzcuqo97.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 0; i < n; i++) {\n           \
    \ for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        triples++;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_c49mza8.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        for (int i = 0; i < a.length - 1; i++) {\n \
    \           for (int j = i + 1; j < a.length; j++) {\n                for (int\
    \ k = j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[j]\
    \ < a[k]) {\n                        count++;\n                    }\n       \
    \         }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8e4q6sbi.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            triple = 0;\n            triple2\
    \ = 0;\n            for (int j = 0; j < n; j++) {\n                for (int k\
    \ = 0; k < n; k++) {\n                    if (i == j && j == k) {\n          \
    \              triple++;\n                    }\n                    if (a[j]\
    \ + a[k] == 3 * i) {\n                        triple2++;\n                   \
    \ }\n                }\n            }\n            if (triple > triple2) {\n \
    \               triples = triple;\n            }\n        }\n        return triples;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpefuqmdru.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        for(int i = 0; i < n; i++) {\n           \
    \ for(int j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++)\
    \ {\n                    if(a[i] + a[j] + a[k] == 3) {\n                     \
    \   triples++;\n                    }\n                }\n            }\n    \
    \    }\n        return triples;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h82pokn.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppbjalash.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long triples = 0;\n        long sum = 0;\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum += a[i];\n                        sum += a[j];\n  \
    \                      sum += a[k];\n                        triples += 1;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt9lvjoo0.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long[] a = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n                 \
    \       count += 3;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpodubsjrk.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976218
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n \
    \   // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long\
    \ n) {\n        long a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n\
    \        long sum = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdn1l6ti5.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpdn1l6ti5.java:24: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:25:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:26: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:27: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpdn1l6ti5.java:28: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:29:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:30: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:31: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpdn1l6ti5.java:32: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:33:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:34: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:35: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpdn1l6ti5.java:36: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpdn1l6ti5.java:37:\
    \ error: variable triples is already defined in method getMa"
  stdout: ''
  timestamp: 1659976218
