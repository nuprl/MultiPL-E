name: HumanEval_145_order_by_points
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function which sorts the given list of integers\n\
  \    // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    public static ArrayList<Integer>\
  \ orderByPoints(ArrayList<Integer> nums) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
  \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
  \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
  \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
  \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
  \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
  \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
  \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
  \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
  \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
  \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
  \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
completions: ["        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            int index\
    \ = map.get(sum);\n            if(index == -1) {\n                index = result.size();\n\
    \                result.add(nums.get(i));\n                map.put(sum, index);\n\
    \            } else {\n                result.add(nums.get(index));\n        \
    \    }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            int sum = 0;\n            while\
    \ (i != 0) {\n                sum += i % 10;\n                i /= 10;\n     \
    \       }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n\
    \        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n        \
    \    Integer key = entry.getKey();\n            Integer value = entry.getValue();\n\
    \            while (value > 1) {\n                result.add(key);\n         \
    \       value /= 10;\n            }\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sorted = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if(sum > i) {\n\
    \                    sorted.add(nums.get(j));\n                    break;\n  \
    \              }\n            }\n            result.add(sorted);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer i\
    \ : nums) {\n            int sum = 0;\n            while (i != 0) {\n        \
    \        sum += i % 10;\n                i /= 10;\n            }\n           \
    \ map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            Integer count = entry.getValue();\n\
    \            Integer index = entry.getKey();\n            for (int i = 0; i <\
    \ count; i++) {\n                result.add(index);\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(sum == i) {\n                    result.add(j);\n        \
    \        }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n       \
    \     if(!map.containsKey(sum)) {\n                map.put(sum, i);\n        \
    \        result.add(nums.get(i));\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n \
    \       Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            int sum = 0;\n            for (int\
    \ j = 0; j < index; j++) {\n                sum += nums.get(j);\n            }\n\
    \            result.add(sum);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int digit = nums.get(i) % 10;\n            if (map.containsKey(digit))\
    \ {\n                map.put(digit, map.get(digit) + 1);\n            } else {\n\
    \                map.put(digit, 1);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int count = entry.getValue();\n\
    \            int index = entry.getKey();\n            while (count > 0) {\n  \
    \              result.add(index);\n                count--;\n                index++;\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = nums.get(i);\n            int index = map.get(sum);\n \
    \           if(index == null) {\n                map.put(sum, i);\n          \
    \      result.add(sum);\n            } else {\n                Collections.swap(result,\
    \ index, i);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (Integer num : nums) {\n         \
    \   int sum = 0;\n            while (num != 0) {\n                sum += num %\
    \ 10;\n                num /= 10;\n            }\n            map.put(sum, map.getOrDefault(sum,\
    \ 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int index = entry.getValue();\n            int sum = 0;\n   \
    \         while (index != 0) {\n                sum += index % 10;\n         \
    \       index /= 10;\n            }\n            int index = entry.getKey();\n\
    \            int sum = 0;\n            while (index != 0) {\n                sum\
    \ += index % 10;\n                index /= 10;\n            }\n            if\
    \ (sum == entry.getKey()) {\n                result.add(entry.getKey());\n   \
    \         }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            int\
    \ sum = 0;\n            for (int j = 0; j < nums.size(); j++) {\n            \
    \    sum += nums.get(j);\n            }\n            if (map.containsKey(sum))\
    \ {\n                map.put(sum, map.get(sum) + i);\n            } else {\n \
    \               map.put(sum, i);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for (Integer i : nums) {\n            int sum = 0;\n            while (i >\
    \ 0) {\n                sum += i % 10;\n                i /= 10;\n           \
    \ }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n    \
    \    map.entrySet().stream().sorted(Map.Entry.<Integer, Integer>comparingByValue().reversed()).forEach(e\
    \ -> result.add(e.getKey()));\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int index = map.get(digit);\n            if (index == null)\
    \ {\n                index = result.size();\n                map.put(digit, index);\n\
    \                result.add(digit);\n            } else {\n                result.add(index);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer num : nums) {\n            int digitSum = num % 10;\n  \
    \          int index = map.get(digitSum);\n            if (index == null) {\n\
    \                index = result.size();\n                map.put(digitSum, index);\n\
    \                result.add(num);\n            } else {\n                result.add(index,\
    \ num);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int index = result.indexOf(entry.getValue());\n\
    \            if (index == -1) {\n                result.add(entry.getValue());\n\
    \            } else {\n                Collections.swap(result, index, result.indexOf(entry.getValue()));\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = 0;\n            }\n            sum += nums.get(i);\n  \
    \          map.put(digit, sum);\n        }\n        Set<Integer> keySet = map.keySet();\n\
    \        List<Integer> list = new ArrayList<>(keySet);\n        Collections.sort(list);\n\
    \        for (int i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n            int\
    \ sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n             \
    \   sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n\
    \            if(!map.containsKey(sum)) {\n                map.put(sum, i);\n \
    \               result.add(nums.get(i));\n            }\n        }\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n\
    \            int index = map.get(sum);\n            Collections.swap(result, index,\
    \ i);\n        }\n        return result;", '        // Your code here', "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int sum = nums.get(i) % 10;\n            map.put(sum, i);\n       \
    \ }\n        Collections.sort(nums, (a, b) -> map.get(b) - map.get(a));\n    \
    \    for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            int index = map.get(sum);\n            result.add(index,\
    \ nums.get(i));\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            if (map.containsKey(sum)) {\n                map.put(sum,\
    \ map.get(sum) + i);\n            } else {\n                map.put(sum, i);\n\
    \            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int index = entry.getValue();\n            int sum = entry.getKey();\n\
    \            while (index > 0) {\n                result.add(sum * 10 + index--);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            result.add(nums.get(index));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i)\
    \ % 10;\n            map.put(sum, i);\n        }\n        Set<Integer> keySet\
    \ = map.keySet();\n        Collections.sort(keySet);\n        for (int i = 0;\
    \ i < keySet.size(); i++) {\n            result.add(map.get(keySet.get(i)));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n      \
    \      for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            int\
    \ digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n         \
    \   if (sum == null) {\n                sum = digit;\n                map.put(digit,\
    \ sum);\n            } else {\n                map.put(digit, sum + digit);\n\
    \            }\n        }\n        List<Map.Entry<Integer, Integer>> list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        list.forEach((entry) -> {\n            result.add(entry.getKey());\n\
    \        });\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if (map.containsKey(sum)) {\n                map.put(sum, map.get(sum)\
    \ + 1);\n            } else {\n                map.put(sum, 1);\n            }\n\
    \        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            int count = entry.getValue();\n            int index = entry.getKey();\n\
    \            while (count > 0) {\n                result.add(index);\n       \
    \         count--;\n                index++;\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int digit = nums.get(i) % 10;\n       \
    \     if (map.containsKey(digit)) {\n                map.put(digit, map.get(digit)\
    \ + 1);\n            } else {\n                map.put(digit, 1);\n          \
    \  }\n        }\n        map.forEach((k, v) -> {\n            if (v > 1) {\n \
    \               result.add((k * 10) + v);\n            }\n        });\n      \
    \  return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer num\
    \ : nums) {\n            int digit = num % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = digit;\n            } else\
    \ {\n                sum += digit;\n            }\n            map.put(digit,\
    \ sum);\n        }\n        for (Integer num : nums) {\n            int digit\
    \ = num % 10;\n            int sum = map.get(digit);\n            if (sum == null)\
    \ {\n                sum = digit;\n            } else {\n                sum +=\
    \ digit;\n            }\n            if (sum > result.size()) {\n            \
    \    result.add(num);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int sum = nums.get(i);\n            if (map.containsKey(sum)) {\n \
    \               map.put(sum, map.get(sum) + i);\n            } else {\n      \
    \          map.put(sum, i);\n            }\n        }\n        map.forEach((sum,\
    \ index) -> {\n            if (map.get(sum) != null) {\n                result.add(map.get(sum));\n\
    \                map.remove(sum);\n            }\n        });\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        int[]\
    \ sums = new int[10];\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       sums[nums.get(i) - '0']++;\n        }\n        for (int i = 0; i < 10;\
    \ i++) {\n            if (sums[i] > 1) {\n                Collections.sort(result,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return sums[i] - sums[o1 - '0'] -\
    \ sums[o2 - '0'];\n                    }\n                });\n              \
    \  break;\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums.length - 1 - i;\n            if (sums[i] == sums[index])\
    \ {\n                result.add(nums.get(index));\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n  \
    \      for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n    \
    \        for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    if(i != index) {\n                        result.add(i, index);\n\
    \                        map.put(sum, i);\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;", '        //
    TODO: Write your code here', "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            for (int j =\
    \ 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n          \
    \      if (map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    result.add(index, nums.get(j));\n                    map.put(sum,\
    \ j);\n                    break;\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0;\
    \ j < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            map.put(sum, i);\n        }\n        for(Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            result.add(entry.getValue());\n     \
    \   }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int digit = nums.get(i) % 10;\n       \
    \     int sum = map.getOrDefault(digit, 0);\n            map.put(digit, sum +\
    \ nums.get(i));\n        }\n        map.entrySet().stream().sorted(Map.Entry.<Integer,\
    \ Integer>comparingByValue()).forEach(e -> result.add(e.getKey()));\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n   \
    \     for(int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if(sum == null) {\n\
    \                sum = 0;\n            }\n            sum += nums.get(i);\n  \
    \          map.put(digit, sum);\n        }\n        for(int i = 0; i < map.size();\
    \ i++) {\n            int digit = map.get(i);\n            int index = i;\n  \
    \          while(index > 0 && map.get(index - 1) == digit) {\n               \
    \ index--;\n            }\n            result.add(index);\n        }\n       \
    \ return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n        \
    \    for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            int index = map.get(digit);\n\
    \            if (index == null) {\n                index = result.size();\n  \
    \              result.add(digit);\n                map.put(digit, index);\n  \
    \          } else {\n                result.add(index, digit);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int[] sums = new int[10];\n        for (int i\
    \ = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int\
    \ j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n      \
    \      }\n            sums[sum % 10] += 1;\n        }\n        for (int i = 0;\
    \ i < 10; i++) {\n            if (sums[i] != 0) {\n                result.add(sums[i]);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = digit;\n            } else\
    \ {\n                sum += digit;\n            }\n            map.put(digit,\
    \ sum);\n        }\n        List<Integer> list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).map(Map.Entry::getKey).collect(Collectors.toList());\n\
    \        for (int i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int[] sums = new int[10];\n        for (int i\
    \ = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n         \
    \   int sum = 0;\n            for (int j = 0; j < num.length(); j++) {\n     \
    \           sum += num.charAt(j) - '0';\n            }\n            sums[sum %\
    \ 10] += num;\n        }\n        for (int i = 0; i < 10; i++) {\n           \
    \ if (sums[i] != 0) {\n                result.add(sums[i]);\n            }\n \
    \       }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for(int\
    \ j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n      \
    \          if(sum == nums.get(i)) {\n                    sorted.add(j);\n    \
    \            }\n            }\n        }\n        for(int i = 0; i < sorted.size();\
    \ i++) {\n            result.add(sorted.get(i));\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            if (map.containsKey(digit))\
    \ {\n                map.put(digit, map.get(digit) + 1);\n            } else {\n\
    \                map.put(digit, 1);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int count = entry.getValue();\n\
    \            int index = entry.getKey();\n            while (count > 0) {\n  \
    \              result.add(index);\n                count--;\n                index++;\n\
    \            }\n        }\n        return result;", '        // Your code here',
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n   \
    \         int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n \
    \               sum += nums.get(j);\n            }\n            map.put(sum, i);\n\
    \        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            result.add(entry.getValue());\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j\
    \ < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            map.put(sum, i);\n        }\n        for(Integer key : map.keySet())\
    \ {\n            result.add(key);\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j\
    \ < nums.size(); j++) {\n                sum += nums.get(j);\n               \
    \ if(map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    if(i != index) {\n                        result.add(i, index);\n\
    \                        map.put(sum, i);\n                    }\n           \
    \         break;\n                }\n                map.put(sum, i);\n      \
    \      }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int digit = i % 10;\n            int\
    \ sum = map.get(digit);\n            map.put(digit, sum + 1);\n        }\n   \
    \     for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            int\
    \ index = nums.indexOf(entry.getKey());\n            result.add(index);\n    \
    \    }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0;\
    \ i < nums.size(); i++){\n            int sum = 0;\n            for(int j = 0;\
    \ j < nums.size(); j++){\n                sum += nums.get(j);\n            }\n\
    \            map.put(sum, i);\n        }\n        for(int i = 0; i < nums.size();\
    \ i++){\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++){\n                sum += nums.get(j);\n            }\n            if(map.containsKey(sum)){\n\
    \                result.add(map.get(sum));\n            }\n        }\n       \
    \ return result;", "        ArrayList<Integer> result = new ArrayList<>();\n \
    \       Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i\
    \ < nums.size(); i++) {\n            int sum = nums.get(i);\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(sum);\n    \
    \        }\n        }\n        for(int i = 0; i < nums.size(); i++) {\n      \
    \      int sum = nums.get(i);\n            int index = map.get(sum);\n       \
    \     Collections.swap(nums, index, i);\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
    \ temp = new ArrayList<>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(sum == nums.get(i)) {\n\
    \                    temp.add(j);\n                }\n            }\n        \
    \    result.add(temp.get(i));\n            temp.remove(i);\n        }\n      \
    \  return result;", "        // Write your code here\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(int i = 0;\
    \ i < nums.size(); i++){\n            int sum = 0;\n            for(int j = 0;\
    \ j < nums.size(); j++){\n                sum += nums.get(j);\n            }\n\
    \            if(map.containsKey(sum)){\n                result.add(map.get(sum));\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digitSum = nums.get(i)\
    \ % 10;\n            int index = map.get(digitSum);\n            if (index ==\
    \ -1) {\n                index = result.size();\n                result.add(nums.get(i));\n\
    \                map.put(digitSum, index);\n            } else {\n           \
    \     result.add(nums.get(index));\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n       \
    \     Integer key = map.get(sum);\n            if(key == null) {\n           \
    \     key = i;\n                map.put(sum, i);\n            }\n            result.add(nums.get(key));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j\
    \ < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            if(!map.containsKey(sum)) {\n                map.put(sum, i);\n \
    \               result.add(nums.get(i));\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = nums.get(i);\n            if (map.containsKey(sum))\
    \ {\n                int index = map.get(sum);\n                result.add(index,\
    \ nums.get(i));\n            } else {\n                map.put(sum, i);\n    \
    \        }\n        }\n        return result;", "        // Write your code here\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        for(int i=0;i<nums.size();i++){\n\
    \            int sum = 0;\n            for(int j=0;j<nums.size();j++){\n     \
    \           sum = sum + nums.get(j);\n            }\n            int index = i;\n\
    \            while(sum != 0){\n                if(sum % 10 == 0){\n          \
    \          result.add(nums.get(index));\n                    sum = 0;\n      \
    \          }\n                sum = (sum - nums.get(index)) % 10;\n          \
    \      index++;\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            while (index > 0) {\n         \
    \       result.add(nums.get(index--));\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = 0;\n            }\n   \
    \         sum += nums.get(i);\n            map.put(digit, sum);\n        }\n \
    \       for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n         \
    \   int index = entry.getKey();\n            int value = entry.getValue();\n \
    \           int sum = 0;\n            for (int i = 0; i < index; i++) {\n    \
    \            sum += nums.get(i);\n            }\n            if (sum > value)\
    \ {\n                result.add(index);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n       \
    \ for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n         \
    \   for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    if(index < i) {\n                        index = i;\n   \
    \                 }\n                    result.add(index, nums.get(j));\n   \
    \                 map.put(sum, index + 1);\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for(int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            map.put(digit, sum\
    \ + nums.get(i));\n        }\n        for(Map.Entry<Integer, Integer> entry :\
    \ map.entrySet()) {\n            int sum = entry.getValue();\n            int\
    \ index = entry.getKey();\n            while(sum > 0) {\n                result.add(index);\n\
    \                sum -= 10;\n                index++;\n            }\n       \
    \ }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for(int i : nums)\
    \ {\n            int sum = 0;\n            while(i != 0) {\n                sum\
    \ += i % 10;\n                i /= 10;\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(int i : map.values()) {\n            result.add(i);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            int sum = map.getOrDefault(digit,\
    \ 0);\n            map.put(digit, sum + 1);\n        }\n        map.entrySet().stream().sorted(Map.Entry.<Integer,\
    \ Integer>comparingByValue()).forEach(e -> result.add(e.getKey()));\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n  \
    \      Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n \
    \           int index = sums.length - 1 - i;\n            if (sums[index] == sums[i])\
    \ {\n                result.add(nums.get(index));\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n        \
    \    for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    result.add(index, nums.get(j));\n                    map.put(sum,\
    \ j);\n                    break;\n                }\n            }\n        }\n\
    \        return result;", '        // Your code here', "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ temp = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            if(sum ==\
    \ nums.get(i)) {\n                temp.add(nums.get(i));\n            }\n    \
    \    }\n        for(int i = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        map.forEach((k,\
    \ v) -> result.add(k));\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int sum = 0;\n            while(i !=\
    \ 0) {\n                sum += i % 10;\n                i /= 10;\n           \
    \ }\n            map.put(sum, i);\n        }\n        for(int i : map.keySet())\
    \ {\n            result.add(map.get(i));\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int sum = 0;\n            int digit = nums.get(i);\n            while\
    \ (digit > 0) {\n                sum += digit % 10;\n                digit /=\
    \ 10;\n            }\n            if (map.containsKey(sum)) {\n              \
    \  map.put(sum, map.get(sum) + i);\n            } else {\n                map.put(sum,\
    \ i);\n            }\n        }\n        for (Map.Entry<Integer, Integer> entry\
    \ : map.entrySet()) {\n            result.add(entry.getValue());\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> tmp = new ArrayList<Integer>();\n        int sum =\
    \ 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if (sum > 9) {\n                sum -= 10;\n                tmp.add(sum);\n\
    \            } else {\n                tmp.add(sum);\n            }\n        }\n\
    \        Collections.sort(tmp);\n        for (int i = 0; i < tmp.size(); i++)\
    \ {\n            result.add(tmp.get(i));\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = 0;\n            }\n   \
    \         sum += nums.get(i);\n            map.put(digit, sum);\n        }\n \
    \       for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n         \
    \   int index = entry.getKey();\n            int value = entry.getValue();\n \
    \           int sum = sumOfDigits(value);\n            while (sum > 0) {\n   \
    \             result.add(index);\n                sum -= 10;\n               \
    \ index++;\n            }\n        }\n        return result;", "        // TODO:\
    \ write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        ArrayList<Integer> result = new ArrayList<>();\n        for(int\
    \ i = 0; i < nums.size(); i++){\n            int sum = 0;\n            for(int\
    \ j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n       \
    \     }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++){\n    \
    \        int sum = nums.get(i);\n            int index = map.get(sum);\n     \
    \       if(index == null){\n                index = i;\n                map.put(sum,\
    \ index);\n            }\n            result.add(nums.get(index));\n        }\n\
    \        return result;", "        // Write your code here\n        ArrayList<Integer>\
    \ numsSorted = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++){\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++){\n                sum += nums.get(j);\n            }\n            if(sum\
    \ == nums.get(i)){\n                numsSorted.add(nums.get(i));\n           \
    \ }\n        }\n        return numsSorted;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = Arrays.binarySearch(sums, sums[i]);\n            if (index\
    \ >= 0) {\n                result.add(nums.get(index));\n            }\n     \
    \   }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = nums.get(i);\n            if\
    \ (map.containsKey(sum)) {\n                map.put(sum, map.get(sum) + i);\n\
    \            } else {\n                map.put(sum, i);\n            }\n     \
    \   }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n  \
    \          int index = entry.getValue();\n            int sum = 0;\n         \
    \   while (index > 0) {\n                sum += nums.get(index--);\n         \
    \   }\n            result.add(sum);\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int sum = 0;\n            for (int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        List<Map.Entry<Integer, Integer>> list = map.entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toList());\n\
    \        list.forEach((entry) -> result.add(entry.getValue()));\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(sum == nums.get(i)) {\n                    result.add(j);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = digit + map.get(digit);\n            map.put(digit,\
    \ sum);\n        }\n        for(int i = 0; i < nums.size(); i++) {\n         \
    \   int digit = nums.get(i) % 10;\n            int sum = digit + map.get(digit);\n\
    \            if(!map.containsKey(sum)) {\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            map.put(digit, sum + 1);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int index = nums.indexOf(entry.getKey());\n\
    \            int value = entry.getValue();\n            int sum = 0;\n       \
    \     for(int i = 0; i < value; i++) {\n                sum += nums.get(index++)\
    \ % 10;\n            }\n            result.add(sum);\n        }\n        return\
    \ result;", "        // Write your code here\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++){\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++){\n\
    \                sum += nums.get(j);\n            }\n            if(sum == nums.get(i)){\n\
    \                result.add(nums.get(i));\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
    \ tmp = new ArrayList<>();\n        for(int i = 0; i < nums.size(); i++) {\n \
    \           int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(sum == i) {\n       \
    \             tmp.add(j);\n                }\n            }\n            Collections.sort(tmp);\n\
    \            for(int j = 0; j < tmp.size(); j++) {\n                result.add(tmp.get(j));\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    Collections.swap(nums, index, j);\n                    Collections.swap(result,\
    \ index, j);\n                    map.put(sum, j);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (Integer i : nums) {\n            Integer\
    \ sum = map.get(i);\n            if (sum == null) {\n                sum = i;\n\
    \                map.put(i, sum);\n            } else {\n                sum +=\
    \ i;\n                map.put(i, sum);\n            }\n        }\n        for\
    \ (Integer i : map.keySet()) {\n            Integer sum = map.get(i);\n      \
    \      if (sum > 0) {\n                result.add(i);\n            }\n       \
    \ }\n        return result;", "        // Write your code here\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i=0;i<nums.size();i++){\n     \
    \       int sum = 0;\n            for(int j=0;j<nums.size();j++){\n          \
    \      sum += nums.get(j);\n            }\n            if(sum == nums.get(i)){\n\
    \                result.add(nums.get(i));\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n        \
    \    for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    if(i != index) {\n                        result.add(i, index);\n\
    \                        map.put(sum, i);\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            int index = map.get(sum);\n            if(index == -1) {\n      \
    \          index = result.size();\n                result.add(sum);\n        \
    \        map.put(sum, index);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n   \
    \         int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n \
    \               sum += nums.get(j);\n            }\n            map.put(sum, i);\n\
    \        }\n        for(int i = 0; i < nums.size(); i++) {\n            int sum\
    \ = 0;\n            for(int j = 0; j < nums.size(); j++) {\n                sum\
    \ += nums.get(j);\n            }\n            if(map.containsKey(sum)) {\n   \
    \             result.add(map.get(sum));\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n   \
    \     for(int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if(sum == null) {\n\
    \                sum = digit;\n                map.put(digit, sum);\n        \
    \    } else {\n                map.put(digit, sum + digit);\n            }\n \
    \       }\n        for(int i = 0; i < nums.size(); i++) {\n            int digit\
    \ = nums.get(i) % 10;\n            int sum = map.get(digit);\n            int\
    \ index = i;\n            while(sum > 0) {\n                index--;\n       \
    \         sum -= map.get(index);\n            }\n            result.add(index);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n       \
    \     for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n    \
    \        int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n  \
    \              sum += nums.get(j);\n            }\n            if(sum == nums.get(i))\
    \ {\n                result.add(nums.get(i));\n            }\n        }\n    \
    \    return result;", "        // Write your code here\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++){\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++){\n                sum += nums.get(j);\n            }\n            if(sum\
    \ == nums.get(i)){\n                result.add(nums.get(i));\n            }\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int sum = nums.get(i);\n            if (map.containsKey(sum)) {\n \
    \               map.put(sum, map.get(sum) + i);\n            } else {\n      \
    \          map.put(sum, i);\n            }\n        }\n        Set<Integer> keys\
    \ = map.keySet();\n        List<Integer> list = new ArrayList<>(keys);\n     \
    \   Collections.sort(list);\n        for (int i = 0; i < list.size(); i++) {\n\
    \            result.add(list.get(i));\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = nums.get(i);\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(sum);\n    \
    \        }\n        }\n        for(int i = 0; i < nums.size(); i++) {\n      \
    \      int sum = nums.get(i);\n            int index = map.get(sum);\n       \
    \     int temp = nums.get(index);\n            nums.set(index, nums.get(i));\n\
    \            nums.set(i, temp);\n        }\n        return result;", "       \
    \ ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (Integer num : nums) {\n            int\
    \ digit = num % 10;\n            int sum = map.get(digit);\n            if (sum\
    \ == null) {\n                sum = digit;\n            } else {\n           \
    \     sum += digit;\n            }\n            map.put(digit, sum);\n       \
    \ }\n        map.entrySet().stream().sorted(Map.Entry.<Integer, Integer>comparingByValue()).forEach(e\
    \ -> result.add(e.getKey()));\n        return result;", "        // Write your\
    \ code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n    \
    \        for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            if (map.containsKey(digit))\
    \ {\n                map.put(digit, map.get(digit) + 1);\n            } else {\n\
    \                map.put(digit, 1);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int count = entry.getValue();\n\
    \            int index = entry.getKey();\n            while (count > 0) {\n  \
    \              result.add(index);\n                count--;\n                index++;\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(map.containsKey(sum))\
    \ {\n                    int index = map.get(sum);\n                    if(index\
    \ != i) {\n                        result.add(index, nums.get(j));\n         \
    \               map.put(sum, j);\n                    }\n                }\n \
    \           }\n        }\n        return result;", "        // Write your code\
    \ here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n         \
    \   for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int sum = nums.get(i).intValue();\n            if (map.containsKey(sum))\
    \ {\n                map.put(sum, map.get(sum) + i);\n            } else {\n \
    \               map.put(sum, i);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int index = entry.getValue();\n\
    \            int value = entry.getKey();\n            result.add(value);\n   \
    \     }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = nums.get(i) % 10;\n         \
    \   if (map.containsKey(sum)) {\n                map.put(sum, map.get(sum) + 1);\n\
    \            } else {\n                map.put(sum, 1);\n            }\n     \
    \   }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n  \
    \          int count = entry.getValue();\n            int index = entry.getKey();\n\
    \            while (count > 0) {\n                result.add(index);\n       \
    \         count--;\n                index++;\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0;\
    \ i < nums.size(); i++){\n            int digit = nums.get(i) % 10;\n        \
    \    int sum = map.get(digit);\n            if(sum == null){\n               \
    \ map.put(digit, i);\n                result.add(nums.get(i));\n            }\n\
    \            else{\n                int index = map.get(digit);\n            \
    \    Collections.swap(result, index, i);\n            }\n        }\n        return\
    \ result;", "        // TODO: Write your code here\n        ArrayList<Integer>\
    \ numsSorted = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++){\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++){\n                sum += nums.get(j);\n            }\n            if(sum\
    \ == nums.get(i)){\n                numsSorted.add(nums.get(i));\n           \
    \ }\n        }\n        return numsSorted;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int sum = 0;\n            while(i !=\
    \ 0) {\n                sum += i % 10;\n                i /= 10;\n           \
    \ }\n            map.put(sum, i);\n        }\n        for(int i : map.values())\
    \ {\n            result.add(i);\n        }\n        return result;", '        //
    Write your code here', "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(sum == nums.get(i)) {\n                    result.add(j);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < nums.size(); i++) {\n            int sum = 0;\n            for(int j\
    \ = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n        \
    \        if(sum == nums.get(i)) {\n                    result.add(j);\n      \
    \              break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n       \
    \ for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n         \
    \   for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Integer sum\
    \ : map.values()) {\n            result.add(sum);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j\
    \ < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            if(!map.containsKey(sum)) {\n                result.add(nums.get(i));\n\
    \                map.put(sum, i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n   \
    \         int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n \
    \               sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                result.add(nums.get(i));\n                map.put(sum, i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new\
    \ HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = nums.get(i);\n            Integer key = map.get(sum);\n\
    \            if (key == null) {\n                key = i;\n                map.put(sum,\
    \ key);\n            }\n            result.add(key);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n       \
    \ for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = digit + map.get(digit);\n            map.put(digit,\
    \ sum);\n        }\n        map.forEach((k, v) -> result.add(k));\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        int[]\
    \ sums = new int[10];\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       int sum = 0;\n            for (int j = 0; j < nums.size(); j++) {\n  \
    \              sum += nums.get(j);\n            }\n            sums[sum % 10]\
    \ = sums[sum % 10] + 1;\n        }\n        for (int i = 0; i < 10; i++) {\n \
    \           if (sums[i] != 0) {\n                result.add(sums[i]);\n      \
    \      }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            int index = map.get(sum);\n            if (index == -1) {\n     \
    \           index = result.size();\n                result.add(sum);\n       \
    \         map.put(sum, index);\n            } else {\n                result.add(index,\
    \ sum);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int digit = i % 10;\n            int\
    \ sum = map.getOrDefault(digit, 0) + digit;\n            map.put(digit, sum);\n\
    \        }\n        for(int i : map.keySet()) {\n            int sum = map.get(i);\n\
    \            int index = i;\n            while(sum > 0) {\n                sum\
    \ += nums.get(index--);\n            }\n            result.add(i);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer i\
    \ : nums) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n\
    \        List<Map.Entry<Integer, Integer>> list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        for (Map.Entry<Integer, Integer> entry : list) {\n            result.add(entry.getKey());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n            int\
    \ sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n             \
    \   sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                result.add(nums.get(i));\n                map.put(sum, i);\n\
    \            }\n        }\n        return result;", '        // Your code here',
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i : nums) {\n            int digit =\
    \ i % 10;\n            int sum = map.get(digit);\n            map.put(digit, sum\
    \ == null ? i : sum + i);\n        }\n        for(Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            int index = nums.indexOf(entry.getValue());\n\
    \            result.add(index);\n        }\n        return result;", "       \
    \ ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j\
    \ < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            map.put(sum, i);\n        }\n        for(Map.Entry<Integer, Integer>\
    \ entry : map.entrySet()) {\n            result.add(entry.getValue());\n     \
    \   }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int digit = nums.get(i) % 10;\n       \
    \     int sum = map.get(digit);\n            if (sum == null) {\n            \
    \    sum = 0;\n            }\n            sum += nums.get(i);\n            map.put(digit,\
    \ sum);\n        }\n        map.forEach((k, v) -> {\n            if (v > 0) {\n\
    \                result.add(k);\n            }\n        });\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int sum = nums.get(i) % 10;\n            if (map.containsKey(sum))\
    \ {\n                map.put(sum, map.get(sum) + 1);\n            } else {\n \
    \               map.put(sum, 1);\n            }\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            int index = nums.indexOf(entry.getKey());\n\
    \            int count = entry.getValue();\n            while (index >= 0) {\n\
    \                nums.remove(index);\n                index--;\n             \
    \   count--;\n            }\n            result.add(count);\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n  \
    \      for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n    \
    \        for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Integer key\
    \ : map.keySet()) {\n            result.add(key);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for(int\
    \ j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n      \
    \          if(sum == nums.get(i)) {\n                    result.add(j);\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ return result;", "        ArrayList<Integer> result = new ArrayList<>();\n \
    \       Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i\
    \ < nums.size(); i++) {\n            int sum = nums.get(i);\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(sum);\n    \
    \        }\n        }\n        for(int i = 0; i < nums.size(); i++) {\n      \
    \      int sum = nums.get(i);\n            int index = map.get(sum);\n       \
    \     Collections.swap(nums, index, i);\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j\
    \ < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            map.put(sum, i);\n        }\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n            }\n            if(map.containsKey(sum))\
    \ {\n                result.add(map.get(sum));\n            }\n        }\n   \
    \     return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            int digit = nums.get(i);\n\
    \            while (digit > 0) {\n                sum += digit % 10;\n       \
    \         digit /= 10;\n            }\n            map.put(sum, i);\n        }\n\
    \        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n        \
    \    int index = entry.getValue();\n            int value = entry.getKey();\n\
    \            int index = nums.get(index);\n            int value = nums.get(value);\n\
    \            result.add(value);\n        }\n        return result;", "       \
    \ ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n   \
    \         int sum = nums.get(i).intValue();\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n         \
    \   for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            int index = i;\n            while(sum > 0){\n    \
    \            sum += nums.get(index);\n                index++;\n            }\n\
    \            result.add(nums.get(index));\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Arrays.sort(nums);\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           int index = i;\n            while (index >= 0) {\n               \
    \ sum += nums.get(index);\n                index--;\n            }\n         \
    \   if (sum != 0) {\n                result.add(sum);\n            }\n       \
    \ }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            for (int j =\
    \ 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n          \
    \  }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            int index = map.get(sum);\n            if (index == -1) {\n     \
    \           index = result.size();\n                result.add(sum);\n       \
    \         map.put(sum, index);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n   \
    \         int digit = nums.get(i) % 10;\n            int sum = map.getOrDefault(digit,\
    \ 0);\n            map.put(digit, sum + 1);\n        }\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            int digit = nums.get(i) % 10;\n       \
    \     int sum = map.getOrDefault(digit, 0);\n            if(sum > 0) {\n     \
    \           result.add(nums.get(i));\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = nums.get(i) % 10;\n            int index = map.get(sum);\n\
    \            if(index == null) {\n                index = result.size();\n   \
    \             map.put(sum, index);\n                result.add(nums.get(i));\n\
    \            } else {\n                result.add(nums.get(index));\n        \
    \    }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for (Integer i : nums) {\n            int digit = i % 10;\n\
    \            int sum = digit + map.getOrDefault(digit, 0);\n            map.put(digit,\
    \ sum);\n        }\n        map.entrySet().stream().sorted(Map.Entry.<Integer,\
    \ Integer>comparingByValue()).forEach(e -> result.add(e.getKey()));\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = digit;\n            } else\
    \ {\n                sum += digit;\n            }\n            map.put(digit,\
    \ sum);\n        }\n        Set<Integer> keys = map.keySet();\n        List<Integer>\
    \ list = keys.stream().sorted().collect(Collectors.toList());\n        for (int\
    \ i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n     \
    \   }\n        return result;", '        // Write your code here', "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer num : nums) {\n            int digit = num % 10;\n     \
    \       int sum = map.get(digit);\n            if (sum == null) {\n          \
    \      sum = 0;\n            }\n            map.put(digit, sum + 1);\n       \
    \ }\n        for (Integer num : nums) {\n            int digit = num % 10;\n \
    \           int sum = map.get(digit);\n            if (sum > 0) {\n          \
    \      result.add(num);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            while (index != 0) {\n        \
    \        result.add(nums[index]);\n                index--;\n            }\n \
    \       }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            for (int j =\
    \ 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n          \
    \      if (map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    result.add(index, nums.get(j));\n                    map.put(sum,\
    \ j);\n                    break;\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer i\
    \ : nums) {\n            int sum = 0;\n            while (i != 0) {\n        \
    \        sum += i % 10;\n                i /= 10;\n            }\n           \
    \ map.put(sum, i);\n        }\n        for (Map.Entry<Integer, Integer> entry\
    \ : map.entrySet()) {\n            Integer key = entry.getKey();\n           \
    \ Integer value = entry.getValue();\n            result.add(value);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for(int\
    \ j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n      \
    \      }\n            if(sorted.contains(sum)) {\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(o1, o2);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o2);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o1);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o2);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o1);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o2);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o1);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o2);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o1);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o2);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o1);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o2) {\n                        return Integer.compare(i, o2);\n\
    \                    }\n                });\n                Collections.sort(sorted,\
    \ new Comparator<Integer>() {\n                    public int compare(Integer\
    \ o1, Integer o", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> temp = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for(int\
    \ j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n      \
    \      }\n            if(sum == nums.get(i)) {\n                temp.add(nums.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          result.add(temp.get(i));\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            result.add(nums.get(index));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = Arrays.binarySearch(sums, sums[i]);\n            if (index\
    \ < 0) {\n                index = -index - 1;\n            }\n            result.add(nums.get(index));\n\
    \        }\n        return result;", '        // TODO: Write your code here',
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (Integer i : nums) {\n            int digit\
    \ = i % 10;\n            int sum = map.getOrDefault(digit, 0) + digit;\n     \
    \       map.put(digit, sum);\n        }\n        map.forEach((k, v) -> {\n   \
    \         int index = result.indexOf(k);\n            if (index != -1) {\n   \
    \             result.add(index, v);\n            } else {\n                result.add(v);\n\
    \            }\n        });\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            if (sum == null) {\n\
    \                sum = digit;\n            } else {\n                sum += digit;\n\
    \            }\n            map.put(digit, sum);\n        }\n        Set<Integer>\
    \ keys = map.keySet();\n        List<Integer> list = keys.stream().sorted().collect(Collectors.toList());\n\
    \        for (int i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if (sum > 9) {\n                sum -=\
    \ 10;\n                temp.add(sum);\n            } else {\n                temp.add(sum);\n\
    \            }\n        }\n        Collections.sort(temp);\n        for (int i\
    \ = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n       \
    \ }\n        return result;", "        // Write your code here\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i=0;i<nums.size();i++){\n\
    \            int sum = 0;\n            for(int j=0;j<nums.size();j++){\n     \
    \           sum+=nums.get(j);\n            }\n            if(sum==nums.get(i)){\n\
    \                result.add(nums.get(i));\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0;\
    \ i < nums.size(); i++){\n            int digit = nums.get(i) % 10;\n        \
    \    int sum = map.get(digit);\n            map.put(digit, sum + nums.get(i));\n\
    \        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()){\n\
    \            int index = result.size();\n            int sum = entry.getValue();\n\
    \            while(sum > 0){\n                sum -= result.get(index--);\n  \
    \          }\n            result.add(index, entry.getKey());\n        }\n    \
    \    return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i)\
    \ % 10;\n            int sum = map.get(digit);\n            map.put(digit, sum\
    \ + 1);\n        }\n        for(int i = 0; i < map.size(); i++) {\n          \
    \  int value = map.get(i);\n            int index = i;\n            while(index\
    \ > 0 && map.get(index - 1) == value) {\n                index--;\n          \
    \  }\n            result.add(index);\n        }\n        return result;", "  \
    \      // Write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = 0;\n   \
    \         for(int j = 0; j < nums.size(); j++){\n                sum += nums.get(j);\n\
    \            }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           while (nums.size() > 0) {\n                sum += nums.remove(0);\n\
    \            }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
    \            if (map.containsKey(sum)) {\n                Integer index = map.get(sum);\n\
    \                result.add(index, nums.get(i));\n            } else {\n     \
    \           map.put(sum, i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n       \
    \     if(!map.containsKey(sum)) {\n                map.put(sum, i);\n        \
    \        result.add(nums.get(i));\n            }\n        }\n        for(int i\
    \ = 0; i < nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n\
    \            int index = map.get(sum);\n            if(index != i) {\n       \
    \         Collections.swap(nums, i, index);\n            }\n        }\n      \
    \  return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int[] sums = new int[10];\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int digitSum = 0;\n            while (nums.get(i) > 0) {\n  \
    \              digitSum += nums.get(i) % 10;\n                nums.get(i) /= 10;\n\
    \            }\n            sums[digitSum]++;\n        }\n        for (int i =\
    \ 0; i < sums.length; i++) {\n            if (sums[i] > 1) {\n               \
    \ result.add(sums[i]);\n            }\n        }\n        return result;", " \
    \       // TODO: Write your code here\n        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++){\n     \
    \       int sum = 0;\n            for(int j = 0; j < nums.size(); j++){\n    \
    \            sum += nums.get(j);\n            }\n            if(sum == nums.get(i)){\n\
    \                result.add(nums.get(i));\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        ArrayList<Integer> temp = new ArrayList<>();\n        int sum = 0;\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if (sum > 9) {\n                sum -= 10;\n                temp.add(sum);\n\
    \            } else {\n                temp.add(sum);\n            }\n       \
    \ }\n        Collections.sort(temp);\n        for (int i = 0; i < temp.size();\
    \ i++) {\n            result.add(temp.get(i));\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j\
    \ < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            if(!map.containsKey(sum)) {\n                map.put(sum, i);\n \
    \               result.add(nums.get(i));\n            }\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            result.add(entry.getValue());\n        }\n        return result;",
  "        // Write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i=0;i<nums.size();i++){\n            int sum = 0;\n         \
    \   for(int j=0;j<nums.size();j++){\n                sum += nums.get(j);\n   \
    \         }\n            if(sum == nums.get(i)){\n                result.add(nums.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = digit;\n            } else\
    \ {\n                sum += digit;\n            }\n            map.put(digit,\
    \ sum);\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int index = nums.indexOf(entry.getValue());\n            result.add(index);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n      \
    \      for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n            int\
    \ sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n             \
    \   sum += nums.get(j);\n            }\n            map.put(sum, i);\n       \
    \ }\n        for(Integer sum : map.values()) {\n            result.add(sum);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(sum == i) {\n                    sorted.add(j);\n        \
    \        }\n            }\n        }\n        for(int i = 0; i < sorted.size();\
    \ i++) {\n            result.add(sorted.get(i));\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for (Integer num :\
    \ nums) {\n            int digit = num % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = digit;\n            } else\
    \ {\n                sum += digit;\n            }\n            map.put(digit,\
    \ sum);\n        }\n        List<Map.Entry<Integer, Integer>> list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        for (Map.Entry<Integer, Integer> entry : list) {\n            result.add(entry.getKey());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n     \
    \   for(int i : nums) {\n            int sum = 0;\n            while(i != 0) {\n\
    \                sum += i % 10;\n                i /= 10;\n            }\n   \
    \         map.put(sum, i);\n        }\n        for(int i : map.keySet()) {\n \
    \           int index = i;\n            while(index != 0) {\n                result.add(map.get(index));\n\
    \                index /= 10;\n            }\n        }\n        return result;",
  '        // Write your code here', "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> temp = new ArrayList<Integer>();\n        int sum\
    \ = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if (sum > 9) {\n                sum -= 10;\n                temp.add(sum);\n\
    \            } else {\n                temp.add(sum);\n            }\n       \
    \ }\n        Collections.sort(temp);\n        for (int i = 0; i < temp.size();\
    \ i++) {\n            result.add(temp.get(i));\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = digit;\n            } else\
    \ {\n                sum += digit;\n            }\n            map.put(digit,\
    \ sum);\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            int index = nums.indexOf(entry.getValue());\n            result.add(index);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n            int\
    \ digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n         \
    \   if(sum == null) {\n                sum = digit;\n                map.put(digit,\
    \ sum);\n            } else {\n                map.put(digit, sum + digit);\n\
    \            }\n        }\n        for(int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            int index = i;\n            while(index > 0 && map.get(index - 1)\
    \ == sum) {\n                index--;\n            }\n            result.add(index);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        \n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n                if(sum == i) {\n   \
    \                 result.add(j);\n                }\n            }\n        }\n\
    \        \n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n  \
    \      for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n    \
    \        for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Integer key\
    \ : map.keySet()) {\n            result.add(map.get(key));\n        }\n      \
    \  return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n        \
    \    for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if(!map.containsKey(sum)) {\n                map.put(sum,\
    \ i);\n                result.add(nums.get(i));\n            }\n        }\n  \
    \      return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            for (int j =\
    \ 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n          \
    \  }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        int[] sums = nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(sums);\n        for (int i = 0; i < sums.length; i++) {\n\
    \            int index = sums[i];\n            result.add(nums.get(index));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n    \
    \        int sum = 0;\n            for(int j = 0; j < nums.size(); j++) {\n  \
    \              sum += nums.get(j);\n                if(sum == nums.get(i)) {\n\
    \                    result.add(j);\n                }\n            }\n      \
    \  }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            for(int j = 0;\
    \ j < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n\
    \            map.put(sum, i);\n        }\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            int sum = nums.get(i);\n            Integer index = map.get(sum);\n\
    \            if(index != null && index != i) {\n                Collections.swap(nums,\
    \ i, index);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : nums) {\n            int digit = i % 10;\n            int\
    \ sum = map.get(digit);\n            map.put(digit, sum + i);\n        }\n   \
    \     for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            int\
    \ digit = entry.getKey();\n            int sum = entry.getValue();\n         \
    \   int index = nums.indexOf(sum);\n            result.add(index, digit);\n  \
    \      }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n        \
    \    for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if(map.containsKey(sum)) {\n                    int index = map.get(sum);\n\
    \                    if(index != i) {\n                        result.add(index,\
    \ nums.get(j));\n                        map.put(sum, j);\n                  \
    \  }\n                    break;\n                }\n                map.put(sum,\
    \ j);\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> map =\
    \ new HashMap<Integer, Integer>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            map.put(sum,\
    \ i);\n        }\n        for(int i = 0; i < nums.size(); i++) {\n           \
    \ int index = map.get(nums.get(i));\n            if(index != i) {\n          \
    \      result.add(nums.get(index));\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n  \
    \          for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            int index = i;\n            while(sum > 0) {\n   \
    \             sum -= nums.get(index);\n                index++;\n            }\n\
    \            result.add(index);\n        }\n        return result;", '        //
    Write your code here', "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n        \
    \    for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            map.put(sum, i);\n        }\n        for(Integer key\
    \ : map.keySet()) {\n            int index = map.get(key);\n            result.add(nums.get(index));\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        ArrayList<Integer> tmp = new ArrayList<>();\n      \
    \  for(int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n        \
    \    for(int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            tmp.add(sum);\n        }\n        Collections.sort(tmp);\n\
    \        for(int i = 0; i < tmp.size(); i++) {\n            int index = Collections.binarySearch(tmp,\
    \ tmp.get(i));\n            result.add(index, nums.get(i));\n        }\n     \
    \   return result;", "        // Write your code here\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size();\
    \ i++){\n            int sum = 0;\n            for(int j = 0; j < nums.size();\
    \ j++){\n                sum += nums.get(j);\n            }\n            if(sum\
    \ == nums.get(i)){\n                result.add(nums.get(i));\n            }\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
    \          int digit = nums.get(i) % 10;\n            int sum = map.get(digit);\n\
    \            if (sum == null) {\n                sum = 0;\n            }\n   \
    \         sum += nums.get(i);\n            map.put(digit, sum);\n        }\n \
    \       map.forEach((k, v) -> {\n            Integer value = v;\n            Integer\
    \ sum = k;\n            if (sum > value) {\n                result.add(value);\n\
    \            }\n        });\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            if (map.containsKey(sum)) {\n                map.put(sum,\
    \ map.get(sum) + i);\n            } else {\n                map.put(sum, i);\n\
    \            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            result.add(entry.getValue());\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            if(!map.containsKey(sum))\
    \ {\n                map.put(sum, i);\n                result.add(nums.get(i));\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        ArrayList<Integer> result = new ArrayList<>();\n        for(int\
    \ i=0;i<nums.size();i++){\n            int sum = 0;\n            for(int j=0;j<nums.size();j++){\n\
    \                sum += nums.get(j);\n            }\n            if(sum == nums.get(i)){\n\
    \                result.add(nums.get(i));\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            int digit = 0;\n\
    \            while (nums.get(i) > 0) {\n                digit = nums.get(i) %\
    \ 10;\n                sum += digit;\n                nums.remove(i);\n      \
    \      }\n            map.put(sum, i);\n        }\n        for (Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
