language: java
name: HumanEval_119_match_parens
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i=0; i<lst.size(); i++) {\n\
    \            for(int j=i+1; j<lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = true;\n      \
    \              lst.remove(i);\n                    lst.remove(j);\n          \
    \          i--;\n                    j--;\n                    break;\n      \
    \          }\n            }\n        }\n        if(flag) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnd0xnwb7.java:38)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = true;\n\
    \            }\n            else if(lst.get(i).equals(\")\")) {\n            \
    \    flag = false;\n            }\n            if(flag == true) {\n          \
    \      return \"Yes\";\n            }\n        }\n        return \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t358p45.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && checkParens(s);\n        }\n        if(isGood) return \"\
    Yes\";\n        return \"No\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9j64q6qh.java:21: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s);\n                               ^\n  symbol:   method\
    \ checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(i == lst.size() - 1) {\n                flag = checkParens(lst.get(i),\
    \ lst.get(i));\n            } else {\n                flag = checkParens(lst.get(i),\
    \ lst.get(i + 1));\n            }\n            if(!flag) {\n                return\
    \ \"No\";\n            }\n        }\n        return \"Yes\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm858u7zo.java:22: error: cannot find symbol\n                flag\
    \ = checkParens(lst.get(i), lst.get(i));\n                       ^\n  symbol:\
    \   method checkParens(String,String)\n  location: class Problem\n/tmp/tmpm858u7zo.java:24:\
    \ error: cannot find symbol\n                flag = checkParens(lst.get(i), lst.get(i\
    \ + 1));\n                       ^\n  symbol:   method checkParens(String,String)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isMatch = false;\n                    break;\n          \
    \      } else {\n                    isMatch = true;\n                }\n    \
    \        } else {\n                isMatch = false;\n                break;\n\
    \            }\n        }\n        return isMatch ? \"Yes\" : \"No\";\n}\n   \
    \ public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgcet9th.java:40)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            } else {\n                isGood = false;\n             \
    \   break;\n            }\n        }\n        if (isGood) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph5mboyk1.java:42)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i=0; i<lst.size()-1; i++) {\n            for(int j=i+1;\
    \ j<lst.size(); j++) {\n                if(lst.get(i).equals(\"(\") && lst.get(j).equals(\"\
    )\")) {\n                    flag = true;\n                    res.add(lst.get(i));\n\
    \                    res.add(lst.get(j));\n                    break;\n      \
    \          }\n            }\n        }\n        if(flag) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpviigrcp4.java:38)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = true;\n\
    \            }\n            else if(lst.get(i).equals(\")\")) {\n            \
    \    flag = false;\n            }\n            if(flag == true) {\n          \
    \      return \"Yes\";\n            }\n        }\n        return \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t358p45.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        if (isGood) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmp6qvbc6bs.java:25)\n\
    \tat Problem.main(tmp6qvbc6bs.java:39)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).charAt(0) == '(' && lst.get(i).charAt(lst.get(i).length()\
    \ - 1) == ')') || (lst.get(i).charAt(0) == ')' && lst.get(i).charAt(lst.get(i).length()\
    \ - 1) == '(')) {\n                flag = true;\n            }\n        }\n  \
    \      if(flag) {\n            return \"Yes\";\n        }\n        return \"No\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3yv3qcw6.java:31)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for (String s : lst) {\n            isGood = isGood && matchParens(s,\
    \ result);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxhssekl.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(s, result);\n\
    \                               ^\n  required: ArrayList<String>\n  found:   \
    \ String,ArrayList<String>\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i=0;i<lst.size();i++) {\n            String str =\
    \ lst.get(i);\n            for(int j=0;j<str.size();j++) {\n                if(str.charAt(j)\
    \ == '(') {\n                    flag = true;\n                    break;\n  \
    \              }\n                if(str.charAt(j) == ')') {\n               \
    \     flag = false;\n                    break;\n                }\n         \
    \   }\n            if(flag) {\n                res.add(str);\n            }\n\
    \        }\n        if(res.size() == 0) {\n            return \"No\";\n      \
    \  }\n        else if(res.size() == 1) {\n            return \"Yes\";\n      \
    \  }\n        else {\n            return \"Yes\";\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5lz5840p.java:23: error: cannot find symbol\n            for(int\
    \ j=0;j<str.size();j++) {\n                             ^\n  symbol:   method\
    \ size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = matchParens(lst,\
    \ i, flag);\n            }\n        }\n        return flag ? \"Yes\" : \"No\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1xdmbe.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n                flag = matchParens(lst, i, flag);\n\
    \                       ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,boolean\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            int open = str.indexOf('(');\n            int close\
    \ = str.indexOf(')');\n            if(i == lst.size() - 1) {\n               \
    \ if(open < close) {\n                    flag = false;\n                }\n \
    \           } else {\n                if(open < close && close > open) {\n   \
    \                 flag = false;\n                }\n            }\n          \
    \  if(flag) {\n                res.add(str);\n            }\n        }\n     \
    \   return res.isEmpty() ? \"No\" : \"Yes\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnk5elqc7.java:41)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        boolean\
    \ isGood = true;\n        for (String s : lst) {\n            isGood = isGood\
    \ && matchParens(s, result);\n        }\n        return isGood ? \"Yes\" : \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7mah0yfx.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(s, result);\n\
    \                               ^\n  required: ArrayList<String>\n  found:   \
    \ String,ArrayList<String>\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            int open = str.indexOf('(');\n            int close\
    \ = str.indexOf(')');\n            if(flag) {\n                if(open < close)\
    \ {\n                    res.add(str);\n                    flag = false;\n  \
    \              }\n            } else {\n                if(open > close) {\n \
    \                   res.add(str);\n                    flag = true;\n        \
    \        }\n            }\n        }\n        if(res.size() == 0) {\n        \
    \    return \"No\";\n        } else {\n            return \"Yes\";\n        }\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcowumku.java:45)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i=0; i<lst.size(); i++) {\n            if(lst.get(i).equals(\"\
    (\")) {\n                flag = true;\n            }\n            if(flag) {\n\
    \                res.add(lst.get(i));\n            }\n            if(lst.get(i).equals(\"\
    )\")) {\n                flag = false;\n            }\n        }\n        if(res.isEmpty())\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx2a62vq5.java:38)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).equals(\"(\")) || (lst.get(i).equals(\")\"))){\n\
    \                flag = true;\n            }\n        }\n        if(flag == true)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo4s_09w1.java:32)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(i == lst.size() - 1) {\n                flag = lst.contains(lst.get(i));\n\
    \            } else {\n                flag = lst.contains(lst.get(i + 1));\n\
    \            }\n            if(!flag) {\n                return \"No\";\n    \
    \        }\n        }\n        return \"Yes\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqno5jbau.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(String s : lst) {\n            flag = true;\n        \
    \    for(int i = 0; i < s.length(); i++) {\n                if(s.charAt(i) ==\
    \ '(') {\n                    flag = false;\n                    break;\n    \
    \            }\n            }\n            if(flag) {\n                res.add(s);\n\
    \            }\n        }\n        if(res.size() == 0) {\n            return \"\
    No\";\n        }\n        for(int i = 0; i < res.size(); i++) {\n            String\
    \ s = res.remove(i);\n            for(int j = 0; j < s.length(); j++) {\n    \
    \            if(s.charAt(j) != ')') {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n            if(flag)\
    \ {\n                res.add(s);\n            }\n        }\n        if(res.size()\
    \ == 0) {\n            return \"No\";\n        }\n        return \"Yes\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_cu8hyyr.java:55)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).charAt(0) == '(' && lst.get(i).charAt(lst.get(i).length()-1)\
    \ == ')') || (lst.get(i).charAt(0) == ')' && lst.get(i).charAt(lst.get(i).length()-1)\
    \ == '(')) {\n                flag = false;\n            }\n        }\n      \
    \  if(flag) {\n            return \"Yes\";\n        }\n        return \"No\";\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1htz8152.java:32)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String s\
    \ = lst.get(i);\n            int open = s.indexOf('(');\n            int close\
    \ = s.indexOf(')');\n            int open2 = s.indexOf('(');\n            int\
    \ close2 = s.indexOf(')');\n            int open3 = s.indexOf('(');\n        \
    \    int close3 = s.indexOf(')');\n            int open4 = s.indexOf('(');\n \
    \           int close4 = s.indexOf(')');\n            int open5 = s.indexOf('(');\n\
    \            int close5 = s.indexOf(')');\n            int open6 = s.indexOf('(');\n\
    \            int close6 = s.indexOf(')');\n            int open7 = s.indexOf('(');\n\
    \            int close7 = s.indexOf(')');\n            int open8 = s.indexOf('(');\n\
    \            int close8 = s.indexOf(')');\n            int open9 = s.indexOf('(');\n\
    \            int close9 = s.indexOf(')');\n            int open10 = s.indexOf('(');\n\
    \            int close10 = s.indexOf(')');\n            int open11 = s.indexOf('(');\n\
    \            int close11 = s.indexOf(')');\n            int open12 = s.indexOf('(');\n\
    \            int close12 = s.indexOf(')');\n            int open13 = s.indexOf('(');\n\
    \            int close13 = s.indexOf(')');\n            int open14 = s.indexOf('(');\n\
    \            int close14 = s.indexOf(')');\n            int open15 = s.indexOf('(');\n\
    \            int close15 = s.indexOf(')');\n            int open16 = s.indexOf('(');\n\
    \            int close16 = s.indexOf(')');\n            int open17 = s.indexOf('(');\n\
    \            int close17 = s.indexOf(')');\n            int open18 = s.indexOf('(');\n\
    \            int close18 = s.indexOf(')');\n            int open19 = s.indexOf('(');\n\
    \            int close19 = s.indexOf(')');\n            int open20 = s.indexOf('(');\n\
    \            int close20 = s.indexOf(')');\n            int open21 = s.indexOf('(');\n\
    \            int close21 = s.indexOf(')');\n            int open22 = s.indexOf('(');\n\
    \            int close22 = s.indexOf(')');\n            int open23 = s.indexOf('(');\n\
    \            int close23 = s.indexOf(')');\n            int open24 = s.indexOf('(');\n\
    \            int close24 = s.indexOf(')');\n            int open25 = s.indexOf('(');\n\
    \            int close25 = s.indexOf(')');\n            int open26 = s.indexOf('\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_g873gsm.java:73: error: illegal line end in character literal\n\
    \            int open26 = s.indexOf('\n                                   ^\n\
    /tmp/tmp_g873gsm.java:75: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011252
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).equals(\"(\"))&&(lst.get(i+1).equals(\")\")))\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \      }\n        if(flag) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp568b4fkl.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            good = good && matchParens(lst.get(i), lst.get(i + 1));\n   \
    \     }\n        return good ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6y32m1u.java:21: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            good = good && matchParens(lst.get(i),\
    \ lst.get(i + 1));\n                           ^\n  required: ArrayList<String>\n\
    \  found:    String,String\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> good = new ArrayList<String>();\n        ArrayList<String>\
    \ bad = new ArrayList<String>();\n        for (String s : lst) {\n           \
    \ if (s.contains(\"(\")) {\n                good.add(s);\n            } else {\n\
    \                bad.add(s);\n            }\n        }\n        if (good.size()\
    \ == 0) {\n            return \"No\";\n        }\n        ArrayList<String> good2\
    \ = new ArrayList<String>();\n        for (String s : good) {\n            good2.add(s.replace(\"\
    (\", \"\").replace(\")\", \"\"));\n        }\n        ArrayList<String> bad2 =\
    \ new ArrayList<String>();\n        for (String s : bad) {\n            bad2.add(s.replace(\"\
    (\", \"\").replace(\")\", \"\"));\n        }\n        ArrayList<String> good3\
    \ = new ArrayList<String>();\n        ArrayList<String> bad3 = new ArrayList<String>();\n\
    \        for (String s : good2) {\n            good3.add(s.replace(\")\", \"\"\
    ));\n        }\n        for (String s : bad2) {\n            bad3.add(s.replace(\"\
    )\", \"\"));\n        }\n        ArrayList<String> good4 = new ArrayList<String>();\n\
    \        ArrayList<String> bad4 = new ArrayList<String>();\n        for (String\
    \ s : good3) {\n            good4.add(s.replace(\"(\", \"\"));\n        }\n  \
    \      for (String s : bad3) {\n            bad4.add(s.replace(\"(\", \"\"));\n\
    \        }\n        ArrayList<String> good5 = new ArrayList<String>();\n     \
    \   ArrayList<String> bad5 = new ArrayList<String>();\n        for (String s :\
    \ good4) {\n            good5.add(s.replace(\")\", \"\"));\n        }\n      \
    \  for (String s : bad4) {\n            bad5.add(s.replace(\")\", \"\"));\n  \
    \      }\n        ArrayList<String> good6 = new ArrayList<String>();\n       \
    \ ArrayList<String> bad6 = new ArrayList<String>();\n        for (String s : good5)\
    \ {\n            good6.add(s.replace(\"(\", \"\"));\n        }\n        for (String\
    \ s : bad5) {\n            bad6.add(s.replace(\"(\", \"\"));\n        }\n    \
    \    ArrayList<String> good7 = new ArrayList<String>();\n        ArrayList<String>\
    \ bad7 = new ArrayList<String>();\n        for (String s : good6) {\n        \
    \    good7.add(s.replace(\")\", \"\"));\n        }\n        for (String s : bad6)\
    \ {\n            bad7.add(s.replace(\")\", \"\"));\n        }\n        ArrayList<String>\
    \ good8 = new ArrayList<String>();\n        ArrayList<String> bad8 = new ArrayList<String>();\n\
    \        for (String s : good7) {\n            good8.add(s.replace(\"(\", \"\"\
    ));\n        }\n        for (String s : bad7) {\n            bad8.add(s.replace(\"\
    (\", \"\"));\n        }\n        ArrayList<String> good9 = new ArrayList<String>();\n\
    \        ArrayList<String> bad9 = new ArrayList<String>();\n        for (String\
    \ s : good8) {\n            good9.add(s.replace(\")\", \"\"));\n\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx9haduhe.java:93: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        for (String s : lst)\
    \ {\n            stack.push(s);\n        }\n        boolean isGood = true;\n \
    \       while (stack.size() > 0) {\n            String s = stack.pop();\n    \
    \        if (s.equals(\"(\")) {\n                stack.push(\")\");\n        \
    \    } else if (s.equals(\")\")) {\n                stack.push(\"(\");\n     \
    \       } else {\n                isGood = false;\n                break;\n  \
    \          }\n        }\n        if (isGood) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        for(String s : lst)\
    \ {\n            if(!s.equals(\"(\") && !s.equals(\")\")) {\n                return\
    \ \"No\";\n            }\n            stack.push(s);\n        }\n        while(!stack.isEmpty())\
    \ {\n            String s = stack.pop();\n            if(!s.equals(\"(\")) {\n\
    \                return \"No\";\n            }\n            if(!stack.isEmpty())\
    \ {\n                String s2 = stack.pop();\n                if(!s2.equals(\"\
    )\")) {\n                    return \"No\";\n                }\n            }\n\
    \        }\n        return \"Yes\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcfzy0dts.java:41)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> lst2 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst3 = new ArrayList<String>();\n        ArrayList<String> lst4 = new ArrayList<String>();\n\
    \        ArrayList<String> lst5 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst6 = new ArrayList<String>();\n        ArrayList<String> lst7 = new ArrayList<String>();\n\
    \        ArrayList<String> lst8 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst9 = new ArrayList<String>();\n        ArrayList<String> lst10 = new ArrayList<String>();\n\
    \        ArrayList<String> lst11 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst12 = new ArrayList<String>();\n        ArrayList<String> lst13 = new ArrayList<String>();\n\
    \        ArrayList<String> lst14 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst15 = new ArrayList<String>();\n        ArrayList<String> lst16 = new ArrayList<String>();\n\
    \        ArrayList<String> lst17 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst18 = new ArrayList<String>();\n        ArrayList<String> lst19 = new ArrayList<String>();\n\
    \        ArrayList<String> lst20 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst21 = new ArrayList<String>();\n        ArrayList<String> lst22 = new ArrayList<String>();\n\
    \        ArrayList<String> lst23 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst24 = new ArrayList<String>();\n        ArrayList<String> lst25 = new ArrayList<String>();\n\
    \        ArrayList<String> lst26 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst27 = new ArrayList<String>();\n        ArrayList<String> lst28 = new ArrayList<String>();\n\
    \        ArrayList<String> lst29 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst30 = new ArrayList<String>();\n        ArrayList<String> lst31 = new ArrayList<String>();\n\
    \        ArrayList<String> lst32 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst33 = new ArrayList<String>();\n        ArrayList<String> lst34 = new ArrayList<String>();\n\
    \        ArrayList<String> lst35 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst36 = new ArrayList<String>();\n        ArrayList<String> lst37 = new ArrayList<String>();\n\
    \        ArrayList<String> lst38 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst39 = new ArrayList<String>();\n        ArrayList<String> lst40 = new ArrayList<String>();\n\
    \        ArrayList<String> lst41 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst42 = new ArrayList<String>();\n        ArrayList<String> lst43 = new ArrayList<String>();\n\
    \        ArrayList<String> lst44 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst45 = new ArrayList<String>();\n        ArrayList<String> lst46 = new ArrayList<String>();\n\
    \        ArrayList<String> lst47 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst48 = new ArrayList<String>();\n        ArrayList<String> lst49 = new ArrayList<String>();\n\
    \        ArrayList<String> lst50 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst51 = new ArrayList<String>();\n        ArrayList<String> lst5\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyeeg1ur3.java:69: error: ';' expected\n        ArrayList<String>\
    \ lst5\n                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011254
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n     \
    \           if(str.charAt(j) == '(') {\n                    flag = true;\n   \
    \                 break;\n                }\n                if(str.charAt(j)\
    \ == ')') {\n                    flag = false;\n                    break;\n \
    \               }\n            }\n            if(flag) {\n                res.add(str);\n\
    \            }\n        }\n        if(res.size() == 0) {\n            return \"\
    No\";\n        }\n        for(int i = 0; i < res.size(); i++) {\n            String\
    \ str = res.get(i);\n            for(int j = 0; j < str.size(); j++) {\n     \
    \           if(str.charAt(j) == '(') {\n                    flag = true;\n   \
    \                 break;\n                }\n                if(str.charAt(j)\
    \ == ')') {\n                    flag = false;\n                    break;\n \
    \               }\n            }\n            if(flag) {\n                res.remove(str);\n\
    \            }\n        }\n        if(res.size() == 0) {\n            return \"\
    No\";\n        }\n        return \"Yes\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptiyooqmv.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmptiyooqmv.java:42:\
    \ error: cannot find symbol\n            for(int j = 0; j < str.size(); j++) {\n\
    \                                  ^\n  symbol:   method size()\n  location: variable\
    \ str of type String\n2 errors\n"
  stdout: ''
  timestamp: 1660011254
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        Stack<String> stack = new Stack<>();\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       if (stack.isEmpty()) {\n                    isGood = false;\n        \
    \            break;\n                } else {\n                    String top\
    \ = stack.pop();\n                    if (top.equals(\"(\")) {\n             \
    \           stack.push(top);\n                    } else if (top.equals(\")\"\
    )) {\n                        stack.push(top);\n                    } else {\n\
    \                        isGood = false;\n                        break;\n   \
    \                 }\n                }\n            }\n        }\n        if (isGood)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplastl7ya.java:48)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = true;\n\
    \            }\n            else if(lst.get(i).equals(\")\")) {\n            \
    \    flag = false;\n            }\n            if(flag == true) {\n          \
    \      return \"Yes\";\n            }\n        }\n        return \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t358p45.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> good = new ArrayList<>();\n        ArrayList<String>\
    \ bad = new ArrayList<>();\n        for (String s : lst) {\n            if (s.contains(\"\
    (\")) {\n                good.add(s);\n            } else {\n                bad.add(s);\n\
    \            }\n        }\n        if (good.size() == 0) {\n            return\
    \ \"No\";\n        }\n        if (bad.size() == 0) {\n            return \"Yes\"\
    ;\n        }\n        ArrayList<String> good2 = new ArrayList<>();\n        ArrayList<String>\
    \ bad2 = new ArrayList<>();\n        for (String s : good) {\n            if (s.contains(\"\
    )\")) {\n                good2.add(s);\n            } else {\n               \
    \ bad2.add(s);\n            }\n        }\n        if (good2.size() == 0) {\n \
    \           return \"No\";\n        }\n        if (bad2.size() == 0) {\n     \
    \       return \"Yes\";\n        }\n        ArrayList<String> good3 = new ArrayList<>();\n\
    \        ArrayList<String> bad3 = new ArrayList<>();\n        for (String s :\
    \ good2) {\n            if (s.contains(\"(\")) {\n                good3.add(s);\n\
    \            } else {\n                bad3.add(s);\n            }\n        }\n\
    \        if (good3.size() == 0) {\n            return \"No\";\n        }\n   \
    \     if (bad3.size() == 0) {\n            return \"Yes\";\n        }\n      \
    \  ArrayList<String> good4 = new ArrayList<>();\n        ArrayList<String> bad4\
    \ = new ArrayList<>();\n        for (String s : good3) {\n            if (s.contains(\"\
    )\")) {\n                good4.add(s);\n            } else {\n               \
    \ bad4.add(s);\n            }\n        }\n        if (good4.size() == 0) {\n \
    \           return \"No\";\n        }\n        if (bad4.size() == 0) {\n     \
    \       return \"Yes\";\n        }\n        ArrayList<String> good5 = new ArrayList<>();\n\
    \        ArrayList<String> bad5 = new ArrayList<>();\n        for (String s :\
    \ good4) {\n            if (s.contains(\"(\")) {\n                good5.add(s);\n\
    \            } else {\n                bad5.add(s);\n            }\n        }\n\
    \        if (good5.size() == 0) {\n            return \"No\";\n        }\n   \
    \     if (bad5.size() == 0) {\n            return \"Yes\";\n        }\n      \
    \  ArrayList<String> good6 = new ArrayList<>();\n        ArrayList<String> bad6\
    \ = new ArrayList<>();\n        for (String s : good5) {\n            if (s.contains(\"\
    )\")) {\n                good6.add(s);\n            } else {\n               \
    \ bad6.add(s);\n            }\n        }\n        if (good6.size() == 0) {\n \
    \           return \"No\";\n        }\n        if (bad6.size() == 0) {\n     \
    \       return \"Yes\";\n        }\n        ArrayList<String> good7 = new ArrayList<>();\n\
    \        ArrayList<String> bad7 = new ArrayList<>();\n        for (String s :\
    \ good6) {\n            if (s.contains(\"(\")) {\n                good7.add(s);\n\
    \            } else {\n                bad7.add(s);\n            }\n        }\n\
    \        if (good7.size() == 0) {\n            return \"No\";\n        }\n   \
    \     if (\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp93iq89r7.java:122: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011254
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return isGood ? \"Yes\" : \"No\";\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmp5wmk2b8z.java:25)\n\
    \tat Problem.main(tmp5wmk2b8z.java:35)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = true;\n\
    \            }\n            else if(lst.get(i).equals(\")\")) {\n            \
    \    flag = false;\n            }\n            if(flag == true) {\n          \
    \      return \"Yes\";\n            }\n        }\n        return \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t358p45.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        Stack<String> stack = new Stack<>();\n\
    \        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i).equals(\"\
    (\")) {\n                stack.push(lst.get(i));\n            }\n            else\
    \ if(lst.get(i).equals(\")\")) {\n                if(!stack.isEmpty()) {\n   \
    \                 if(stack.pop().equals(\"(\")) {\n                        flag\
    \ = false;\n                    }\n                }\n            }\n        }\n\
    \        if(flag) {\n            return \"Yes\";\n        }\n        else {\n\
    \            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0hw6x4f.java:42)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       if (stack.peek().equals(\"(\")) {\n                    stack.pop();\n\
    \                } else {\n                    isMatch = false;\n            \
    \        break;\n                }\n            } else {\n                isMatch\
    \ = true;\n            }\n        }\n        return isMatch ? \"Yes\" : \"No\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat Problem.matchParens(tmpnbl6k5xy.java:25)\n\tat Problem.main(tmpnbl6k5xy.java:38)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = i; j < lst.size(); j++) {\n         \
    \       String str2 = lst.get(j);\n                if((str.charAt(i) == '(' &&\
    \ str2.charAt(j) == ')') || (str.charAt(i) == ')' && str2.charAt(j) == '(')) {\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n            }\n            if(flag) {\n                result.add(str);\n\
    \                flag = true;\n            }\n        }\n        if(result.size()\
    \ == lst.size()) {\n            return \"Yes\";\n        } else {\n          \
    \  return \"No\";\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.matchParens(tmpyvilcxzn.java:25)\n\
    \tat Problem.main(tmpyvilcxzn.java:42)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        boolean\
    \ flag = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            int open = str.indexOf('(');\n            int\
    \ close = str.indexOf(')');\n            int len = open - close;\n           \
    \ if(flag) {\n                if(len == 0)\n                    res.add(str);\n\
    \                else\n                    res.add(str.substring(0, len));\n \
    \           }\n            else if(len > 0) {\n                flag = true;\n\
    \                res.add(str);\n            }\n        }\n        if(res.size()\
    \ == 0)\n            return \"No\";\n        else if(res.size() == 1)\n      \
    \      return \"Yes\";\n        else\n            return \"Yes\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqelpjcd8.java:45)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n     \
    \           if(str.charAt(j) == '(') {\n                    flag = true;\n   \
    \                 break;\n                }\n                if(str.charAt(j)\
    \ == ')') {\n                    flag = false;\n                    break;\n \
    \               }\n            }\n            if(flag) {\n                res.add(str);\n\
    \            }\n        }\n        if(res.size() == lst.size()) {\n          \
    \  return \"Yes\";\n        }\n        return \"No\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpao28htrk.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011254
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n           \
    \         stack.pop();\n                }\n                if (stack.isEmpty())\
    \ {\n                    isGood = false;\n                    break;\n       \
    \         }\n                stack.pop();\n            } else {\n            \
    \    isGood = false;\n                break;\n            }\n        }\n     \
    \   if (isGood) {\n            return \"Yes\";\n        } else {\n           \
    \ return \"No\";\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpywv3gdu6.java:45)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n     \
    \           if(str.charAt(j) == '(') {\n                    flag = true;\n   \
    \                 break;\n                }\n                if(str.charAt(j)\
    \ == ')') {\n                    flag = false;\n                    break;\n \
    \               }\n            }\n            if(flag) {\n                res.add(str);\n\
    \            }\n        }\n        if(res.size() == 0) {\n            return \"\
    No\";\n        }\n        else if(res.size() == 1) {\n            return \"Yes\"\
    ;\n        }\n        else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23bla6ik.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            for(int j = 0; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = true;\n      \
    \          }\n            }\n        }\n        if(flag) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0trxpjh9.java:33)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            good = good && matchParens(lst,\
    \ i, s);\n        }\n        return good ? \"Yes\" : \"No\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgnp7um5f.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            good = good && matchParens(lst, i, s);\n\
    \                           ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011254
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            for(int j = 0; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = true;\n      \
    \          }\n            }\n        }\n        if(flag == true) {\n         \
    \   return \"Yes\";\n        }\n        return \"No\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_71hgdl0.java:33)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n           \
    \         stack.pop();\n                }\n                if (!stack.isEmpty())\
    \ {\n                    isGood = false;\n                    break;\n       \
    \         }\n                stack.pop();\n            } else {\n            \
    \    isGood = false;\n                break;\n            }\n        }\n     \
    \   if (isGood) {\n            return \"Yes\";\n        } else {\n           \
    \ return \"No\";\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp618izoth.java:45)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            if(open < 0 || close < 0)\
    \ {\n                isGood = false;\n                break;\n            }\n\
    \            if(open > close) {\n                isGood = false;\n           \
    \     break;\n            }\n            int openCount = 1;\n            int closeCount\
    \ = 1;\n            for(int j = open + 1; j < close; j++) {\n                if(s.charAt(j)\
    \ == '(') {\n                    openCount++;\n                } else if(s.charAt(j)\
    \ == ')') {\n                    closeCount++;\n                }\n          \
    \  }\n            if(openCount != closeCount) {\n                isGood = false;\n\
    \                break;\n            }\n        }\n        if(isGood) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd5zv0_ew.java:53)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for (String s : lst) {\n            isGood = isGood && matchParens(s,\
    \ result);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxhssekl.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(s, result);\n\
    \                               ^\n  required: ArrayList<String>\n  found:   \
    \ String,ArrayList<String>\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String str = lst.get(i);\n            for(int j = 0; j < str.size();\
    \ j++) {\n                if(str.charAt(j) == '(') {\n                    flag\
    \ = true;\n                    break;\n                }\n                if(str.charAt(j)\
    \ == ')') {\n                    flag = false;\n                    break;\n \
    \               }\n            }\n            if(flag) {\n                return\
    \ \"Yes\";\n            }\n        }\n        return \"No\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3sgmg82r.java:22: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            isGood = isGood && matchParens(lst, i);\n        }\n        return\
    \ isGood ? \"Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz8r2llks.java:21: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(lst,\
    \ i);\n                               ^\n  required: ArrayList<String>\n  found:\
    \    ArrayList<String>,int\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = true;\n\
    \            }\n            if(lst.get(i).equals(\")\")) {\n                flag\
    \ = false;\n            }\n        }\n        if(flag) {\n            return \"\
    Yes\";\n        }\n        return \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi7c0g1md.java:34)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ s = lst.get(i);\n            for(int j = i + 1; j < lst.size(); j++) {\n   \
    \             String t = lst.get(j);\n                if(s.equals(\"(\") && t.equals(\"\
    )\")) {\n                    flag = true;\n                    res.add(s);\n \
    \                   res.add(t);\n                    i = j;\n                \
    \    break;\n                }\n                if(s.equals(\")\") && t.equals(\"\
    (\")) {\n                    flag = true;\n                    res.add(s);\n \
    \                   res.add(t);\n                    i = j;\n                \
    \    break;\n                }\n                if(s.equals(\"(\") && t.equals(\"\
    )\")) {\n                    flag = true;\n                    res.add(s);\n \
    \                   res.add(t);\n                    i = j;\n                \
    \    break;\n                }\n                if(s.equals(\")\") && t.equals(\"\
    (\")) {\n                    flag = true;\n                    res.add(s);\n \
    \                   res.add(t);\n                    i = j;\n                \
    \    break;\n                }\n                if(s.equals(\"(\") && t.equals(\"\
    )\")) {\n                    flag = true;\n                    res.add(s);\n \
    \                   res.add(t);\n                    i = j;\n                \
    \    break;\n                }\n            }\n        }\n        if(flag) {\n\
    \            return \"Yes\";\n        }\n        return \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4aaoe43b.java:68)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        ArrayList<String>\
    \ temp = new ArrayList<>();\n        boolean flag = false;\n        for(int i\
    \ = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n        \
    \    for(int j = 0; j < str.size(); j++) {\n                if(str.charAt(j) ==\
    \ '(') {\n                    temp.add(str.substring(0,j));\n                \
    \    flag = true;\n                }\n                if(str.charAt(j) == ')')\
    \ {\n                    if(temp.size() == 0) {\n                        res.add(str);\n\
    \                        flag = false;\n                        break;\n     \
    \               }\n                    String tempStr = temp.get(temp.size() -\
    \ 1);\n                    temp.remove(temp.size() - 1);\n                   \
    \ if(tempStr.equals(str.substring(j + 1))) {\n                        res.add(str);\n\
    \                        flag = false;\n                        break;\n     \
    \               }\n                }\n            }\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd597ft_h.java:24: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n         \
    \       if(str.charAt(j) == '(') {\n                    flag = matchParens(res,\
    \ str, j);\n                    if(flag == false) return \"No\";\n           \
    \     }\n                if(str.charAt(j) == ')') {\n                    flag\
    \ = matchParens(res, str, j);\n                    if(flag == true) return \"\
    Yes\";\n                }\n            }\n        }\n        return \"No\";\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8xvencze.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmp8xvencze.java:25:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = matchParens(res, str, j);\n                      \
    \     ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,String,int\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp8xvencze.java:29:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = matchParens(res, str, j);\n                      \
    \     ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,String,int\n\
    \  reason: actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        if (isGood) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmp6qvbc6bs.java:25)\n\
    \tat Problem.main(tmp6qvbc6bs.java:39)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i=0;i<lst.size();i++) {\n \
    \           if(i==lst.size()-1) {\n                flag = flag && checkParens(lst.get(i));\n\
    \            }\n            if(i==0) {\n                flag = flag && checkParens(lst.get(i));\n\
    \            }\n            if(i==lst.size()-1) {\n                flag = flag\
    \ && checkParens(lst.get(i));\n            }\n        }\n        if(flag) {\n\
    \            return \"Yes\";\n        }\n        return \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx11tug1u.java:22: error: cannot find symbol\n                flag\
    \ = flag && checkParens(lst.get(i));\n                               ^\n  symbol:\
    \   method checkParens(String)\n  location: class Problem\n/tmp/tmpx11tug1u.java:25:\
    \ error: cannot find symbol\n                flag = flag && checkParens(lst.get(i));\n\
    \                               ^\n  symbol:   method checkParens(String)\n  location:\
    \ class Problem\n/tmp/tmpx11tug1u.java:28: error: cannot find symbol\n       \
    \         flag = flag && checkParens(lst.get(i));\n                          \
    \     ^\n  symbol:   method checkParens(String)\n  location: class Problem\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> lst2 = new ArrayList<String>();\n        boolean\
    \ flag = true;\n        for (String s : lst) {\n            lst2.add(s);\n   \
    \     }\n        boolean flag2 = true;\n        for (String s : lst2) {\n    \
    \        flag2 = false;\n            for (int i = 0; i < s.length(); i++) {\n\
    \                if (s.charAt(i) == '(') {\n                    flag2 = true;\n\
    \                }\n                if (s.charAt(i) == ')') {\n              \
    \      flag2 = false;\n                }\n            }\n            if (flag2\
    \ == true) {\n                flag = true;\n            }\n        }\n       \
    \ if (flag == true) {\n            return \"Yes\";\n        } else {\n       \
    \     return \"No\";\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd624ogzp.java:47)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(String s : lst) {\n           \
    \ good = good && matchParens(s);\n        }\n        return good ? \"Yes\" : \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2rjx15y.java:21: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n            good = good && matchParens(s);\n         \
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for (String s : lst) {\n            if (s.contains(\"(\"))\
    \ {\n                flag = true;\n            }\n            if (s.contains(\"\
    )\")) {\n                flag = false;\n            }\n            if (flag) {\n\
    \                result.add(s);\n            }\n        }\n        if (result.size()\
    \ == 0) {\n            return \"No\";\n        }\n        boolean flag2 = false;\n\
    \        for (String s : result) {\n            if (s.contains(\"(\")) {\n   \
    \             flag2 = true;\n            }\n            if (s.contains(\")\"))\
    \ {\n                flag2 = false;\n            }\n            if (flag2) {\n\
    \                return \"Yes\";\n            }\n        }\n        return \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1v3ffqoo.java:50)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            int count = 0;\n            for(int j = 0; j\
    \ < str.size(); j++) {\n                if(str.charAt(j) == '(') {\n         \
    \           count++;\n                } else if(str.charAt(j) == ')') {\n    \
    \                count--;\n                }\n                if(count == 0) {\n\
    \                    flag = true;\n                    res.add(str);\n       \
    \             break;\n                }\n            }\n            if(!flag)\
    \ {\n                return \"No\";\n            }\n        }\n        return\
    \ \"Yes\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk4ylnw3.java:24: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                isGood = matchParens(lst,\
    \ i, isGood);\n            }\n            if(lst.get(i).equals(\")\")) {\n   \
    \             isGood = matchParens(lst, i, isGood);\n            }\n        }\n\
    \        if(isGood) {\n            return \"Yes\";\n        }\n        return\
    \ \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpelx9ue0j.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n                isGood = matchParens(lst, i, isGood);\n\
    \                         ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,boolean\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpelx9ue0j.java:25:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                isGood = matchParens(lst, i, isGood);\n                     \
    \    ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,boolean\n\
    \  reason: actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && matchParens(s);\n        }\n        return isGood ? \"\
    Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeo0mqfz1.java:21: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n            isGood = isGood && matchParens(s);\n     \
    \                                      ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        for(String s : lst)\
    \ {\n            if(!s.equals(\"(\")) {\n                return \"No\";\n    \
    \        }\n            stack.push(s);\n        }\n        while(!stack.isEmpty())\
    \ {\n            String s = stack.pop();\n            if(!s.equals(\")\")) {\n\
    \                return \"No\";\n            }\n            if(!stack.isEmpty())\
    \ {\n                String s1 = stack.pop();\n                if(!s1.equals(\"\
    (\")) {\n                    return \"No\";\n                }\n             \
    \   stack.push(s+\"(\"+s1+\")\");\n            }\n        }\n        return \"\
    Yes\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm68c3co4.java:42)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n     \
    \           if(str.charAt(j) == '(') {\n                    flag = true;\n   \
    \                 res.add(str.substring(0, j));\n                    break;\n\
    \                }\n                if(str.charAt(j) == ')') {\n             \
    \       flag = false;\n                    break;\n                }\n       \
    \     }\n        }\n        if(flag) {\n            return \"Yes\";\n        }\n\
    \        return \"No\";\n}\n    public static void main(String[] args) {\n   \
    \ assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\"\
    )\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp095k3pcz.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).equals(\"(\")) || (lst.get(i).equals(\"[\")))\
    \ {\n                flag = true;\n            }\n            if((lst.get(i).equals(\"\
    )\")) || (lst.get(i).equals(\"]\"))) {\n                flag = false;\n      \
    \      }\n        }\n        if(flag) {\n            return \"Yes\";\n       \
    \ }\n        return \"No\";\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt801028e.java:34)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> temp = new ArrayList<String>();\n        boolean\
    \ flag = false;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i).equals(\"\
    (\")) {\n                flag = true;\n            }\n            else if(lst.get(i).equals(\"\
    )\")) {\n                flag = false;\n            }\n            if(flag) {\n\
    \                temp.add(lst.get(i));\n            }\n        }\n        boolean\
    \ flag2 = false;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i).equals(\"\
    (\")) {\n                flag2 = true;\n            }\n            else if(lst.get(i).equals(\"\
    )\")) {\n                flag2 = false;\n            }\n            if(flag2)\
    \ {\n                temp.add(lst.get(i));\n            }\n        }\n       \
    \ boolean flag3 = false;\n        for(int i = 0; i < lst.size(); i++) {\n    \
    \        if(lst.get(i).equals(\"(\")) {\n                flag3 = true;\n     \
    \       }\n            else if(lst.get(i).equals(\")\")) {\n                flag3\
    \ = false;\n            }\n            if(flag3) {\n                temp.add(lst.get(i));\n\
    \            }\n        }\n        boolean flag4 = false;\n        for(int i =\
    \ 0; i < lst.size(); i++) {\n            if(lst.get(i).equals(\"(\")) {\n    \
    \            flag4 = true;\n            }\n            else if(lst.get(i).equals(\"\
    )\")) {\n                flag4 = false;\n            }\n            if(flag4)\
    \ {\n                temp.add(lst.get(i));\n            }\n        }\n       \
    \ boolean flag5 = false;\n        for(int i = 0; i < lst.size(); i++) {\n    \
    \        if(lst.get(i).equals(\"(\")) {\n                flag5 = true;\n     \
    \       }\n            else if(lst.get(i).equals(\")\")) {\n                flag5\
    \ = false;\n            }\n            if(flag5) {\n                temp.add(lst.get(i));\n\
    \            }\n        }\n        boolean flag6 = false;\n        for(int i =\
    \ 0; i < lst.size(); i++) {\n            if(lst.get(i).equals(\"(\")) {\n    \
    \            flag6 = true;\n            }\n            else if(lst.get(i).equals(\"\
    )\")) {\n                flag6 = false;\n            }\n            if(flag6)\
    \ {\n                temp.add(lst.get(i));\n            }\n        }\n       \
    \ boolean flag7 = false;\n        for(int i = 0; i < lst.size(); i++) {\n    \
    \        if(lst.get(i).equals(\"(\")) {\n                flag7 = true;\n     \
    \       }\n            else if(lst.get(i).equals(\")\")) {\n                flag7\
    \ = false;\n            }\n            if(flag7) {\n                temp.add(lst.get(i));\n\
    \            }\n        }\n        boolean flag8 = false;\n        for(int i =\
    \ 0; i < lst.size(); i++) {\n            if(lst.get(i).equals(\"(\")) {\n    \
    \            flag8 = true;\n            }\n            else if(lst.get(i).equals(\"\
    )\")\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstvhhi46.java:109: error: ')' expected\n            else if(lst.get(i).equals(\"\
    )\")\n                                          ^\n/tmp/tmpstvhhi46.java:110:\
    \ error: illegal start of statement\n}\n^\n/tmp/tmpstvhhi46.java:111: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && matchParens(s);\n        }\n        return isGood ? \"\
    Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeo0mqfz1.java:21: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n            isGood = isGood && matchParens(s);\n     \
    \                                      ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        Stack<String> stack = new Stack<>();\n\
    \        for(String s : lst) {\n            if(s.equals(\"(\")) {\n          \
    \      stack.push(s);\n            } else if(s.equals(\")\")) {\n            \
    \    if(stack.peek().equals(\"(\")) {\n                    stack.pop();\n    \
    \            } else {\n                    flag = true;\n                    break;\n\
    \                }\n            } else {\n                if(stack.peek().equals(\"\
    (\")) {\n                    stack.pop();\n                }\n               \
    \ stack.push(s);\n            }\n        }\n        return flag ? \"Yes\" : \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat Problem.matchParens(tmpwjvtujzi.java:32)\n\tat Problem.main(tmpwjvtujzi.java:41)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n         \
    \       if(str.charAt(j) == '(') {\n                    flag = matchParens(result,\
    \ str, j);\n                    if(flag) {\n                        break;\n \
    \                   }\n                }\n                if(str.charAt(j) ==\
    \ ')') {\n                    flag = matchParens(result, str, j);\n          \
    \          if(flag) {\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        if(flag) {\n           \
    \ return \"Yes\";\n        }\n        return \"No\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_uv714of.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmp_uv714of.java:25:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = matchParens(result, str, j);\n                   \
    \        ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,String,int\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp_uv714of.java:31:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = matchParens(result, str, j);\n                   \
    \        ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,String,int\n\
    \  reason: actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            if(open < 0 || close < 0)\
    \ {\n                isGood = false;\n                break;\n            }\n\
    \            if(open > close) {\n                isGood = false;\n           \
    \     break;\n            }\n        }\n        if(isGood) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpexpvcntt.java:40)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        Stack<String> stack = new Stack<>();\n\
    \        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i).equals(\"\
    (\")) {\n                stack.push(lst.get(i));\n            }\n            else\
    \ if(lst.get(i).equals(\")\")) {\n                if(stack.peek().equals(\"(\"\
    )) {\n                    stack.pop();\n                }\n                else\
    \ {\n                    flag = true;\n                    break;\n          \
    \      }\n            }\n        }\n        return flag ? \"Yes\" : \"No\";\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat Problem.matchParens(tmpqzqcc34q.java:26)\n\tat Problem.main(tmpqzqcc34q.java:38)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            for(int j = i + 1; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = false;\n     \
    \               break;\n                }\n            }\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqr9mhf9d.java:35)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for (String s : lst) {\n        \
    \    if (s.contains(\"(\")) {\n                isGood = matchParens(s.split(\"\
    \\\\(\"));\n                if (!isGood) {\n                    break;\n     \
    \           }\n            }\n            if (s.contains(\")\")) {\n         \
    \       isGood = matchParens(s.split(\"\\\\)\"));\n                if (!isGood)\
    \ {\n                    break;\n                }\n            }\n        }\n\
    \        if (isGood) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5nep84p.java:22: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n                isGood = matchParens(s.split(\"\
    \\\\(\"));\n                                            ^\n/tmp/tmpa5nep84p.java:28:\
    \ error: incompatible types: String[] cannot be converted to ArrayList<String>\n\
    \                isGood = matchParens(s.split(\"\\\\)\"));\n                 \
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n         \
    \       if(str.charAt(j) == '(') {\n                    flag = matchParens(lst,\
    \ i, j, str, res);\n                    if(flag) {\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ flag ? \"Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprkpd75bv.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmprkpd75bv.java:25:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = matchParens(lst, i, j, str, res);\n              \
    \             ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,int,String,ArrayList<String>\n\
    \  reason: actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       if (stack.isEmpty()) {\n                    isMatch = false;\n       \
    \             break;\n                } else {\n                    String top\
    \ = stack.pop();\n                    if (top.equals(\"(\")) {\n             \
    \           stack.push(top);\n                    } else if (top.equals(\")\"\
    )) {\n                        isMatch = true;\n                    }\n       \
    \         }\n            }\n        }\n        return isMatch ? \"Yes\" : \"No\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkg5h8jkb.java:41)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            good = good && matchParens(lst.get(i), lst.get(i + 1));\n   \
    \     }\n        return good ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6y32m1u.java:21: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            good = good && matchParens(lst.get(i),\
    \ lst.get(i + 1));\n                           ^\n  required: ArrayList<String>\n\
    \  found:    String,String\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n           \
    \         stack.pop();\n                }\n                if (stack.isEmpty())\
    \ {\n                    isMatch = true;\n                    break;\n       \
    \         }\n                stack.pop();\n            } else {\n            \
    \    isMatch = false;\n                break;\n            }\n        }\n    \
    \    return isMatch ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq56q_8jp.java:41)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        Stack<String> stack = new Stack<>();\n\
    \        for(String s : lst) {\n            if(s.equals(\"(\")) {\n          \
    \      stack.push(s);\n            } else if(s.equals(\")\")) {\n            \
    \    if(!stack.isEmpty()) {\n                    String top = stack.pop();\n \
    \                   if(!top.equals(\"(\")) {\n                        isGood =\
    \ false;\n                    }\n                }\n            }\n        }\n\
    \        if(!stack.isEmpty()) {\n            isGood = false;\n        }\n    \
    \    if(!isGood) {\n            return \"No\";\n        } else {\n           \
    \ return \"Yes\";\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv70ogjwy.java:44)\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            flag = flag && checkParens(lst.get(i));\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdmkylvdx.java:21: error: cannot find symbol\n            flag =\
    \ flag && checkParens(lst.get(i));\n                           ^\n  symbol:  \
    \ method checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            good = good && matchParens(lst, i, lst.get(i));\n        }\n\
    \        return good ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz71133i0.java:21: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            good = good && matchParens(lst, i, lst.get(i));\n\
    \                           ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for (String s : lst) {\n            flag = false;\n      \
    \      for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i)\
    \ == '(') {\n                    flag = true;\n                    break;\n  \
    \              }\n                if (s.charAt(i) == ')') {\n                \
    \    flag = false;\n                    break;\n                }\n          \
    \  }\n            if (flag) {\n                result.add(s);\n            }\n\
    \        }\n        if (result.size() == 0) {\n            return \"No\";\n  \
    \      }\n        boolean flag2 = false;\n        for (String s : result) {\n\
    \            flag2 = false;\n            for (int i = 0; i < s.length(); i++)\
    \ {\n                if (s.charAt(i) == '(') {\n                    flag2 = true;\n\
    \                    break;\n                }\n                if (s.charAt(i)\
    \ == ')') {\n                    flag2 = false;\n                    break;\n\
    \                }\n            }\n            if (flag2) {\n                return\
    \ \"Yes\";\n            }\n        }\n        return \"No\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpet90jvbo.java:62)\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n\
    \                flag = true;\n            } else if (s.equals(\")\")) {\n   \
    \             flag = false;\n            } else if (flag) {\n                res.add(s);\n\
    \            }\n        }\n        if (res.size() == 0) {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd13kgcr6.java:36)\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && matchParens(s);\n        }\n        return isGood ? \"\
    Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeo0mqfz1.java:21: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n            isGood = isGood && matchParens(s);\n     \
    \                                      ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String str = lst.get(i);\n            for(int j = i + 1; j <\
    \ lst.size(); j++) {\n                String str2 = lst.get(j);\n            \
    \    isGood = isGood && checkParens(str, str2);\n            }\n        }\n  \
    \      return isGood ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp51oy2sr8.java:24: error: cannot find symbol\n                isGood\
    \ = isGood && checkParens(str, str2);\n                                   ^\n\
    \  symbol:   method checkParens(String,String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n           \
    \         stack.pop();\n                }\n                if (stack.isEmpty())\
    \ {\n                    isMatch = true;\n                    break;\n       \
    \         }\n                stack.pop();\n            } else {\n            \
    \    isMatch = false;\n                break;\n            }\n        }\n    \
    \    return isMatch ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq56q_8jp.java:41)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            } else {\n                isGood = false;\n             \
    \   break;\n            }\n        }\n        if (isGood) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph5mboyk1.java:42)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        if (isGood) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmp7d8ypyyj.java:25)\n\
    \tat Problem.main(tmp7d8ypyyj.java:39)\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        for (String s : lst)\
    \ {\n            if (s.equals(\"(\")) {\n                stack.push(s);\n    \
    \        } else if (s.equals(\")\")) {\n                String top = stack.pop();\n\
    \                if (top.equals(\"(\")) {\n                    stack.push(top);\n\
    \                } else {\n                    return \"No\";\n              \
    \  }\n            } else {\n                return \"No\";\n            }\n  \
    \      }\n        return \"Yes\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3h7lf3am.java:37)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        Stack<String> stack = new Stack<>();\n\
    \        for(int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n\
    \            if(!str.equals(\"(\") && !str.equals(\")\")) {\n                flag\
    \ = false;\n                break;\n            }\n            stack.push(str);\n\
    \        }\n        while(!stack.isEmpty()) {\n            String str = stack.pop();\n\
    \            if(!str.equals(\"(\") && !str.equals(\")\")) {\n                flag\
    \ = false;\n                break;\n            }\n            for(int i = 0;\
    \ i < lst.size(); i++) {\n                String str = lst.get(i);\n         \
    \       if(str.equals(\"(\")) {\n                    stack.push(str);\n      \
    \          }\n                else if(str.equals(\")\")) {\n                 \
    \   if(stack.peek().equals(\"(\")) {\n                        stack.pop();\n \
    \                   }\n                    else {\n                        flag\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n            }\n        }\n        if(flag) {\n            return \"\
    Yes\";\n        }\n        return \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2uun269o.java:36: error: variable str is already defined in method\
    \ matchParens(ArrayList<String>)\n                String str = lst.get(i);\n \
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for(String s : lst) {\n            isGood = matchParens(s,\
    \ result, isGood);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm00w7j36.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = matchParens(s, result, isGood);\n\
    \                     ^\n  required: ArrayList<String>\n  found:    String,ArrayList<String>,boolean\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            isGood = isGood && matchParens(lst, i);\n        }\n        return\
    \ isGood ? \"Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz8r2llks.java:21: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(lst,\
    \ i);\n                               ^\n  required: ArrayList<String>\n  found:\
    \    ArrayList<String>,int\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && matchParens(s);\n        }\n        if(isGood) {\n    \
    \        return \"Yes\";\n        }\n        return \"No\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdw5_p6jf.java:21: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n            isGood = isGood && matchParens(s);\n     \
    \                                      ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for(String s : lst) {\n            isGood = isGood && checkParens(s,\
    \ result);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmlvpjxx.java:22: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s, result);\n                               ^\n  symbol:\
    \   method checkParens(String,ArrayList<String>)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        Stack<String> stack = new Stack<>();\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n            }\n        }\n        return flag ? \"Yes\" : \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmpnb7zy0h1.java:25)\n\
    \tat Problem.main(tmpnb7zy0h1.java:35)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            for(int j = i + 1; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = false;\n     \
    \           }\n            }\n        }\n        if(flag) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfnkke1jf.java:34)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n\
    \                flag = true;\n            } else if (s.equals(\")\")) {\n   \
    \             flag = false;\n            } else if (flag) {\n                result.add(s);\n\
    \            }\n        }\n        if (result.size() == lst.size()) {\n      \
    \      return \"Yes\";\n        } else {\n            return \"No\";\n       \
    \ }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbllireld.java:37)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && checkParens(s);\n        }\n        if(isGood) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplclx28et.java:21: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s);\n                               ^\n  symbol:   method\
    \ checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isMatch\
    \ = false;\n        for(String s : lst) {\n            if(s.contains(\"(\")) {\n\
    \                result.add(s);\n                isMatch = true;\n           \
    \ }\n            else if(s.contains(\")\")) {\n                if(!isMatch) {\n\
    \                    result.add(s);\n                    isMatch = true;\n   \
    \             }\n                else {\n                    isMatch = false;\n\
    \                }\n            }\n        }\n        if(!isMatch) {\n       \
    \     return \"No\";\n        }\n        else {\n            String newStr = \"\
    \";\n            for(String s : result) {\n                newStr += s;\n    \
    \        }\n            return newStr;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8paq6nfq.java:48)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n           \
    \         stack.pop();\n                }\n                if (!stack.isEmpty())\
    \ {\n                    isGood = false;\n                    break;\n       \
    \         }\n                stack.pop();\n            } else {\n            \
    \    isGood = false;\n                break;\n            }\n        }\n     \
    \   return isGood ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwbsm6e9.java:41)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ stack = new ArrayList<>();\n        stack.add(\"(\");\n        stack.add(\"\
    )\");\n        for(int i = 0; i < lst.size(); i++) {\n            String str =\
    \ lst.get(i);\n            while(!stack.contains(str)) {\n                result.add(str);\n\
    \                str = stack.remove(0);\n            }\n            stack.add(str);\n\
    \        }\n        if(stack.size() > 0) {\n            return \"No\";\n     \
    \   }\n        return \"Yes\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.remove(ArrayList.java:504)\n\
    \tat Problem.matchParens(tmpzi5o6rzt.java:27)\n\tat Problem.main(tmpzi5o6rzt.java:37)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            for(int j = i; j < lst.size(); j++) {\n     \
    \           String str2 = lst.get(j);\n                if(str.equals(str2)) {\n\
    \                    flag = true;\n                    break;\n              \
    \  }\n            }\n            if(flag) {\n                result.add(str);\n\
    \                flag = false;\n            }\n        }\n        if(flag) {\n\
    \            return \"No\";\n        } else {\n            return \"Yes\";\n \
    \       }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ejwbczi.java:43)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        if (isGood) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmp6qvbc6bs.java:25)\n\
    \tat Problem.main(tmp6qvbc6bs.java:39)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String str = lst.get(i);\n            int count = 0;\n      \
    \      for(int j = 0; j < str.size(); j++) {\n                if(str.charAt(j)\
    \ == '(') {\n                    count++;\n                } else if(str.charAt(j)\
    \ == ')') {\n                    count--;\n                }\n               \
    \ if(count == 0) {\n                    flag = true;\n                    break;\n\
    \                }\n            }\n            if(!flag) {\n                return\
    \ \"No\";\n            }\n        }\n        return \"Yes\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizcg5eda.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (top.equals(\"(\")) {\n\
    \                    isMatch = true;\n                } else {\n             \
    \       isMatch = false;\n                }\n            } else {\n          \
    \      isMatch = false;\n            }\n        }\n        return isMatch ? \"\
    Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmpg9xse_c1.java:25)\n\
    \tat Problem.main(tmpg9xse_c1.java:38)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(String s : lst) {\n           \
    \ good = good && matchParens(s);\n        }\n        return good ? \"Yes\" : \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2rjx15y.java:21: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n            good = good && matchParens(s);\n         \
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = true;\n\
    \            }\n            else if(lst.get(i).equals(\")\")) {\n            \
    \    flag = false;\n            }\n            if(flag == true) {\n          \
    \      return \"Yes\";\n            }\n        }\n        return \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t358p45.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        for(int i = 0; i <\
    \ lst.size(); i++) {\n            String s = lst.get(i);\n            if(s.equals(\"\
    (\")) {\n                stack.push(s);\n            } else if(s.equals(\")\"\
    )) {\n                if(!stack.isEmpty()) {\n                    String top =\
    \ stack.pop();\n                    if(top.equals(\"(\")) {\n                \
    \        stack.push(top);\n                    } else {\n                    \
    \    if(stack.peek().equals(\"(\")) {\n                            stack.push(top);\n\
    \                        } else {\n                            return \"No\";\n\
    \                        }\n                    }\n                } else {\n\
    \                    return \"No\";\n                }\n            }\n      \
    \  }\n        if(stack.size() == 0) {\n            return \"Yes\";\n        }\
    \ else {\n            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvk9fc70.java:48)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        for(int i = 0; i <\
    \ lst.size(); i++) {\n            String s = lst.get(i);\n            int open\
    \ = s.indexOf('(');\n            int close = s.indexOf(')');\n            int\
    \ count = 0;\n            while(open != -1 && close != -1) {\n               \
    \ stack.push(s.substring(0, open));\n                stack.push(s.substring(open\
    \ + 1, close));\n                count++;\n                open = s.indexOf('(',\
    \ open+1);\n                close = s.indexOf(')', close+1);\n            }\n\
    \            if(count == 0) {\n                return \"No\";\n            }\n\
    \            while(!stack.isEmpty()) {\n                String temp = stack.pop();\n\
    \                if(!temp.equals(s)) {\n                    return \"No\";\n \
    \               }\n            }\n        }\n        return \"Yes\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8unjoimz.java:45)\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            flag = matchParens(lst.get(i), flag);\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvip498ud.java:21: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            flag = matchParens(lst.get(i), flag);\n\
    \                   ^\n  required: ArrayList<String>\n  found:    String,boolean\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (top.equals(\"(\")) {\n\
    \                    stack.push(s);\n                } else if (top.equals(\"\
    )\")) {\n                    isMatch = true;\n                }\n            }\n\
    \        }\n        return isMatch ? \"Yes\" : \"No\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmpmhd_yqk_.java:25)\n\
    \tat Problem.main(tmpmhd_yqk_.java:36)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).equals(\"(\")) || (lst.get(i).equals(\")\")))\n\
    \                flag = false;\n        }\n        if(flag)\n            return\
    \ \"Yes\";\n        else\n            return \"No\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8cpfdaf.java:30)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for (String s : lst) {\n            flag = true;\n       \
    \     for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i)\
    \ == '(') {\n                    flag = false;\n                    break;\n \
    \               }\n            }\n            if (flag) {\n                res.add(s);\n\
    \            }\n        }\n        if (res.size() == 0) {\n            return\
    \ \"No\";\n        }\n        boolean flag2 = true;\n        for (String s : lst)\
    \ {\n            flag2 = true;\n            for (int i = 0; i < s.length(); i++)\
    \ {\n                if (s.charAt(i) == ')') {\n                    flag2 = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (flag2) {\n                return \"Yes\";\n            }\n        }\n     \
    \   return \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxkgggwg.java:52)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       if (stack.isEmpty()) {\n                    isGood = false;\n        \
    \            break;\n                }\n                String top = stack.pop();\n\
    \                if (!top.equals(\"(\")) {\n                    isGood = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return isGood ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpramwf15s.java:39)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isMatch = false;\n                    break;\n          \
    \      }\n            }\n        }\n        if (isMatch) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmpcdag9df_.java:25)\n\
    \tat Problem.main(tmpcdag9df_.java:39)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            boolean open = s.startsWith(\"\
    (\");\n            boolean close = s.endsWith(\")\");\n            boolean balanced\
    \ = open && close;\n            good = good && balanced;\n        }\n        if(good)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvj3css3.java:34)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            isGood = isGood && checkParens(s);\n\
    \        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy6a8u20t.java:22: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s);\n                               ^\n  symbol:   method\
    \ checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            good = good && checkParens(s);\n\
    \        }\n        return good ? \"Yes\" : \"No\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ciwmq70.java:22: error: cannot find symbol\n            good =\
    \ good && checkParens(s);\n                           ^\n  symbol:   method checkParens(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            if(open < 0 || close < 0)\
    \ {\n                isGood = false;\n                break;\n            }\n\
    \            if(open > close) {\n                isGood = false;\n           \
    \     break;\n            }\n        }\n        if(isGood) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpexpvcntt.java:40)\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n         \
    \       if(str.charAt(j) == '(') {\n                    flag = matchParens(lst,\
    \ i, j, str, res);\n                    if(flag) {\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppf56snqz.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmppf56snqz.java:25:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = matchParens(lst, i, j, str, res);\n              \
    \             ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,int,String,ArrayList<String>\n\
    \  reason: actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String str = lst.get(i);\n            for(int j = i; j < lst.size();\
    \ j++) {\n                String str1 = lst.get(j);\n                if(str.equals(str1))\
    \ {\n                    flag = true;\n                    break;\n          \
    \      }\n            }\n        }\n        if(flag) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9yciszae.java:38)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       if (stack.isEmpty()) {\n                    isGood = false;\n        \
    \            break;\n                } else {\n                    String top\
    \ = stack.pop();\n                    if (top.equals(\"(\")) {\n             \
    \           stack.push(top);\n                    } else {\n                 \
    \       isGood = false;\n                        break;\n                    }\n\
    \                }\n            } else {\n                if (stack.isEmpty())\
    \ {\n                    isGood = false;\n                    break;\n       \
    \         }\n                String top = stack.pop();\n                if (top.equals(\"\
    (\")) {\n                    stack.push(top);\n                } else {\n    \
    \                isGood = false;\n                    break;\n               \
    \ }\n            }\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpog_1z6g4.java:54)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n         \
    \       if(str.charAt(j) == '(') {\n                    flag = true;\n       \
    \             res.add(str.substring(0, j));\n                    str = str.substring(j\
    \ + 1);\n                    for(int k = 0; k < res.size(); k++) {\n         \
    \               flag = false;\n                        str = str + res.get(k);\n\
    \                        for(int l = 0; l < str.size(); l++) {\n             \
    \               if(str.charAt(l) == ')') {\n                                flag\
    \ = true;\n                                res.add(str.substring(0, l));\n   \
    \                             str = str.substring(l + 1);\n                  \
    \              break;\n                            }\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    \
    \    if(flag) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphhreyxyw.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmphhreyxyw.java:31:\
    \ error: cannot find symbol\n                        for(int l = 0; l < str.size();\
    \ l++) {\n                                              ^\n  symbol:   method\
    \ size()\n  location: variable str of type String\n2 errors\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            for(int\
    \ j = 0; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"(\") &&\
    \ lst.get(j).equals(\")\")) {\n                    flag = false;\n           \
    \     }\n            }\n            if(flag) {\n                res.add(lst.get(i));\n\
    \                flag = true;\n            }\n        }\n        if(res.size()\
    \ == lst.size()) {\n            return \"Yes\";\n        }\n        return \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjfxcpr_p.java:39)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            int open = str.indexOf('(');\n            int\
    \ close = str.indexOf(')');\n            if((open != -1) && (close != -1)) {\n\
    \                flag = true;\n                result.add(str);\n            }\n\
    \        }\n        if(flag) {\n            for(int i = 0; i < result.size();\
    \ i++) {\n                String str = result.get(i);\n                for(int\
    \ j = i + 1; j < result.size(); j++) {\n                    String str2 = result.get(j);\n\
    \                    int open = str.indexOf('(');\n                    int close\
    \ = str.indexOf(')');\n                    int open2 = str2.indexOf('(');\n  \
    \                  int close2 = str2.indexOf(')');\n                    if((open\
    \ != -1) && (close != -1) && (open2 != -1) && (close2 != -1)) {\n            \
    \            flag = false;\n                        break;\n                 \
    \   }\n                }\n            }\n        }\n        if(flag) {\n     \
    \       return \"Yes\";\n        }\n        return \"No\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk18heepe.java:55)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        for(String s : lst)\
    \ {\n            if(!stack.empty() && stack.peek().equals(\"(\")) {\n        \
    \        stack.pop();\n            }\n            if(!stack.empty() && stack.peek().equals(\"\
    )\")) {\n                stack.pop();\n            }\n            stack.push(s);\n\
    \        }\n        if(stack.size() == 0) {\n            return \"No\";\n    \
    \    }\n        while(!stack.empty()) {\n            if(!stack.peek().equals(\"\
    (\")) {\n                return \"No\";\n            }\n            stack.pop();\n\
    \        }\n        return \"Yes\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jbrv9k2.java:41)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = true;\n\
    \            }\n            else if(lst.get(i).equals(\")\")) {\n            \
    \    flag = false;\n            }\n            if(flag == true) {\n          \
    \      return \"Yes\";\n            }\n        }\n        return \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t358p45.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for(String s : lst) {\n            isGood = isGood && matchParens(s,\
    \ result);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3j18kf4m.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(s, result);\n\
    \                               ^\n  required: ArrayList<String>\n  found:   \
    \ String,ArrayList<String>\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (top.equals(\"(\")) {\n\
    \                    stack.push(top);\n                } else {\n            \
    \        isMatch = false;\n                }\n            } else {\n         \
    \       isMatch = stack.peek().equals(\"(\");\n            }\n        }\n    \
    \    return isMatch ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat Problem.matchParens(tmpqyc26ffc.java:32)\n\tat Problem.main(tmpqyc26ffc.java:38)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && checkParens(s);\n        }\n        if(isGood) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplclx28et.java:21: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s);\n                               ^\n  symbol:   method\
    \ checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                flag = true;\n\
    \            }\n            else if(lst.get(i).equals(\")\")) {\n            \
    \    flag = false;\n            }\n            if(flag == true) {\n          \
    \      return \"Yes\";\n            }\n        }\n        return \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t358p45.java:34)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(String s : lst) {\n           \
    \ good = good && checkParens(s);\n        }\n        return good ? \"Yes\" : \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3pga4xvl.java:21: error: cannot find symbol\n            good =\
    \ good && checkParens(s);\n                           ^\n  symbol:   method checkParens(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for (String s : lst) {\n            flag = true;\n       \
    \     Matcher m = Pattern.compile(\"\\\\(|\\\\)\").matcher(s);\n            while\
    \ (m.find()) {\n                if (m.start() != m.end()) {\n                \
    \    flag = false;\n                    break;\n                }\n          \
    \  }\n            if (flag) {\n                res.add(s);\n            }\n  \
    \      }\n        if (res.size() == 0) {\n            return \"No\";\n       \
    \ }\n        return \"Yes\";\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4jukl7ww.java:23: error: cannot find symbol\n            Matcher\
    \ m = Pattern.compile(\"\\\\(|\\\\)\").matcher(s);\n            ^\n  symbol: \
    \  class Matcher\n  location: class Problem\n/tmp/tmp4jukl7ww.java:23: error:\
    \ cannot find symbol\n            Matcher m = Pattern.compile(\"\\\\(|\\\\)\"\
    ).matcher(s);\n                        ^\n  symbol:   variable Pattern\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   if(!s.contains(\"(\")) {\n                isGood = false;\n              \
    \  break;\n            }\n        }\n        if(isGood) {\n            return\
    \ \"Yes\";\n        }\n        for(String s : lst) {\n            if(!s.contains(\"\
    )\")) {\n                isGood = false;\n                break;\n           \
    \ }\n        }\n        if(isGood) {\n            return \"Yes\";\n        }\n\
    \        return \"No\";\n}\n    public static void main(String[] args) {\n   \
    \ assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\"\
    )\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmtmalov3.java:41)\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).charAt(0) == '(') && (lst.get(i).charAt(lst.get(i).length()\
    \ - 1) == ')')) {\n                flag = true;\n            }\n        }\n  \
    \      if(flag) {\n            return \"Yes\";\n        } else {\n           \
    \ return \"No\";\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp88w37ojj.java:32)\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && checkParens(s);\n        }\n        return isGood ? \"\
    Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgi877nw7.java:21: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s);\n                               ^\n  symbol:   method\
    \ checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ s = lst.get(i);\n            int count = 0;\n            for(int j = 0; j <\
    \ s.length(); j++) {\n                if(s.charAt(j) == '(') {\n             \
    \       count++;\n                } else if(s.charAt(j) == ')') {\n          \
    \          count--;\n                }\n            }\n            if(count ==\
    \ 0) {\n                res.add(s);\n                flag = true;\n          \
    \  }\n        }\n        if(flag) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesbjtwuu.java:43)\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        Stack<String> stack = new Stack<>();\n\
    \        for(String s : lst) {\n            if(!s.equals(\"(\")) {\n         \
    \       isGood = false;\n                break;\n            }\n            stack.push(s);\n\
    \        }\n        while(!stack.isEmpty()) {\n            String s = stack.pop();\n\
    \            if(!s.equals(\")\")) {\n                isGood = false;\n       \
    \         break;\n            }\n            stack.push(s);\n        }\n     \
    \   if(isGood) {\n            return \"Yes\";\n        }\n        return \"No\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7weh0g0.java:42)\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = i; j < lst.size(); j++) {\n         \
    \       String str2 = lst.get(j);\n                if(str.equals(\"(\") && str2.equals(\"\
    )\")) {\n                    flag = false;\n                    break;\n     \
    \           }\n                if(str.equals(\")\") && str2.equals(\"(\")) {\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n                if(str.equals(\"(\") && str2.equals(\")\")) {\n       \
    \             flag = false;\n                    break;\n                }\n \
    \               if(str.equals(\")\") && str2.equals(\"(\")) {\n              \
    \      flag = false;\n                    break;\n                }\n        \
    \    }\n            if(flag) {\n                res.add(str);\n            }\n\
    \        }\n        if(res.size() == lst.size()) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpagfgdw09.java:54)\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       if (stack.peek().equals(\"(\")) {\n                    stack.pop();\n\
    \                } else {\n                    isGood = false;\n             \
    \   }\n            }\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n\
    \    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat Problem.matchParens(tmp8n_kl8jw.java:25)\n\tat Problem.main(tmp8n_kl8jw.java:35)\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n\
    \                flag = true;\n            } else if (s.equals(\")\")) {\n   \
    \             flag = false;\n            } else if (flag) {\n                res.add(s);\n\
    \            }\n        }\n        return res.isEmpty() ? \"No\" : \"Yes\";\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5l63ylp3.java:33)\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = i; j < lst.size(); j++) {\n         \
    \       String str2 = lst.get(j);\n                if(str.charAt(i) == '(' &&\
    \ str2.charAt(j) == ')') {\n                    isGood = false;\n            \
    \        break;\n                }\n            }\n            if(isGood) {\n\
    \                result.add(str);\n            }\n        }\n        if(result.size()\
    \ == lst.size()) {\n            return \"Yes\";\n        }\n        return \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.matchParens(tmppnmddrfa.java:25)\n\
    \tat Problem.main(tmppnmddrfa.java:40)\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        for(String s : lst) {\n            if(!s.equals(\"\
    (\")) {\n                stack.push(s);\n            }\n            else {\n \
    \               while(!stack.isEmpty() && stack.peek().equals(\"(\")) {\n    \
    \                sb.append(stack.pop());\n                }\n                if(!stack.isEmpty())\
    \ {\n                    sb.append(\"(\");\n                }\n              \
    \  stack.push(s);\n            }\n        }\n        while(!stack.isEmpty()) {\n\
    \            sb.append(\"(\");\n            while(!stack.isEmpty() && stack.peek().equals(\"\
    (\")) {\n                sb.append(stack.pop());\n            }\n            if(!stack.isEmpty())\
    \ {\n                sb.append(\")\");\n            }\n            stack.push(stack.pop());\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011265
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n           \
    \         stack.pop();\n                }\n                if (stack.isEmpty())\
    \ {\n                    isGood = false;\n                    break;\n       \
    \         }\n                stack.pop();\n            } else {\n            \
    \    isGood = false;\n                break;\n            }\n        }\n     \
    \   if (isGood) {\n            return \"Yes\";\n        } else {\n           \
    \ return \"No\";\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpywv3gdu6.java:45)\n"
  stdout: ''
  timestamp: 1660011255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            if(open < 0 || close < 0)\
    \ {\n                isGood = false;\n                break;\n            }\n\
    \            int openCount = 1;\n            int closeCount = 1;\n           \
    \ for(int j = open + 1; j < close; j++) {\n                if(s.charAt(j) == '(')\
    \ {\n                    openCount++;\n                } else if(s.charAt(j) ==\
    \ ')') {\n                    closeCount++;\n                }\n            }\n\
    \            if(openCount != closeCount) {\n                isGood = false;\n\
    \                break;\n            }\n        }\n        if(isGood) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc0tr9eex.java:49)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            good = good && matchParens(s.substring(1));\n\
    \            good = good && matchParens(s.substring(0, s.length() - 1));\n   \
    \     }\n        return good ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpau579p65.java:22: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n            good = good && matchParens(s.substring(1));\n\
    \                                                  ^\n/tmp/tmpau579p65.java:23:\
    \ error: incompatible types: String cannot be converted to ArrayList<String>\n\
    \            good = good && matchParens(s.substring(0, s.length() - 1));\n   \
    \                                               ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean good = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            boolean open = false;\n \
    \           for(int j = 0; j < s.length(); j++) {\n                if(s.charAt(j)\
    \ == '(') {\n                    open = true;\n                } else if(s.charAt(j)\
    \ == ')') {\n                    open = false;\n                } else {\n   \
    \                 good = false;\n                    break;\n                }\n\
    \            }\n            if(open) {\n                good = false;\n      \
    \          break;\n            }\n        }\n        if(good) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7rpq8q4u.java:45)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        for(String s\
    \ : lst) {\n            boolean flag = true;\n            for(int i = 0; i < s.length();\
    \ i++) {\n                if(s.charAt(i) == '(') {\n                    flag =\
    \ flag && matchParens(res, s.substring(0, i));\n                } else if(s.charAt(i)\
    \ == ')') {\n                    flag = flag && matchParens(res, s.substring(i\
    \ + 1));\n                }\n            }\n            if(flag) {\n         \
    \       res.add(s);\n            }\n        }\n        return res.size() == 0\
    \ ? \"No\" : \"Yes\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp555i7ie2.java:24: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n                    flag = flag && matchParens(res,\
    \ s.substring(0, i));\n                                   ^\n  required: ArrayList<String>\n\
    \  found:    ArrayList<String>,String\n  reason: actual and formal argument lists\
    \ differ in length\n/tmp/tmp555i7ie2.java:26: error: method matchParens in class\
    \ Problem cannot be applied to given types;\n                    flag = flag &&\
    \ matchParens(res, s.substring(i + 1));\n                                   ^\n\
    \  required: ArrayList<String>\n  found:    ArrayList<String>,String\n  reason:\
    \ actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String str = lst.get(i);\n            int open = str.indexOf('(');\n\
    \            int close = str.indexOf(')');\n            int diff = open - close;\n\
    \            if(diff < 0) {\n                isGood = false;\n               \
    \ break;\n            }\n        }\n        if(isGood) return \"Yes\";\n     \
    \   return \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxioe9bra.java:34)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            for(int j = 0; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = false;\n     \
    \           }\n            }\n        }\n        if(flag) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppv5lqcqt.java:35)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).equals(\"(\")) || (lst.get(i).equals(\"[\")))\
    \ {\n                flag = true;\n            }\n            if((lst.get(i).equals(\"\
    )\")) || (lst.get(i).equals(\"]\"))) {\n                flag = false;\n      \
    \      }\n        }\n        if(flag) {\n            return \"Yes\";\n       \
    \ } else {\n            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvmbcc6b.java:35)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        for(int i = 0;\
    \ i < lst.size(); i++) {\n            String str = lst.get(i);\n            boolean\
    \ flag = true;\n            for(int j = 0; j < str.size(); j++) {\n          \
    \      if(str.charAt(j) == '(') {\n                    flag = false;\n       \
    \             break;\n                }\n            }\n            if(flag) {\n\
    \                res.add(str);\n            }\n        }\n        for(int i =\
    \ 0; i < res.size(); i++) {\n            String str = res.get(i);\n          \
    \  for(int j = 0; j < str.size(); j++) {\n                if(str.charAt(j) ==\
    \ ')') {\n                    if(j == str.size()-1) {\n                      \
    \  res.remove(i);\n                        break;\n                    }\n   \
    \                 else {\n                        res.remove(i);\n           \
    \             res.add(i, str.substring(j+1, str.size()-1));\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \     }\n        if(res.isEmpty()) {\n            return \"No\";\n        }\n\
    \        return \"Yes\";\n}\n    public static void main(String[] args) {\n  \
    \  assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\"\
    )\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvq3qr1t.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmpdvq3qr1t.java:35:\
    \ error: cannot find symbol\n            for(int j = 0; j < str.size(); j++) {\n\
    \                                  ^\n  symbol:   method size()\n  location: variable\
    \ str of type String\n/tmp/tmpdvq3qr1t.java:37: error: cannot find symbol\n  \
    \                  if(j == str.size()-1) {\n                               ^\n\
    \  symbol:   method size()\n  location: variable str of type String\n/tmp/tmpdvq3qr1t.java:43:\
    \ error: cannot find symbol\n                        res.add(i, str.substring(j+1,\
    \ str.size()-1));\n                                                         ^\n\
    \  symbol:   method size()\n  location: variable str of type String\n4 errors\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        if (isGood) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmp6qvbc6bs.java:25)\n\
    \tat Problem.main(tmp6qvbc6bs.java:39)\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && checkParens(s);\n        }\n        return isGood ? \"\
    Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgi877nw7.java:21: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s);\n                               ^\n  symbol:   method\
    \ checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> temp = new ArrayList<String>();\n        for(String\
    \ s : lst) {\n            boolean flag = false;\n            for(int i = 0; i\
    \ < s.length(); i++) {\n                if(s.charAt(i) == '(') {\n           \
    \         flag = true;\n                    break;\n                }\n      \
    \          if(s.charAt(i) == ')') {\n                    flag = false;\n     \
    \               break;\n                }\n            }\n            if(flag)\
    \ {\n                temp.add(s);\n            }\n        }\n        boolean flag\
    \ = true;\n        for(int i = 0; i < temp.size() - 1; i++) {\n            for(int\
    \ j = i + 1; j < temp.size() - 1; j++) {\n                if(temp.get(i).equals(temp.get(j)))\
    \ {\n                    flag = false;\n                    break;\n         \
    \       }\n            }\n        }\n        if(flag) {\n            return \"\
    Yes\";\n        }\n        return \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99gxxqmh.java:52)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for (String s : lst) {\n            isGood = isGood && matchParens(s,\
    \ result);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxhssekl.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(s, result);\n\
    \                               ^\n  required: ArrayList<String>\n  found:   \
    \ String,ArrayList<String>\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for (String s : lst) {\n            isGood = isGood && matchParens(s,\
    \ result);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxhssekl.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(s, result);\n\
    \                               ^\n  required: ArrayList<String>\n  found:   \
    \ String,ArrayList<String>\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i=0;i<lst.size();i++){\n  \
    \          if(i==lst.size()-1){\n                if(lst.get(i).equals(\"(\")){\n\
    \                    flag = false;\n                }\n            }\n       \
    \     else{\n                if(lst.get(i).equals(\"(\")){\n                 \
    \   flag = true;\n                }\n                else if(lst.get(i).equals(\"\
    )\")){\n                    flag = false;\n                }\n            }\n\
    \        }\n        if(flag){\n            return \"Yes\";\n        }\n      \
    \  else{\n            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpk4qv23.java:45)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        Stack<String> stack = new Stack<>();\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return isGood ? \"Yes\" : \"No\";\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmpih12gkpl.java:25)\n\
    \tat Problem.main(tmpih12gkpl.java:35)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n         \
    \       if(str.charAt(j) == '(') {\n                    flag = matchParens(lst,\
    \ i, j, str, res);\n                    if(flag) {\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ flag ? \"Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprkpd75bv.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmprkpd75bv.java:25:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = matchParens(lst, i, j, str, res);\n              \
    \             ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,int,String,ArrayList<String>\n\
    \  reason: actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            for(int j = 0; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = false;\n     \
    \           }\n            }\n        }\n        if(flag) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp503xf0k_.java:34)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        Stack<String> stack = new Stack<>();\n\
    \        for(String s : lst) {\n            stack.push(s);\n            while(!stack.isEmpty())\
    \ {\n                String top = stack.pop();\n                if(top.equals(\"\
    (\")) {\n                    stack.push(top);\n                } else if(top.equals(\"\
    )\")) {\n                    if(stack.isEmpty()) {\n                        isGood\
    \ = false;\n                        break;\n                    }\n          \
    \          String bottom = stack.pop();\n                    if(bottom.equals(\"\
    (\")) {\n                        stack.push(bottom);\n                    } else\
    \ {\n                        isGood = false;\n                        break;\n\
    \                    }\n                } else {\n                    isGood =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5gd5tqf9.java:48)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(String s : lst) {\n          \
    \  if(s.contains(\"(\")) {\n                flag = true;\n            }\n    \
    \        if(s.contains(\")\")) {\n                flag = false;\n            }\n\
    \        }\n        if(flag) {\n            return \"Yes\";\n        }\n     \
    \   return \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cacft6i.java:34)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> lst2 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst3 = new ArrayList<String>();\n        ArrayList<String> lst4 = new ArrayList<String>();\n\
    \        ArrayList<String> lst5 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst6 = new ArrayList<String>();\n        ArrayList<String> lst7 = new ArrayList<String>();\n\
    \        ArrayList<String> lst8 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst9 = new ArrayList<String>();\n        ArrayList<String> lst10 = new ArrayList<String>();\n\
    \        ArrayList<String> lst11 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst12 = new ArrayList<String>();\n        ArrayList<String> lst13 = new ArrayList<String>();\n\
    \        ArrayList<String> lst14 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst15 = new ArrayList<String>();\n        ArrayList<String> lst16 = new ArrayList<String>();\n\
    \        ArrayList<String> lst17 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst18 = new ArrayList<String>();\n        ArrayList<String> lst19 = new ArrayList<String>();\n\
    \        ArrayList<String> lst20 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst21 = new ArrayList<String>();\n        ArrayList<String> lst22 = new ArrayList<String>();\n\
    \        ArrayList<String> lst23 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst24 = new ArrayList<String>();\n        ArrayList<String> lst25 = new ArrayList<String>();\n\
    \        ArrayList<String> lst26 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst27 = new ArrayList<String>();\n        ArrayList<String> lst28 = new ArrayList<String>();\n\
    \        ArrayList<String> lst29 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst30 = new ArrayList<String>();\n        ArrayList<String> lst31 = new ArrayList<String>();\n\
    \        ArrayList<String> lst32 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst33 = new ArrayList<String>();\n        ArrayList<String> lst34 = new ArrayList<String>();\n\
    \        ArrayList<String> lst35 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst36 = new ArrayList<String>();\n        ArrayList<String> lst37 = new ArrayList<String>();\n\
    \        ArrayList<String> lst38 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst39 = new ArrayList<String>();\n        ArrayList<String> lst40 = new ArrayList<String>();\n\
    \        ArrayList<String> lst41 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst42 = new ArrayList<String>();\n        ArrayList<String> lst43 = new ArrayList<String>();\n\
    \        ArrayList<String> lst44 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst45 = new ArrayList<String>();\n        ArrayList<String> lst46 = new ArrayList<String>();\n\
    \        ArrayList<String> lst47 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst48 = new ArrayList<String>();\n        ArrayList<String> lst49 = new ArrayList<String>();\n\
    \        ArrayList<String> lst50 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst51 = new ArrayList<String>();\n        ArrayList<String> lst5\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyeeg1ur3.java:69: error: ';' expected\n        ArrayList<String>\
    \ lst5\n                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011254
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).charAt(0) == '(' && lst.get(i).charAt(lst.get(i).length()-1)\
    \ == ')') || (lst.get(i).charAt(0) == ')' && lst.get(i).charAt(lst.get(i).length()-1)\
    \ == '(')) {\n                flag = false;\n            }\n        }\n      \
    \  if(flag) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstunu11n.java:33)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       if (stack.isEmpty()) {\n                    isGood = false;\n        \
    \            break;\n                }\n                String top = stack.pop();\n\
    \                if (!top.equals(\"(\")) {\n                    isGood = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (isGood) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\",\
    \ (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn2ypq0l9.java:43)\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).charAt(0) == '(' && lst.get(i).charAt(lst.get(i).length()-1)\
    \ == ')') || (lst.get(i).charAt(0) == ')' && lst.get(i).charAt(lst.get(i).length()-1)\
    \ == '(')) {\n                flag = false;\n                break;\n        \
    \    }\n        }\n        if(flag) {\n            return \"Yes\";\n        }\
    \ else {\n            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwd8wzb2d.java:34)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n\
    \                flag = true;\n            } else if (s.equals(\")\")) {\n   \
    \             flag = false;\n            } else if (flag) {\n                res.add(s);\n\
    \            }\n        }\n        return res.size() == lst.size() ? \"Yes\" :\
    \ \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22j5h4l4.java:33)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            if(open < 0 || close < 0)\
    \ {\n                isGood = false;\n                break;\n            }\n\
    \            if(open > close) {\n                isGood = false;\n           \
    \     break;\n            }\n            int openCount = 1;\n            int closeCount\
    \ = 1;\n            for(int j = i + 1; j < lst.size(); j++) {\n              \
    \  String t = lst.get(j);\n                int tOpen = t.indexOf('(');\n     \
    \           int tClose = t.indexOf(')');\n                if(tOpen < 0 || tClose\
    \ < 0) {\n                    isGood = false;\n                    break;\n  \
    \              }\n                if(tOpen > tClose) {\n                    isGood\
    \ = false;\n                    break;\n                }\n                if(tOpen\
    \ < tClose) {\n                    openCount++;\n                    closeCount++;\n\
    \                }\n            }\n            if(openCount != closeCount) {\n\
    \                isGood = false;\n                break;\n            }\n    \
    \    }\n        if(isGood) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmwtdb0rq.java:63)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((lst.get(i).equals(\"(\")) || (lst.get(i).equals(\")\")))\
    \ {\n                flag = true;\n            }\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqa2fubcu.java:32)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            int diff = open - close;\n\
    \            if(diff < 0) {\n                isGood = false;\n               \
    \ break;\n            }\n        }\n        if(isGood) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpke6sxs2v.java:37)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        boolean isGood2 = true;\n       \
    \ boolean isGood3 = true;\n        boolean isGood4 = true;\n        boolean isGood5\
    \ = true;\n        boolean isGood6 = true;\n        boolean isGood7 = true;\n\
    \        boolean isGood8 = true;\n        boolean isGood9 = true;\n        boolean\
    \ isGood10 = true;\n        boolean isGood11 = true;\n        boolean isGood12\
    \ = true;\n        boolean isGood13 = true;\n        boolean isGood14 = true;\n\
    \        boolean isGood15 = true;\n        boolean isGood16 = true;\n        boolean\
    \ isGood17 = true;\n        boolean isGood18 = true;\n        boolean isGood19\
    \ = true;\n        boolean isGood20 = true;\n        boolean isGood21 = true;\n\
    \        boolean isGood22 = true;\n        boolean isGood23 = true;\n        boolean\
    \ isGood24 = true;\n        boolean isGood25 = true;\n        boolean isGood26\
    \ = true;\n        boolean isGood27 = true;\n        boolean isGood28 = true;\n\
    \        boolean isGood29 = true;\n        boolean isGood30 = true;\n        boolean\
    \ isGood31 = true;\n        boolean isGood32 = true;\n        boolean isGood33\
    \ = true;\n        boolean isGood34 = true;\n        boolean isGood35 = true;\n\
    \        boolean isGood36 = true;\n        boolean isGood37 = true;\n        boolean\
    \ isGood38 = true;\n        boolean isGood39 = true;\n        boolean isGood40\
    \ = true;\n        boolean isGood41 = true;\n        boolean isGood42 = true;\n\
    \        boolean isGood43 = true;\n        boolean isGood44 = true;\n        boolean\
    \ isGood45 = true;\n        boolean isGood46 = true;\n        boolean isGood47\
    \ = true;\n        boolean isGood48 = true;\n        boolean isGood49 = true;\n\
    \        boolean isGood50 = true;\n        boolean isGood51 = true;\n        boolean\
    \ isGood52 = true;\n        boolean isGood53 = true;\n        boolean isGood54\
    \ = true;\n        boolean isGood55 = true;\n        boolean isGood56 = true;\n\
    \        boolean isGood57 = true;\n        boolean isGood58 = true;\n        boolean\
    \ isGood59 = true;\n        boolean isGood60 = true;\n        boolean isGood61\
    \ = true;\n        boolean isGood62 = true;\n        boolean isGood63 = true;\n\
    \        boolean isGood64 = true;\n        boolean isGood65 = true;\n        boolean\
    \ isGood66 = true;\n        boolean isGood67 = true;\n        boolean isGood68\
    \ = true;\n        boolean isGood69 = true;\n        boolean isGood70 = true;\n\
    \        boolean isGood71 = true;\n        boolean \n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohxkbpvx.java:90: error: not a statement\n        boolean \n  \
    \      ^\n/tmp/tmpohxkbpvx.java:90: error: ';' expected\n        boolean \n  \
    \             ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        ArrayList<String> lst1 = new ArrayList<String>();\n\
    \        ArrayList<String> lst2 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst3 = new ArrayList<String>();\n        ArrayList<String> lst4 = new ArrayList<String>();\n\
    \        ArrayList<String> lst5 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst6 = new ArrayList<String>();\n        ArrayList<String> lst7 = new ArrayList<String>();\n\
    \        ArrayList<String> lst8 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst9 = new ArrayList<String>();\n        ArrayList<String> lst10 = new ArrayList<String>();\n\
    \        ArrayList<String> lst11 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst12 = new ArrayList<String>();\n        ArrayList<String> lst13 = new ArrayList<String>();\n\
    \        ArrayList<String> lst14 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst15 = new ArrayList<String>();\n        ArrayList<String> lst16 = new ArrayList<String>();\n\
    \        ArrayList<String> lst17 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst18 = new ArrayList<String>();\n        ArrayList<String> lst19 = new ArrayList<String>();\n\
    \        ArrayList<String> lst20 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst21 = new ArrayList<String>();\n        ArrayList<String> lst22 = new ArrayList<String>();\n\
    \        ArrayList<String> lst23 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst24 = new ArrayList<String>();\n        ArrayList<String> lst25 = new ArrayList<String>();\n\
    \        ArrayList<String> lst26 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst27 = new ArrayList<String>();\n        ArrayList<String> lst28 = new ArrayList<String>();\n\
    \        ArrayList<String> lst29 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst30 = new ArrayList<String>();\n        ArrayList<String> lst31 = new ArrayList<String>();\n\
    \        ArrayList<String> lst32 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst33 = new ArrayList<String>();\n        ArrayList<String> lst34 = new ArrayList<String>();\n\
    \        ArrayList<String> lst35 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst36 = new ArrayList<String>();\n        ArrayList<String> lst37 = new ArrayList<String>();\n\
    \        ArrayList<String> lst38 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst39 = new ArrayList<String>();\n        ArrayList<String> lst40 = new ArrayList<String>();\n\
    \        ArrayList<String> lst41 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst42 = new ArrayList<String>();\n        ArrayList<String> lst43 = new ArrayList<String>();\n\
    \        ArrayList<String> lst44 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst45 = new ArrayList<String>();\n        ArrayList<String> lst46 = new ArrayList<String>();\n\
    \        ArrayList<String> lst47 = new ArrayList<String>();\n        ArrayList<String>\
    \ lst48 = new ArrayList<String>();\n        ArrayList<String> lst49 = new ArrayList<String>();\n\
    \        ArrayList<String> lst50 = new ArrayList<String>();\n        \n}\n   \
    \ public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpbfhfvo14.java:71: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        for (String s : lst) {\n            boolean flag = true;\n          \
    \  for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) ==\
    \ '(') {\n                    flag = false;\n                    break;\n    \
    \            }\n            }\n            if (flag) {\n                temp.add(s);\n\
    \            }\n        }\n        if (temp.size() == 0) {\n            return\
    \ \"No\";\n        }\n        ArrayList<String> temp2 = new ArrayList<>();\n \
    \       for (String s : temp) {\n            boolean flag = true;\n          \
    \  for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) ==\
    \ ')') {\n                    flag = false;\n                    break;\n    \
    \            }\n            }\n            if (flag) {\n                temp2.add(s);\n\
    \            }\n        }\n        if (temp2.size() == 0) {\n            return\
    \ \"No\";\n        }\n        ArrayList<String> temp3 = new ArrayList<>();\n \
    \       for (String s : temp2) {\n            boolean flag = true;\n         \
    \   for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) ==\
    \ '(') {\n                    flag = false;\n                    break;\n    \
    \            }\n            }\n            if (flag) {\n                temp3.add(s);\n\
    \            }\n        }\n        if (temp3.size() == 0) {\n            return\
    \ \"No\";\n        }\n        ArrayList<String> temp4 = new ArrayList<>();\n \
    \       for (String s : temp3) {\n            boolean flag = true;\n         \
    \   for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) ==\
    \ ')') {\n                    flag = false;\n                    break;\n    \
    \            }\n            }\n            if (flag) {\n                temp4.add(s);\n\
    \            }\n        }\n        if (temp4.size() == 0) {\n            return\
    \ \"No\";\n        }\n        ArrayList<String> temp5 = new ArrayList<>();\n \
    \       for (String s : temp4) {\n            boolean flag = true;\n         \
    \   for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) ==\
    \ '(') {\n                    flag = false;\n                    break;\n    \
    \            }\n            }\n            if (flag) {\n                temp5.add(s);\n\
    \            }\n        }\n        if (temp5.size() == 0) {\n            return\
    \ \"No\";\n        }\n        ArrayList<String> temp6 = new ArrayList<>();\n \
    \       for (String s : temp5) {\n            boolean flag = true;\n         \
    \   for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) ==\
    \ ')') {\n                    flag = false;\n                    break;\n    \
    \            }\n            }\n            if (flag) {\n                temp6.add(s);\n\
    \            }\n        }\n        if (temp6.size() == 0) {\n            return\
    \ \"No\";\n        }\n        ArrayList<String> temp7 = new ArrayList<>();\n \
    \       for (String s : temp6) {\n            boolean flag = true;\n         \
    \   for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) ==\
    \ '(') {\n                    flag = false;\n                    break;\n    \
    \            }\n            }\n            if (flag) {\n                temp7.add(s);\n\
    \            }\n        }\n        if (temp7.size() == 0) {\n            return\
    \ \"No\";\n        }\n        ArrayList<String> \n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uh3kin3.java:132: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp1uh3kin3.java:132: error: ';' expected\n     \
    \   ArrayList<String> \n                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011261
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        boolean\
    \ flag = false;\n        for(int i=0; i<lst.size(); i++) {\n            if(lst.get(i).equals(\"\
    (\")) {\n                flag = true;\n            }\n            else if(lst.get(i).equals(\"\
    )\")) {\n                if(flag) {\n                    result.add(lst.get(i));\n\
    \                    flag = false;\n                }\n            }\n       \
    \ }\n        if(flag) {\n            result.add(lst.get(i));\n        }\n    \
    \    if(result.size() == lst.size()) {\n            return \"Yes\";\n        }\n\
    \        return \"No\";\n}\n    public static void main(String[] args) {\n   \
    \ assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\"\
    )\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp002_bkb.java:33: error: cannot find symbol\n            result.add(lst.get(i));\n\
    \                               ^\n  symbol:   variable i\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && checkParens(s);\n        }\n        return isGood ? \"\
    Yes\" : \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgi877nw7.java:21: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s);\n                               ^\n  symbol:   method\
    \ checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011260
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            for(int j = i + 1; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = true;\n      \
    \              break;\n                }\n            }\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3himj8e.java:35)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for (String s : lst) {\n            isGood = isGood && checkParens(s,\
    \ result);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1rjfg67.java:22: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s, result);\n                               ^\n  symbol:\
    \   method checkParens(String,ArrayList<String>)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(String s : lst) {\n            flag = false;\n        \
    \    for(int i = 0; i < s.length(); i++) {\n                if(s.charAt(i) ==\
    \ '(') {\n                    flag = true;\n                }\n              \
    \  if(s.charAt(i) == ')') {\n                    flag = false;\n             \
    \   }\n            }\n            if(flag) {\n                res.add(s);\n  \
    \          }\n        }\n        if(res.size() == 0) {\n            return \"\
    No\";\n        }\n        else if(res.size() == 1) {\n            return \"Yes\"\
    ;\n        }\n        else {\n            String res = \"\";\n            for(int\
    \ i = 0; i < res.size(); i++) {\n                res = res + ress.get(i);\n  \
    \          }\n            return \"Yes\";\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoborj_gb.java:42: error: variable res is already defined in method\
    \ matchParens(ArrayList<String>)\n            String res = \"\";\n           \
    \        ^\n/tmp/tmpoborj_gb.java:43: error: cannot find symbol\n            for(int\
    \ i = 0; i < res.size(); i++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable res of type String\n/tmp/tmpoborj_gb.java:44:\
    \ error: cannot find symbol\n                res = res + ress.get(i);\n      \
    \                      ^\n  symbol:   variable ress\n  location: class Problem\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        for(String s : lst)\
    \ {\n            if(!s.equals(\"(\") && !s.equals(\")\")) {\n                return\
    \ \"No\";\n            }\n            stack.push(s);\n        }\n        while(!stack.isEmpty())\
    \ {\n            String s = stack.pop();\n            if(!s.equals(\"(\")) {\n\
    \                return \"No\";\n            }\n            if(!stack.isEmpty())\
    \ {\n                String s1 = stack.pop();\n                if(!s1.equals(\"\
    )\")) {\n                    return \"No\";\n                }\n            }\n\
    \        }\n        return \"Yes\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnzn83g7s.java:41)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            for(int j = 0; j < lst.size(); j++) {\n                if(lst.get(i).equals(\"\
    (\") && lst.get(j).equals(\")\")) {\n                    flag = true;\n      \
    \              break;\n                }\n            }\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzorroshn.java:35)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i=0;i<lst.size();i++) {\n\
    \            if(i==0) {\n                flag = checkParens(lst.get(i), lst.get(i+1));\n\
    \            }\n            if(flag) {\n                return \"Yes\";\n    \
    \        }\n        }\n        return \"No\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp18yt_2_1.java:22: error: cannot find symbol\n                flag\
    \ = checkParens(lst.get(i), lst.get(i+1));\n                       ^\n  symbol:\
    \   method checkParens(String,String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            int open = s.indexOf('(');\n    \
    \        int close = s.indexOf(')');\n            if (open < 0 || close < 0) {\n\
    \                isGood = false;\n                break;\n            }\n    \
    \        if (open > close) {\n                isGood = false;\n              \
    \  break;\n            }\n            if (open < close) {\n                stack.push(s.substring(0,\
    \ open));\n                stack.push(s.substring(open + 1, close));\n       \
    \     } else {\n                stack.push(s.substring(0, close));\n         \
    \   }\n        }\n        if (stack.isEmpty()) {\n            return \"No\";\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        while (stack.isEmpty())\
    \ {\n            sb.append(stack.pop());\n        }\n        sb.append(stack.pop());\n\
    \        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzai2zs6n.java:50)\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> good = new ArrayList<>();\n        ArrayList<String>\
    \ bad = new ArrayList<>();\n        for (String s : lst) {\n            Matcher\
    \ m = Pattern.compile(\"\\\\(([^()]*|(?R))\\\\)\").matcher(s);\n            if\
    \ (m.find()) {\n                good.add(s);\n            } else {\n         \
    \       bad.add(s);\n            }\n        }\n        if (good.isEmpty() && bad.isEmpty())\
    \ {\n            return \"No\";\n        }\n        if (good.isEmpty()) {\n  \
    \          return \"Yes\";\n        }\n        if (bad.isEmpty()) {\n        \
    \    return \"No\";\n        }\n        ArrayList<String> good2 = new ArrayList<>();\n\
    \        for (String s : good) {\n            Matcher m = Pattern.compile(\"\\\
    \\(([^()]*|(?R))\\\\)\").matcher(s);\n            if (m.find()) {\n          \
    \      good2.add(s);\n            }\n        }\n        ArrayList<String> bad2\
    \ = new ArrayList<>();\n        for (String s : bad) {\n            Matcher m\
    \ = Pattern.compile(\"\\\\(([^()]*|(?R))\\\\)\").matcher(s);\n            if (m.find())\
    \ {\n                bad2.add(s);\n            }\n        }\n        if (good2.isEmpty()\
    \ && bad2.isEmpty()) {\n            return \"No\";\n        }\n        if (good2.isEmpty())\
    \ {\n            return \"Yes\";\n        }\n        if (bad2.isEmpty()) {\n \
    \           return \"No\";\n        }\n        ArrayList<String> good3 = new ArrayList<>();\n\
    \        for (String s : good2) {\n            Matcher m = Pattern.compile(\"\\\
    \\(([^()]*|(?R))\\\\)\").matcher(s);\n            if (m.find()) {\n          \
    \      good3.add(s);\n            }\n        }\n        ArrayList<String> bad3\
    \ = new ArrayList<>();\n        for (String s : bad2) {\n            Matcher m\
    \ = Pattern.compile(\"\\\\(([^()]*|(?R))\\\\)\").matcher(s);\n            if (m.find())\
    \ {\n                bad3.add(s);\n            }\n        }\n        if (good3.isEmpty()\
    \ && bad3.isEmpty()) {\n            return \"No\";\n        }\n        if (good3.isEmpty())\
    \ {\n            return \"Yes\";\n        }\n        if (bad3.isEmpty()) {\n \
    \           return \"No\";\n        }\n        ArrayList<String> good4 = new ArrayList<>();\n\
    \        for (String s : good3) {\n            Matcher m = Pattern.compile(\"\\\
    \\(([^()]*|(?R))\\\\)\").matcher(s);\n            if (m.find()) {\n          \
    \      good4.add(s);\n            }\n        }\n        ArrayList<String> bad4\
    \ = new ArrayList<>();\n        for (String s : bad3) {\n            Matcher m\
    \ = Pattern.compile(\"\\\\(([^()]*|(?R))\\\\)\").matcher(s);\n            if (m.find())\
    \ {\n                bad4.add(s);\n            }\n\n}\n    public static void\
    \ main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa7ulvpgh.java:99: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            int openCount = 1;\n   \
    \         int closeCount = 1;\n            for(int j = i + 1; j < lst.size();\
    \ j++) {\n                String t = lst.get(j);\n                int tOpen =\
    \ t.indexOf('(');\n                int tClose = t.indexOf(')');\n            \
    \    if(open < tOpen && close > tClose) {\n                    openCount++;\n\
    \                    closeCount++;\n                } else if(open > tOpen &&\
    \ close < tClose) {\n                    openCount++;\n                    closeCount++;\n\
    \                } else if(open < tOpen && close < tClose) {\n               \
    \     openCount++;\n                    closeCount++;\n                } else\
    \ if(open > tOpen && close > tClose) {\n                    openCount++;\n   \
    \                 closeCount++;\n                }\n            }\n          \
    \  if(openCount != closeCount) {\n                isGood = false;\n          \
    \      break;\n            }\n        }\n        if(isGood) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm49l_49p.java:57)\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = true;\n        for(int i=0; i<lst.size(); i++) {\n\
    \            for(int j=i+1; j<lst.size(); j++) {\n                String str =\
    \ lst.get(i);\n                String str2 = lst.get(j);\n                if(str.equals(\"\
    (\") && str2.equals(\")\")) {\n                    flag = false;\n           \
    \         break;\n                }\n            }\n        }\n        if(flag)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmwht986n.java:37)\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(lst.get(i).equals(\"(\")) {\n                isGood = matchParens(lst,\
    \ i, isGood);\n            }\n            else if(lst.get(i).equals(\")\")) {\n\
    \                isGood = matchParens(lst, i, isGood);\n            }\n      \
    \      else {\n                isGood = matchParens(lst, i, isGood);\n       \
    \     }\n        }\n        if(isGood) {\n            return \"Yes\";\n      \
    \  }\n        else {\n            return \"No\";\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqgl8c2vz.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n                isGood = matchParens(lst, i, isGood);\n\
    \                         ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,boolean\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpqgl8c2vz.java:25:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                isGood = matchParens(lst, i, isGood);\n                     \
    \    ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,boolean\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpqgl8c2vz.java:28:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                isGood = matchParens(lst, i, isGood);\n                     \
    \    ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,boolean\n\
    \  reason: actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String str = lst.get(i);\n            int open = str.indexOf('(');\n\
    \            int close = str.indexOf(')');\n            int count = 0;\n     \
    \       for(int j = open; j < close; j++) {\n                if(str.charAt(j)\
    \ == '(') {\n                    count++;\n                }\n               \
    \ else if(str.charAt(j) == ')') {\n                    count--;\n            \
    \    }\n                if(count < 0) {\n                    isGood = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if(isGood) {\n            return \"Yes\";\n        }\n        return \"\
    No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.matchParens(tmpzydqciyd.java:26)\n\
    \tat Problem.main(tmpzydqciyd.java:44)\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int openParen = s.indexOf('(');\n\
    \            int closeParen = s.indexOf(')');\n            int openBracket = s.indexOf('[');\n\
    \            int closeBracket = s.indexOf(']');\n            int openBrace = s.indexOf('{');\n\
    \            int closeBrace = s.indexOf('}');\n            int openBrace2 = s.indexOf('{');\n\
    \            int closeBrace2 = s.indexOf('}');\n            int openBrace3 = s.indexOf('{');\n\
    \            int closeBrace3 = s.indexOf('}');\n            int openBrace4 = s.indexOf('{');\n\
    \            int closeBrace4 = s.indexOf('}');\n            int openBrace5 = s.indexOf('{');\n\
    \            int closeBrace5 = s.indexOf('}');\n            int openBrace6 = s.indexOf('{');\n\
    \            int closeBrace6 = s.indexOf('}');\n            int openBrace7 = s.indexOf('{');\n\
    \            int closeBrace7 = s.indexOf('}');\n            int openBrace8 = s.indexOf('{');\n\
    \            int closeBrace8 = s.indexOf('}');\n            int openBrace9 = s.indexOf('{');\n\
    \            int closeBrace9 = s.indexOf('}');\n            int openBrace10 =\
    \ s.indexOf('{');\n            int closeBrace10 = s.indexOf('}');\n          \
    \  int openBrace11 = s.indexOf('{');\n            int closeBrace11 = s.indexOf('}');\n\
    \            int openBrace12 = s.indexOf('{');\n            int closeBrace12 =\
    \ s.indexOf('}');\n            int openBrace13 = s.indexOf('{');\n           \
    \ int closeBrace13 = s.indexOf('}');\n            int openBrace14 = s.indexOf('{');\n\
    \            int closeBrace14 = s.indexOf('}');\n            int openBrace15 =\
    \ s.indexOf('{');\n            int closeBrace15 = s.indexOf('}');\n          \
    \  int openBrace16 = s.indexOf('{');\n            int closeBrace16 = s.indexOf('}');\n\
    \            int openBrace17 = s.indexOf('{');\n            int closeBrace17 =\
    \ s.indexOf('}');\n            int openBrace18 = s.indexOf('{');\n           \
    \ int closeBrace18 = s.indexOf('}');\n            int openBrace19 = s.indexOf('{');\n\
    \            int closeBrace19 = s.indexOf('}');\n            int openBrace20 =\
    \ s.indexOf('{');\n            int closeBrace\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8x5eau7_.java:65: error: ';' expected\n            int closeBrace\n\
    \                          ^\n/tmp/tmp8x5eau7_.java:67: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011262
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            if(open < 0 || close < 0)\
    \ {\n                isGood = false;\n                break;\n            }\n\
    \            int openCount = 1;\n            int closeCount = 1;\n           \
    \ for(int j = i + 1; j < lst.size(); j++) {\n                String s2 = lst.get(j);\n\
    \                if(s2.indexOf('(') < 0) {\n                    closeCount++;\n\
    \                }\n                if(s2.indexOf(')') < 0) {\n              \
    \      openCount++;\n                }\n            }\n            if(openCount\
    \ != closeCount) {\n                isGood = false;\n                break;\n\
    \            }\n        }\n        if(isGood) {\n            return \"Yes\";\n\
    \        }\n        return \"No\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5pe5e0_n.java:50)\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            int count = 0;\n            for(int j = 0; j < str.size();\
    \ j++) {\n                if(str.charAt(j) == '(') {\n                    count++;\n\
    \                } else if(str.charAt(j) == ')') {\n                    count--;\n\
    \                }\n                if(count == 0) {\n                    res.add(str);\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n            }\n        }\n        if(flag) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxq5ndb3b.java:24: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n1 error\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = 0; j < str.size(); j++) {\n         \
    \       if(str.charAt(j) == '(') {\n                    flag = flag && matchParens(lst,\
    \ i, j, res);\n                }\n                else if(str.charAt(j) == ')')\
    \ {\n                    flag = flag && matchParens(lst, i, j, res);\n       \
    \         }\n            }\n        }\n        if(flag) {\n            res.add(\"\
    Yes\");\n        }\n        else {\n            res.add(\"No\");\n        }\n\
    \        return res.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprn6u_khz.java:23: error: cannot find symbol\n            for(int\
    \ j = 0; j < str.size(); j++) {\n                                  ^\n  symbol:\
    \   method size()\n  location: variable str of type String\n/tmp/tmprn6u_khz.java:25:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = flag && matchParens(lst, i, j, res);\n           \
    \                        ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,int,ArrayList<String>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmprn6u_khz.java:28:\
    \ error: method matchParens in class Problem cannot be applied to given types;\n\
    \                    flag = flag && matchParens(lst, i, j, res);\n           \
    \                        ^\n  required: ArrayList<String>\n  found:    ArrayList<String>,int,int,ArrayList<String>\n\
    \  reason: actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        boolean isGood\
    \ = true;\n        for (String s : lst) {\n            isGood = isGood && matchParens(s,\
    \ result);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxhssekl.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(s, result);\n\
    \                               ^\n  required: ArrayList<String>\n  found:   \
    \ String,ArrayList<String>\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011253
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isMatch = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isMatch = false;\n                    break;\n          \
    \      }\n            }\n        }\n        if (isMatch) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmpcdag9df_.java:25)\n\
    \tat Problem.main(tmpcdag9df_.java:39)\n"
  stdout: ''
  timestamp: 1660011259
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String str = lst.get(i);\n            isGood = isGood && matchParens(str,\
    \ i+1);\n        }\n        return isGood ? \"Yes\" : \"No\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwo6jnoax.java:22: error: method matchParens in class Problem cannot\
    \ be applied to given types;\n            isGood = isGood && matchParens(str,\
    \ i+1);\n                               ^\n  required: ArrayList<String>\n  found:\
    \    String,int\n  reason: actual and formal argument lists differ in length\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(String s : lst) {\n         \
    \   isGood = isGood && checkParens(s);\n        }\n        if(isGood) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplclx28et.java:21: error: cannot find symbol\n            isGood\
    \ = isGood && checkParens(s);\n                               ^\n  symbol:   method\
    \ checkParens(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> temp = new ArrayList<>();\n        for (String\
    \ s : lst) {\n            boolean flag = false;\n            for (int i = 0; i\
    \ < s.length(); i++) {\n                if (s.charAt(i) == '(') {\n          \
    \          flag = true;\n                    break;\n                }\n     \
    \           if (s.charAt(i) == ')') {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n            if (flag)\
    \ {\n                temp.add(s);\n            }\n        }\n        if (temp.size()\
    \ == 0) {\n            return \"No\";\n        }\n        if (temp.size() == 1)\
    \ {\n            return \"Yes\";\n        }\n        ArrayList<String> temp2 =\
    \ new ArrayList<>();\n        for (String s : temp) {\n            boolean flag\
    \ = false;\n            for (int i = 0; i < s.length(); i++) {\n             \
    \   if (s.charAt(i) == '(') {\n                    flag = true;\n            \
    \        break;\n                }\n                if (s.charAt(i) == ')') {\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n            }\n            if (flag) {\n                temp2.add(s);\n\
    \            }\n        }\n        if (temp2.size() == 0) {\n            return\
    \ \"No\";\n        }\n        if (temp2.size() == 1) {\n            return \"\
    Yes\";\n        }\n        ArrayList<String> temp3 = new ArrayList<>();\n    \
    \    for (String s : temp2) {\n            boolean flag = false;\n           \
    \ for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(')\
    \ {\n                    flag = true;\n                    break;\n          \
    \      }\n                if (s.charAt(i) == ')') {\n                    flag\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (flag) {\n                temp3.add(s);\n            }\n        }\n\
    \        if (temp3.size() == 0) {\n            return \"No\";\n        }\n   \
    \     if (temp3.size() == 1) {\n            return \"Yes\";\n        }\n     \
    \   ArrayList<String> temp4 = new ArrayList<>();\n        for (String s : temp3)\
    \ {\n            boolean flag = false;\n            for (int i = 0; i < s.length();\
    \ i++) {\n                if (s.charAt(i) == '(') {\n                    flag\
    \ = true;\n                    break;\n                }\n                if (s.charAt(i)\
    \ == ')') {\n                    flag = false;\n                    break;\n \
    \               }\n            }\n            if (flag) {\n                temp4.add(s);\n\
    \            }\n        }\n        if (temp4.size() == 0) {\n            return\
    \ \"No\";\n        }\n        if (temp4.size() == 1) {\n            return \"\
    Yes\";\n        }\n        ArrayList<String> temp5 = new ArrayList<>();\n    \
    \    for (String s : temp4) {\n            boolean flag = false;\n           \
    \ for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(')\
    \ {\n                    flag = true;\n                    break;\n          \
    \      }\n                if (s.charAt(i) == ')') {\n                    flag\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (flag) {\n                temp5.add(s);\n            }\n        }\n\
    \        if (temp5.size() == 0) {\n            return \"No\";\n        }\n   \
    \     if (temp5.size() == 1) {\n            return \"Yes\";\n        }\n     \
    \   ArrayList<String> temp6 = new ArrayList<>();\n        for (\n}\n    public\
    \ static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp1j9188ip.java:136: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = true;\n        for(int i = 0; i < lst.size(); i++) {\n            String str\
    \ = lst.get(i);\n            for(int j = i; j < lst.size(); j++) {\n         \
    \       String str2 = lst.get(j);\n                if(str.equals(str2)) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n            }\n            if(flag) {\n                res.add(str);\n  \
    \              flag = true;\n            }\n        }\n        if(res.size() ==\
    \ lst.size()) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3rt0vxe.java:42)\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean flag = false;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if(i == 0) {\n                if(lst.get(i).equals(\"(\")) {\n\
    \                    flag = true;\n                }\n            }\n        \
    \    else if(lst.get(i).equals(\")\")) {\n                if(flag) {\n       \
    \             flag = false;\n                }\n            }\n            else\
    \ if(lst.get(i).equals(\"(\")) {\n                flag = true;\n            }\n\
    \            else if(lst.get(i).equals(\")\")) {\n                if(flag) {\n\
    \                    flag = false;\n                }\n            }\n       \
    \     else if(lst.get(i).equals(\"(\")) {\n                flag = true;\n    \
    \        }\n            else if(lst.get(i).equals(\")\")) {\n                if(flag)\
    \ {\n                    flag = false;\n                }\n            }\n   \
    \     }\n        if(flag) {\n            return \"Yes\";\n        }\n        else\
    \ {\n            return \"No\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7cebs57.java:56)\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        boolean flag\
    \ = false;\n        for(int i = 0; i < lst.size(); i++) {\n            String\
    \ str = lst.get(i);\n            for(int j = i; j < lst.size(); j++) {\n     \
    \           String str2 = lst.get(j);\n                if(str.equals(\"(\") &&\
    \ str2.equals(\")\")) {\n                    flag = true;\n                  \
    \  break;\n                }\n                if(str.equals(\")\") && str2.equals(\"\
    (\")) {\n                    flag = false;\n                    break;\n     \
    \           }\n            }\n            if(flag) {\n                res.add(str);\n\
    \            }\n        }\n        if(flag) {\n            return \"Yes\";\n \
    \       }\n        return \"No\";\n}\n    public static void main(String[] args)\
    \ {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\"\
    , (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_c964le.java:44)\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return isGood ? \"Yes\" : \"No\";\n\
    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    ()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.matchParens(tmpm9wyveek.java:25)\n\
    \tat Problem.main(tmpm9wyveek.java:35)\n"
  stdout: ''
  timestamp: 1660011263
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of two strings, both strings consist\
    \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your\
    \ job is to check if it is possible to concatenate the two strings in\n    //\
    \ some order, that the resulting string will be good.\n    // A string S is considered\
    \ to be good if and only if all parentheses in S\n    // are balanced. For example:\
    \ the string '(())()' is good, while the string\n    // '())' is not.\n    //\
    \ Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    \    // Examples:\n    public static String matchParens(ArrayList<String> lst)\
    \ {\n        boolean isGood = true;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            String s = lst.get(i);\n            int open = s.indexOf('(');\n\
    \            int close = s.indexOf(')');\n            int openCount = 1;\n   \
    \         int closeCount = 1;\n            for(int j = i + 1; j < lst.size();\
    \ j++) {\n                String s2 = lst.get(j);\n                int open2 =\
    \ s2.indexOf('(');\n                int close2 = s2.indexOf(')');\n          \
    \      if(open > open2) {\n                    openCount++;\n                }\n\
    \                if(close > close2) {\n                    closeCount++;\n   \
    \             }\n            }\n            if(openCount != closeCount) {\n  \
    \              isGood = false;\n                break;\n            }\n      \
    \  }\n        if(isGood) {\n            return \"Yes\";\n        }\n        return\
    \ \"No\";\n}\n    public static void main(String[] args) {\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
    Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
    \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
    No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
    )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqjnhute.java:49)\n"
  stdout: ''
  timestamp: 1660011263
