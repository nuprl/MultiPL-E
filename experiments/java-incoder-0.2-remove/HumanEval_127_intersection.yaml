name: HumanEval_127_intersection
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given two intervals,\n    // where each interval\
  \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
  \ The given intervals are closed which means that the interval (start, end)\n  \
  \  // includes both start and end.\n    // For each given interval, it is assumed\
  \ that its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    public static String intersection(Pair<Integer, Integer> interval1,\
  \ Pair<Integer, Integer> interval2) {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1,\
  \ 2)), (Pair.with(2, 3))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1,\
  \ 1)), (Pair.with(0, 4))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3,\
  \ -1)), (Pair.with(-5, 5))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2,\
  \ 2)), (Pair.with(-4, 0))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11,\
  \ 2)), (Pair.with(-1, -1))).equals((\"NO\")));\n    assert(intersection((Pair.with(1,\
  \ 2)), (Pair.with(3, 5))).equals((\"NO\")));\n    assert(intersection((Pair.with(1,\
  \ 2)), (Pair.with(1, 2))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2,\
  \ -2)), (Pair.with(-3, -2))).equals((\"NO\")));\n    }\n\n}\n"
completions: ["        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == interval1.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == interval2.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == 1) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.subtract(intersection.first);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.value\
    \ - intersection.first.value;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3) {\n            return \"YES\";\n      \
    \  }\n        if (length == 5) {\n            return \"YES\";\n        }\n   \
    \     if (length == 7) {\n            return \"YES\";\n        }\n        if (length\
    \ == 9) {\n            return \"YES\";\n        }\n        if (length == 11) {\n\
    \            return \"YES\";\n        }\n        if (length == 13) {\n       \
    \     return \"YES\";\n        }\n        if (length == 17) {\n            return\
    \ \"YES\";\n        }\n        if (length == 19) {\n            return \"YES\"\
    ;\n        }\n        if (length == 23) {\n            return \"YES\";\n     \
    \   }\n        if (length == 29) {\n            return \"YES\";\n        }\n \
    \       if (length == 31) {\n            return \"YES\";\n        }\n        if\
    \ (length == 37) {\n            return \"YES\";\n        }\n        if (length\
    \ == 43) {\n            return \"YES\";\n        }\n        if (length == 49)\
    \ {\n            return \"YES\";\n        }\n        if (length == 71) {\n   \
    \         return \"YES\";\n        }\n        if (length == 111) {\n         \
    \   return \"YES\";\n        }\n        if (length == 131) {\n            return\
    \ \"YES\";\n        }\n        if (length == 171) {\n            return \"YES\"\
    ;\n        }\n        if (length == 191) {\n            return \"YES\";\n    \
    \    }\n        if (length == 231) {\n            return \"YES\";\n        }\n\
    \        if (length == 291) {\n            return \"YES\";\n        }\n      \
    \  if (length == 371) {\n            return \"YES\";\n        }\n        if (length\
    \ == 491) {\n            return \"YES\";\n        }\n        if (length == 731)\
    \ {\n            return \"YES\";\n        }\n        if (length == 1131) {\n \
    \           return \"YES\";\n        }\n        if (length == 1331) {\n      \
    \      return \"YES\";\n        }\n        if (length == 1731) {\n           \
    \ return \"YES\";\n        }\n        if (length == 1931) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2331) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2931) {\n            return \"YES\";\n   \
    \     }\n        if (length == 3731) {\n            return \"YES\";\n        }\n\
    \        if (length == 4931) {\n            return \"YES\";\n        }\n     \
    \   if (length == 7331) {\n            return \"YES\";\n        }\n        if\
    \ (length == 11331) {\n            return \"YES\";\n        }\n        if (length\
    \ == 13331) {\n            return \"YES\";\n        }\n        if (length == 17331)\
    \ {\n            return \"YES\";\n        }\n        if (length == 19331) {\n\
    \            return \"YES\";\n        }\n        if (length == 23331", "     \
    \   Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection.isEmpty()) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getFirst() - intersection.getSecond();\n  \
    \      if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2 && interval1.getFirst() == interval2.getFirst()) {\n          \
    \  return \"YES\";\n        }\n        if (length == 2 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 3 && interval1.getFirst() == interval2.getFirst()) {\n          \
    \  return \"YES\";\n        }\n        if (length == 3 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 4 && interval1.getFirst() == interval2.getFirst()) {\n          \
    \  return \"YES\";\n        }\n        if (length == 4 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 5 && interval1.getFirst() == interval2.getFirst()) {\n          \
    \  return \"YES\";\n        }\n        if (length == 5 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 6 && interval1.getFirst() == interval2.getFirst()) {\n          \
    \  return \"YES\";\n        }\n        if (length == 6 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 7 && interval1.getFirst() == interval2.getFirst()) {\n          \
    \  return \"YES\";\n        }\n        if (length == 7 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 8 && interval1.getFirst() == interval2.getFirst()) {\n          \
    \  return \"YES\";\n        }\n        if (length == 8 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 9 && interval1.getFirst() == interval2.getFirst()) {\n          \
    \  return \"YES\";\n        }\n        if (length == 9 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 10 && interval1.getFirst() == interval2.getFirst()) {\n         \
    \   return \"YES\";\n        }\n        if (length == 10 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 11 && interval1.getFirst() == interval2.getFirst()) {\n         \
    \   return \"YES\";\n        }\n        if (length == 11 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (length == 12 && interval1.getFirst() == interval2.getFirst()) {\n         \
    \   return \"YES\";\n        }\n        if (length == 12 && interval1.getFirst()\
    \ != interval2.getFirst()) {\n            return \"NO\";\n        }\n        if\
    \ (", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> interval = interval1.intersection(interval2);\n        if (interval\
    \ == null) {\n            return \"NO\";\n        }\n        int start = Math.min(interval1.getLeft(),\
    \ interval2.getLeft());\n        int end = Math.max(interval1.getRight(), interval2.getRight());\n\
    \        int length = end - start;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == interval1.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == interval2.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == 1) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> interval3 = new Pair<Integer, Integer>();\n        interval3.first\
    \ = interval1.first;\n        interval3.second = interval1.second;\n        interval3.first\
    \ = interval2.first;\n        interval3.second = interval2.second;\n        interval3.first\
    \ = interval3.first < interval3.second ? interval3.first : interval3.second;\n\
    \        interval3.second = interval3.first < interval3.second ? interval3.second\
    \ : interval3.first;\n        interval3.first = interval3.first < interval3.second\
    \ ? interval3.first : interval3.second;\n        interval3.second = interval3.first\
    \ < interval3.second ? interval3.second : interval3.first;\n        interval3.first\
    \ = interval3.first < interval3.second ? interval3.first : interval3.second;\n\
    \        interval3.second = interval3.first < interval3.second ? interval3.second\
    \ : interval3.first;\n        interval3.first = interval3.first < interval3.second\
    \ ? interval3.first : interval3.second;\n        interval3.second = interval3.first\
    \ < interval3.second ? interval3.second : interval3.first;\n        interval3.first\
    \ = interval3.first < interval3.second ? interval3.first : interval3.second;\n\
    \        interval3.second = interval3.first < interval3.second ? interval3.second\
    \ : interval3.first;\n        interval3.first = interval3.first < interval3.second\
    \ ? interval3.first : interval3.second;\n        interval3.second = interval3.first\
    \ < interval3.second ? interval3.second : interval3.first;\n        interval3.first\
    \ = interval3.first < interval3.second ? interval3.first : interval3.second;\n\
    \        interval3.second = interval3.first < interval3.second ? interval3.second\
    \ : interval3.first;\n        interval3.first = interval3.first < interval3.second\
    \ ? interval3.first : interval3.second;\n        interval3.second = interval3.first\
    \ < interval3.second ? interval3.second : interval3.first;\n        interval3.first\
    \ = interval3.first < interval3.second ? interval3.first : interval3.second;\n\
    \        interval3.second = interval3.first < interval3.second ? interval3.second\
    \ : interval3.first;\n        interval3.first = interval3.first < interval3.second\
    \ ? interval3.first : interval3.second;\n        interval3.second = interval3.first\
    \ < interval3.second ? interval3.second : interval3.first;\n        interval3.first\
    \ = interval3.first < interval3.second ? interval3.first : interval3.second;\n\
    \        interval3.second = interval3.first < interval3.second ? interval3.second\
    \ : interval3.first;", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getRight() - intersection.getLeft();\n    \
    \    if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        if (length == 0) {\n\
    \            return \"NO\";\n        }\n        if (length == -1) {\n        \
    \    return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> interval1Copy = new Pair<>(interval1.getLeft(), interval1.getRight());\n\
    \        Pair<Integer, Integer> interval2Copy = new Pair<>(interval2.getLeft(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection = new Pair<>();\n\
    \        intersection.setLeft(Math.max(interval1Copy.getLeft(), interval2Copy.getLeft()));\n\
    \        intersection.setRight(Math.min(interval1Copy.getRight(), interval2Copy.getRight()));\n\
    \        if (intersection.getLeft() == intersection.getRight()) {\n          \
    \  intersection.setLeft(intersection.getLeft());\n        }\n        if (intersection.getLeft()\
    \ > intersection.getRight()) {\n            return \"\";\n        }\n        if\
    \ (intersection.getLeft() == interval1.getLeft() && intersection.getLeft() ==\
    \ interval2.getLeft()) {\n            return \"YES\";\n        }\n        if (intersection.getLeft()\
    \ == interval1.getRight() && intersection.getLeft() == interval2.getRight()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getLeft() ==\
    \ interval1.getLeft() && intersection.getRight() == interval2.getRight()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getRight() ==\
    \ interval1.getRight() && intersection.getLeft() == interval2.getLeft()) {\n \
    \           return \"YES\";\n        }\n        if (intersection.getRight() ==\
    \ interval1.getRight() && intersection.getRight() == interval2.getRight()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getLeft() ==\
    \ interval1.getLeft() && intersection.getRight() == interval2.getRight()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getLeft() ==\
    \ interval1.getRight() && intersection.getLeft() == interval2.getLeft()) {\n \
    \           return \"YES\";\n        }\n        if (intersection.getRight() ==\
    \ interval1.getRight() && intersection.getRight() == interval2.getLeft()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getLeft() ==\
    \ interval1.getLeft() && intersection.getRight() == interval2.getRight()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getLeft() ==\
    \ interval1.getRight() && intersection.getRight() == interval2.getLeft()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getLeft() ==\
    \ interval1.getLeft() && intersection.getRight() == interval2.getRight()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getRight() ==\
    \ interval1.getRight() && intersection.getLeft() == interval2.getLeft()) {\n \
    \           return \"YES\";\n        }\n        if (intersection.getRight() ==\
    \ interval1.getRight() && intersection.getRight() == interval2.getRight()) {\n\
    \            return \"YES", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getLeft() - intersection.getRight();\n    \
    \    if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 5) {\n        \
    \    return \"YES\";\n        }\n        if (length == 7) {\n            return\
    \ \"YES\";\n        }\n        if (length == 9) {\n            return \"YES\"\
    ;\n        }\n        if (length == 11) {\n            return \"YES\";\n     \
    \   }\n        if (length == 13) {\n            return \"YES\";\n        }\n \
    \       if (length == 17) {\n            return \"YES\";\n        }\n        if\
    \ (length == 19) {\n            return \"YES\";\n        }\n        if (length\
    \ == 23) {\n            return \"YES\";\n        }\n        if (length == 29)\
    \ {\n            return \"YES\";\n        }\n        if (length == 31) {\n   \
    \         return \"YES\";\n        }\n        if (length == 37) {\n          \
    \  return \"YES\";\n        }\n        if (length == 43) {\n            return\
    \ \"YES\";\n        }\n        if (length == 59) {\n            return \"YES\"\
    ;\n        }\n        if (length == 67) {\n            return \"YES\";\n     \
    \   }\n        if (length == 73) {\n            return \"YES\";\n        }\n \
    \       if (length == 91) {\n            return \"YES\";\n        }\n        if\
    \ (length == 117) {\n            return \"YES\";\n        }\n        if (length\
    \ == 131) {\n            return \"YES\";\n        }\n        if (length == 167)\
    \ {\n            return \"YES\";\n        }\n        if (length == 191) {\n  \
    \          return \"YES\";\n        }\n        if (length == 231) {\n        \
    \    return \"YES\";\n        }\n        if (length == 291) {\n            return\
    \ \"YES\";\n        }\n        if (length == 317) {\n            return \"YES\"\
    ;\n        }\n        if (length == 373) {\n            return \"YES\";\n    \
    \    }\n        if (length == 431) {\n            return \"YES\";\n        }\n\
    \        if (length == 597) {\n            return \"YES\";\n        }\n      \
    \  if (length == 677) {\n            return \"YES\";\n        }\n        if (length\
    \ == 743) {\n            return \"YES\";\n        }\n        if (length == 913)\
    \ {\n            return \"YES\";\n        }\n        if (length == 1177) {\n \
    \           return \"YES\";\n        }\n        if (length == 1317) {\n      \
    \      return \"YES\";\n        }\n        if (length == 1673) {\n           \
    \ return \"YES\";\n        }\n        if (length == 1927) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2317) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2927) {\n            return \"YES\";\n   \
    \     }\n        if (length == 3177) {\n            return \"YES\";\n        }\n\
    \        if (length == 37", "        Pair<Integer, Integer> interval3 = new Pair<Integer,\
    \ Integer>();\n        interval3 = interval1.intersection(interval2);\n      \
    \  if (interval3.isPresent()) {\n            int length1 = interval1.getLeft();\n\
    \            int length2 = interval2.getLeft();\n            int length3 = interval3.getLeft();\n\
    \            if (length1 == length2 && length2 == length3) {\n               \
    \ return \"YES\";\n            }\n        }\n        return \"NO\";", "      \
    \  int start = Math.min(interval1.first, interval2.first);\n        int end =\
    \ Math.max(interval1.second, interval2.second);\n        int length = end - start;\n\
    \        if (length == 0) return \"NO\";\n        if (length == 1) return \"YES\"\
    ;\n        if (length == 2 && interval1.first == interval2.first) return \"YES\"\
    ;\n        if (length == 2 && interval1.second == interval2.second) return \"\
    YES\";\n        if (length == 2 && interval1.first == interval2.second) return\
    \ \"YES\";\n        if (length == 2 && interval1.second == interval2.first) return\
    \ \"YES\";\n        if (length == 2 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 2 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 2 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 2 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second)\
    \ <= 0 ? intersection.second.compareTo(interval1.second) : interval1.second.compareTo(intersection.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2 && intersection.first == interval1.first) {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == -1) {\n            return \"NO\";\n        }\n        if (length\
    \ == 0 || length == 1) {\n            return \"NO\";\n        }\n        return\
    \ \"YES\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == interval1.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == interval2.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == 1) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        if (interval1.getFirst() < interval2.getFirst()) {\n            intersection\
    \ = Pair.of(interval1.getSecond(), interval1.getFirst());\n        }\n       \
    \ if (interval1.getSecond() < interval2.getSecond()) {\n            intersection\
    \ = Pair.of(interval1.getFirst(), interval1.getSecond());\n        }\n       \
    \ if (intersection.getFirst() < intersection.getSecond()) {\n            intersection\
    \ = Pair.of(intersection.getFirst(), intersection.getSecond());\n        }\n \
    \       if (intersection.getFirst() > intersection.getSecond()) {\n          \
    \  intersection = Pair.of(intersection.getSecond(), intersection.getFirst());\n\
    \        }\n        if (intersection.getFirst() == intersection.getSecond()) {\n\
    \            return \"NO\";\n        }\n        if (intersection.getFirst() >=\
    \ interval1.getFirst() && intersection.getFirst() <= interval1.getSecond()) {\n\
    \            return \"YES\";\n        }\n        if (intersection.getSecond()\
    \ >= interval2.getFirst() && intersection.getSecond() <= interval2.getSecond())\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";", "      \
    \  Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int start = Math.min(interval1.getFirst(), interval2.getFirst());\n \
    \       int end = Math.max(interval1.getSecond(), interval2.getSecond());\n  \
    \      int length = end - start;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2 && interval1.getFirst() == interval2.getFirst())\
    \ {\n            return \"YES\";\n        }\n        if (length == 2 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 2 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 2 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 3 && interval1.getFirst() == interval2.getFirst()) {\n       \
    \     return \"YES\";\n        }\n        if (length == 3 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 3 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 3 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 5 && interval1.getFirst() == interval2.getFirst()) {\n       \
    \     return \"YES\";\n        }\n        if (length == 5 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 5 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 5 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 7 && interval1.getFirst() == interval2.getFirst()) {\n       \
    \     return \"YES\";\n        }\n        if (length == 7 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 7 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 7 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 7 && interval1.getSecond() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 9 && interval1.getFirst()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 9 && interval1.getSecond() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 9 && interval1.getFirst()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 9 && interval1.getSecond() == interval", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second)\
    \ <= 0 ? intersection.second.compareTo(interval1.second) : interval1.second.compareTo(intersection.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2 && interval1.first.compareTo(interval2.first) == 0) {\n       \
    \     return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getLeft().intValue() - intersection.getRight().intValue();\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3) {\n            return \"YES\";\n        }\n        if (length == 5) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.subtract(intersection.first);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3) {\n            return \"YES\";\n        }\n        if (length == 4) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.subtract(intersection.first);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       int start = Math.min(interval1.getFirst(), interval2.getFirst());\n  \
    \      int end = Math.max(interval1.getSecond(), interval2.getSecond());\n   \
    \     int length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        if (length\
    \ == 2)\n            return \"YES\";\n        if (length == 3)\n            return\
    \ \"YES\";\n        if (length == 4)\n            return \"YES\";\n        if\
    \ (length == 5)\n            return \"YES\";\n        if (length == 6)\n     \
    \       return \"YES\";\n        if (length == 7)\n            return \"YES\"\
    ;\n        if (length == 8)\n            return \"YES\";\n        if (length ==\
    \ 9)\n            return \"YES\";\n        if (length == 10)\n            return\
    \ \"YES\";\n        if (length == 11)\n            return \"YES\";\n        if\
    \ (length == 12)\n            return \"YES\";\n        if (length == 13)\n   \
    \         return \"YES\";\n        if (length == 14)\n            return \"YES\"\
    ;\n        if (length == 15)\n            return \"YES\";\n        if (length\
    \ == 16)\n            return \"YES\";\n        if (length == 17)\n           \
    \ return \"YES\";\n        if (length == 18)\n            return \"YES\";\n  \
    \      if (length == 19)\n            return \"YES\";\n        if (length == 20)\n\
    \            return \"YES\";\n        if (length == 21)\n            return \"\
    YES\";\n        if (length == 22)\n            return \"YES\";\n        if (length\
    \ == 23)\n            return \"YES\";\n        if (length == 24)\n           \
    \ return \"YES\";\n        if (length == 25)\n            return \"YES\";\n  \
    \      if (length == 26)\n            return \"YES\";\n        if (length == 27)\n\
    \            return \"YES\";\n        if (length == 28)\n            return \"\
    YES\";\n        if (length == 29)\n            return \"YES\";\n        if (length\
    \ == 30)\n            return \"YES\";\n        if (length == 31)\n           \
    \ return \"YES\";\n        if (length == 32)\n            return \"YES\";\n  \
    \      if (length == 33)\n            return \"YES\";\n        if (length == 34)\n\
    \            return \"YES\";\n        if (length == 35)\n            return \"\
    YES\";\n        if (length == 36)\n            return \"YES\";\n        if (length\
    \ == 37)\n            return \"YES\";\n        if (length == 38)\n           \
    \ return \"YES\";\n        if (length == 39)\n            return \"YES\";\n  \
    \      if (length == 40)\n            return \"YES\";\n        if (length == 41)\n\
    \            return \"YES\";\n        if (length == 42)\n            return \"\
    YES\";\n        if (length == 45)\n            return \"YES\";\n        if (length\
    \ == 46)\n            return \"YES\";\n        if (length == 47)\n           \
    \ return \"YES\";\n        if (length == 48)\n            return \"YES\";\n  \
    \      if (length == 49)\n            return \"YES\";\n        if (length == 50)\n\
    \            return \"YES\";\n        if (length == 51)\n            return \"\
    YES\";\n        if (length == 52)\n            return \"YES\";\n        if (length\
    \ == 55)", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == interval1.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == interval2.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == 1) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = new Pair<>();\n        intersection.first = interval1.first;\n\
    \        intersection.second = interval1.second;\n        intersection.first =\
    \ interval2.first;\n        intersection.second = interval2.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection", "        Pair<Integer, Integer> interval = new Pair<Integer,\
    \ Integer>(interval1.getFirst(), interval1.getSecond());\n        Pair<Integer,\
    \ Integer> interval2 = new Pair<Integer, Integer>(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection = new Pair<Integer, Integer>(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection2 = new Pair<Integer,\
    \ Integer>(interval2.getFirst(), interval2.getSecond());\n        boolean isPrime\
    \ = true;\n        boolean isPrime2 = true;\n        boolean isPrime3 = true;\n\
    \        boolean isPrime4 = true;\n        boolean isPrime5 = true;\n        boolean\
    \ isPrime6 = true;\n        boolean isPrime7 = true;\n        boolean isPrime8\
    \ = true;\n        boolean isPrime9 = true;\n        boolean isPrime10 = true;\n\
    \        boolean isPrime11 = true;\n        boolean isPrime12 = true;\n      \
    \  boolean isPrime13 = true;\n        boolean isPrime14 = true;\n        boolean\
    \ isPrime15 = true;\n        boolean isPrime16 = true;\n        boolean isPrime17\
    \ = true;\n        boolean isPrime18 = true;\n        boolean isPrime19 = true;\n\
    \        boolean isPrime20 = true;\n        boolean isPrime21 = true;\n      \
    \  boolean isPrime22 = true;\n        boolean isPrime23 = true;\n        boolean\
    \ isPrime24 = true;\n        boolean isPrime25 = true;\n        boolean isPrime26\
    \ = true;\n        boolean isPrime27 = true;\n        boolean isPrime28 = true;\n\
    \        boolean isPrime29 = true;\n        boolean isPrime30 = true;\n      \
    \  boolean isPrime31 = true;\n        boolean isPrime32 = true;\n        boolean\
    \ isPrime33 = true;\n        boolean isPrime34 = true;\n        boolean isPrime35\
    \ = true;\n        boolean isPrime36 = true;\n        boolean isPrime37 = true;\n\
    \        boolean isPrime38 = true;\n        boolean isPrime39 = true;\n      \
    \  boolean isPrime40 = true;\n        boolean isPrime41 = true;\n        boolean\
    \ isPrime42 = true;\n        boolean isPrime43 = true;\n        boolean isPrime44\
    \ = true;\n        boolean isPrime45 = true;\n        boolean isPrime46 = true;\n\
    \        boolean isPrime47 = true;\n        boolean isPrime48 = true;\n      \
    \  boolean isPrime49 = true;\n        boolean isPrime50 = true;\n        boolean\
    \ isPrime51 = true;\n        boolean ", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.getValue();\n\
    \        if (length == interval1.getValue()) {\n            return \"YES\";\n\
    \        }\n        if (length == interval2.getValue()) {\n            return\
    \ \"YES\";\n        }\n        if (length == 1) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection.isEmpty()) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.getFirst()\
    \ - intersection.getSecond();\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3) {\n            return \"YES\";\n      \
    \  }\n        if (length == 5) {\n            return \"YES\";\n        }\n   \
    \     if (length == 7) {\n            return \"YES\";\n        }\n        if (length\
    \ == 9) {\n            return \"YES\";\n        }\n        if (length == 11) {\n\
    \            return \"YES\";\n        }\n        if (length == 13) {\n       \
    \     return \"YES\";\n        }\n        if (length == 17) {\n            return\
    \ \"YES\";\n        }\n        if (length == 19) {\n            return \"YES\"\
    ;\n        }\n        if (length == 21) {\n            return \"YES\";\n     \
    \   }\n        if (length == 23) {\n            return \"YES\";\n        }\n \
    \       if (length == 25) {\n            return \"YES\";\n        }\n        if\
    \ (length == 27) {\n            return \"YES\";\n        }\n        if (length\
    \ == 29) {\n            return \"YES\";\n        }\n        if (length == 31)\
    \ {\n            return \"YES\";\n        }\n        if (length == 33) {\n   \
    \         return \"YES\";\n        }\n        if (length == 35) {\n          \
    \  return \"YES\";\n        }\n        if (length == 37) {\n            return\
    \ \"YES\";\n        }\n        if (length == 39) {\n            return \"YES\"\
    ;\n        }\n        if (length == 41) {\n            return \"YES\";\n     \
    \   }\n        if (length == 43) {\n            return \"YES\";\n        }\n \
    \       if (length == 45) {\n            return \"YES\";\n        }\n        if\
    \ (length == 47) {\n            return \"YES\";\n        }\n        if (length\
    \ == 49) {\n            return \"YES\";\n        }\n        if (length == 51)\
    \ {\n            return \"YES\";\n        }\n        if (length == 53) {\n   \
    \         return \"YES\";\n        }\n        if (length == 55) {\n          \
    \  return \"YES\";\n        }\n        if (length == 57) {\n            return\
    \ \"YES\";\n        }\n        if (length == 59) {\n            return \"YES\"\
    ;\n        }\n        if (length == 61) {\n            return \"YES\";\n     \
    \   }\n        if (length == 63) {\n            return \"YES\";\n        }\n \
    \       if (length == 65) {\n            return \"YES\";\n        }\n        if\
    \ (length == 67) {\n            return \"YES\";\n        }\n        if (length\
    \ == 69) {\n            return \"YES\";\n        }\n        if (length == 71)\
    \ {\n            return \"YES\";\n        }\n        if (length == 73) {\n   \
    \         return \"YES\";\n        }\n        if (length == 75) {\n          \
    \  return \"YES\";\n        }\n        if (length == 77) {\n            return\
    \ \"YES\";\n        }\n        if (length == 79) {\n            return \"YES\"\
    ;\n        }\n        if (length == 81) {\n            return \"YES\";\n", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection.isEmpty()) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.first();\n        if (length == interval1.first()\
    \ && length == interval2.first()) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getRight() - intersection.getLeft();\n    \
    \    if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        if (length == 0) {\n\
    \            return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        Integer length =\
    \ intersection.getValue();\n        if (length == 1) {\n            return \"\
    YES\";\n        }\n        if (length == 2) {\n            return \"NO\";\n  \
    \      }\n        Integer start1 = interval1.getKey();\n        Integer end1 =\
    \ interval1.getValue();\n        Integer start2 = interval2.getKey();\n      \
    \  Integer end2 = interval2.getValue();\n        if (start1 < start2) {\n    \
    \        Pair<Integer, Integer> temp = interval1;\n            interval1 = interval2;\n\
    \            interval2 = temp;\n        }\n        if (end1 > end2) {\n      \
    \      Pair<Integer, Integer> temp = interval1;\n            interval1 = interval2;\n\
    \            interval2 = temp;\n        }\n        Pair<Integer, Integer> temp\
    \ = interval1;\n        interval1 = interval2;\n        interval2 = temp;\n  \
    \      Pair<Integer, Integer> interval3 = interval1.intersection(interval2);\n\
    \        if (interval3 == null) {\n            return \"NO\";\n        }\n   \
    \     Integer length3 = interval3.getValue();\n        if (length3 == 1) {\n \
    \           return \"YES\";\n        }\n        if (length3 == 2) {\n        \
    \    return \"NO\";\n        }\n        Integer start3 = interval1.getKey();\n\
    \        Integer end3 = interval1.getValue();\n        Integer start4 = interval2.getKey();\n\
    \        Integer end4 = interval2.getValue();\n        if (start3 < start4) {\n\
    \            Pair<Integer, Integer> temp = interval1;\n            interval1 =\
    \ interval2;\n            interval2 = temp;\n        }\n        if (end3 > end4)\
    \ {\n            Pair<Integer, Integer> temp = interval1;\n            interval1\
    \ = interval2;\n            interval2 = temp;\n        }\n        Pair<Integer,\
    \ Integer> temp = interval1;\n        interval1 = interval2;\n        interval2\
    \ = temp;\n        Pair<Integer, Integer> interval5 = interval1.intersection(interval2);\n\
    \        if (interval5 == null) {\n            return \"NO\";\n        }\n   \
    \     Integer length5 = interval5.getValue();\n        if (length5 == 1) {\n \
    \           return \"YES\";\n        }\n        if (length5 == 2) {\n        \
    \    return \"NO\";\n        }\n        Integer start5 = interval1.getKey();\n\
    \        Integer end5 = interval1.getValue();\n        Integer start6 = interval2.getKey();\n\
    \        Integer end6 = interval2.getValue();\n        if (start5 < start6) {\n\
    \            Pair<Integer, Integer> temp = interval1;\n            interval1 =\
    \ interval2;\n            interval2 = temp;\n        }\n        if (end5 > end6)\
    \ {\n            Pair<Integer, Integer> temp = interval1;\n            interval",
  "        Pair<Integer, Integer> intersection = Pair.of(interval1.getLeft(), interval1.getRight());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getLeft(), interval2.getRight());\n\
    \        Pair<Integer, Integer> interval4 = Pair.of(interval3.getLeft(), interval3.getRight());\n\
    \        Pair<Integer, Integer> interval5 = Pair.of(interval4.getLeft(), interval4.getRight());\n\
    \        Pair<Integer, Integer> interval6 = Pair.of(interval5.getLeft(), interval5.getRight());\n\
    \        Pair<Integer, Integer> interval7 = Pair.of(interval6.getLeft(), interval6.getRight());\n\
    \        Pair<Integer, Integer> interval8 = Pair.of(interval7.getLeft(), interval7.getRight());\n\
    \        Pair<Integer, Integer> interval9 = Pair.of(interval8.getLeft(), interval8.getRight());\n\
    \        Pair<Integer, Integer> interval10 = Pair.of(interval9.getLeft(), interval9.getRight());\n\
    \        Pair<Integer, Integer> interval11 = Pair.of(interval10.getLeft(), interval10.getRight());\n\
    \        Pair<Integer, Integer> interval12 = Pair.of(interval11.getLeft(), interval11.getRight());\n\
    \        Pair<Integer, Integer> interval13 = Pair.of(interval12.getLeft(), interval12.getRight());\n\
    \        Pair<Integer, Integer> interval14 = Pair.of(interval13.getLeft(), interval13.getRight());\n\
    \        Pair<Integer, Integer> interval15 = Pair.of(interval14.getLeft(), interval14.getRight());\n\
    \        Pair<Integer, Integer> interval16 = Pair.of(interval15.getLeft(), interval15.getRight());\n\
    \        Pair<Integer, Integer> interval17 = Pair.of(interval16.getLeft(), interval16.getRight());\n\
    \        Pair<Integer, Integer> interval18 = Pair.of(interval17.getLeft(), interval17.getRight());\n\
    \        Pair<Integer, Integer> interval19 = Pair.of(interval18.getLeft(), interval18.getRight());\n\
    \        Pair<Integer, Integer> interval20 = Pair.of(interval19.getLeft(), interval19.getRight());\n\
    \        Pair<Integer, Integer> interval21 = Pair.of(interval20.getLeft(), interval20.getRight());\n\
    \        Pair<Integer, Integer> interval22 = Pair.of(interval21.getLeft(), interval21.getRight());\n\
    \        Pair<Integer, Integer> interval23 = Pair.of(interval22.getLeft(), interval22.getRight());\n\
    \        Pair<Integer, Integer> interval24 = Pair.of(interval23.getLeft(), ",
  "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval4 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval5 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval6 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval7 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval8 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval9 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval10 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval11 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval12 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval13 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval14 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval15 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval16 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval17 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval18 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval19 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval20 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval21 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval22 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval23 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval24 = Pair.of(interval1.getFirst(), ",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        } else\
    \ {\n            int length = intersection.second.value - intersection.first.value;\n\
    \            if (length == 1) {\n                return \"YES\";\n           \
    \ } else {\n                return \"NO\";\n            }\n        }", "     \
    \   Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection.isEmpty()) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getLeft();\n        if (length == interval1.getRight())\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";", "      \
    \  Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.value - intersection.first.value;\n\
    \        if (length == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1) {\n            return \"NO\";\n        }\n        boolean isPrime\
    \ = true;\n        for (int i = 2; i <= length / 2; i++) {\n            if (length\
    \ % i == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            return \"YES\";\n \
    \       }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.second.value\
    \ - intersection.first.value;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3) {\n            return \"YES\";\n      \
    \  }\n        if (length == 5) {\n            return \"YES\";\n        }\n   \
    \     if (length == 7) {\n            return \"YES\";\n        }\n        if (length\
    \ == 9) {\n            return \"YES\";\n        }\n        if (length == 11) {\n\
    \            return \"YES\";\n        }\n        if (length == 13) {\n       \
    \     return \"YES\";\n        }\n        if (length == 17) {\n            return\
    \ \"YES\";\n        }\n        if (length == 19) {\n            return \"YES\"\
    ;\n        }\n        if (length == 23) {\n            return \"YES\";\n     \
    \   }\n        if (length == 29) {\n            return \"YES\";\n        }\n \
    \       if (length == 31) {\n            return \"YES\";\n        }\n        if\
    \ (length == 37) {\n            return \"YES\";\n        }\n        if (length\
    \ == 43) {\n            return \"YES\";\n        }\n        if (length == 49)\
    \ {\n            return \"YES\";\n        }\n        if (length == 71) {\n   \
    \         return \"YES\";\n        }\n        if (length == 79) {\n          \
    \  return \"YES\";\n        }\n        if (length == 89) {\n            return\
    \ \"YES\";\n        }\n        if (length == 111) {\n            return \"YES\"\
    ;\n        }\n        if (length == 127) {\n            return \"YES\";\n    \
    \    }\n        if (length == 131) {\n            return \"YES\";\n        }\n\
    \        if (length == 137) {\n            return \"YES\";\n        }\n      \
    \  if (length == 151) {\n            return \"YES\";\n        }\n        if (length\
    \ == 157) {\n            return \"YES\";\n        }\n        if (length == 171)\
    \ {\n            return \"YES\";\n        }\n        if (length == 177) {\n  \
    \          return \"YES\";\n        }\n        if (length == 191) {\n        \
    \    return \"YES\";\n        }\n        if (length == 199) {\n            return\
    \ \"YES\";\n        }\n        if (length == 231) {\n            return \"YES\"\
    ;\n        }\n        if (length == 247) {\n            return \"YES\";\n    \
    \    }\n        if (length == 251) {\n            return \"YES\";\n        }\n\
    \        if (length == 257) {\n            return \"YES\";\n        }\n      \
    \  if (length == 271) {\n            return \"YES\";\n        }\n        if (length\
    \ == 277) {\n            return \"YES\";\n        }\n        if (length == 281)\
    \ {\n            return \"YES\";\n        }\n        if (length == 283) {\n  \
    \          return \"YES\";\n        }\n        if (length == 293) {\n        \
    \    return \"YES\";\n        }\n        if (length == 307) {\n            return\
    \ \"YES\";\n        }\n        if (length == 311) {\n            return \"YES\"\
    ;\n        }\n        if (", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        boolean isPrime = true;\n\
    \        for (int i = 2; i <= length; i++) {\n            if (length % i == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            return \"YES\";\n        }\n \
    \       return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.value - intersection.first.value;\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3) {\n            return \"YES\";\n        }\n        if (length == 5) {\n\
    \            return \"YES\";\n        }\n        if (length == 7) {\n        \
    \    return \"YES\";\n        }\n        if (length == 9) {\n            return\
    \ \"YES\";\n        }\n        if (length == 11) {\n            return \"YES\"\
    ;\n        }\n        if (length == 13) {\n            return \"YES\";\n     \
    \   }\n        if (length == 17) {\n            return \"YES\";\n        }\n \
    \       if (length == 19) {\n            return \"YES\";\n        }\n        if\
    \ (length == 23) {\n            return \"YES\";\n        }\n        if (length\
    \ == 29) {\n            return \"YES\";\n        }\n        if (length == 31)\
    \ {\n            return \"YES\";\n        }\n        if (length == 37) {\n   \
    \         return \"YES\";\n        }\n        if (length == 43) {\n          \
    \  return \"YES\";\n        }\n        if (length == 49) {\n            return\
    \ \"YES\";\n        }\n        if (length == 53) {\n            return \"YES\"\
    ;\n        }\n        if (length == 59) {\n            return \"YES\";\n     \
    \   }\n        if (length == 67) {\n            return \"YES\";\n        }\n \
    \       if (length == 73) {\n            return \"YES\";\n        }\n        if\
    \ (length == 91) {\n            return \"YES\";\n        }\n        if (length\
    \ == 117) {\n            return \"YES\";\n        }\n        if (length == 131)\
    \ {\n            return \"YES\";\n        }\n        if (length == 137) {\n  \
    \          return \"YES\";\n        }\n        if (length == 151) {\n        \
    \    return \"YES\";\n        }\n        if (length == 157) {\n            return\
    \ \"YES\";\n        }\n        if (length == 161) {\n            return \"YES\"\
    ;\n        }\n        if (length == 167) {\n            return \"YES\";\n    \
    \    }\n        if (length == 173) {\n            return \"YES\";\n        }\n\
    \        if (length == 179) {\n            return \"YES\";\n        }\n      \
    \  if (length == 183) {\n            return \"YES\";\n        }\n        if (length\
    \ == 191) {\n            return \"YES\";\n        }\n        if (length == 197)\
    \ {\n            return \"YES\";\n        }\n        if (length == 203) {\n  \
    \          return \"YES\";\n        }\n        if (length == 209) {\n        \
    \    return \"YES\";\n        }\n        if (length == 213) {\n            return\
    \ \"YES\";\n        }\n        if (length == 217) {\n            return \"YES\"\
    ;\n        }\n        if (length == 223) {\n            return \"YES\";\n    \
    \    }\n        if (length == 229) {\n            return \"YES\";\n        }\n\
    \        if (length == 233) {\n            return \"YES\";\n", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        } else {\n            int length\
    \ = intersection.getValue();\n            if (length == interval1.getValue() &&\
    \ length == interval2.getValue()) {\n                return \"YES\";\n       \
    \     } else {\n                return \"NO\";\n            }\n        }", " \
    \       Pair<Integer, Integer> intersection = new Pair<>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection2 = new\
    \ Pair<>(interval2.getFirst(), interval2.getSecond());\n        Pair<Integer,\
    \ Integer> intersection3 = new Pair<>(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> intersection4 = new Pair<>(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection5 = new\
    \ Pair<>(interval1.getFirst(), interval1.getSecond());\n        Pair<Integer,\
    \ Integer> intersection6 = new Pair<>(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection7 = new Pair<>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection8 = new\
    \ Pair<>(interval2.getFirst(), interval2.getSecond());\n        Pair<Integer,\
    \ Integer> intersection9 = new Pair<>(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> intersection10 = new Pair<>(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection11 = new\
    \ Pair<>(interval1.getFirst(), interval1.getSecond());\n        Pair<Integer,\
    \ Integer> intersection12 = new Pair<>(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection13 = new Pair<>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection14 = new\
    \ Pair<>(interval2.getFirst(), interval2.getSecond());\n        Pair<Integer,\
    \ Integer> intersection15 = new Pair<>(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> intersection16 = new Pair<>(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection17 = new\
    \ Pair<>(interval1.getFirst(), interval1.getSecond());\n        Pair<Integer,\
    \ Integer> intersection18 = new Pair<>(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection19 = new Pair<>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection20 = new\
    \ Pair<>(interval2.getFirst(), interval2.getSecond());\n        Pair<Integer,\
    \ Integer> intersection21 = new Pair<>(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> intersection22 = new Pair<>(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> ", "        Pair<Integer,\
    \ Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval4 = Pair.of(interval3.getFirst(), interval3.getSecond());\n\
    \        Pair<Integer, Integer> interval5 = Pair.of(interval4.getFirst(), interval4.getSecond());\n\
    \        Pair<Integer, Integer> interval6 = Pair.of(interval5.getFirst(), interval5.getSecond());\n\
    \        Pair<Integer, Integer> interval7 = Pair.of(interval6.getFirst(), interval6.getSecond());\n\
    \        Pair<Integer, Integer> interval8 = Pair.of(interval7.getFirst(), interval7.getSecond());\n\
    \        Pair<Integer, Integer> interval9 = Pair.of(interval8.getFirst(), interval8.getSecond());\n\
    \        Pair<Integer, Integer> interval10 = Pair.of(interval9.getFirst(), interval9.getSecond());\n\
    \        Pair<Integer, Integer> interval11 = Pair.of(interval10.getFirst(), interval10.getSecond());\n\
    \        Pair<Integer, Integer> interval12 = Pair.of(interval11.getFirst(), interval11.getSecond());\n\
    \        Pair<Integer, Integer> interval13 = Pair.of(interval12.getFirst(), interval12.getSecond());\n\
    \        Pair<Integer, Integer> interval14 = Pair.of(interval13.getFirst(), interval13.getSecond());\n\
    \        Pair<Integer, Integer> interval15 = Pair.of(interval14.getFirst(), interval14.getSecond());\n\
    \        Pair<Integer, Integer> interval16 = Pair.of(interval15.getFirst(), interval15.getSecond());\n\
    \        Pair<Integer, Integer> interval17 = Pair.of(interval16.getFirst(), interval16.getSecond());\n\
    \        Pair<Integer, Integer> interval18 = Pair.of(interval17.getFirst(), interval17.getSecond());\n\
    \        Pair<Integer, Integer> interval19 = Pair.of(interval18.getFirst(), interval18.getSecond());\n\
    \        Pair<Integer, Integer> interval20 = Pair.of(interval19.getFirst(), interval19.getSecond());\n\
    \        Pair<Integer, Integer> interval21 = Pair.of(interval20.getFirst(), interval20.getSecond());\n\
    \        Pair<Integer, Integer> interval22 = Pair.of(interval21.getFirst(), interval21.getSecond());\n\
    \        Pair<Integer, Integer> interval23 = Pair.of(interval22.getFirst(), interval22.getSecond());\n\
    \        Pair<Integer, Integer> interval24 = Pair.of(interval23.getFirst(), ",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == 1) {\n \
    \           return \"YES\";\n        }\n        if (length == 2) {\n         \
    \   return \"YES\";\n        }\n        if (length == 3) {\n            return\
    \ \"YES\";\n        }\n        if (length == 4) {\n            return \"YES\"\
    ;\n        }\n        if (length == 5) {\n            return \"YES\";\n      \
    \  }\n        if (length == 6) {\n            return \"YES\";\n        }\n   \
    \     if (length == 7) {\n            return \"YES\";\n        }\n        if (length\
    \ == 8) {\n            return \"YES\";\n        }\n        if (length == 9) {\n\
    \            return \"YES\";\n        }\n        if (length == 10) {\n       \
    \     return \"YES\";\n        }\n        if (length == 11) {\n            return\
    \ \"YES\";\n        }\n        if (length == 12) {\n            return \"YES\"\
    ;\n        }\n        if (length == 13) {\n            return \"YES\";\n     \
    \   }\n        if (length == 14) {\n            return \"YES\";\n        }\n \
    \       if (length == 15) {\n            return \"YES\";\n        }\n        if\
    \ (length == 16) {\n            return \"YES\";\n        }\n        if (length\
    \ == 17) {\n            return \"YES\";\n        }\n        if (length == 18)\
    \ {\n            return \"YES\";\n        }\n        if (length == 19) {\n   \
    \         return \"YES\";\n        }\n        if (length == 20) {\n          \
    \  return \"YES\";\n        }\n        if (length == 21) {\n            return\
    \ \"YES\";\n        }\n        if (length == 22) {\n            return \"YES\"\
    ;\n        }\n        if (length == 23) {\n            return \"YES\";\n     \
    \   }\n        if (length == 24) {\n            return \"YES\";\n        }\n \
    \       if (length == 25) {\n            return \"YES\";\n        }\n        if\
    \ (length == 26) {\n            return \"YES\";\n        }\n        if (length\
    \ == 27) {\n            return \"YES\";\n        }\n        if (length == 28)\
    \ {\n            return \"YES\";\n        }\n        if (length == 29) {\n   \
    \         return \"YES\";\n        }\n        if (length == 30) {\n          \
    \  return \"YES\";\n        }\n        if (length == 31) {\n            return\
    \ \"YES\";\n        }\n        if (length == 32) {\n            return \"YES\"\
    ;\n        }\n        if (length == 33) {\n            return \"YES\";\n     \
    \   }\n        if (length == 34) {\n            return \"YES\";\n        }\n \
    \       if (length == 35) {\n            return \"YES\";\n        }\n        if\
    \ (length == 36) {\n            return \"YES\";\n        }\n        if (length\
    \ == 37) {\n            return \"YES\";\n        }\n        if (length == 38)\
    \ {\n            return \"YES\";\n        }\n        if (length == 39) {\n   \
    \         return \"YES\";\n        }\n        if (length == 40) {\n          \
    \  return \"YES\";\n        }\n        if (length == 41) {\n            return\
    \ \"YES\";\n        }\n        if (length == 42) {", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection.isEmpty())\
    \ {\n            return \"NO\";\n        }\n        int length = intersection.getFirst()\
    \ - intersection.getSecond();\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3) {\n            return \"YES\";\n      \
    \  }\n        if (length == 5) {\n            return \"YES\";\n        }\n   \
    \     return \"NO\";", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> interval4 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> interval5 = Pair.of(interval4.getFirst(),\
    \ interval4.getSecond());\n        Pair<Integer, Integer> interval6 = Pair.of(interval5.getFirst(),\
    \ interval5.getSecond());\n        Pair<Integer, Integer> interval7 = Pair.of(interval6.getFirst(),\
    \ interval6.getSecond());\n        Pair<Integer, Integer> interval8 = Pair.of(interval7.getFirst(),\
    \ interval7.getSecond());\n        Pair<Integer, Integer> interval9 = Pair.of(interval8.getFirst(),\
    \ interval8.getSecond());\n        Pair<Integer, Integer> interval10 = Pair.of(interval9.getFirst(),\
    \ interval9.getSecond());\n        Pair<Integer, Integer> interval11 = Pair.of(interval10.getFirst(),\
    \ interval10.getSecond());\n        Pair<Integer, Integer> interval12 = Pair.of(interval11.getFirst(),\
    \ interval11.getSecond());\n        Pair<Integer, Integer> interval13 = Pair.of(interval12.getFirst(),\
    \ interval12.getSecond());\n        Pair<Integer, Integer> interval14 = Pair.of(interval13.getFirst(),\
    \ interval13.getSecond());\n        Pair<Integer, Integer> interval15 = Pair.of(interval14.getFirst(),\
    \ interval14.getSecond());\n        Pair<Integer, Integer> interval16 = Pair.of(interval15.getFirst(),\
    \ interval15.getSecond());\n        Pair<Integer, Integer> interval17 = Pair.of(interval16.getFirst(),\
    \ interval16.getSecond());\n        Pair<Integer, Integer> interval18 = Pair.of(interval17.getFirst(),\
    \ interval17.getSecond());\n        Pair<Integer, Integer> interval19 = Pair.of(interval18.getFirst(),\
    \ interval18.getSecond());\n        Pair<Integer, Integer> interval20 = Pair.of(interval19.getFirst(),\
    \ interval19.getSecond());\n        Pair<Integer, Integer> interval21 = Pair.of(interval20.getFirst(),\
    \ interval20.getSecond());\n        Pair<Integer, Integer> interval22 = Pair.of(interval21.getFirst(),\
    \ interval21.getSecond());\n        Pair<Integer, Integer> interval23 = Pair.of(interval22.getFirst(),\
    \ interval22.getSecond());\n        Pair<Integer, Integer> interval24 = Pair.of(interval23.getFirst(), ",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second) <= 0 ? intersection.second.compareTo(interval1.second)\
    \ : interval1.second.compareTo(intersection.second);\n        if (length == 1)\
    \ {\n            return \"YES\";\n        }\n        if (length == 2) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = new Pair<Integer, Integer>();\n        intersection.left\
    \ = interval1.left;\n        intersection.right = interval1.right;\n        intersection.left\
    \ = interval2.left;\n        intersection.right = interval2.right;\n        intersection.left\
    \ = intersection.left;\n        intersection.right = intersection.right;\n   \
    \     intersection.left = intersection.left;\n        intersection.right = intersection.right;\n\
    \        intersection.left = intersection.left;\n        intersection.right =\
    \ intersection.right;\n        intersection.left = intersection.left;\n      \
    \  intersection.right = intersection.right;\n        intersection.left = intersection.left;\n\
    \        intersection.right = intersection.right;\n        intersection.left =\
    \ intersection.left;\n        intersection.right = intersection.right;\n     \
    \   intersection.left = intersection.left;\n        intersection.right = intersection.right;\n\
    \        intersection.left = intersection.left;\n        intersection.right =\
    \ intersection.right;\n        intersection.left = intersection.left;\n      \
    \  intersection.right = intersection.right;\n        intersection.left = intersection.left;\n\
    \        intersection.right = intersection.right;\n        intersection.left =\
    \ intersection.left;\n        intersection.right = intersection.right;\n     \
    \   intersection.left = intersection.left;\n        intersection.right = intersection.right;\n\
    \        intersection.left = intersection.left;\n        intersection.right =\
    \ intersection.right;\n        intersection.left = intersection.left;\n      \
    \  intersection.right = intersection.right;\n        intersection.left = intersection.left;\n\
    \        intersection.right = intersection.right;\n        intersection.left =\
    \ intersection.left;\n        intersection.right = intersection.right;\n     \
    \   intersection.left = intersection.left;\n        intersection.right = intersection.right;\n\
    \        intersection.left = intersection.left;\n        intersection.right =\
    \ intersection.right;\n        intersection.left = intersection.left;\n      \
    \  intersection.right = intersection.right;\n        intersection.left = intersection.left;\n\
    \        intersection.right = intersection.right;\n        intersection.left =\
    \ intersection.left;\n        intersection.right = intersection.right;\n     \
    \   intersection.left = intersection.left;\n        intersection.right = intersection.right;\n\
    \        intersection.left = intersection.left;\n        intersection.right =\
    \ intersection.right;\n        intersection.left = intersection.left;\n      \
    \  intersection.right = intersection.right;\n        intersection.left = intersection.left;\n\
    \        intersection.right = intersection.right;\n        intersection.left =\
    \ intersection.left;\n        intersection.right = intersection.right;\n     \
    \   intersection.left = intersection.left;\n        intersection.right = intersection.right;\n\
    \        intersection.left = intersection.left;\n        intersection.right =\
    \ intersection.right;\n        intersection.left = intersection.left;\n      \
    \  intersection.right = intersection.right;\n        intersection", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        Integer length =\
    \ intersection.getValue();\n        if (length == 1) {\n            return \"\
    YES\";\n        }\n        boolean isPrime = true;\n        for (int i = 2; i\
    \ <= length / 2; i++) {\n            if (length % i == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";", "      \
    \  Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        Integer start = intersection.getLeft();\n        Integer end = intersection.getRight();\n\
    \        if (start <= end) {\n            int length = end - start;\n        \
    \    if (length == 1) {\n                return \"YES\";\n            }\n    \
    \        int prime = length / 2;\n            int remainder = length % 2;\n  \
    \          int count = 0;\n            while (prime != 1) {\n                if\
    \ (prime % 2 == remainder) {\n                    prime = prime / 2;\n       \
    \             count++;\n                } else {\n                    prime =\
    \ prime * 2;\n                    count++;\n                }\n              \
    \  remainder = remainder % 2;\n            }\n            if (count == 1) {\n\
    \                return \"YES\";\n            }\n        }\n        return \"\
    NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        Pair<Integer, Integer> intersection2 = interval2.intersection(interval1);\n\
    \        if (intersection2 == null) {\n            return \"NO\";\n        }\n\
    \        int intersectionLength = intersection.second.compareTo(intersection2.second);\n\
    \        if (intersectionLength == 0) {\n            return \"YES\";\n       \
    \ }\n        if (intersectionLength == 1) {\n            return \"NO\";\n    \
    \    }\n        boolean isPrime = true;\n        for (int i = 2; i <= intersectionLength;\
    \ i++) {\n            if (intersection.first % i == 0 || intersection2.first %\
    \ i == 0) {\n                isPrime = false;\n                break;\n      \
    \      }\n        }\n        if (isPrime) {\n            return \"YES\";\n   \
    \     }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = Pair.of(interval1.getFirst(), interval1.getSecond());\n        Pair<Integer,\
    \ Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval4 = Pair.of(interval3.getFirst(), interval3.getSecond());\n\
    \        Pair<Integer, Integer> interval5 = Pair.of(interval4.getFirst(), interval4.getSecond());\n\
    \        Pair<Integer, Integer> interval6 = Pair.of(interval5.getFirst(), interval5.getSecond());\n\
    \        Pair<Integer, Integer> interval7 = Pair.of(interval6.getFirst(), interval6.getSecond());\n\
    \        Pair<Integer, Integer> interval8 = Pair.of(interval7.getFirst(), interval7.getSecond());\n\
    \        Pair<Integer, Integer> interval9 = Pair.of(interval8.getFirst(), interval8.getSecond());\n\
    \        Pair<Integer, Integer> interval10 = Pair.of(interval9.getFirst(), interval9.getSecond());\n\
    \        Pair<Integer, Integer> interval11 = Pair.of(interval10.getFirst(), interval10.getSecond());\n\
    \        Pair<Integer, Integer> interval12 = Pair.of(interval11.getFirst(), interval11.getSecond());\n\
    \        Pair<Integer, Integer> interval13 = Pair.of(interval12.getFirst(), interval12.getSecond());\n\
    \        Pair<Integer, Integer> interval14 = Pair.of(interval13.getFirst(), interval13.getSecond());\n\
    \        Pair<Integer, Integer> interval15 = Pair.of(interval14.getFirst(), interval14.getSecond());\n\
    \        Pair<Integer, Integer> interval16 = Pair.of(interval15.getFirst(), interval15.getSecond());\n\
    \        Pair<Integer, Integer> interval17 = Pair.of(interval16.getFirst(), interval16.getSecond());\n\
    \        Pair<Integer, Integer> interval18 = Pair.of(interval17.getFirst(), interval17.getSecond());\n\
    \        Pair<Integer, Integer> interval19 = Pair.of(interval18.getFirst(), interval18.getSecond());\n\
    \        Pair<Integer, Integer> interval20 = Pair.of(interval19.getFirst(), interval19.getSecond());\n\
    \        Pair<Integer, Integer> interval21 = Pair.of(interval20.getFirst(), interval20.getSecond());\n\
    \        Pair<Integer, Integer> interval22 = Pair.of(interval21.getFirst(), interval21.getSecond());\n\
    \        Pair<Integer, Integer> interval23 = Pair.of(interval22.getFirst(), interval22.getSecond());\n\
    \        Pair<Integer, Integer> interval24 = Pair.of(interval23.getFirst(), ",
  "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval4 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval5 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval6 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval7 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval8 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval9 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval10 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval11 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval12 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval13 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval14 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval15 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval16 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval17 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval18 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval19 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval20 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval21 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval22 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval23 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval24 = Pair.of(interval1.getFirst(), ",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 5) {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";", "        int start =\
    \ Math.min(interval1.first, interval2.first);\n        int end = Math.max(interval1.second,\
    \ interval2.second);\n        int length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        if (length == 1) return \"YES\";\n        if (length\
    \ == 2) return \"YES\";\n        if (length == 3) return \"YES\";\n        if\
    \ (length == 4) return \"YES\";\n        if (length == 5) return \"YES\";\n  \
    \      if (length == 6) return \"YES\";\n        if (length == 7) return \"YES\"\
    ;\n        if (length == 8) return \"YES\";\n        if (length == 9) return \"\
    YES\";\n        if (length == 10) return \"YES\";\n        if (length == 11) return\
    \ \"YES\";\n        if (length == 12) return \"YES\";\n        if (length == 13)\
    \ return \"YES\";\n        if (length == 14) return \"YES\";\n        if (length\
    \ == 15) return \"YES\";\n        if (length == 16) return \"YES\";\n        if\
    \ (length == 17) return \"YES\";\n        if (length == 18) return \"YES\";\n\
    \        if (length == 19) return \"YES\";\n        if (length == 20) return \"\
    YES\";\n        if (length == 21) return \"YES\";\n        if (length == 22) return\
    \ \"YES\";\n        if (length == 23) return \"YES\";\n        if (length == 24)\
    \ return \"YES\";\n        if (length == 25) return \"YES\";\n        if (length\
    \ == 26) return \"YES\";\n        if (length == 27) return \"YES\";\n        if\
    \ (length == 28) return \"YES\";\n        if (length == 29) return \"YES\";\n\
    \        if (length == 30) return \"YES\";\n        if (length == 31) return \"\
    YES\";\n        if (length == 32) return \"YES\";\n        if (length == 33) return\
    \ \"YES\";\n        if (length == 34) return \"YES\";\n        if (length == 35)\
    \ return \"YES\";\n        if (length == 36) return \"YES\";\n        if (length\
    \ == 37) return \"YES\";\n        if (length == 38) return \"YES\";\n        if\
    \ (length == 39) return \"YES\";\n        if (length == 40) return \"YES\";\n\
    \        if (length == 41) return \"YES\";\n        if (length == 42) return \"\
    YES\";\n        if (length == 43) return \"YES\";\n        if (length == 44) return\
    \ \"YES\";\n        if (length == 45) return \"YES\";\n        if (length == 46)\
    \ return \"YES\";\n        if (length == 47) return \"YES\";\n        if (length\
    \ == 48) return \"YES\";\n        if (length == 49) return \"YES\";\n        if\
    \ (length == 50) return \"YES\";\n        if (length == 51) return \"YES\";\n\
    \        if (length == 52) return \"YES\";\n        if (length == 53) return \"\
    YES\";\n        if (length == 54) return \"YES\";\n        if (length == 55",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 5) {\n        \
    \    return \"YES\";\n        }\n        if (length == 7) {\n            return\
    \ \"YES\";\n        }\n        if (length == 9) {\n            return \"YES\"\
    ;\n        }\n        if (length == 11) {\n            return \"YES\";\n     \
    \   }\n        if (length == 13) {\n            return \"YES\";\n        }\n \
    \       if (length == 17) {\n            return \"YES\";\n        }\n        if\
    \ (length == 19) {\n            return \"YES\";\n        }\n        if (length\
    \ == 23) {\n            return \"YES\";\n        }\n        if (length == 29)\
    \ {\n            return \"YES\";\n        }\n        if (length == 31) {\n   \
    \         return \"YES\";\n        }\n        if (length == 37) {\n          \
    \  return \"YES\";\n        }\n        if (length == 43) {\n            return\
    \ \"YES\";\n        }\n        if (length == 49) {\n            return \"YES\"\
    ;\n        }\n        if (length == 53) {\n            return \"YES\";\n     \
    \   }\n        if (length == 59) {\n            return \"YES\";\n        }\n \
    \       if (length == 67) {\n            return \"YES\";\n        }\n        if\
    \ (length == 73) {\n            return \"YES\";\n        }\n        if (length\
    \ == 79) {\n            return \"YES\";\n        }\n        if (length == 91)\
    \ {\n            return \"YES\";\n        }\n        if (length == 117) {\n  \
    \          return \"YES\";\n        }\n        if (length == 131) {\n        \
    \    return \"YES\";\n        }\n        if (length == 139) {\n            return\
    \ \"YES\";\n        }\n        if (length == 147) {\n            return \"YES\"\
    ;\n        }\n        if (length == 153) {\n            return \"YES\";\n    \
    \    }\n        if (length == 159) {\n            return \"YES\";\n        }\n\
    \        if (length == 167) {\n            return \"YES\";\n        }\n      \
    \  if (length == 173) {\n            return \"YES\";\n        }\n        if (length\
    \ == 179) {\n            return \"YES\";\n        }\n        if (length == 187)\
    \ {\n            return \"YES\";\n        }\n        if (length == 193) {\n  \
    \          return \"YES\";\n        }\n        if (length == 199) {\n        \
    \    return \"YES\";\n        }\n        if (length == 207) {\n            return\
    \ \"YES\";\n        }\n        if (length == 213) {\n            return \"YES\"\
    ;\n        }\n        if (length == 219) {\n            return \"YES\";\n    \
    \    }\n        if (length == 227) {\n            return \"YES\";\n        }\n\
    \        if (length == 233) {\n            return \"YES\";\n        }\n      \
    \  if (length == 239) {\n            return \"YES\";\n        }\n", "        Pair<Integer,\
    \ Integer> interval = interval1.intersection(interval2);\n        if (interval\
    \ == null) {\n            return \"NO\";\n        }\n        int start = Math.min(interval1.getLeft(),\
    \ interval2.getLeft());\n        int end = Math.max(interval1.getRight(), interval2.getRight());\n\
    \        int length = end - start;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 5 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 5 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 5 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 5 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (length == 7 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.get", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        } else\
    \ {\n            int length = intersection.getValue() - intersection.getKey();\n\
    \            if (length == 2) {\n                return \"YES\";\n           \
    \ } else {\n                return \"NO\";\n            }\n        }", "     \
    \   Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.value - intersection.first.value;\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2 && intersection.first.value % 2 == 0 && intersection.second.value\
    \ % 2 == 0) {\n            return \"YES\";\n        }\n        return \"NO\";",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey() + 1;\n \
    \       if (length == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        return \"NO\";", "   \
    \     Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection.isEmpty())\
    \ {\n            return \"NO\";\n        }\n        int length = intersection.getFirst()\
    \ - intersection.getSecond();\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3) {\n            return \"YES\";\n      \
    \  }\n        if (length == 4) {\n            return \"YES\";\n        }\n   \
    \     if (length == 5) {\n            return \"YES\";\n        }\n        if (length\
    \ == 6) {\n            return \"YES\";\n        }\n        if (length == 7) {\n\
    \            return \"YES\";\n        }\n        if (length == 8) {\n        \
    \    return \"YES\";\n        }\n        if (length == 9) {\n            return\
    \ \"YES\";\n        }\n        if (length == 10) {\n            return \"YES\"\
    ;\n        }\n        if (length == 11) {\n            return \"YES\";\n     \
    \   }\n        if (length == 12) {\n            return \"YES\";\n        }\n \
    \       if (length == 13) {\n            return \"YES\";\n        }\n        if\
    \ (length == 14) {\n            return \"YES\";\n        }\n        if (length\
    \ == 15) {\n            return \"YES\";\n        }\n        if (length == 16)\
    \ {\n            return \"YES\";\n        }\n        if (length == 17) {\n   \
    \         return \"YES\";\n        }\n        if (length == 18) {\n          \
    \  return \"YES\";\n        }\n        if (length == 19) {\n            return\
    \ \"YES\";\n        }\n        if (length == 20) {\n            return \"YES\"\
    ;\n        }\n        if (length == 21) {\n            return \"YES\";\n     \
    \   }\n        if (length == 22) {\n            return \"YES\";\n        }\n \
    \       if (length == 23) {\n            return \"YES\";\n        }\n        if\
    \ (length == 24) {\n            return \"YES\";\n        }\n        if (length\
    \ == 25) {\n            return \"YES\";\n        }\n        if (length == 26)\
    \ {\n            return \"YES\";\n        }\n        if (length == 27) {\n   \
    \         return \"YES\";\n        }\n        if (length == 28) {\n          \
    \  return \"YES\";\n        }\n        if (length == 29) {\n            return\
    \ \"YES\";\n        }\n        if (length == 30) {\n            return \"YES\"\
    ;\n        }\n        if (length == 31) {\n            return \"YES\";\n     \
    \   }\n        if (length == 32) {\n            return \"YES\";\n        }\n \
    \       if (length == 33) {\n            return \"YES\";\n        }\n        if\
    \ (length == 34) {\n            return \"YES\";\n        }\n        if (length\
    \ == 35) {\n            return \"YES\";\n        }\n        if (length == 36)\
    \ {\n            return \"YES\";\n        }\n        if (length == 37) {\n   \
    \         return \"YES\";\n        }\n        if (length == 38) {\n          \
    \  return \"YES\";\n        }\n        if (length == 39) {\n            return\
    \ \"YES\";\n        }\n        if (length == 40) {\n            return \"YES\"\
    ;\n        }\n        if (length == 41) {\n            return \"YES\";\n     \
    \   }\n", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getLeft(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getLeft(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection3 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection4 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval1.getRight(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval1.getLeft(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval1.getLeft(),\
    \ interval", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second) <= 0 ? intersection.second.compareTo(interval1.second)\
    \ : interval1.second.compareTo(intersection.second);\n        if (length == 1)\
    \ {\n            return \"YES\";\n        }\n        if (length == 2) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(intersection.first);\n\
    \        if (length == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 4) {\n        \
    \    return \"YES\";\n        }\n        if (length == 5) {\n            return\
    \ \"YES\";\n        }\n        if (length == 6) {\n            return \"YES\"\
    ;\n        }\n        if (length == 7) {\n            return \"YES\";\n      \
    \  }\n        if (length == 8) {\n            return \"YES\";\n        }\n   \
    \     if (length == 9) {\n            return \"YES\";\n        }\n        if (length\
    \ == 10) {\n            return \"YES\";\n        }\n        if (length == 11)\
    \ {\n            return \"YES\";\n        }\n        if (length == 12) {\n   \
    \         return \"YES\";\n        }\n        if (length == 13) {\n          \
    \  return \"YES\";\n        }\n        if (length == 14) {\n            return\
    \ \"YES\";\n        }\n        if (length == 15) {\n            return \"YES\"\
    ;\n        }\n        if (length == 16) {\n            return \"YES\";\n     \
    \   }\n        if (length == 17) {\n            return \"YES\";\n        }\n \
    \       if (length == 18) {\n            return \"YES\";\n        }\n        if\
    \ (length == 19) {\n            return \"YES\";\n        }\n        if (length\
    \ == 20) {\n            return \"YES\";\n        }\n        if (length == 21)\
    \ {\n            return \"YES\";\n        }\n        if (length == 22) {\n   \
    \         return \"YES\";\n        }\n        if (length == 23) {\n          \
    \  return \"YES\";\n        }\n        if (length == 24) {\n            return\
    \ \"YES\";\n        }\n        if (length == 25) {\n            return \"YES\"\
    ;\n        }\n        if (length == 26) {\n            return \"YES\";\n     \
    \   }\n        if (length == 27) {\n            return \"YES\";\n        }\n \
    \       if (length == 28) {\n            return \"YES\";\n        }\n        if\
    \ (length == 29) {\n            return \"YES\";\n        }\n        if (length\
    \ == 30) {\n            return \"YES\";\n        }\n        if (length == 31)\
    \ {\n            return \"YES\";\n        }\n        if (length == 32) {\n   \
    \         return \"YES\";\n        }\n        if (length == 33) {\n          \
    \  return \"YES\";\n        }\n        if (length == 34) {\n            return\
    \ \"YES\";\n        }\n        if (length == 35) {\n            return \"YES\"\
    ;\n        }\n        if (length == 36) {\n            return \"YES\";\n     \
    \   }\n        if (length == 37) {\n            return \"YES\";\n        }\n \
    \       if (length == 38) {\n            return \"YES\";\n        }\n        if\
    \ (length == 39) {\n            return \"YES\";\n        }\n        if (length\
    \ == 40) {\n            return \"YES\";\n        }\n        if (length", "   \
    \     Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.subtract(intersection.first);\n    \
    \    if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 5) {\n        \
    \    return \"YES\";\n        }\n        if (length == 7) {\n            return\
    \ \"YES\";\n        }\n        if (length == 9) {\n            return \"YES\"\
    ;\n        }\n        if (length == 11) {\n            return \"YES\";\n     \
    \   }\n        if (length == 13) {\n            return \"YES\";\n        }\n \
    \       if (length == 17) {\n            return \"YES\";\n        }\n        if\
    \ (length == 19) {\n            return \"YES\";\n        }\n        if (length\
    \ == 23) {\n            return \"YES\";\n        }\n        if (length == 29)\
    \ {\n            return \"YES\";\n        }\n        if (length == 31) {\n   \
    \         return \"YES\";\n        }\n        if (length == 37) {\n          \
    \  return \"YES\";\n        }\n        if (length == 43) {\n            return\
    \ \"YES\";\n        }\n        if (length == 49) {\n            return \"YES\"\
    ;\n        }\n        if (length == 71) {\n            return \"YES\";\n     \
    \   }\n        if (length == 111) {\n            return \"YES\";\n        }\n\
    \        if (length == 131) {\n            return \"YES\";\n        }\n      \
    \  if (length == 171) {\n            return \"YES\";\n        }\n        if (length\
    \ == 191) {\n            return \"YES\";\n        }\n        if (length == 231)\
    \ {\n            return \"YES\";\n        }\n        if (length == 291) {\n  \
    \          return \"YES\";\n        }\n        if (length == 371) {\n        \
    \    return \"YES\";\n        }\n        if (length == 431) {\n            return\
    \ \"YES\";\n        }\n        if (length == 491) {\n            return \"YES\"\
    ;\n        }\n        if (length == 731) {\n            return \"YES\";\n    \
    \    }\n        if (length == 1131) {\n            return \"YES\";\n        }\n\
    \        if (length == 1331) {\n            return \"YES\";\n        }\n     \
    \   if (length == 1731) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1931) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2331) {\n            return \"YES\";\n        }\n        if (length == 2931)\
    \ {\n            return \"YES\";\n        }\n        if (length == 3731) {\n \
    \           return \"YES\";\n        }\n        if (length == 4331) {\n      \
    \      return \"YES\";\n        }\n        if (length == 4931) {\n           \
    \ return \"YES\";\n        }\n        if (length == 7331) {\n            return\
    \ \"YES\";\n        }\n        if (length == 11331) {\n            return \"YES\"\
    ;\n        }\n        if (length == 13331) {\n            return \"YES\";\n  \
    \      }\n        if (length == 17331) {\n", "        int start = Math.min(interval1.first,\
    \ interval2.first);\n        int end = Math.max(interval1.second, interval2.second);\n\
    \        int length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        boolean isPrime = true;\n \
    \       for (int i = 2; i <= length / 2; i++) {\n            if (length % i ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        if (isPrime) return \"YES\";\n        return \"NO\";",
  "        Pair<Integer, Integer> interval3 = new Pair<Integer, Integer>();\n    \
    \    interval3 = interval1.intersection(interval2);\n        if (interval3.equals(new\
    \ Pair<Integer, Integer>())) {\n            return \"NO\";\n        } else {\n\
    \            return \"YES\";\n        }", "        Pair<Integer, Integer> interval\
    \ = interval1.intersection(interval2);\n        if (interval == null) {\n    \
    \        return \"NO\";\n        }\n        int length = interval.getLeft() -\
    \ interval.getRight();\n        if (length == 1) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        Pair<Integer, Integer> interval\
    \ = interval1.intersection(interval2);\n        if (interval == null) {\n    \
    \        return \"NO\";\n        }\n        int start = Math.min(interval1.getFirst(),\
    \ interval2.getFirst());\n        int end = Math.max(interval1.getSecond(), interval2.getSecond());\n\
    \        int length = end - start;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2 && interval1.getFirst() == interval2.getFirst())\
    \ {\n            return \"YES\";\n        }\n        if (length == 2 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 2 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 2 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 3 && interval1.getFirst() == interval2.getFirst()) {\n       \
    \     return \"YES\";\n        }\n        if (length == 3 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 3 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 3 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 4 && interval1.getFirst() == interval2.getFirst()) {\n       \
    \     return \"YES\";\n        }\n        if (length == 4 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 4 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 4 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 5 && interval1.getFirst() == interval2.getFirst()) {\n       \
    \     return \"YES\";\n        }\n        if (length == 5 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 5 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 5 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 6 && interval1.getFirst() == interval2.getFirst()) {\n       \
    \     return \"YES\";\n        }\n        if (length == 6 && interval1.getSecond()\
    \ == interval2.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  if (length == 6 && interval1.getFirst() == interval2.getSecond()) {\n     \
    \       return \"YES\";\n        }\n        if (length == 6 && interval1.getSecond()\
    \ == interval2.getFirst()) {\n            return \"YES\";\n        }\n       \
    \ if (length == 7 && interval1.getFirst() == interval2.", "        Pair<Integer,\
    \ Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        boolean intersect = interval1.getFirst() <=\
    \ interval2.getFirst() && interval1.getSecond() <= interval2.getSecond();\n  \
    \      if (intersect) {\n            int intersectionLength = Pair.of(intersection.getFirst(),\
    \ intersection.getSecond()).getFirst() - Pair.of(intersection.getFirst(), intersection.getSecond()).getSecond();\n\
    \            if (intersectionLength == 2) {\n                return \"YES\";\n\
    \            } else if (intersectionLength > 2) {\n                return \"NO\"\
    ;\n            }\n        }\n        return \"NO\";", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getRight()\
    \ - intersection.getLeft();\n        if (length == 1) {\n            return \"\
    YES\";\n        }\n        if (length == 2 && intersection.getLeft() == intersection.getRight())\
    \ {\n            return \"YES\";\n        }\n        if (length == 2 && intersection.getLeft()\
    \ == intersection.getRight()) {\n            return \"YES\";\n        }\n    \
    \    return \"NO\";", "        Pair<Integer, Integer> interval = interval1.intersection(interval2);\n\
    \        if (interval == null) {\n            return \"NO\";\n        }\n    \
    \    int start = interval1.getFirst();\n        int end = interval1.getSecond();\n\
    \        int length = interval.getSecond();\n        if (length == 1) {\n    \
    \        return \"NO\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        int mid = start + (end - start) / 2;\n        if\
    \ (mid < end && mid > start) {\n            return intersection(interval1, Pair.of(mid,\
    \ mid));\n        }\n        if (mid > end && mid < start) {\n            return\
    \ intersection(Pair.of(mid, mid), interval2);\n        }\n        if (mid > start\
    \ && mid < end) {\n            return intersection(Pair.of(mid, mid), interval1);\n\
    \        }\n        return \"NO\";", "        int start = Math.min(interval1.getFirst(),\
    \ interval2.getFirst());\n        int end = Math.max(interval1.getSecond(), interval2.getSecond());\n\
    \        int length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        boolean isPrime = true;\n \
    \       for (int i = 2; i <= length / 2; i++) {\n            if (length % i ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        if (isPrime) return \"YES\";\n        return \"NO\";",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        if (length == -1) {\n\
    \            return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        Integer length =\
    \ intersection.getRight() - intersection.getLeft();\n        if (length == 1)\
    \ {\n            return \"YES\";\n        }\n        if (length == 2) {\n    \
    \        return \"YES\";\n        }\n        if (length == 3) {\n            return\
    \ \"YES\";\n        }\n        if (length == 5) {\n            return \"YES\"\
    ;\n        }\n        if (length == 7) {\n            return \"YES\";\n      \
    \  }\n        if (length == 9) {\n            return \"YES\";\n        }\n   \
    \     if (length == 11) {\n            return \"YES\";\n        }\n        if\
    \ (length == 13) {\n            return \"YES\";\n        }\n        if (length\
    \ == 17) {\n            return \"YES\";\n        }\n        if (length == 19)\
    \ {\n            return \"YES\";\n        }\n        if (length == 23) {\n   \
    \         return \"YES\";\n        }\n        if (length == 29) {\n          \
    \  return \"YES\";\n        }\n        if (length == 31) {\n            return\
    \ \"YES\";\n        }\n        if (length == 37) {\n            return \"YES\"\
    ;\n        }\n        if (length == 43) {\n            return \"YES\";\n     \
    \   }\n        if (length == 59) {\n            return \"YES\";\n        }\n \
    \       if (length == 73) {\n            return \"YES\";\n        }\n        if\
    \ (length == 91) {\n            return \"YES\";\n        }\n        if (length\
    \ == 117) {\n            return \"YES\";\n        }\n        if (length == 131)\
    \ {\n            return \"YES\";\n        }\n        if (length == 167) {\n  \
    \          return \"YES\";\n        }\n        if (length == 191) {\n        \
    \    return \"YES\";\n        }\n        if (length == 231) {\n            return\
    \ \"YES\";\n        }\n        if (length == 291) {\n            return \"YES\"\
    ;\n        }\n        if (length == 371) {\n            return \"YES\";\n    \
    \    }\n        if (length == 431) {\n            return \"YES\";\n        }\n\
    \        if (length == 591) {\n            return \"YES\";\n        }\n      \
    \  if (length == 731) {\n            return \"YES\";\n        }\n        if (length\
    \ == 931) {\n            return \"YES\";\n        }\n        if (length == 1171)\
    \ {\n            return \"YES\";\n        }\n        if (length == 1311) {\n \
    \           return \"YES\";\n        }\n        if (length == 1669) {\n      \
    \      return \"YES\";\n        }\n        if (length == 1911) {\n           \
    \ return \"YES\";\n        }\n        if (length == 2311) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2911) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3711) {\n            return \"YES\";\n   \
    \     }\n        if (length == 4311) {\n            return \"YES\";\n        }\n\
    \        if (length == 5911) {\n            return \"YES\";\n        }\n     \
    \   if (length == 7311) {\n            return \"YES\";\n        }\n        if\
    \ (length == 9311) {", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection3 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> intersection4 = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval4.getFirst(),\
    \ interval4.getSecond());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval5.getFirst(),\
    \ interval5.getSecond());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval6.getFirst(),\
    \ interval6.getSecond());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval7.getFirst(),\
    \ interval7.getSecond());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval8.getFirst(),\
    \ interval8.getSecond());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval9.getFirst(),\
    \ interval9.getSecond());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval10.getFirst(),\
    \ interval10.getSecond());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval11.getFirst(),\
    \ interval11.getSecond());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval12.getFirst(),\
    \ interval12.getSecond());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval13.getFirst(),\
    \ interval13.getSecond());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval14.getFirst(),\
    \ interval14.getSecond());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval15.getFirst(),\
    \ interval15.getSecond());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval16.getFirst(),\
    \ interval16.getSecond());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval17.getFirst(),\
    \ interval17.getSecond());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval18.getFirst(),\
    \ interval18.getSecond());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval19.getFirst(),\
    \ interval19.getSecond());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval20.getFirst(),\
    \ interval", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        if (length == 0) {\n\
    \            return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = Pair.of(interval1.getLeft(), interval1.getRight());\n\
    \        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getLeft(), interval2.getRight());\n\
    \        Pair<Integer, Integer> intersection3 = Pair.of(interval1.getLeft(), interval2.getLeft());\n\
    \        Pair<Integer, Integer> intersection4 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval1.getRight(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval1.getLeft(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval1.getLeft(),\
    \ interval", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> interval4 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> interval5 = Pair.of(interval4.getFirst(),\
    \ interval4.getSecond());\n        Pair<Integer, Integer> interval6 = Pair.of(interval5.getFirst(),\
    \ interval5.getSecond());\n        Pair<Integer, Integer> interval7 = Pair.of(interval6.getFirst(),\
    \ interval6.getSecond());\n        Pair<Integer, Integer> interval8 = Pair.of(interval7.getFirst(),\
    \ interval7.getSecond());\n        Pair<Integer, Integer> interval9 = Pair.of(interval8.getFirst(),\
    \ interval8.getSecond());\n        Pair<Integer, Integer> interval10 = Pair.of(interval9.getFirst(),\
    \ interval9.getSecond());\n        Pair<Integer, Integer> interval11 = Pair.of(interval10.getFirst(),\
    \ interval10.getSecond());\n        Pair<Integer, Integer> interval12 = Pair.of(interval11.getFirst(),\
    \ interval11.getSecond());\n        Pair<Integer, Integer> interval13 = Pair.of(interval12.getFirst(),\
    \ interval12.getSecond());\n        Pair<Integer, Integer> interval14 = Pair.of(interval13.getFirst(),\
    \ interval13.getSecond());\n        Pair<Integer, Integer> interval15 = Pair.of(interval14.getFirst(),\
    \ interval14.getSecond());\n        Pair<Integer, Integer> interval16 = Pair.of(interval15.getFirst(),\
    \ interval15.getSecond());\n        Pair<Integer, Integer> interval17 = Pair.of(interval16.getFirst(),\
    \ interval16.getSecond());\n        Pair<Integer, Integer> interval18 = Pair.of(interval17.getFirst(),\
    \ interval17.getSecond());\n        Pair<Integer, Integer> interval19 = Pair.of(interval18.getFirst(),\
    \ interval18.getSecond());\n        Pair<Integer, Integer> interval20 = Pair.of(interval19.getFirst(),\
    \ interval19.getSecond());\n        Pair<Integer, Integer> interval21 = Pair.of(interval20.getFirst(),\
    \ interval20.getSecond());\n        Pair<Integer, Integer> interval22 = Pair.of(interval21.getFirst(),\
    \ interval21.getSecond());\n        Pair<Integer, Integer> interval23 = Pair.of(interval22.getFirst(),\
    \ interval22.getSecond());\n        Pair<Integer, Integer> interval24 = Pair.of(interval23.getFirst(), ",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        Integer length = intersection.getValue();\n        if (length == 1) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 3) {\n            return\
    \ \"YES\";\n        }\n        if (length == 5) {\n            return \"YES\"\
    ;\n        }\n        if (length == 7) {\n            return \"YES\";\n      \
    \  }\n        if (length == 9) {\n            return \"YES\";\n        }\n   \
    \     if (length == 11) {\n            return \"YES\";\n        }\n        if\
    \ (length == 13) {\n            return \"YES\";\n        }\n        if (length\
    \ == 17) {\n            return \"YES\";\n        }\n        if (length == 19)\
    \ {\n            return \"YES\";\n        }\n        if (length == 23) {\n   \
    \         return \"YES\";\n        }\n        if (length == 29) {\n          \
    \  return \"YES\";\n        }\n        if (length == 31) {\n            return\
    \ \"YES\";\n        }\n        if (length == 37) {\n            return \"YES\"\
    ;\n        }\n        if (length == 43) {\n            return \"YES\";\n     \
    \   }\n        if (length == 59) {\n            return \"YES\";\n        }\n \
    \       if (length == 67) {\n            return \"YES\";\n        }\n        if\
    \ (length == 73) {\n            return \"YES\";\n        }\n        if (length\
    \ == 91) {\n            return \"YES\";\n        }\n        if (length == 117)\
    \ {\n            return \"YES\";\n        }\n        if (length == 131) {\n  \
    \          return \"YES\";\n        }\n        if (length == 167) {\n        \
    \    return \"YES\";\n        }\n        if (length == 191) {\n            return\
    \ \"YES\";\n        }\n        if (length == 231) {\n            return \"YES\"\
    ;\n        }\n        if (length == 291) {\n            return \"YES\";\n    \
    \    }\n        if (length == 313) {\n            return \"YES\";\n        }\n\
    \        if (length == 373) {\n            return \"YES\";\n        }\n      \
    \  if (length == 431) {\n            return \"YES\";\n        }\n        if (length\
    \ == 591) {\n            return \"YES\";\n        }\n        if (length == 677)\
    \ {\n            return \"YES\";\n        }\n        if (length == 731) {\n  \
    \          return \"YES\";\n        }\n        if (length == 913) {\n        \
    \    return \"YES\";\n        }\n        if (length == 1173) {\n            return\
    \ \"YES\";\n        }\n        if (length == 1317) {\n            return \"YES\"\
    ;\n        }\n        if (length == 1673) {\n            return \"YES\";\n   \
    \     }\n        if (length == 1927) {\n            return \"YES\";\n        }\n\
    \        if (length == 2317) {\n            return \"YES\";\n        }\n     \
    \   if (length == 2927) {\n            return \"YES\";\n        }\n        if\
    \ (length == 3127) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3737) {\n            return \"YES\";\n", "        Pair<Integer, Integer>\
    \ interval3 = new Pair<Integer, Integer>();\n        interval3 = interval1.intersection(interval2);\n\
    \        if (interval3.isDefined()) {\n            int length = interval3.getFirst()\
    \ - interval3.getSecond();\n            if (length == 1) {\n                return\
    \ \"YES\";\n            } else {\n                return \"NO\";\n           \
    \ }\n        } else {\n            return \"NO\";\n        }", "        Pair<Integer,\
    \ Integer> interval = interval1.intersection(interval2);\n        if (interval\
    \ == null) {\n            return \"NO\";\n        }\n        int length = interval1.getLeft()\
    \ - interval.getLeft() + interval.getRight() - interval.getRight();\n        if\
    \ (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 5) {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = new Pair<Integer, Integer>();\n        intersection.first\
    \ = interval1.first;\n        intersection.second = interval1.second;\n      \
    \  intersection.first = interval2.first;\n        intersection.second = interval2.second;\n\
    \        \n        Pair<Integer, Integer> intersection2 = new Pair<Integer, Integer>();\n\
    \        intersection2.first = interval1.first;\n        intersection2.second\
    \ = interval1.second;\n        intersection2.first = interval2.first;\n      \
    \  intersection2.second = interval2.second;\n        \n        Pair<Integer, Integer>\
    \ intersection3 = new Pair<Integer, Integer>();\n        intersection3.first =\
    \ interval1.first;\n        intersection3.second = interval1.second;\n       \
    \ intersection3.first = interval2.first;\n        intersection3.second = interval2.second;\n\
    \        \n        Pair<Integer, Integer> intersection4 = new Pair<Integer, Integer>();\n\
    \        intersection4.first = interval1.first;\n        intersection4.second\
    \ = interval1.second;\n        intersection4.first = interval2.first;\n      \
    \  intersection4.second = interval2.second;\n        \n        Pair<Integer, Integer>\
    \ intersection5 = new Pair<Integer, Integer>();\n        intersection5.first =\
    \ interval1.first;\n        intersection5.second = interval1.second;\n       \
    \ intersection5.first = interval2.first;\n        intersection5.second = interval2.second;\n\
    \        \n        Pair<Integer, Integer> intersection6 = new Pair<Integer, Integer>();\n\
    \        intersection6.first = interval1.first;\n        intersection6.second\
    \ = interval1.second;\n        intersection6.first = interval2.first;\n      \
    \  intersection6.second = interval2.second;\n        \n        Pair<Integer, Integer>\
    \ intersection7 = new Pair<Integer, Integer>();\n        intersection7.first =\
    \ interval1.first;\n        intersection7.second = interval1.second;\n       \
    \ intersection7.first = interval2.first;\n        intersection7.second = interval2.second;\n\
    \        \n        Pair<Integer, Integer> intersection8 = new Pair<Integer, Integer>();\n\
    \        intersection8.first = interval1.first;\n        intersection8.second\
    \ = interval1.second;\n        intersection8.first = interval2.first;\n      \
    \  intersection8.second = interval2.second;\n        \n        Pair<Integer, Integer>\
    \ intersection9 = new Pair<Integer, Integer>();\n        intersection9.first =\
    \ interval1.first;\n        intersection9.second = interval1.second;\n       \
    \ intersection9.first = interval2.first;\n        intersection9.second = interval2.second;\n\
    \        \n        Pair<Integer, Integer> intersection10 = new Pair<Integer, Integer>();\n\
    \        intersection10.first = interval1.first;\n        intersection10.second\
    \ = interval1.second;\n        intersection10.", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == 1) {\n            return \"YES\";\n        }\n        boolean isPrime\
    \ = true;\n        for (int i = 2; i <= length; i++) {\n            if (length\
    \ % i == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            return \"YES\";\n \
    \       }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        Pair<Integer, Integer> lengthOfIntersection\
    \ = intersection.map(i -> i.end - i.start);\n        if (lengthOfIntersection.equals(Pair.of(2,\
    \ 2))) {\n            return \"YES\";\n        }\n        if (lengthOfIntersection.equals(Pair.of(1,\
    \ 2))) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection3 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> intersection4 = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval4.getFirst(),\
    \ interval4.getSecond());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval5.getFirst(),\
    \ interval5.getSecond());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval6.getFirst(),\
    \ interval6.getSecond());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval7.getFirst(),\
    \ interval7.getSecond());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval8.getFirst(),\
    \ interval8.getSecond());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval9.getFirst(),\
    \ interval9.getSecond());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval10.getFirst(),\
    \ interval10.getSecond());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval11.getFirst(),\
    \ interval11.getSecond());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval12.getFirst(),\
    \ interval12.getSecond());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval13.getFirst(),\
    \ interval13.getSecond());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval14.getFirst(),\
    \ interval14.getSecond());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval15.getFirst(),\
    \ interval15.getSecond());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval16.getFirst(),\
    \ interval16.getSecond());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval17.getFirst(),\
    \ interval17.getSecond());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval18.getFirst(),\
    \ interval18.getSecond());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval19.getFirst(),\
    \ interval19.getSecond());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval20.getFirst(),\
    \ interval", "        Pair<Integer, Integer> interval3 = new Pair<Integer, Integer>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval4 = new Pair<Integer,\
    \ Integer>(interval2.getFirst(), interval2.getSecond());\n        Pair<Integer,\
    \ Integer> intersection = interval3.intersection(interval4);\n        if (intersection.getFirst()\
    \ == intersection.getSecond()) {\n            return \"NO\";\n        } else {\n\
    \            return \"YES\";\n        }", "        Pair<Integer, Integer> intersection\
    \ = Pair.of(interval1.getLeft(), interval1.getRight());\n        Pair<Integer,\
    \ Integer> interval3 = Pair.of(interval2.getLeft(), interval2.getRight());\n \
    \       Pair<Integer, Integer> interval4 = Pair.of(interval3.getLeft(), interval3.getRight());\n\
    \        Pair<Integer, Integer> interval5 = Pair.of(interval4.getLeft(), interval4.getRight());\n\
    \        Pair<Integer, Integer> interval6 = Pair.of(interval5.getLeft(), interval5.getRight());\n\
    \        Pair<Integer, Integer> interval7 = Pair.of(interval6.getLeft(), interval6.getRight());\n\
    \        Pair<Integer, Integer> interval8 = Pair.of(interval7.getLeft(), interval7.getRight());\n\
    \        Pair<Integer, Integer> interval9 = Pair.of(interval8.getLeft(), interval8.getRight());\n\
    \        Pair<Integer, Integer> interval10 = Pair.of(interval9.getLeft(), interval9.getRight());\n\
    \        Pair<Integer, Integer> interval11 = Pair.of(interval10.getLeft(), interval10.getRight());\n\
    \        Pair<Integer, Integer> interval12 = Pair.of(interval11.getLeft(), interval11.getRight());\n\
    \        Pair<Integer, Integer> interval13 = Pair.of(interval12.getLeft(), interval12.getRight());\n\
    \        Pair<Integer, Integer> interval14 = Pair.of(interval13.getLeft(), interval13.getRight());\n\
    \        Pair<Integer, Integer> interval15 = Pair.of(interval14.getLeft(), interval14.getRight());\n\
    \        Pair<Integer, Integer> interval16 = Pair.of(interval15.getLeft(), interval15.getRight());\n\
    \        Pair<Integer, Integer> interval17 = Pair.of(interval16.getLeft(), interval16.getRight());\n\
    \        Pair<Integer, Integer> interval18 = Pair.of(interval17.getLeft(), interval17.getRight());\n\
    \        Pair<Integer, Integer> interval19 = Pair.of(interval18.getLeft(), interval18.getRight());\n\
    \        Pair<Integer, Integer> interval20 = Pair.of(interval19.getLeft(), interval19.getRight());\n\
    \        Pair<Integer, Integer> interval21 = Pair.of(interval20.getLeft(), interval20.getRight());\n\
    \        Pair<Integer, Integer> interval22 = Pair.of(interval21.getLeft(), interval21.getRight());\n\
    \        Pair<Integer, Integer> interval23 = Pair.of(interval22.getLeft(), interval22.getRight());\n\
    \        Pair<Integer, Integer> interval24 = Pair.of(interval23.getLeft(), ",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == 1) {\n \
    \           return \"YES\";\n        }\n        if (length == 2) {\n         \
    \   return \"YES\";\n        }\n        if (length == 3) {\n            return\
    \ \"YES\";\n        }\n        if (length == 5) {\n            return \"YES\"\
    ;\n        }\n        if (length == 7) {\n            return \"YES\";\n      \
    \  }\n        if (length == 9) {\n            return \"YES\";\n        }\n   \
    \     if (length == 11) {\n            return \"YES\";\n        }\n        if\
    \ (length == 13) {\n            return \"YES\";\n        }\n        if (length\
    \ == 17) {\n            return \"YES\";\n        }\n        if (length == 19)\
    \ {\n            return \"YES\";\n        }\n        if (length == 23) {\n   \
    \         return \"YES\";\n        }\n        if (length == 29) {\n          \
    \  return \"YES\";\n        }\n        if (length == 31) {\n            return\
    \ \"YES\";\n        }\n        if (length == 37) {\n            return \"YES\"\
    ;\n        }\n        if (length == 43) {\n            return \"YES\";\n     \
    \   }\n        if (length == 49) {\n            return \"YES\";\n        }\n \
    \       if (length == 53) {\n            return \"YES\";\n        }\n        if\
    \ (length == 59) {\n            return \"YES\";\n        }\n        if (length\
    \ == 67) {\n            return \"YES\";\n        }\n        if (length == 73)\
    \ {\n            return \"YES\";\n        }\n        if (length == 79) {\n   \
    \         return \"YES\";\n        }\n        if (length == 91) {\n          \
    \  return \"YES\";\n        }\n        if (length == 111) {\n            return\
    \ \"YES\";\n        }\n        if (length == 131) {\n            return \"YES\"\
    ;\n        }\n        if (length == 171) {\n            return \"YES\";\n    \
    \    }\n        if (length == 191) {\n            return \"YES\";\n        }\n\
    \        if (length == 231) {\n            return \"YES\";\n        }\n      \
    \  if (length == 291) {\n            return \"YES\";\n        }\n        if (length\
    \ == 371) {\n            return \"YES\";\n        }\n        if (length == 431)\
    \ {\n            return \"YES\";\n        }\n        if (length == 491) {\n  \
    \          return \"YES\";\n        }\n        if (length == 531) {\n        \
    \    return \"YES\";\n        }\n        if (length == 591) {\n            return\
    \ \"YES\";\n        }\n        if (length == 671) {\n            return \"YES\"\
    ;\n        }\n        if (length == 731) {\n            return \"YES\";\n    \
    \    }\n        if (length == 791) {\n            return \"YES\";\n        }\n\
    \        if (length == 931) {\n            return \"YES\";\n        }\n      \
    \  if (length == 1131) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1331) {\n            return \"YES\";\n        }\n        if (length == 1731)\
    \ {\n            return \"YES\";\n        }\n        if (length == 1931) {", " \
    \       int start = Math.min(interval1.first, interval2.first);\n        int end\
    \ = Math.max(interval1.second, interval2.second);\n        int length = end -\
    \ start;\n        if (length == 0) return \"NO\";\n        if (length == 1) return\
    \ \"YES\";\n        if (length == 2 && interval1.first == interval2.first) return\
    \ \"YES\";\n        if (length == 2 && interval1.second == interval2.second) return\
    \ \"YES\";\n        if (length == 2 && interval1.first == interval2.second) return\
    \ \"YES\";\n        if (length == 2 && interval1.second == interval2.first) return\
    \ \"YES\";\n        if (length == 3 && interval1.first == interval2.first && interval1.second\
    \ == interval2.second) return \"YES\";\n        if (length == 3 && interval1.first\
    \ == interval2.second && interval1.second == interval2.first) return \"YES\";\n\
    \        if (length == 3 && interval1.first == interval2.first && interval1.second\
    \ == interval2.second) return \"YES\";\n        if (length == 3 && interval1.second\
    \ == interval2.first && interval1.second == interval2.second) return \"YES\";\n\
    \        if (length == 3 && interval1.first == interval2.first && interval1.second\
    \ == interval2.first) return \"YES\";\n        if (length == 3 && interval1.second\
    \ == interval2.first && interval1.second == interval2.first) return \"YES\";\n\
    \        if (length == 3 && interval1.first == interval2.second && interval1.second\
    \ == interval2.second) return \"YES\";\n        if (length == 3 && interval1.second\
    \ == interval2.second && interval1.second == interval2.second) return \"YES\"\
    ;\n        if (length == 3 && interval1.first == interval2.second && interval1.second\
    \ == interval2.first) return \"YES\";\n        if (length == 3 && interval1.second\
    \ == interval2.second && interval1.second == interval2.first) return \"YES\";\n\
    \        if (length == 3 && interval1.first == interval2.first && interval1.second\
    \ == interval2.second) return \"YES\";\n        if (length == 3 && interval1.second\
    \ == interval2.first && interval1.second == interval2.second) return \"YES\";\n\
    \        if (length == 3 && interval1.first == interval2.second && interval1.second\
    \ == interval2.first) return \"YES\";\n        if (length == 3 && interval1.second\
    \ == interval2.second && interval1.second == interval2.first) return \"YES\";\n\
    \        if (length == 3 && interval1.first == interval2.first && interval1.second\
    \ == interval2.second) return \"YES\";\n        if (length == 3 && interval1.second\
    \ == interval2.first && interval1.second == interval2.second) return \"YES\";\n\
    \        if (length == 3 && interval1.first == interval2.second && interval1.second\
    \ == interval2.", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == -1) {\n            return \"NO\";\n        }\n        if (length == 0 ||\
    \ length == 1) {\n            return \"NO\";\n        }\n        return \"YES\"\
    ;", "        Pair<Integer, Integer> interval = new Pair<Integer, Integer>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval2 = new Pair<Integer,\
    \ Integer>(interval2.getFirst(), interval2.getSecond());\n        if (interval.getFirst()\
    \ > interval2.getFirst()) {\n            interval = new Pair<Integer, Integer>(interval.getFirst(),\
    \ interval.getSecond());\n            interval2 = new Pair<Integer, Integer>(interval2.getFirst(),\
    \ interval2.getSecond());\n        }\n        if (interval.getSecond() > interval2.getSecond())\
    \ {\n            interval = new Pair<Integer, Integer>(interval.getFirst(), interval.getSecond());\n\
    \            interval2 = new Pair<Integer, Integer>(interval2.getFirst(), interval2.getSecond());\n\
    \        }\n        if (interval.getFirst() == interval.getSecond()) {\n     \
    \       return \"NO\";\n        }\n        if (interval.getFirst() < interval2.getFirst())\
    \ {\n            interval = new Pair<Integer, Integer>(interval.getFirst(), interval.getSecond());\n\
    \            interval2 = new Pair<Integer, Integer>(interval2.getFirst(), interval2.getSecond());\n\
    \        }\n        if (interval.getSecond() < interval2.getSecond()) {\n    \
    \        interval = new Pair<Integer, Integer>(interval.getFirst(), interval.getSecond());\n\
    \            interval2 = new Pair<Integer, Integer>(interval2.getFirst(), interval2.getSecond());\n\
    \        }\n        if (interval.getFirst() == interval2.getFirst() && interval.getSecond()\
    \ == interval2.getSecond()) {\n            return \"NO\";\n        }\n       \
    \ if (interval.getFirst() < interval2.getFirst()) {\n            interval = new\
    \ Pair<Integer, Integer>(interval.getFirst(), interval.getSecond());\n       \
    \     interval2 = new Pair<Integer, Integer>(interval2.getFirst(), interval2.getSecond());\n\
    \        }\n        if (interval.getSecond() < interval2.getSecond()) {\n    \
    \        interval = new Pair<Integer, Integer>(interval.getFirst(), interval.getSecond());\n\
    \            interval2 = new Pair<Integer, Integer>(interval2.getFirst(), interval2.getSecond());\n\
    \        }\n        if (interval.getFirst() == interval2.getFirst() && interval.getSecond()\
    \ == interval2.getSecond()) {\n            return \"NO\";\n        }\n       \
    \ if (interval.getFirst() < interval2.getFirst()) {\n            interval = new\
    \ Pair<Integer, Integer>(interval.getFirst(), interval.getSecond());\n       \
    \     interval2 = new Pair<Integer, Integer>(interval2.getFirst(), interval2.getSecond());\n\
    \        }\n        if (interval.getSecond() < interval2.getSecond()) {\n    \
    \        interval = new Pair<Integer, Integer>(interval.getFirst(), interval.getSecond());\n\
    \            interval2 = new Pair<Integer, Integer>(interval2.", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 0) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n \
    \           return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getValue()\
    \ - intersection.getKey();\n        if (length == 2) {\n            return \"\
    YES\";\n        }\n        if (length == 1) {\n            return \"NO\";\n  \
    \      }\n        if (length == -1) {\n            return \"NO\";\n        }\n\
    \        if (length == -2) {\n            return \"NO\";\n        }\n        return\
    \ \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        boolean isPrime = true;\n\
    \        for (int i = 2; i <= length; i++) {\n            if (length % i == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            return \"YES\";\n        }\n \
    \       return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.value - intersection.first.value;\n\
    \        if (length == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 0) {\n            return \"NO\";\n        }\n        return \"NO\";", "    \
    \    Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == -1) {\n            return \"NO\";\n        }\n        if (length == 0 ||\
    \ length == 1) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n \
    \           return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second)\
    \ <= 0 ? intersection.second.compareTo(interval1.second) : interval1.second.compareTo(intersection.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2 && interval1.first.compareTo(interval2.first) == 0) {\n       \
    \     return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.value\
    \ - intersection.first.value;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        boolean isPrime = true;\n        for (int i = 2;\
    \ i <= length / 2; i++) {\n            if (length % i == 0) {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime) {\n            return \"YES\";\n        }\n        return \"NO\"\
    ;", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.value - intersection.first.value;\n\
    \        if (length == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 0) {\n            return \"NO\";\n        }\n        if (length == -1) {\n \
    \           return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        if (intersection.getFirst() > intersection.getSecond())\
    \ {\n            intersection = Pair.of(intersection.getSecond(), intersection.getFirst());\n\
    \        }\n        if (intersection2.getFirst() > intersection2.getSecond())\
    \ {\n            intersection2 = Pair.of(intersection2.getSecond(), intersection2.getFirst());\n\
    \        }\n        if (intersection.getFirst() < intersection2.getFirst()) {\n\
    \            intersection = Pair.of(intersection.getFirst(), intersection2.getFirst());\n\
    \        }\n        if (intersection.getSecond() < intersection2.getSecond())\
    \ {\n            intersection = Pair.of(intersection.getSecond(), intersection2.getSecond());\n\
    \        }\n        if (intersection.getFirst() == intersection.getSecond()) {\n\
    \            return \"NO\";\n        }\n        if (intersection.getFirst() <\
    \ intersection.getSecond()) {\n            int length = intersection.getSecond()\
    \ - intersection.getFirst();\n            if (length == 2) {\n               \
    \ return \"YES\";\n            }\n            if (length == 3) {\n           \
    \     return \"YES\";\n            }\n            if (length == 5) {\n       \
    \         return \"YES\";\n            }\n            if (length == 7) {\n   \
    \             return \"YES\";\n            }\n            if (length == 9) {\n\
    \                return \"YES\";\n            }\n            if (length == 11)\
    \ {\n                return \"YES\";\n            }\n            if (length ==\
    \ 13) {\n                return \"YES\";\n            }\n            if (length\
    \ == 17) {\n                return \"YES\";\n            }\n            if (length\
    \ == 19) {\n                return \"YES\";\n            }\n            if (length\
    \ == 21) {\n                return \"YES\";\n            }\n            if (length\
    \ == 23) {\n                return \"YES\";\n            }\n            if (length\
    \ == 25) {\n                return \"YES\";\n            }\n            if (length\
    \ == 27) {\n                return \"YES\";\n            }\n            if (length\
    \ == 29) {\n                return \"YES\";\n            }\n            if (length\
    \ == 31) {\n                return \"YES\";\n            }\n            if (length\
    \ == 33) {\n                return \"YES\";\n            }\n            if (length\
    \ == 35) {\n                return \"YES\";\n            }\n            if (length\
    \ == 37) {\n                return \"YES\";\n            }\n            if (length\
    \ == 39) {\n                return \"YES\";\n            }\n            if (length\
    \ == 41) {\n                return \"YES\";\n            }\n            if (length\
    \ == 43) {\n                return \"YES\";\n            }\n            if (length\
    \ == 45) {\n                return \"YES\";\n            }\n            if (length\
    \ == 47) {\n                return \"YES\";\n            }\n            if (length\
    \ == 49) {\n                return \"YES\";\n            }\n            if (length\
    \ == 51) {\n                return \"YES\";\n            }", "        Pair<Integer,\
    \ Integer> intersection = new Pair<>();\n        intersection.first = interval1.first;\n\
    \        intersection.second = interval1.second;\n        intersection.first =\
    \ interval2.first;\n        intersection.second = interval2.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection.second;\n        intersection.first = intersection.first;\n \
    \       intersection.second = intersection.second;\n        intersection.first\
    \ = intersection.first;\n        intersection.second = intersection.second;\n\
    \        intersection.first = intersection.first;\n        intersection.second\
    \ = intersection", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getLeft(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> interval3 = Pair.of(interval2.getLeft(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> interval4 = Pair.of(interval3.getLeft(),\
    \ interval3.getRight());\n        Pair<Integer, Integer> interval5 = Pair.of(interval4.getLeft(),\
    \ interval4.getRight());\n        Pair<Integer, Integer> interval6 = Pair.of(interval5.getLeft(),\
    \ interval5.getRight());\n        Pair<Integer, Integer> interval7 = Pair.of(interval6.getLeft(),\
    \ interval6.getRight());\n        Pair<Integer, Integer> interval8 = Pair.of(interval7.getLeft(),\
    \ interval7.getRight());\n        Pair<Integer, Integer> interval9 = Pair.of(interval8.getLeft(),\
    \ interval8.getRight());\n        Pair<Integer, Integer> interval10 = Pair.of(interval9.getLeft(),\
    \ interval9.getRight());\n        Pair<Integer, Integer> interval11 = Pair.of(interval10.getLeft(),\
    \ interval10.getRight());\n        Pair<Integer, Integer> interval12 = Pair.of(interval11.getLeft(),\
    \ interval11.getRight());\n        Pair<Integer, Integer> interval13 = Pair.of(interval12.getLeft(),\
    \ interval12.getRight());\n        Pair<Integer, Integer> interval14 = Pair.of(interval13.getLeft(),\
    \ interval13.getRight());\n        Pair<Integer, Integer> interval15 = Pair.of(interval14.getLeft(),\
    \ interval14.getRight());\n        Pair<Integer, Integer> interval16 = Pair.of(interval15.getLeft(),\
    \ interval15.getRight());\n        Pair<Integer, Integer> interval17 = Pair.of(interval16.getLeft(),\
    \ interval16.getRight());\n        Pair<Integer, Integer> interval18 = Pair.of(interval17.getLeft(),\
    \ interval17.getRight());\n        Pair<Integer, Integer> interval19 = Pair.of(interval18.getLeft(),\
    \ interval18.getRight());\n        Pair<Integer, Integer> interval20 = Pair.of(interval19.getLeft(),\
    \ interval19.getRight());\n        Pair<Integer, Integer> interval21 = Pair.of(interval20.getLeft(),\
    \ interval20.getRight());\n        Pair<Integer, Integer> interval22 = Pair.of(interval21.getLeft(),\
    \ interval21.getRight());\n        Pair<Integer, Integer> interval23 = Pair.of(interval22.getLeft(),\
    \ interval22.getRight());\n        Pair<Integer, Integer> interval24 = Pair.of(interval23.getLeft(), ",
  "        Pair<Integer, Integer> interval1Copy = new Pair<>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval2Copy = new\
    \ Pair<>(interval2.getFirst(), interval2.getSecond());\n        Pair<Integer,\
    \ Integer> intersection = new Pair<>();\n        intersection = interval1Copy.intersection(interval2Copy);\n\
    \        if (intersection.getFirst() == interval1Copy.getFirst() && intersection.getSecond()\
    \ == interval1Copy.getSecond()) {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.getValue()\
    \ - intersection.getKey();\n        if (length == 1) {\n            return \"\
    YES\";\n        }\n        if (length == 2) {\n            return \"YES\";\n \
    \       }\n        if (length == 3) {\n            return \"YES\";\n        }\n\
    \        if (length == 5) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getValue();\n\
    \        if (length == interval1.getValue()) {\n            return \"YES\";\n\
    \        }\n        if (length == interval2.getValue()) {\n            return\
    \ \"YES\";\n        }\n        if (length == 1) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = Pair.of(interval1.getFirst(), interval1.getSecond());\n        Pair<Integer,\
    \ Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval4 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval5 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval6 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval7 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval8 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval9 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval10 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval11 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval12 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval13 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval14 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval15 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval16 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval17 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval18 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval19 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval20 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval21 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval22 = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval23 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> interval24 = Pair.of(interval1.getFirst(), ",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == 1) {\n \
    \           return \"YES\";\n        }\n        if (length == 2) {\n         \
    \   return \"YES\";\n        }\n        if (length == 3) {\n            return\
    \ \"YES\";\n        }\n        if (length == 4) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == -1) {\n            return \"NO\";\n        }\n        return \"NO\"\
    ;", "        Pair<Integer, Integer> intersection = new Pair<Integer, Integer>();\n\
    \        intersection.first = interval1.first;\n        intersection.second =\
    \ interval1.second;\n        intersection.first = interval2.first;\n        intersection.second\
    \ = interval2.second;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first < intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first < intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first < intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first < intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first < intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n", "    \
    \    Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(intersection.first);\n   \
    \     if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.subtract(intersection.first);\n    \
    \    if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 5) {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.subtract(intersection.first);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey() + 1;\n \
    \       if (length == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1) {\n            return \"NO\";\n        }\n        return \"NO\"\
    ;", "        Pair<Integer, Integer> intersection = new Pair<>();\n        intersection.first\
    \ = interval1.first;\n        intersection.second = interval1.second;\n      \
    \  intersection.first = interval2.first;\n        intersection.second = interval2.second;\n\
    \        intersection.first = intersection.first > intersection.second ? intersection.first\
    \ : intersection.second;\n        intersection.second = intersection.first > intersection.second\
    \ ? intersection.second : intersection.first;\n        if (intersection.first\
    \ > intersection.second) {\n            intersection.first = intersection.second;\n\
    \            intersection.second = intersection.first;\n        }\n        int\
    \ length1 = interval1.second - interval1.first;\n        int length2 = interval2.second\
    \ - interval2.first;\n        if (length1 > length2) {\n            length1 =\
    \ length2;\n        }\n        if (length1 == length2) {\n            int length3\
    \ = interval1.second - interval1.first;\n            int length4 = interval2.second\
    \ - interval2.first;\n            if (length3 == length4) {\n                int\
    \ length5 = interval1.second - interval1.first;\n                int length6 =\
    \ interval2.second - interval2.first;\n                if (length5 == length6)\
    \ {\n                    int length7 = interval1.second - interval1.first;\n \
    \                   int length8 = interval2.second - interval2.first;\n      \
    \              if (length7 == length8) {\n                        int length9\
    \ = interval1.second - interval1.first;\n                        int length10\
    \ = interval2.second - interval2.first;\n                        if (length9 ==\
    \ length10) {\n                            int length11 = interval1.second - interval1.first;\n\
    \                            int length12 = interval2.second - interval2.first;\n\
    \                            if (length11 == length12) {\n                   \
    \             int length13 = interval1.second - interval1.first;\n           \
    \                     int length14 = interval2.second - interval2.first;\n   \
    \                             if (length13 == length14) {\n                  \
    \                  int length15 = interval1.second - interval1.first;\n      \
    \                              int length16 = interval2.second - interval2.first;\n\
    \                                    if (length15 == length16) {\n           \
    \                             int length17 = interval1.second - interval1.first;\n\
    \                                        int length18 = interval2.second - interval2.first;\n\
    \                                        if (length17 == length18) {\n       \
    \                                     int length19 = interval1.second - interval1.first;\n\
    \                                            int length20 = interval2.second -\
    \ interval2.first;\n                                            if (length19 ==\
    \ length20) {\n                                                int length21 =\
    \ interval1.second - interval1.first;\n                                      \
    \          int length22 = interval2.second - interval2.first;\n              \
    \                                  if (length21 == length", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int start = Math.min(interval1.getFirst(), interval2.getFirst());\n \
    \       int end = Math.max(interval1.getSecond(), interval2.getSecond());\n  \
    \      int length = end - start;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3) {\n            return \"YES\";\n      \
    \  }\n        if (length == 5) {\n            return \"YES\";\n        }\n   \
    \     if (length == 7) {\n            return \"YES\";\n        }\n        if (length\
    \ == 9) {\n            return \"YES\";\n        }\n        if (length == 11) {\n\
    \            return \"YES\";\n        }\n        if (length == 13) {\n       \
    \     return \"YES\";\n        }\n        if (length == 17) {\n            return\
    \ \"YES\";\n        }\n        if (length == 19) {\n            return \"YES\"\
    ;\n        }\n        if (length == 23) {\n            return \"YES\";\n     \
    \   }\n        if (length == 29) {\n            return \"YES\";\n        }\n \
    \       if (length == 31) {\n            return \"YES\";\n        }\n        if\
    \ (length == 37) {\n            return \"YES\";\n        }\n        if (length\
    \ == 43) {\n            return \"YES\";\n        }\n        if (length == 49)\
    \ {\n            return \"YES\";\n        }\n        if (length == 71) {\n   \
    \         return \"YES\";\n        }\n        if (length == 79) {\n          \
    \  return \"YES\";\n        }\n        if (length == 89) {\n            return\
    \ \"YES\";\n        }\n        if (length == 111) {\n            return \"YES\"\
    ;\n        }\n        if (length == 131) {\n            return \"YES\";\n    \
    \    }\n        if (length == 179) {\n            return \"YES\";\n        }\n\
    \        if (length == 199) {\n            return \"YES\";\n        }\n      \
    \  if (length == 239) {\n            return \"YES\";\n        }\n        if (length\
    \ == 299) {\n            return \"YES\";\n        }\n        if (length == 319)\
    \ {\n            return \"YES\";\n        }\n        if (length == 379) {\n  \
    \          return \"YES\";\n        }\n        if (length == 431) {\n        \
    \    return \"YES\";\n        }\n        if (length == 491) {\n            return\
    \ \"YES\";\n        }\n        if (length == 711) {\n            return \"YES\"\
    ;\n        }\n        if (length == 791) {\n            return \"YES\";\n    \
    \    }\n        if (length == 897) {\n            return \"YES\";\n        }\n\
    \        if (length == 1113) {\n            return \"YES\";\n        }\n     \
    \   if (length == 1317) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1799) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1991) {\n            return \"YES\";\n        }\n        if (length == 2999)\
    \ {\n            return \"YES\";\n        }\n        if (length == 3191) {\n \
    \           return \"YES\";\n        }\n        if (length == ", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getValue();\n\
    \        if (length == interval1.getValue()) {\n            return \"YES\";\n\
    \        }\n        if (length == interval2.getValue()) {\n            return\
    \ \"YES\";\n        }\n        if (length == 1) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = new Pair<Integer, Integer>();\n        intersection.first = interval1.first;\n\
    \        intersection.second = interval1.second;\n        intersection.first =\
    \ interval2.first;\n        intersection.second = interval2.second;\n        if\
    \ (intersection.first > intersection.second) {\n            Pair<Integer, Integer>\
    \ temp = new Pair<Integer, Integer>();\n            temp.first = intersection.first;\n\
    \            temp.second = intersection.second;\n            temp.first = intersection.second;\n\
    \            temp.second = intersection.first;\n            intersection = temp;\n\
    \        }\n        int length1 = interval1.first - interval1.second;\n      \
    \  int length2 = interval2.first - interval2.second;\n        if (length1 > length2)\
    \ {\n            Pair<Integer, Integer> temp = new Pair<Integer, Integer>();\n\
    \            temp.first = intersection.first;\n            temp.second = intersection.second;\n\
    \            temp.first = intersection.second;\n            temp.second = intersection.first;\n\
    \            intersection = temp;\n        }\n        if (length1 == length2)\
    \ {\n            int length = 0;\n            Pair<Integer, Integer> temp = new\
    \ Pair<Integer, Integer>();\n            temp.first = intersection.first;\n  \
    \          temp.second = intersection.second;\n            temp.first = intersection.second;\n\
    \            temp.second = intersection.first;\n            intersection = temp;\n\
    \            length = intersection.first - intersection.second;\n            if\
    \ (length == 1) {\n                return \"YES\";\n            }\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        boolean isPrime = true;\n\
    \        for (int i = 2; i <= length / 2; i++) {\n            if (length % i ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        if (isPrime) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        } else\
    \ {\n            return primeCheck(intersection);\n        }", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second)\
    \ <= 0 ? intersection.second.compareTo(interval1.second) : interval1.second.compareTo(intersection.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        return \"NO\"\
    ;", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getLeft(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> interval3 = Pair.of(interval2.getLeft(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> interval4 = Pair.of(interval3.getLeft(),\
    \ interval3.getRight());\n        Pair<Integer, Integer> interval5 = Pair.of(interval4.getLeft(),\
    \ interval4.getRight());\n        Pair<Integer, Integer> interval6 = Pair.of(interval5.getLeft(),\
    \ interval5.getRight());\n        Pair<Integer, Integer> interval7 = Pair.of(interval6.getLeft(),\
    \ interval6.getRight());\n        Pair<Integer, Integer> interval8 = Pair.of(interval7.getLeft(),\
    \ interval7.getRight());\n        Pair<Integer, Integer> interval9 = Pair.of(interval8.getLeft(),\
    \ interval8.getRight());\n        Pair<Integer, Integer> interval10 = Pair.of(interval9.getLeft(),\
    \ interval9.getRight());\n        Pair<Integer, Integer> interval11 = Pair.of(interval10.getLeft(),\
    \ interval10.getRight());\n        Pair<Integer, Integer> interval12 = Pair.of(interval11.getLeft(),\
    \ interval11.getRight());\n        Pair<Integer, Integer> interval13 = Pair.of(interval12.getLeft(),\
    \ interval12.getRight());\n        Pair<Integer, Integer> interval14 = Pair.of(interval13.getLeft(),\
    \ interval13.getRight());\n        Pair<Integer, Integer> interval15 = Pair.of(interval14.getLeft(),\
    \ interval14.getRight());\n        Pair<Integer, Integer> interval16 = Pair.of(interval15.getLeft(),\
    \ interval15.getRight());\n        Pair<Integer, Integer> interval17 = Pair.of(interval16.getLeft(),\
    \ interval16.getRight());\n        Pair<Integer, Integer> interval18 = Pair.of(interval17.getLeft(),\
    \ interval17.getRight());\n        Pair<Integer, Integer> interval19 = Pair.of(interval18.getLeft(),\
    \ interval18.getRight());\n        Pair<Integer, Integer> interval20 = Pair.of(interval19.getLeft(),\
    \ interval19.getRight());\n        Pair<Integer, Integer> interval21 = Pair.of(interval20.getLeft(),\
    \ interval20.getRight());\n        Pair<Integer, Integer> interval22 = Pair.of(interval21.getLeft(),\
    \ interval21.getRight());\n        Pair<Integer, Integer> interval23 = Pair.of(interval22.getLeft(),\
    \ interval22.getRight());\n        Pair<Integer, Integer> interval24 = Pair.of(interval23.getLeft(), ",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(intersection.first);\n   \
    \     if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection.isEmpty()) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getLeft();\n        if (length == interval1.getRight())\
    \ {\n            return \"YES\";\n        }\n        if (length == interval2.getRight())\
    \ {\n            return \"YES\";\n        }\n        if (length == 1) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = Pair.of(interval1.getLeft(), interval1.getRight());\n\
    \        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getLeft(), interval2.getRight());\n\
    \        Pair<Integer, Integer> intersection3 = Pair.of(interval1.getLeft(), interval2.getLeft());\n\
    \        Pair<Integer, Integer> intersection4 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval1.getRight(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval1.getLeft(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval1.getLeft(),\
    \ interval", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getLeft(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getLeft(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection3 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection4 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval2.getLeft(),\
    \ interval1.getLeft());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval2.getRight(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval2.getLeft(),\
    \ interval1.getLeft());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval2.getRight(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval2.getLeft(),\
    \ interval1.getLeft());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval2.getRight(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval2.getLeft(),\
    \ interval1.getLeft());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval2.getRight(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval1.getRight(),\
    \ interval2.getRight());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval2.getLeft(),\
    \ interval1.getLeft());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval2.getRight(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval1.getLeft(),\
    \ interval", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> interval4 = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval5 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> interval6 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> interval7 = Pair.of(interval4.getFirst(),\
    \ interval4.getSecond());\n        Pair<Integer, Integer> interval8 = Pair.of(interval5.getFirst(),\
    \ interval5.getSecond());\n        Pair<Integer, Integer> interval9 = Pair.of(interval6.getFirst(),\
    \ interval6.getSecond());\n        Pair<Integer, Integer> interval10 = Pair.of(interval7.getFirst(),\
    \ interval7.getSecond());\n        Pair<Integer, Integer> interval11 = Pair.of(interval8.getFirst(),\
    \ interval8.getSecond());\n        Pair<Integer, Integer> interval12 = Pair.of(interval9.getFirst(),\
    \ interval9.getSecond());\n        Pair<Integer, Integer> interval13 = Pair.of(interval10.getFirst(),\
    \ interval10.getSecond());\n        Pair<Integer, Integer> interval14 = Pair.of(interval11.getFirst(),\
    \ interval11.getSecond());\n        Pair<Integer, Integer> interval15 = Pair.of(interval12.getFirst(),\
    \ interval12.getSecond());\n        Pair<Integer, Integer> interval16 = Pair.of(interval13.getFirst(),\
    \ interval13.getSecond());\n        Pair<Integer, Integer> interval17 = Pair.of(interval14.getFirst(),\
    \ interval14.getSecond());\n        Pair<Integer, Integer> interval18 = Pair.of(interval15.getFirst(),\
    \ interval15.getSecond());\n        Pair<Integer, Integer> interval19 = Pair.of(interval16.getFirst(),\
    \ interval16.getSecond());\n        Pair<Integer, Integer> interval20 = Pair.of(interval17.getFirst(),\
    \ interval17.getSecond());\n        Pair<Integer, Integer> interval21 = Pair.of(interval18.getFirst(),\
    \ interval18.getSecond());\n        Pair<Integer, Integer> interval22 = Pair.of(interval19.getFirst(),\
    \ interval19.getSecond());\n        Pair<Integer, Integer> interval23 = Pair.of(interval20.getFirst(),\
    \ interval20.getSecond());\n        Pair<Integer, Integer> interval24 = Pair.of(interval21.getFirst(), ",
  "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection2 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> intersection3 = Pair.of(intersection.getFirst(),\
    \ intersection.getSecond());\n        Pair<Integer, Integer> intersection4 = Pair.of(intersection2.getFirst(),\
    \ intersection2.getSecond());\n        Pair<Integer, Integer> intersection5 =\
    \ Pair.of(intersection3.getFirst(), intersection3.getSecond());\n        Pair<Integer,\
    \ Integer> intersection6 = Pair.of(intersection4.getFirst(), intersection4.getSecond());\n\
    \        Pair<Integer, Integer> intersection7 = Pair.of(intersection5.getFirst(),\
    \ intersection5.getSecond());\n        Pair<Integer, Integer> intersection8 =\
    \ Pair.of(intersection6.getFirst(), intersection6.getSecond());\n        Pair<Integer,\
    \ Integer> intersection9 = Pair.of(intersection7.getFirst(), intersection7.getSecond());\n\
    \        Pair<Integer, Integer> intersection10 = Pair.of(intersection8.getFirst(),\
    \ intersection8.getSecond());\n        Pair<Integer, Integer> intersection11 =\
    \ Pair.of(intersection9.getFirst(), intersection9.getSecond());\n        Pair<Integer,\
    \ Integer> intersection12 = Pair.of(intersection10.getFirst(), intersection10.getSecond());\n\
    \        Pair<Integer, Integer> intersection13 = Pair.of(intersection11.getFirst(),\
    \ intersection11.getSecond());\n        Pair<Integer, Integer> intersection14\
    \ = Pair.of(intersection12.getFirst(), intersection12.getSecond());\n        Pair<Integer,\
    \ Integer> intersection15 = Pair.of(intersection13.getFirst(), intersection13.getSecond());\n\
    \        Pair<Integer, Integer> intersection16 = Pair.of(intersection14.getFirst(),\
    \ intersection14.getSecond());\n        Pair<Integer, Integer> intersection17\
    \ = Pair.of(intersection15.getFirst(), intersection15.getSecond());\n        Pair<Integer,\
    \ Integer> intersection18 = Pair.of(intersection16.getFirst(), intersection16.getSecond());\n\
    \        Pair<Integer, Integer> intersection19 = Pair.of(intersection17.getFirst(),\
    \ intersection17.getSecond());\n        Pair<Integer, Integer> intersection20\
    \ = Pair.of(intersection18.getFirst(), intersection18.getSecond());\n        Pair<Integer,\
    \ Integer> intersection21 = Pair.of(intersection19.getFirst(), intersection19.getSecond());\n\
    \        Pair<Integer, Integer> intersection22 = Pair.of(intersection20.getFirst(),\
    \ intersection20.getSecond", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        if (length == -1) {\n\
    \            return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 0) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        return \"NO\";", "   \
    \     Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getLeft() - intersection.getRight();\n    \
    \    if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 4) {\n        \
    \    return \"YES\";\n        }\n        if (length == 5) {\n            return\
    \ \"YES\";\n        }\n        if (length == 6) {\n            return \"YES\"\
    ;\n        }\n        if (length == 7) {\n            return \"YES\";\n      \
    \  }\n        if (length == 8) {\n            return \"YES\";\n        }\n   \
    \     if (length == 9) {\n            return \"YES\";\n        }\n        if (length\
    \ == 10) {\n            return \"YES\";\n        }\n        if (length == 11)\
    \ {\n            return \"YES\";\n        }\n        if (length == 12) {\n   \
    \         return \"YES\";\n        }\n        if (length == 13) {\n          \
    \  return \"YES\";\n        }\n        if (length == 14) {\n            return\
    \ \"YES\";\n        }\n        if (length == 15) {\n            return \"YES\"\
    ;\n        }\n        if (length == 16) {\n            return \"YES\";\n     \
    \   }\n        if (length == 17) {\n            return \"YES\";\n        }\n \
    \       if (length == 18) {\n            return \"YES\";\n        }\n        if\
    \ (length == 19) {\n            return \"YES\";\n        }\n        if (length\
    \ == 20) {\n            return \"YES\";\n        }\n        if (length == 21)\
    \ {\n            return \"YES\";\n        }\n        if (length == 22) {\n   \
    \         return \"YES\";\n        }\n        if (length == 23) {\n          \
    \  return \"YES\";\n        }\n        if (length == 24) {\n            return\
    \ \"YES\";\n        }\n        if (length == 25) {\n            return \"YES\"\
    ;\n        }\n        if (length == 26) {\n            return \"YES\";\n     \
    \   }\n        if (length == 27) {\n            return \"YES\";\n        }\n \
    \       if (length == 28) {\n            return \"YES\";\n        }\n        if\
    \ (length == 29) {\n            return \"YES\";\n        }\n        if (length\
    \ == 30) {\n            return \"YES\";\n        }\n        if (length == 31)\
    \ {\n            return \"YES\";\n        }\n        if (length == 32) {\n   \
    \         return \"YES\";\n        }\n        if (length == 33) {\n          \
    \  return \"YES\";\n        }\n        if (length == 34) {\n            return\
    \ \"YES\";\n        }\n        if (length == 35) {\n            return \"YES\"\
    ;\n        }\n        if (length == 36) {\n            return \"YES\";\n     \
    \   }\n        if (length == 37) {\n            return \"YES\";\n        }\n \
    \       if (length == 38) {\n            return \"YES\";\n        }\n        if\
    \ (length == 39) {\n            return \"YES\";\n        }\n        if (length\
    \ == 40) {\n            return \"YES\";\n        }\n        if (length == 41)\
    \ {\n            return \"YES\";\n        }", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.value\
    \ - intersection.first.value;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2 && intersection.first.value % 2\
    \ == 0 && intersection.second.value % 2 == 0) {\n            return \"YES\";\n\
    \        }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        Integer start = intersection.first;\n\
    \        Integer end = intersection.second;\n        if (start < end) {\n    \
    \        return \"YES\";\n        } else {\n            return \"NO\";\n     \
    \   }", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        int prime = length\
    \ / 2;\n        if (length == prime) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection3 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection4 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval1.getSecond(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval2.getSecond(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval1.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval2.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval1.getSecond(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval2.getSecond(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval1.getSecond(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval2.getSecond(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval1.getSecond(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval2.getSecond(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval1.getSecond(),\
    \ interval", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        boolean isPrime = true;\n\
    \        for (int i = 2; i <= length / 2; i++) {\n            if (length % i ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        if (isPrime) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection.isEmpty()) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getFirst() - intersection.getSecond();\n  \
    \      if (length == 1) {\n            return \"YES\";\n        }\n        boolean\
    \ isPrime = true;\n        for (int i = 2; i <= length / 2; i++) {\n         \
    \   if (length % i == 0) {\n                isPrime = false;\n               \
    \ break;\n            }\n        }\n        if (isPrime) {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }", "      \
    \  Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == 1) {\n \
    \           return \"YES\";\n        }\n        if (length == 2) {\n         \
    \   return \"YES\";\n        }\n        if (length == 3) {\n            return\
    \ \"YES\";\n        }\n        if (length == 4) {\n            return \"YES\"\
    ;\n        }\n        if (length == 5) {\n            return \"YES\";\n      \
    \  }\n        if (length == 6) {\n            return \"YES\";\n        }\n   \
    \     if (length == 7) {\n            return \"YES\";\n        }\n        if (length\
    \ == 8) {\n            return \"YES\";\n        }\n        if (length == 9) {\n\
    \            return \"YES\";\n        }\n        if (length == 10) {\n       \
    \     return \"YES\";\n        }\n        if (length == 11) {\n            return\
    \ \"YES\";\n        }\n        if (length == 12) {\n            return \"YES\"\
    ;\n        }\n        if (length == 13) {\n            return \"YES\";\n     \
    \   }\n        if (length == 14) {\n            return \"YES\";\n        }\n \
    \       if (length == 15) {\n            return \"YES\";\n        }\n        if\
    \ (length == 16) {\n            return \"YES\";\n        }\n        if (length\
    \ == 17) {\n            return \"YES\";\n        }\n        if (length == 18)\
    \ {\n            return \"YES\";\n        }\n        if (length == 19) {\n   \
    \         return \"YES\";\n        }\n        if (length == 20) {\n          \
    \  return \"YES\";\n        }\n        if (length == 21) {\n            return\
    \ \"YES\";\n        }\n        if (length == 22) {\n            return \"YES\"\
    ;\n        }\n        if (length == 23) {\n            return \"YES\";\n     \
    \   }\n        if (length == 24) {\n            return \"YES\";\n        }\n \
    \       if (length == 25) {\n            return \"YES\";\n        }\n        if\
    \ (length == 26) {\n            return \"YES\";\n        }\n        if (length\
    \ == 27) {\n            return \"YES\";\n        }\n        if (length == 28)\
    \ {\n            return \"YES\";\n        }\n        if (length == 29) {\n   \
    \         return \"YES\";\n        }\n        if (length == 30) {\n          \
    \  return \"YES\";\n        }\n        if (length == 31) {\n            return\
    \ \"YES\";\n        }\n        if (length == 32) {\n            return \"YES\"\
    ;\n        }\n        if (length == 33) {\n            return \"YES\";\n     \
    \   }\n        if (length == 34) {\n            return \"YES\";\n        }\n \
    \       if (length == 35) {\n            return \"YES\";\n        }\n        if\
    \ (length == 36) {\n            return \"YES\";\n        }\n        if (length\
    \ == 37) {\n            return \"YES\";\n        }\n        if (length == 38)\
    \ {\n            return \"YES\";\n        }\n        if (length == 39) {\n   \
    \         return \"YES\";\n        }\n        if (length == 40) {\n          \
    \  return \"YES\";\n        }\n        if (length == 41) {\n            return\
    \ \"YES\";\n        }\n        if (length == 42) {", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == 1) {\n            return \"YES\";\n        }\n        int prime =\
    \ length / 2;\n        if (length == prime) {\n            return \"YES\";\n \
    \       }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = new Pair<Integer, Integer>();\n        intersection.first = interval1.first;\n\
    \        intersection.second = interval1.second;\n        intersection.first =\
    \ interval2.first;\n        intersection.second = interval2.second;\n        intersection.first\
    \ = intersection.first > intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first > intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first == intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first == intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first + intersection.second;\n\
    \        intersection.second = intersection.first + intersection.second;\n   \
    \     intersection.first = intersection.first - intersection.second;\n       \
    \ intersection.second = intersection.first - intersection.second;\n        intersection.first\
    \ = intersection.first == 0 ? intersection.first : intersection.second;\n    \
    \    intersection.second = intersection.first == 0 ? intersection.second : intersection.first;\n\
    \        intersection.first = intersection.first < 0 ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < 0 ? intersection.second :\
    \ intersection.first;\n        intersection.first = intersection.first > 0 ? intersection.first\
    \ : intersection.second;\n        intersection.second = intersection.first > 0\
    \ ? intersection.second : intersection.first;\n        intersection.first = intersection.first\
    \ == 0 ? intersection.first : intersection.second;\n        intersection.second\
    \ = intersection.first == 0 ? intersection.second : intersection.first;\n    \
    \    intersection.first = intersection.first < 0 ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < 0 ? intersection.second :\
    \ intersection.first;\n        intersection.first = intersection.first > 0 ? intersection.first\
    \ : intersection.second;\n        intersection.second = intersection.first > 0\
    \ ? intersection.second : intersection.first;\n        intersection.first = intersection.first\
    \ == 0 ? intersection.first : intersection.second;\n        intersection.second\
    \ = intersection.first == 0 ? intersection.second : intersection.first;\n    \
    \    intersection.first = intersection.first < 0 ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < 0 ? intersection.second :\
    \ intersection", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(intersection.first);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        int length2 = interval2.second.compareTo(intersection.second);\n\
    \        if (length2 == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length2 == 1) {\n            return \"YES\";\n        }\n        int length3\
    \ = interval1.second.compareTo(interval2.second);\n        if (length3 == 0) {\n\
    \            return \"NO\";\n        }\n        if (length3 == 1) {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getValue();\n\
    \        if (length == interval1.getValue()) {\n            return \"YES\";\n\
    \        }\n        if (length == interval2.getValue()) {\n            return\
    \ \"YES\";\n        }\n        if (length == 1) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = new Pair<Integer, Integer>();\n        intersection.left = interval1.left;\n\
    \        intersection.right = interval1.right;\n        intersection.left = interval2.left;\n\
    \        intersection.right = interval2.right;\n        intersection.left = Math.min(intersection.left,\
    \ intersection.right);\n        intersection.right = Math.max(intersection.left,\
    \ intersection.right);\n        if (intersection.left > intersection.right) {\n\
    \            return \"NO\";\n        }\n        int lengthOfIntersection = intersection.right\
    \ - intersection.left + 1;\n        if (lengthOfIntersection == 2) {\n       \
    \     return \"YES\";\n        }\n        boolean isPrime = true;\n        for\
    \ (int i = 2; i <= lengthOfIntersection; i++) {\n            if (lengthOfIntersection\
    \ % i == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            return \"YES\";\n \
    \       }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.getRight()\
    \ - intersection.getLeft();\n        if (length == 2) {\n            return \"\
    YES\";\n        }\n        if (length == 1) {\n            return \"NO\";\n  \
    \      }\n        if (length == 0) {\n            return \"NO\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        if (length == 5) {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getValue()\
    \ - intersection.getKey();\n        if (length == 2) {\n            return \"\
    YES\";\n        }\n        if (length == 1) {\n            return \"NO\";\n  \
    \      }\n        boolean isPrime = true;\n        for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) {\n  \
    \          return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> interval3 = new Pair<Integer, Integer>();\n        interval3 = interval1.intersection(interval2);\n\
    \        if (interval3.equals(interval1)) {\n            return \"NO\";\n    \
    \    }\n        if (interval3.equals(interval2)) {\n            return \"NO\"\
    ;\n        }\n        if (interval3.equals(new Pair<Integer, Integer>())) {\n\
    \            return \"NO\";\n        }\n        if (interval3.equals(new Pair<Integer,\
    \ Integer>(1, 3))) {\n            return \"YES\";\n        }\n        if (interval3.equals(new\
    \ Pair<Integer, Integer>(2, 4))) {\n            return \"YES\";\n        }\n \
    \       if (interval3.equals(new Pair<Integer, Integer>(3, 5))) {\n          \
    \  return \"YES\";\n        }\n        if (interval3.equals(new Pair<Integer,\
    \ Integer>(4, 6))) {\n            return \"YES\";\n        }\n        if (interval3.equals(new\
    \ Pair<Integer, Integer>(5, 7))) {\n            return \"YES\";\n        }\n \
    \       if (interval3.equals(new Pair<Integer, Integer>(6, 8))) {\n          \
    \  return \"YES\";\n        }\n        if (interval3.equals(new Pair<Integer,\
    \ Integer>(7, 9))) {\n            return \"YES\";\n        }\n        if (interval3.equals(new\
    \ Pair<Integer, Integer>(8, 10))) {\n            return \"YES\";\n        }\n\
    \        if (interval3.equals(new Pair<Integer, Integer>(9, 11))) {\n        \
    \    return \"YES\";\n        }\n        if (interval3.equals(new Pair<Integer,\
    \ Integer>(10, 12))) {\n            return \"YES\";\n        }\n        if (interval3.equals(new\
    \ Pair<Integer, Integer>(11, 13))) {\n            return \"YES\";\n        }\n\
    \        if (interval3.equals(new Pair<Integer, Integer>(12, 14))) {\n       \
    \     return \"YES\";\n        }\n        if (interval3.equals(new Pair<Integer,\
    \ Integer>(13, 15))) {\n            return \"YES\";\n        }\n        if (interval3.equals(new\
    \ Pair<Integer, Integer>(14, 16))) {\n            return \"YES\";\n        }\n\
    \        if (interval3.equals(new Pair<Integer, Integer>(15, 17))) {\n       \
    \     return \"YES\";\n        }\n        if (interval3.equals(new Pair<Integer,\
    \ Integer>(16, 18))) {\n            return \"YES\";\n        }\n        if (interval3.equals(new\
    \ Pair<Integer, Integer>(17, 19))) {\n            return \"YES\";\n        }\n\
    \        if (interval3.equals(new Pair<Integer, Integer>(18, 20))) {\n       \
    \     return \"YES\";\n        }\n        if (interval3.equals(new Pair<Integer,\
    \ Integer>(19, 21))) {\n            return \"YES\";\n        }\n        if (interval3.equals(new\
    \ Pair<Integer, Integer>(20, 22))) {\n            return \"YES\";\n        }\n\
    \        if (interval3.equals(new Pair<Integer, Integer>(21, 23))) {\n       \
    \     return \"YES\";\n        }\n        if (interval3.equals(new Pair<Integer,\
    \ Integer>(22, 24))) {\n            return \"YES\";\n        }\n        if (",
  "        Pair<Integer, Integer> interval = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval2 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection = Pair.of(interval.getFirst(), interval.getSecond());\n\
    \        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection3 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection4 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval.getFirst(),\
    \ interval.getSecond());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval2.getFirst(),\
    \ interval2.", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> interval3 = new Pair<Integer, Integer>(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval4 = new Pair<Integer, Integer>(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> interval5 = new Pair<Integer,\
    \ Integer>(interval3.getFirst(), interval3.getSecond());\n        Pair<Integer,\
    \ Integer> interval6 = new Pair<Integer, Integer>(interval4.getFirst(), interval4.getSecond());\n\
    \        Pair<Integer, Integer> interval7 = new Pair<Integer, Integer>(interval5.getFirst(),\
    \ interval5.getSecond());\n        Pair<Integer, Integer> interval8 = new Pair<Integer,\
    \ Integer>(interval6.getFirst(), interval6.getSecond());\n        Pair<Integer,\
    \ Integer> interval9 = new Pair<Integer, Integer>(interval7.getFirst(), interval7.getSecond());\n\
    \        Pair<Integer, Integer> interval10 = new Pair<Integer, Integer>(interval8.getFirst(),\
    \ interval8.getSecond());\n        Pair<Integer, Integer> interval11 = new Pair<Integer,\
    \ Integer>(interval9.getFirst(), interval9.getSecond());\n        Pair<Integer,\
    \ Integer> interval12 = new Pair<Integer, Integer>(interval10.getFirst(), interval10.getSecond());\n\
    \        Pair<Integer, Integer> interval13 = new Pair<Integer, Integer>(interval11.getFirst(),\
    \ interval11.getSecond());\n        Pair<Integer, Integer> interval14 = new Pair<Integer,\
    \ Integer>(interval12.getFirst(), interval12.getSecond());\n        Pair<Integer,\
    \ Integer> interval15 = new Pair<Integer, Integer>(interval13.getFirst(), interval13.getSecond());\n\
    \        Pair<Integer, Integer> interval16 = new Pair<Integer, Integer>(interval14.getFirst(),\
    \ interval14.getSecond());\n        Pair<Integer, Integer> interval17 = new Pair<Integer,\
    \ Integer>(interval15.getFirst(), interval15.getSecond());\n        Pair<Integer,\
    \ Integer> interval18 = new Pair<Integer, Integer>(interval16.getFirst(), interval16.getSecond());\n\
    \        Pair<Integer, Integer> interval19 = new Pair<Integer, Integer>(interval17.getFirst(),\
    \ interval17.getSecond());\n        Pair<Integer, Integer> interval20 = new Pair<Integer,\
    \ Integer>(interval18.getFirst(), interval18.getSecond());\n        Pair<Integer,\
    \ Integer> interval21 = new Pair<Integer, Integer>(interval19.getFirst(), interval19.getSecond());\n\
    \        Pair<Integer, Integer> interval22 = new Pair<Integer, Integer>(interval20.getFirst(),\
    \ interval20.getSecond());\n        Pair<Integer, Integer> interval23 = new Pair<",
  "        Pair<Integer, Integer> interval3 = new Pair<Integer, Integer>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval4 = new Pair<Integer,\
    \ Integer>(interval2.getFirst(), interval2.getSecond());\n        Pair<Integer,\
    \ Integer> interval5 = new Pair<Integer, Integer>(interval3.getFirst(), interval3.getSecond());\n\
    \        Pair<Integer, Integer> interval6 = new Pair<Integer, Integer>(interval4.getFirst(),\
    \ interval4.getSecond());\n        Pair<Integer, Integer> interval7 = new Pair<Integer,\
    \ Integer>(interval5.getFirst(), interval5.getSecond());\n        Pair<Integer,\
    \ Integer> interval8 = new Pair<Integer, Integer>(interval6.getFirst(), interval6.getSecond());\n\
    \        Pair<Integer, Integer> interval9 = new Pair<Integer, Integer>(interval7.getFirst(),\
    \ interval7.getSecond());\n        Pair<Integer, Integer> interval10 = new Pair<Integer,\
    \ Integer>(interval8.getFirst(), interval8.getSecond());\n        Pair<Integer,\
    \ Integer> interval11 = new Pair<Integer, Integer>(interval9.getFirst(), interval9.getSecond());\n\
    \        Pair<Integer, Integer> interval12 = new Pair<Integer, Integer>(interval10.getFirst(),\
    \ interval10.getSecond());\n        Pair<Integer, Integer> interval13 = new Pair<Integer,\
    \ Integer>(interval11.getFirst(), interval11.getSecond());\n        Pair<Integer,\
    \ Integer> interval14 = new Pair<Integer, Integer>(interval12.getFirst(), interval12.getSecond());\n\
    \        Pair<Integer, Integer> interval15 = new Pair<Integer, Integer>(interval13.getFirst(),\
    \ interval13.getSecond());\n        Pair<Integer, Integer> interval16 = new Pair<Integer,\
    \ Integer>(interval14.getFirst(), interval14.getSecond());\n        Pair<Integer,\
    \ Integer> interval17 = new Pair<Integer, Integer>(interval15.getFirst(), interval15.getSecond());\n\
    \        Pair<Integer, Integer> interval18 = new Pair<Integer, Integer>(interval16.getFirst(),\
    \ interval16.getSecond());\n        Pair<Integer, Integer> interval19 = new Pair<Integer,\
    \ Integer>(interval17.getFirst(), interval17.getSecond());\n        Pair<Integer,\
    \ Integer> interval20 = new Pair<Integer, Integer>(interval18.getFirst(), interval18.getSecond());\n\
    \        Pair<Integer, Integer> interval21 = new Pair<Integer, Integer>(interval19.getFirst(),\
    \ interval19.getSecond());\n        Pair<Integer, Integer> interval22 = new Pair<Integer,\
    \ Integer>(interval20.getFirst(), interval20.getSecond());\n        Pair<Integer,\
    \ Integer> interval23 = new Pair<", "        Pair<Integer, Integer> interval3\
    \ = new Pair<Integer, Integer>();\n        interval3 = interval1.intersection(interval2);\n\
    \        if (interval3.equals(interval1)) {\n            return \"NO\";\n    \
    \    } else {\n            return \"YES\";\n        }", "        Pair<Integer,\
    \ Integer> intersection = new Pair<>();\n        intersection.first = interval1.first;\n\
    \        intersection.second = interval1.second;\n        intersection.first =\
    \ interval2.first;\n        intersection.second = interval2.second;\n        intersection.first\
    \ = intersection.first > intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first > intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first == intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first == intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first < intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ < intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first > intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first > intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first == intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ == intersection.second ? intersection.second : intersection.first;\n       \
    \ intersection.first = intersection.first < intersection.second ? intersection.first\
    \ : intersection.second;\n        intersection.second = intersection.first < intersection.second\
    \ ? intersection.second : intersection.first;\n        intersection.first = intersection.first\
    \ > intersection.second ? intersection.first : intersection.second;\n        intersection.second\
    \ = intersection.first > intersection.second ? intersection.second : intersection.first;\n\
    \        intersection.first = intersection.first == intersection.second ? intersection.first\
    \ : intersection.second;\n        intersection.second = intersection.first ==\
    \ intersection.second ? intersection.second : intersection.first;\n        intersection.first\
    \ = intersection.first < intersection.second ? intersection.first : intersection.second;\n\
    \        intersection.second = intersection.first < intersection.second ? intersection.second\
    \ : intersection.first;\n        intersection.first = intersection.first > intersection.second\
    \ ? intersection.first : intersection.second;\n        intersection.second = intersection.first\
    \ > intersection.second ? intersection.second : intersection.first;\n        intersection",
  "        Pair<Integer, Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        if (intersection.getFirst() < interval3.getFirst()) {\n            intersection\
    \ = Pair.of(interval3.getFirst(), interval3.getSecond());\n        }\n       \
    \ if (intersection.getSecond() > interval3.getSecond()) {\n            intersection\
    \ = Pair.of(intersection.getFirst(), intersection.getSecond());\n        }\n \
    \       if (intersection.getFirst() < interval3.getFirst()) {\n            intersection\
    \ = Pair.of(intersection.getFirst(), intersection.getSecond());\n        }\n \
    \       if (intersection.getSecond() > interval3.getSecond()) {\n            intersection\
    \ = Pair.of(intersection.getFirst(), intersection.getSecond());\n        }\n \
    \       if (intersection.getFirst() == interval3.getFirst() && intersection.getSecond()\
    \ == interval3.getSecond()) {\n            return \"YES\";\n        }\n      \
    \  return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == interval1.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == interval2.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == 1) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second)\
    \ <= 0 ? intersection.second.compareTo(interval1.second) : interval1.second.compareTo(intersection.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2 && interval1.first.equals(interval2.first)) {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getValue()\
    \ - intersection.getKey();\n        if (length == 2) {\n            return \"\
    YES\";\n        }\n        if (length == 1) {\n            return \"NO\";\n  \
    \      }\n        int length2 = interval2.getValue() - interval2.getKey();\n \
    \       if (length2 == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length2 == 1) {\n            return \"NO\";\n        }\n        return \"NO\"\
    ;", "        Pair<Integer, Integer> intersection = new Pair<>();\n        intersection.first\
    \ = interval1.first;\n        intersection.second = interval1.second;\n      \
    \  intersection.first = interval2.first;\n        intersection.second = interval2.second;\n\
    \        intersection.first = interval1.first;\n        intersection.second =\
    \ interval1.second;\n        intersection.first = interval2.first;\n        intersection.second\
    \ = interval2.second;\n        intersection.first = interval1.first;\n       \
    \ intersection.second = interval1.second;\n        intersection.first = interval2.first;\n\
    \        intersection.second = interval2.second;\n        intersection.first =\
    \ interval1.first;\n        intersection.second = interval1.second;\n        intersection.first\
    \ = interval2.first;\n        intersection.second = interval2.second;\n      \
    \  intersection.first = interval1.first;\n        intersection.second = interval1.second;\n\
    \        intersection.first = interval2.first;\n        intersection.second =\
    \ interval2.second;\n        intersection.first = interval1.first;\n        intersection.second\
    \ = interval1.second;\n        intersection.first = interval2.first;\n       \
    \ intersection.second = interval2.second;\n        intersection.first = interval1.first;\n\
    \        intersection.second = interval1.second;\n        intersection.first =\
    \ interval2.first;\n        intersection.second = interval2.second;\n        intersection.first\
    \ = interval1.first;\n        intersection.second = interval1.second;\n      \
    \  intersection.first = interval2.first;\n        intersection.second = interval2.second;\n\
    \        intersection.first = interval1.first;\n        intersection.second =\
    \ interval1.second;\n        intersection.first = interval2.first;\n        intersection.second\
    \ = interval2.second;\n        intersection.first = interval1.first;\n       \
    \ intersection.second = interval1.second;\n        intersection.first = interval2.first;\n\
    \        intersection.second = interval2.second;\n        intersection.first =\
    \ interval1.first;\n        intersection.second = interval1.second;\n        intersection.first\
    \ = interval2.first;\n        intersection.second = interval2.second;\n      \
    \  intersection.first = interval1.first;\n        intersection.second = interval1.second;\n\
    \        intersection.first = interval2.first;\n        intersection.second =\
    \ interval2.second;\n        intersection.first = interval1.first;\n        intersection.second\
    \ = interval1.second;\n        intersection.first = interval2.first;\n       \
    \ intersection.second = interval2.second;\n        intersection.first = interval1.first;\n\
    \        intersection.second = interval1.second;\n        intersection.first =\
    \ interval2.first;\n        intersection.second = interval", "        Pair<Integer,\
    \ Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval3 = Pair.of(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection3 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> intersection4 = Pair.of(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval3.getFirst(),\
    \ interval3.getSecond());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval4.getFirst(),\
    \ interval4.getSecond());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval5.getFirst(),\
    \ interval5.getSecond());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval6.getFirst(),\
    \ interval6.getSecond());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval7.getFirst(),\
    \ interval7.getSecond());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval8.getFirst(),\
    \ interval8.getSecond());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval9.getFirst(),\
    \ interval9.getSecond());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval10.getFirst(),\
    \ interval10.getSecond());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval11.getFirst(),\
    \ interval11.getSecond());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval12.getFirst(),\
    \ interval12.getSecond());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval13.getFirst(),\
    \ interval13.getSecond());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval14.getFirst(),\
    \ interval14.getSecond());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval15.getFirst(),\
    \ interval15.getSecond());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval16.getFirst(),\
    \ interval16.getSecond());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval17.getFirst(),\
    \ interval17.getSecond());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval18.getFirst(),\
    \ interval18.getSecond());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval19.getFirst(),\
    \ interval19.getSecond());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval20.getFirst(),\
    \ interval", "        Pair<Integer, Integer> intersection = Pair.of(interval1.getLeft(),\
    \ interval1.getRight());\n        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getLeft(),\
    \ interval2.getRight());\n        boolean isIntersect = intersection.getLeft()\
    \ <= intersection.getRight() && intersection2.getLeft() <= intersection2.getRight();\n\
    \        if (isIntersect) {\n            int length = intersection.getRight()\
    \ - intersection.getLeft() + 1;\n            boolean isPrime = true;\n       \
    \     for (int i = 2; i <= length / 2; i++) {\n                if (length % i\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  return \"YES\";\n            } else {\n                return \"NO\";\n   \
    \         }\n        } else {\n            return \"NO\";\n        }", "     \
    \   Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == interval1.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == interval2.getValue())\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";", "      \
    \  Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.subtract(intersection.first);\n    \
    \    if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 3) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == -1) {\n            return \"NO\";\n        }\n        int length2\
    \ = intersection.second.compareTo(interval2.second);\n        if (length2 == 1)\
    \ {\n            return \"YES\";\n        }\n        if (length2 == -1) {\n  \
    \          return \"NO\";\n        }\n        if (length == 0 && length2 == 0)\
    \ {\n            return \"NO\";\n        }\n        if (length == 1 && length2\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 1 &&\
    \ length2 == -1) {\n            return \"NO\";\n        }\n        if (length\
    \ == -1 && length2 == -1) {\n            return \"NO\";\n        }\n        if\
    \ (length == -1 && length2 == 1) {\n            return \"YES\";\n        }\n \
    \       return \"NO\";", "        Pair<Integer, Integer> interval = interval1.intersection(interval2);\n\
    \        if (interval == null) {\n            return \"NO\";\n        }\n    \
    \    int start = interval1.getLeft();\n        int end = interval1.getRight();\n\
    \        int length = interval.getRight() - interval.getLeft();\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"NO\";\n        }\n        boolean isPrime = true;\n    \
    \    for (int i = 2; i <= length / 2; i++) {\n            if (length % i == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            return \"YES\";\n        }\n \
    \       return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2 && interval1.getKey() == interval2.getKey()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2 && interval1.getKey() < interval2.getKey())\
    \ {\n            return \"NO\";\n        }\n        if (length == 2 && interval1.getKey()\
    \ > interval2.getKey()) {\n            return \"NO\";\n        }\n        if (length\
    \ == 3 && interval1.getKey() == interval2.getKey()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3 && interval1.getKey() < interval2.getKey())\
    \ {\n            return \"NO\";\n        }\n        if (length == 3 && interval1.getKey()\
    \ > interval2.getKey()) {\n            return \"NO\";\n        }\n        if (length\
    \ == 4 && interval1.getKey() == interval2.getKey()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 4 && interval1.getKey() < interval2.getKey())\
    \ {\n            return \"NO\";\n        }\n        if (length == 4 && interval1.getKey()\
    \ > interval2.getKey()) {\n            return \"NO\";\n        }\n        if (length\
    \ == 5 && interval1.getKey() == interval2.getKey()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 5 && interval1.getKey() < interval2.getKey())\
    \ {\n            return \"NO\";\n        }\n        if (length == 5 && interval1.getKey()\
    \ > interval2.getKey()) {\n            return \"NO\";\n        }\n        if (length\
    \ == 6 && interval1.getKey() == interval2.getKey()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 6 && interval1.getKey() < interval2.getKey())\
    \ {\n            return \"NO\";\n        }\n        if (length == 6 && interval1.getKey()\
    \ > interval2.getKey()) {\n            return \"NO\";\n        }\n        if (length\
    \ == 7 && interval1.getKey() == interval2.getKey()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 7 && interval1.getKey() < interval2.getKey())\
    \ {\n            return \"NO\";\n        }\n        if (length == 7 && interval1.getKey()\
    \ > interval2.getKey()) {\n            return \"NO\";\n        }\n        if (length\
    \ == 8 && interval1.getKey() == interval2.getKey()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 8 && interval1.getKey() < interval2.getKey())\
    \ {\n            return \"NO\";\n        }\n        if (length == 8 && interval1.getKey()\
    \ > interval2.getKey()) {\n            return \"NO\";\n        }\n        if (length\
    \ == 9 && interval1.getKey() == interval2.getKey()) {\n            return \"YES\"\
    ;\n        }\n        if (length", "        Pair<Integer, Integer> interval1Copy\
    \ = interval1;\n        Pair<Integer, Integer> interval2Copy = interval2;\n  \
    \      Pair<Integer, Integer> intersection = new Pair<>();\n        intersection.first\
    \ = interval1Copy.first;\n        intersection.second = interval1Copy.second;\n\
    \        interval1Copy.first = interval2Copy.first;\n        interval1Copy.second\
    \ = interval2Copy.second;\n        interval2Copy.first = interval1Copy.first;\n\
    \        interval2Copy.second = interval1Copy.second;\n        if (interval1Copy.first\
    \ > interval1Copy.second) {\n            interval1Copy.first = interval1Copy.second;\n\
    \            interval1Copy.second = interval1Copy.first;\n        }\n        if\
    \ (interval2Copy.first > interval2Copy.second) {\n            interval2Copy.first\
    \ = interval2Copy.second;\n            interval2Copy.second = interval2Copy.first;\n\
    \        }\n        if (interval1Copy.first > interval2Copy.first || interval1Copy.second\
    \ > interval2Copy.second) {\n            return \"NO\";\n        }\n        if\
    \ (interval1Copy.first == interval1Copy.second && interval2Copy.first == interval2Copy.second)\
    \ {\n            return \"YES\";\n        }\n        int length1 = interval1Copy.second\
    \ - interval1Copy.first;\n        int length2 = interval2Copy.second - interval2Copy.first;\n\
    \        if (length1 < length2) {\n            interval1Copy.first = interval1Copy.second;\n\
    \            interval1Copy.second = interval1Copy.first;\n        }\n        if\
    \ (length1 > length2) {\n            interval2Copy.first = interval2Copy.second;\n\
    \            interval2Copy.second = interval2Copy.first;\n        }\n        if\
    \ (length1 == length2) {\n            interval1Copy.first = interval1Copy.second;\n\
    \            interval1Copy.second = interval1Copy.first;\n            interval2Copy.first\
    \ = interval2Copy.second;\n            interval2Copy.second = interval2Copy.first;\n\
    \        }\n        int lengthIntersection = interval1Copy.second - interval1Copy.first;\n\
    \        int lengthIntersection2 = interval2Copy.second - interval2Copy.first;\n\
    \        if (lengthIntersection < lengthIntersection2) {\n            interval1Copy.first\
    \ = interval1Copy.second;\n            interval1Copy.second = interval1Copy.first;\n\
    \        }\n        if (lengthIntersection > lengthIntersection2) {\n        \
    \    interval2Copy.first = interval2", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 0) {\n            return \"YES\";\n        }\n        if\
    \ (length == 1) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        return \"NO\";", "   \
    \     Pair<Integer, Integer> interval3 = new Pair<Integer, Integer>(interval1.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> interval4 = new Pair<Integer,\
    \ Integer>(interval2.getFirst(), interval2.getSecond());\n        Pair<Integer,\
    \ Integer> interval5 = new Pair<Integer, Integer>(interval3.getFirst(), interval3.getSecond());\n\
    \        Pair<Integer, Integer> interval6 = new Pair<Integer, Integer>(interval4.getFirst(),\
    \ interval4.getSecond());\n        Pair<Integer, Integer> interval7 = new Pair<Integer,\
    \ Integer>(interval5.getFirst(), interval5.getSecond());\n        Pair<Integer,\
    \ Integer> interval8 = new Pair<Integer, Integer>(interval6.getFirst(), interval6.getSecond());\n\
    \        Pair<Integer, Integer> interval9 = new Pair<Integer, Integer>(interval7.getFirst(),\
    \ interval7.getSecond());\n        Pair<Integer, Integer> interval10 = new Pair<Integer,\
    \ Integer>(interval8.getFirst(), interval8.getSecond());\n        Pair<Integer,\
    \ Integer> interval11 = new Pair<Integer, Integer>(interval9.getFirst(), interval9.getSecond());\n\
    \        Pair<Integer, Integer> interval12 = new Pair<Integer, Integer>(interval10.getFirst(),\
    \ interval10.getSecond());\n        Pair<Integer, Integer> interval13 = new Pair<Integer,\
    \ Integer>(interval11.getFirst(), interval11.getSecond());\n        Pair<Integer,\
    \ Integer> interval14 = new Pair<Integer, Integer>(interval12.getFirst(), interval12.getSecond());\n\
    \        Pair<Integer, Integer> interval15 = new Pair<Integer, Integer>(interval13.getFirst(),\
    \ interval13.getSecond());\n        Pair<Integer, Integer> interval16 = new Pair<Integer,\
    \ Integer>(interval14.getFirst(), interval14.getSecond());\n        Pair<Integer,\
    \ Integer> interval17 = new Pair<Integer, Integer>(interval15.getFirst(), interval15.getSecond());\n\
    \        Pair<Integer, Integer> interval18 = new Pair<Integer, Integer>(interval16.getFirst(),\
    \ interval16.getSecond());\n        Pair<Integer, Integer> interval19 = new Pair<Integer,\
    \ Integer>(interval17.getFirst(), interval17.getSecond());\n        Pair<Integer,\
    \ Integer> interval20 = new Pair<Integer, Integer>(interval18.getFirst(), interval18.getSecond());\n\
    \        Pair<Integer, Integer> interval21 = new Pair<Integer, Integer>(interval19.getFirst(),\
    \ interval19.getSecond());\n        Pair<Integer, Integer> interval22 = new Pair<Integer,\
    \ Integer>(interval20.getFirst(), interval20.getSecond());\n        Pair<Integer,\
    \ Integer> interval23 = new Pair<", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.getLeft()\
    \ - intersection.getRight();\n        if (length == 1) {\n            return \"\
    YES\";\n        }\n        if (length == 2) {\n            return \"YES\";\n \
    \       }\n        if (length == 3) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        if (length == -1) {\n\
    \            return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.value\
    \ - intersection.first.value;\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2 && interval1.first.value == interval2.first.value\
    \ && interval1.second.value == interval2.second.value) {\n            return \"\
    YES\";\n        }\n        return \"NO\";", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.getValue()\
    \ - intersection.getKey() + 1;\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        Integer start = intersection.getLeft();\n        Integer end = intersection.getRight();\n\
    \        if (start <= end) {\n            int length = end - start;\n        \
    \    if (length == 1) {\n                return \"YES\";\n            }\n    \
    \        int prime = length / 2;\n            if (isPrime(prime)) {\n        \
    \        return \"YES\";\n            }\n            return \"NO\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> interval1Copy = new\
    \ Pair<>(interval1.getFirst(), interval1.getSecond());\n        Pair<Integer,\
    \ Integer> interval2Copy = new Pair<>(interval2.getFirst(), interval2.getSecond());\n\
    \        Pair<Integer, Integer> intersection = new Pair<>();\n        intersection\
    \ = interval1Copy.intersection(interval2Copy);\n        if (intersection.getFirst()\
    \ == interval1.getFirst() && intersection.getSecond() == interval1.getSecond())\
    \ {\n            return \"YES\";\n        }\n        if (intersection.getFirst()\
    \ == interval2.getFirst() && intersection.getSecond() == interval2.getSecond())\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";", "      \
    \  Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == interval1.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == interval2.getValue())\
    \ {\n            return \"YES\";\n        }\n        if (length == 1) {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == -1) {\n            return \"NO\";\n        }\n        return \"NO\"\
    ;", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(intersection.first);\n   \
    \     if (length == 1) {\n            return \"YES\";\n        }\n        if (length\
    \ == -1) {\n            return \"NO\";\n        }\n        if (length == 0 ||\
    \ length == 1) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        return \"NO\";", "   \
    \     Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.second.compareTo(interval1.second);\n     \
    \   if (length == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        boolean isPrime = true;\n\
    \        for (int i = 2; i <= length / 2; i++) {\n            if (length % i ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        if (isPrime) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection.isEmpty()) {\n            return \"NO\";\n        }\n\
    \        Pair<Integer, Integer> intersectionLength = intersection.map(x -> x.second\
    \ - x.first);\n        if (intersectionLength.isEmpty()) {\n            return\
    \ \"NO\";\n        }\n        if (intersectionLength.map(x -> x.intValue()).filter(x\
    \ -> x % 2 == 0).count() == 1) {\n            return \"NO\";\n        }\n    \
    \    return \"YES\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int start = Math.min(interval1.getLeft(), interval2.getLeft());\n   \
    \     int end = Math.max(interval1.getRight(), interval2.getRight());\n      \
    \  int length = end - start;\n        if (length == 1) {\n            return \"\
    YES\";\n        }\n        if (length == 2 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() == interval2.getRight()\
    \ && interval1.getRight() == interval2.getLeft()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() == interval2.getRight()\
    \ && interval1.getRight() == interval2.getLeft()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 3 && interval1.getLeft() != interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 4 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 4 && interval1.getLeft() == interval2.getRight()\
    \ && interval1.getRight() == interval2.getLeft()) {\n            return \"YES\"\
    ;\n        }\n        if (length == 4 && interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() != interval2.getRight", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getRight()\
    \ - intersection.getLeft();\n        if (length == 1) {\n            return \"\
    YES\";\n        }\n        if (length == 2) {\n            return \"YES\";\n \
    \       }\n        if (length == 3) {\n            return \"YES\";\n        }\n\
    \        if (length == 5) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";", "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        } else\
    \ {\n            int length = intersection.getValue();\n            if (length\
    \ == interval1.getValue()) {\n                return \"YES\";\n            } else\
    \ {\n                return \"NO\";\n            }\n        }", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.compareTo(interval1.second);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == -1) {\n            return \"NO\";\n        }\n        int length2\
    \ = intersection.second.compareTo(interval2.second);\n        if (length2 == 1)\
    \ {\n            return \"YES\";\n        }\n        if (length2 == -1) {\n  \
    \          return \"NO\";\n        }\n        if (length == 0 && length2 == 0)\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";", "      \
    \  Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.map(x -> x - interval1.getValue()).reduce(0,\
    \ (a, b) -> a + b);\n        if (length == interval1.getValue()) {\n         \
    \   return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> interval3 = new Pair<Integer, Integer>(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> interval4 = new Pair<Integer, Integer>(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection = new Pair<Integer,\
    \ Integer>(interval3.getFirst(), interval3.getSecond());\n        Pair<Integer,\
    \ Integer> intersection2 = new Pair<Integer, Integer>(interval4.getFirst(), interval4.getSecond());\n\
    \        Pair<Integer, Integer> intersection3 = new Pair<Integer, Integer>(intersection.getFirst(),\
    \ intersection.getSecond());\n        Pair<Integer, Integer> intersection4 = new\
    \ Pair<Integer, Integer>(intersection2.getFirst(), intersection2.getSecond());\n\
    \        Pair<Integer, Integer> intersection5 = new Pair<Integer, Integer>(intersection3.getFirst(),\
    \ intersection3.getSecond());\n        Pair<Integer, Integer> intersection6 =\
    \ new Pair<Integer, Integer>(intersection4.getFirst(), intersection4.getSecond());\n\
    \        Pair<Integer, Integer> intersection7 = new Pair<Integer, Integer>(intersection5.getFirst(),\
    \ intersection5.getSecond());\n        Pair<Integer, Integer> intersection8 =\
    \ new Pair<Integer, Integer>(intersection6.getFirst(), intersection6.getSecond());\n\
    \        Pair<Integer, Integer> intersection9 = new Pair<Integer, Integer>(intersection7.getFirst(),\
    \ intersection7.getSecond());\n        Pair<Integer, Integer> intersection10 =\
    \ new Pair<Integer, Integer>(intersection8.getFirst(), intersection8.getSecond());\n\
    \        Pair<Integer, Integer> intersection11 = new Pair<Integer, Integer>(intersection9.getFirst(),\
    \ intersection9.getSecond());\n        Pair<Integer, Integer> intersection12 =\
    \ new Pair<Integer, Integer>(intersection10.getFirst(), intersection10.getSecond());\n\
    \        Pair<Integer, Integer> intersection13 = new Pair<Integer, Integer>(intersection11.getFirst(),\
    \ intersection11.getSecond());\n        Pair<Integer, Integer> intersection14\
    \ = new Pair<Integer, Integer>(intersection12.getFirst(), intersection12.getSecond());\n\
    \        Pair<Integer, Integer> intersection15 = new Pair<Integer, Integer>(intersection13.getFirst(),\
    \ intersection13.getSecond());\n        Pair<Integer, Integer> intersection16\
    \ = new Pair<Integer, Integer>(intersection14.getFirst(), intersection14.getSecond());\n\
    \        Pair<Integer, Integer> intersection17 = new Pair<Integer, Integer>(intersection15.getFirst(),\
    \ intersection15.getSecond());\n        Pair<Integer, Integer> intersection18\
    \ = new Pair<Integer, Integer>(intersection16.getFirst(), intersection16.getSecond());\n\
    \        Pair<Integer, Integer> intersection19 = new Pair<Integer, Integer>(intersection",
  "        Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue() - intersection.getKey();\n     \
    \   if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 1) {\n            return \"NO\";\n        }\n        if (length == 0) {\n\
    \            return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> interval = interval1;\n        Pair<Integer, Integer> interval2 = interval2;\n\
    \        Pair<Integer, Integer> interval3 = new Pair<Integer, Integer>();\n  \
    \      Pair<Integer, Integer> interval4 = new Pair<Integer, Integer>();\n    \
    \    Pair<Integer, Integer> interval5 = new Pair<Integer, Integer>();\n      \
    \  Pair<Integer, Integer> interval6 = new Pair<Integer, Integer>();\n        Pair<Integer,\
    \ Integer> interval7 = new Pair<Integer, Integer>();\n        Pair<Integer, Integer>\
    \ interval8 = new Pair<Integer, Integer>();\n        Pair<Integer, Integer> interval9\
    \ = new Pair<Integer, Integer>();\n        Pair<Integer, Integer> interval10 =\
    \ new Pair<Integer, Integer>();\n        Pair<Integer, Integer> interval11 = new\
    \ Pair<Integer, Integer>();\n        Pair<Integer, Integer> interval12 = new Pair<Integer,\
    \ Integer>();\n        Pair<Integer, Integer> interval13 = new Pair<Integer, Integer>();\n\
    \        Pair<Integer, Integer> interval14 = new Pair<Integer, Integer>();\n \
    \       Pair<Integer, Integer> interval15 = new Pair<Integer, Integer>();\n  \
    \      Pair<Integer, Integer> interval16 = new Pair<Integer, Integer>();\n   \
    \     Pair<Integer, Integer> interval17 = new Pair<Integer, Integer>();\n    \
    \    Pair<Integer, Integer> interval18 = new Pair<Integer, Integer>();\n     \
    \   Pair<Integer, Integer> interval19 = new Pair<Integer, Integer>();\n      \
    \  Pair<Integer, Integer> interval20 = new Pair<Integer, Integer>();\n       \
    \ Pair<Integer, Integer> interval21 = new Pair<Integer, Integer>();\n        Pair<Integer,\
    \ Integer> interval22 = new Pair<Integer, Integer>();\n        Pair<Integer, Integer>\
    \ interval23 = new Pair<Integer, Integer>();\n        Pair<Integer, Integer> interval24\
    \ = new Pair<Integer, Integer>();\n        Pair<Integer, Integer> interval25 =\
    \ new Pair<Integer, Integer>();\n        Pair<Integer, Integer> interval26 = new\
    \ Pair<Integer, Integer>();\n        Pair<Integer, Integer> interval27 = new Pair<Integer,\
    \ Integer>();\n        Pair<Integer, Integer> interval28 = new Pair<Integer, Integer>();\n\
    \        Pair<Integer, Integer> interval29 = new Pair<Integer, Integer>();\n \
    \       Pair<Integer, Integer> interval30 = new Pair<Integer, Integer>();\n  \
    \      Pair<Integer, Integer> interval31 = new Pair<Integer, Integer>();\n   \
    \     Pair<Integer, Integer> interval32 = new Pair<Integer, Integer>();\n    \
    \    Pair<Integer, Integer> interval33 = new Pair<Integer, Integer>();\n     \
    \   Pair<Integer, Integer> interval34 = new Pair<Integer, Integer>();\n      \
    \  Pair<Integer, Integer> interval35", "        Pair<Integer, Integer> intersection\
    \ = interval1.intersection(interval2);\n        if (intersection == null) {\n\
    \            return \"NO\";\n        }\n        int length = intersection.getLeft().intValue()\
    \ - intersection.getRight().intValue();\n        if (length == 1) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2 && intersection.getLeft()\
    \ == intersection.getRight()) {\n            return \"YES\";\n        }\n    \
    \    if (length == 2 && intersection.getLeft() != intersection.getRight()) {\n\
    \            return \"NO\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getLeft()\
    \ - intersection.getRight();\n        if (length == 1) {\n            return \"\
    YES\";\n        }\n        if (length == 2 && intersection.getLeft() == intersection.getRight())\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";", "      \
    \  Pair<Integer, Integer> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null) {\n            return \"NO\";\n        }\n\
    \        int length = intersection.getValue();\n        if (length == 1) {\n \
    \           return \"YES\";\n        }\n        if (length == 2) {\n         \
    \   return \"YES\";\n        }\n        if (length == 3) {\n            return\
    \ \"YES\";\n        }\n        if (length == 4) {\n            return \"YES\"\
    ;\n        }\n        if (length == 5) {\n            return \"YES\";\n      \
    \  }\n        if (length == 6) {\n            return \"YES\";\n        }\n   \
    \     if (length == 7) {\n            return \"YES\";\n        }\n        if (length\
    \ == 8) {\n            return \"YES\";\n        }\n        if (length == 9) {\n\
    \            return \"YES\";\n        }\n        if (length == 10) {\n       \
    \     return \"YES\";\n        }\n        if (length == 11) {\n            return\
    \ \"YES\";\n        }\n        if (length == 12) {\n            return \"YES\"\
    ;\n        }\n        if (length == 13) {\n            return \"YES\";\n     \
    \   }\n        if (length == 14) {\n            return \"YES\";\n        }\n \
    \       if (length == 15) {\n            return \"YES\";\n        }\n        if\
    \ (length == 16) {\n            return \"YES\";\n        }\n        if (length\
    \ == 17) {\n            return \"YES\";\n        }\n        if (length == 18)\
    \ {\n            return \"YES\";\n        }\n        if (length == 19) {\n   \
    \         return \"YES\";\n        }\n        if (length == 20) {\n          \
    \  return \"YES\";\n        }\n        if (length == 21) {\n            return\
    \ \"YES\";\n        }\n        if (length == 22) {\n            return \"YES\"\
    ;\n        }\n        if (length == 23) {\n            return \"YES\";\n     \
    \   }\n        if (length == 24) {\n            return \"YES\";\n        }\n \
    \       if (length == 25) {\n            return \"YES\";\n        }\n        if\
    \ (length == 26) {\n            return \"YES\";\n        }\n        if (length\
    \ == 27) {\n            return \"YES\";\n        }\n        if (length == 28)\
    \ {\n            return \"YES\";\n        }\n        if (length == 29) {\n   \
    \         return \"YES\";\n        }\n        if (length == 30) {\n          \
    \  return \"YES\";\n        }\n        if (length == 31) {\n            return\
    \ \"YES\";\n        }\n        if (length == 32) {\n            return \"YES\"\
    ;\n        }\n        if (length == 33) {\n            return \"YES\";\n     \
    \   }\n        if (length == 34) {\n            return \"YES\";\n        }\n \
    \       if (length == 35) {\n            return \"YES\";\n        }\n        if\
    \ (length == 36) {\n            return \"YES\";\n        }\n        if (length\
    \ == 37) {\n            return \"YES\";\n        }\n        if (length == 38)\
    \ {\n            return \"YES\";\n        }\n        if (length == 39) {\n   \
    \         return \"YES\";\n        }\n        if (length == 40) {\n          \
    \  return \"YES\";\n        }\n        if (length == 41) {\n            return\
    \ \"YES\";\n        }\n        if (length == 42) {", "        Pair<Integer, Integer>\
    \ intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.getValue()\
    \ - intersection.getKey();\n        if (length == 2) {\n            return \"\
    YES\";\n        }\n        if (length == 1) {\n            return \"NO\";\n  \
    \      }\n        boolean isPrime = true;\n        for (int i = 2; i <= length\
    \ / 2; i++) {\n            if (length % i == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) {\n  \
    \          return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = interval1.intersection(interval2);\n        if (intersection\
    \ == null) {\n            return \"NO\";\n        }\n        int length = intersection.second.subtract(intersection.first);\n\
    \        if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 3) {\n            return \"YES\";\n        }\n        if (length == 5) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Integer,\
    \ Integer> intersection = Pair.of(interval1.getFirst(), interval1.getSecond());\n\
    \        Pair<Integer, Integer> intersection2 = Pair.of(interval2.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection3 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection4 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection5 = Pair.of(interval1.getSecond(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection6 = Pair.of(interval2.getSecond(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection7 = Pair.of(interval1.getFirst(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection8 = Pair.of(interval2.getFirst(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection9 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection10 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection11 = Pair.of(interval1.getSecond(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection12 = Pair.of(interval2.getSecond(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection13 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection14 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection15 = Pair.of(interval1.getSecond(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection16 = Pair.of(interval2.getSecond(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection17 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection18 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection19 = Pair.of(interval1.getSecond(),\
    \ interval2.getSecond());\n        Pair<Integer, Integer> intersection20 = Pair.of(interval2.getSecond(),\
    \ interval1.getSecond());\n        Pair<Integer, Integer> intersection21 = Pair.of(interval1.getFirst(),\
    \ interval2.getFirst());\n        Pair<Integer, Integer> intersection22 = Pair.of(interval2.getFirst(),\
    \ interval1.getFirst());\n        Pair<Integer, Integer> intersection23 = Pair.of(interval1.getSecond(),\
    \ interval"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
