language: java
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl3qv04d.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl3qv04d.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes2.add(\"\
    \");\n        int i = 0;\n        int j = 0;\n        while (i < string.length())\
    \ {\n            if (string.charAt(i) == string.charAt(j)) {\n               \
    \ prefixes.add(string.substring(i, j));\n                i++;\n              \
    \  j++;\n            } else if (string.charAt(i) != string.charAt(j)) {\n    \
    \            prefixes2.add(string.substring(i, j));\n                i++;\n  \
    \              j++;\n            } else {\n                i++;\n            \
    \    j++;\n            }\n        }\n        prefixes.addAll(prefixes2);\n   \
    \     return prefixes;\n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27t71f8n.java:35)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurr9s9i.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurr9s9i.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixesRecursive(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1_ropol.java:12: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", prefixes);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurr9s9i.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        for(int i = 1; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo50hc9w8.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\", prefixes));\n     \
    \   return prefixes;\n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9v3iu4h.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\", prefixes));\n                        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        char[]\
    \ chars = string.toCharArray();\n        Arrays.sort(chars);\n        prefixes.add(\"\
    \");\n        for (int i = 0; i < chars.length; i++) {\n            prefixes.add(String.valueOf(chars[i])\
    \ + prefixes.get(i));\n        }\n        return prefixes;\n}\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbn3udl_l.java:21)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\", prefixes));\n     \
    \   return prefixes;\n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksclcx87.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\", prefixes));\n                        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.\n\
    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdkrz98eg.java:83: error: <identifier> expected\n        prefixes2.\n\
    \                  ^\n/tmp/tmpdkrz98eg.java:83: error: not a statement\n     \
    \   prefixes2.\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixes(\"\", string));\n        return prefixes;\n\
    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpztz1f_m5.java:13: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(\"\", string));\n\
    \                        ^\n  required: String\n  found:    String,String\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes2.add(\"\
    \");\n        ArrayList<String> prefixes3 = new ArrayList<>();\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\");\n        prefixes3.add(\"\
    \");\n        \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp5bm4fr92.java:84: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixesFromLongestToShortest = allPrefixesFromLongestToShortest(string);\n\
    \        prefixes.addAll(prefixesFromLongestToShortest);\n        prefixes.addAll(allPrefixesFromShortestToLongest(string));\n\
    \        return prefixes;\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpky0z44lx.java:12: error: cannot find symbol\n        ArrayList<String>\
    \ prefixesFromLongestToShortest = allPrefixesFromLongestToShortest(string);\n\
    \                                                          ^\n  symbol:   method\
    \ allPrefixesFromLongestToShortest(String)\n  location: class Problem\n/tmp/tmpky0z44lx.java:14:\
    \ error: cannot find symbol\n        prefixes.addAll(allPrefixesFromShortestToLongest(string));\n\
    \                        ^\n  symbol:   method allPrefixesFromShortestToLongest(String)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\", prefixes));\n     \
    \   return prefixes;\n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9v3iu4h.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\", prefixes));\n                        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl3qv04d.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\"));\n        return prefixes;\n\
    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2g8zmfd4.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\"));\n                        ^\n  symbol:   method allPrefixesRec(String,String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurr9s9i.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\", prefixes));\n     \
    \   return prefixes;\n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksclcx87.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\", prefixes));\n                        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixes(\"\", string));\n        return prefixes;\n\
    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3k0wh_7.java:13: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(\"\", string));\n\
    \                        ^\n  required: String\n  found:    String,String\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl3qv04d.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurr9s9i.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\", prefixes));\n     \
    \   return prefixes;\n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9v3iu4h.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\", prefixes));\n                        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        char[]\
    \ chars = string.toCharArray();\n        Arrays.sort(chars);\n        for (int\
    \ i = 0; i < chars.length; i++) {\n            prefixes.add(String.valueOf(chars[i]));\n\
    \        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq681kds.java:21)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\", prefixes));\n     \
    \   return prefixes;\n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9v3iu4h.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\", prefixes));\n                        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl3qv04d.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixesRecursive(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1_ropol.java:12: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", prefixes);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\"));\n        return prefixes;\n\
    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qftdzxk.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\"));\n                        ^\n  symbol:   method allPrefixesRec(String,String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\"));\n        return prefixes;\n\
    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2g8zmfd4.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\"));\n                        ^\n  symbol:   method allPrefixesRec(String,String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixesRecursive(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1_ropol.java:12: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", prefixes);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurr9s9i.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurr9s9i.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes2.add(\"\
    \");\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while\
    \ (i < string.length()) {\n            while (j < string.length() && string.charAt(i)\
    \ == string.charAt(j)) {\n                j++;\n            }\n            while\
    \ (k < string.length() && string.charAt(i) == string.charAt(k)) {\n          \
    \      k++;\n            }\n            prefixes.add(String.valueOf(string.charAt(i)));\n\
    \            prefixes2.add(String.valueOf(string.charAt(i)));\n            while\
    \ (j < string.length() && string.charAt(i) == string.charAt(j)) {\n          \
    \      j++;\n            }\n            while (k < string.length() && string.charAt(i)\
    \ == string.charAt(k)) {\n                k++;\n            }\n            i++;\n\
    \        }\n        prefixes.addAll(prefixes2);\n        return prefixes;\n}\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyqnlvrpl.java:39)\n"
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n\n}\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpue0klmzt.java:56: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixesRec(string, \"\", prefixes));\n     \
    \   return prefixes;\n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9v3iu4h.java:13: error: cannot find symbol\n        prefixes.addAll(allPrefixesRec(string,\
    \ \"\", prefixes));\n                        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\
    \");\n        prefixes.addAll(allPrefixes(\"\", string));\n        return prefixes;\n\
    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3k0wh_7.java:13: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(\"\", string));\n\
    \                        ^\n  required: String\n  found:    String,String\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        char[]\
    \ charArray = string.toCharArray();\n        Arrays.sort(charArray);\n       \
    \ prefixes.add(\"\");\n        for (int i = 0; i < charArray.length; i++) {\n\
    \            prefixes.add(String.valueOf(charArray[i]));\n            prefixes.add(String.valueOf(charArray[i])\
    \ + String.valueOf(charArray[i + 1]));\n            prefixes.add(String.valueOf(charArray[i])\
    \ + String.valueOf(charArray[i + 1]) + String.valueOf(charArray[i + 2]));\n  \
    \      }\n        return prefixes;\n}\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxccg7pf.java:23)\n"
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<String>();\n        ArrayList<String> prefixes3 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes4 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes5 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes6 = new ArrayList<String>();\n        ArrayList<String> prefixes7 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes8 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes9 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes10 = new ArrayList<String>();\n        ArrayList<String> prefixes11\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes12 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes13 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes14 = new ArrayList<String>();\n        ArrayList<String> prefixes15\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes16 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes17 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes18 = new ArrayList<String>();\n        ArrayList<String> prefixes19\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes20 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes21 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes22 = new ArrayList<String>();\n        ArrayList<String> prefixes23\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes24 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes25 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes26 = new ArrayList<String>();\n        ArrayList<String> prefixes27\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes28 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes29 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes30 = new ArrayList<String>();\n        ArrayList<String> prefixes31\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes32 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes33 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes34 = new ArrayList<String>();\n        ArrayList<String> prefixes35\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes36 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes37 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes38 = new ArrayList<String>();\n        ArrayList<String> prefixes39\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes40 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes41 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes42 = new ArrayList<String>();\n        ArrayList<String> prefixes43\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes44 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes45 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes46 = new ArrayList<String>();\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp88lyf58r.java:58: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v73_ns_.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        prefixes.add(\"\
    \");\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n}\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4lebl_a9.java:55: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurr9s9i.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl3qv04d.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl3qv04d.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(\"\
    \", string, prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohfp_894.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(\"\", string, prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        allPrefixes(string,\
    \ \"\", prefixes);\n        return prefixes;\n}\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetkp38jw.java:12: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    public static ArrayList<String> allPrefixes(String string)\
    \ {\n        ArrayList<String> prefixes = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes2 = new ArrayList<>();\n        ArrayList<String> prefixes3 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<>();\n        ArrayList<String> prefixes6 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes7 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes8 = new ArrayList<>();\n        ArrayList<String> prefixes9 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes10 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes11 = new ArrayList<>();\n        ArrayList<String> prefixes12 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes13 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes14 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes15 = new ArrayList<>();\n        ArrayList<String> prefixes16 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes17 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes18 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes19 = new ArrayList<>();\n        ArrayList<String> prefixes20 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes21 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes22 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes23 = new ArrayList<>();\n        ArrayList<String> prefixes24 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes25 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes26 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes27 = new ArrayList<>();\n        ArrayList<String> prefixes28 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes29 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes30 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes31 = new ArrayList<>();\n        ArrayList<String> prefixes32 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes33 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes34 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes35 = new ArrayList<>();\n        ArrayList<String> prefixes36 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes37 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes38 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes39 = new ArrayList<>();\n        ArrayList<String> prefixes40 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes41 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes42 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes43 = new ArrayList<>();\n        ArrayList<String> prefixes44 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes45 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes46 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes47 = new ArrayList<>();\n        ArrayList<String> prefixes48 = new\
    \ ArrayList<>();\n        ArrayList<String> prefixes49 = new ArrayList<>();\n\
    \        ArrayList<String> prefixes50 = new ArrayList<>();\n        ArrayList<String>\
    \ prefixes51 = \n}\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6l217pa0.java:62: error: illegal start of expression

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011757
