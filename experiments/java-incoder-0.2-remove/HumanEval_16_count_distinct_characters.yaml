completions:
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        int count = 0;\n        char[] chars = string.toCharArray();\n        for\
  \ (char c : chars) {\n            if (Character.isLetterOrDigit(c)) {\n        \
  \        count++;\n            }\n        }\n        return count;"
- "        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> counts = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            counts.merge(c, counts.getOrDefault(c,\
  \ 0) + 1, Integer::sum);\n        }\n        return counts.entrySet().stream().mapToInt(Map.Entry::getValue).sum();"
- "        int count = 0;\n        char[] chars = string.toCharArray();\n        for\
  \ (char c : chars) {\n            count += Character.toUpperCase(c) - Character.toLowerCase(c);\n\
  \        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   map.put(c, count == null ? 1 : count + 1);\n        }\n        return map.values().stream().distinct().count();"
- "        int count = 0;\n        char[] charArray = string.toCharArray();\n    \
  \    for (char c : charArray) {\n            count += Character.toUpperCase(c) -\
  \ Character.toLowerCase(c);\n        }\n        return count;"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if(count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        Set<Character> distinctCharacters = new HashSet<>();\n        for (char\
  \ c : string.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n\
  \        return distinctCharacters.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Set<Character> chars = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            chars.add(c);\n        }\n        return chars.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if (count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if(count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        int count = 0;\n        char[] charArray = string.toCharArray();\n    \
  \    for (char c : charArray) {\n            if (Character.isLetterOrDigit(c)) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n            set.add(Character.toUpperCase(c));\n\
  \        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if (count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n\
  \        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c\
  \ : string.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n\
  \        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        int count = 0;\n        for (char c : string.toCharArray()) {\n       \
  \     if (Character.isLetterOrDigit(c)) {\n                count++;\n          \
  \  }\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            map.put(c, count == null\
  \ ? 1 : count + 1);\n        }\n        return map.values().stream().distinct().count();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        int count = 0;\n        Set<Character> set = new HashSet<>();\n       \
  \ for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
  \        }\n        count = set.size();\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        int count = 0;\n        char[] charArray = string.toCharArray();\n    \
  \    for (char c : charArray) {\n            if (Character.isLetterOrDigit(c)) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if(count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if (count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if (count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if (count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        int count = 0;\n        char[] chars = string.toCharArray();\n        for\
  \ (char c : chars) {\n            count += Character.toUpperCase(c) - Character.toLowerCase(c);\n\
  \        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c\
  \ : string.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n\
  \        }\n        return map.values().stream().distinct().count();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Set<Character> distinctCharacters = new HashSet<>();\n        for (char\
  \ character : string.toCharArray()) {\n            distinctCharacters.add(character);\n\
  \        }\n        return distinctCharacters.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> count = new HashMap<>();\n        for (char c :\
  \ string.toCharArray()) {\n            Integer count = count.get(c);\n         \
  \   if (count == null) {\n                count.put(c, 1);\n            } else {\n\
  \                count.put(c, count + 1);\n            }\n        }\n        return\
  \ count.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> counts = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = counts.get(c);\n      \
  \      if (count == null) {\n                counts.put(c, 1);\n            } else\
  \ {\n                counts.put(c, count + 1);\n            }\n        }\n     \
  \   return counts.entrySet().stream().mapToInt(e -> e.getValue()).sum();"
- "        int distinctCharacters = 0;\n        for(char c : string.toCharArray())\
  \ {\n            distinctCharacters += Character.isLetterOrDigit(c) ? 1 : 0;\n \
  \       }\n        return distinctCharacters;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Set<Character> chars = new HashSet<>();\n        chars.addAll(Arrays.asList(string.toLowerCase().toCharArray()));\n\
  \        return chars.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            map.put(c, count == null\
  \ ? 1 : count + 1);\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        int count = 0;\n        for (char c : string.toCharArray()) {\n       \
  \     if (Character.isLetterOrDigit(c)) {\n                count++;\n          \
  \  }\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        int count = 0;\n        for(int i = 0; i < string.length(); i++) {\n  \
  \          char c = string.charAt(i);\n            if(c == c.toUpperCase()) {\n\
  \                count++;\n            }\n            if(c == c.toLowerCase()) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        int distinctCharacters = 0;\n        char[] charArray = string.toCharArray();\n\
  \        for (char c : charArray) {\n            distinctCharacters += Character.isLetterOrDigit(c)\
  \ ? 1 : 0;\n        }\n        return distinctCharacters;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        int count = 0;\n        char[] charArray = string.toCharArray();\n    \
  \    for (char c : charArray) {\n            if (Character.isLetterOrDigit(c)) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        HashSet<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Set<Character> distinctCharacters = new HashSet<>();\n        for (char\
  \ c : string.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n\
  \        return distinctCharacters.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n            set.add(Character.toUpperCase(c));\n\
  \        }\n        return set.size();"
- "        int count = 0;\n        for(int i = 0; i < string.length(); i++) {\n  \
  \          char c = string.charAt(i);\n            if(c == ' ') {\n            \
  \    continue;\n            }\n            if(c == '.') {\n                continue;\n\
  \            }\n            if(c == '!') {\n                continue;\n        \
  \    }\n            if(c == '?') {\n                continue;\n            }\n \
  \           if(c == '-') {\n                continue;\n            }\n         \
  \   if(c == '(') {\n                continue;\n            }\n            if(c ==\
  \ ')') {\n                continue;\n            }\n            if(c == '[') {\n\
  \                continue;\n            }\n            if(c == ']') {\n        \
  \        continue;\n            }\n            if(c == '{') {\n                continue;\n\
  \            }\n            if(c == '}') {\n                continue;\n        \
  \    }\n            if(c == '*') {\n                continue;\n            }\n \
  \           if(c == '/') {\n                continue;\n            }\n         \
  \   if(c == '%') {\n                continue;\n            }\n            if(c ==\
  \ '^') {\n                continue;\n            }\n            if(c == '=') {\n\
  \                continue;\n            }\n            if(c == '+') {\n        \
  \        continue;\n            }\n            if(c == '-') {\n                continue;\n\
  \            }\n            if(c == '<') {\n                continue;\n        \
  \    }\n            if(c == '>') {\n                continue;\n            }\n \
  \           if(c == '|') {\n                continue;\n            }\n         \
  \   if(c == '&') {\n                continue;\n            }\n            if(c ==\
  \ '!') {\n                continue;\n            }\n            if(c == '~') {\n\
  \                continue;\n            }\n            if(c == '@') {\n        \
  \        continue;\n            }\n            if(c == '#') {\n                continue;\n\
  \            }\n            if(c == '$') {\n                continue;\n        \
  \    }\n            if(c == '%') {\n                continue;\n            }\n \
  \           if(c == '&') {\n                continue;\n            }\n         \
  \   if(c == '*') {\n                continue;\n            }\n            if(c ==\
  \ '(') {\n                continue;\n            }\n            if(c == ')') {\n\
  \                continue;\n            }\n            if(c == '[') {\n        \
  \        continue;\n            }\n            if(c == ']') {\n                continue;\n\
  \            }\n            if(c == '{') {\n                continue;\n        \
  \    }\n            if(c == '}') {\n                continue;\n            }\n \
  \           if(c == '<') {\n                continue;\n            }\n         \
  \   if(c == '>') {\n                continue;\n            }\n            if(c ==\
  \ '|') {\n                continue;\n            }\n            if(c == '=') {\n\
  \                continue;\n            }\n            if(c == '+') {\n        \
  \        continue;\n            }\n            if"
- "        Map<Character, Integer> counts = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            counts.merge(c, counts.getOrDefault(c,\
  \ 0) + 1, Integer::sum);\n        }\n        return counts.entrySet().stream().mapToInt(e\
  \ -> e.getValue()).sum();"
- "        Set<Character> chars = new HashSet<>();\n        char[] charArray = string.toCharArray();\n\
  \        for (char c : charArray) {\n            chars.add(c);\n        }\n    \
  \    return chars.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        HashSet<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        int count = 0;\n        for(int i = 0; i < string.length(); i++) {\n  \
  \          char c = string.charAt(i);\n            if(c == c.toUpperCase()) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> counts = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            counts.put(c, counts.getOrDefault(c, 0)\
  \ + 1);\n        }\n        return counts.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Set<Character> chars = new HashSet<>();\n        char[] charArray = string.toCharArray();\n\
  \        for (char c : charArray) {\n            chars.add(c);\n        }\n    \
  \    return chars.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        int count = 0;\n        char[] charArray = string.toCharArray();\n    \
  \    for (char c : charArray) {\n            if (Character.isUpperCase(c)) {\n \
  \               count++;\n            }\n            if (Character.isLowerCase(c))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if (count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        int count = 0;\n        char[] charArray = string.toCharArray();\n    \
  \    Arrays.sort(charArray);\n        for (int i = 0; i < charArray.length; i++)\
  \ {\n            if (charArray[i] == charArray[i + 1]) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        int count = 0;\n        Set<Character> set = new HashSet<>();\n       \
  \ for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
  \            set.add(Character.toUpperCase(c));\n        }\n        count = set.size();\n\
  \        return count;"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        int count = 0;\n        char[] charArray = string.toCharArray();\n    \
  \    for (char c : charArray) {\n            count += Character.toLowerCase(c).equals(Character.toLowerCase(c))\
  \ ? 1 : 0;\n        }\n        return count;"
- "        int count = 0;\n        for (char c : string.toCharArray()) {\n       \
  \     if (Character.isLetterOrDigit(c)) {\n                count++;\n          \
  \  }\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        int count = 0;\n        char[] chars = string.toCharArray();\n        for\
  \ (char c : chars) {\n            count += Character.isUpperCase(c) ? 2 : Character.isLowerCase(c)\
  \ ? 1 : 0;\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for(int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c\
  \ : string.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n\
  \        }\n        return map.size();"
- "        int count = 0;\n        char[] charArray = string.toCharArray();\n    \
  \    Arrays.sort(charArray);\n        for (int i = 0; i < charArray.length; i++)\
  \ {\n            char c = charArray[i];\n            if (c != charArray[i - 1])\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        int count = 0;\n        for(int i = 0; i < string.length(); i++) {\n  \
  \          char c = string.charAt(i);\n            if(c == c.toUpperCase()) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if(count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
  \ {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return\
  \ map.values().stream().distinct().count();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if (count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for(int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.values().stream().distinct().count();"
- "        HashSet<Character> set = new HashSet<>();\n        for(char c : string.toCharArray())\
  \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
  \ : string.toCharArray()) {\n            Integer count = map.get(c);\n         \
  \   if (count == null) {\n                map.put(c, 1);\n            } else {\n\
  \                map.put(c, count + 1);\n            }\n        }\n        return\
  \ map.size();"
- "        int count = 0;\n        for(char c : string.toCharArray()) {\n        \
  \    if(c == c.toUpperCase()) {\n                count++;\n            }\n     \
  \       if(c == c.toLowerCase()) {\n                count++;\n            }\n  \
  \      }\n        return count;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
  \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
  \                map.put(c, 1);\n            } else {\n                map.put(c,\
  \ count + 1);\n            }\n        }\n        return map.size();"
- "        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c\
  \ : string.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n\
  \        }\n        return map.size();"
language: java
name: HumanEval_16_count_distinct_characters
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    public static int countDistinctCharacters(String\
  \ string) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\
  \")) == (0));\n    assert(countDistinctCharacters((\"abcde\")) == (5));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5));\n\
  \    }\n\n}\n"
