name: HumanEval_140_fix_spaces
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with -\n    public static String fixSpaces(String text)\
  \ {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"\
  Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ['        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            sb.append(word).append(\" \"\
    );\n        }\n        words = sb.toString().split(\" \");\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        int i = 0;\n        while (i < words.length)\
    \ {\n            if (words[i].length() > 2) {\n                sb2.append(words[i]).append(\"\
    -\");\n                i++;\n            } else {\n                sb2.append(words[i]);\n\
    \                i++;\n            }\n        }\n        return sb.toString().replaceAll(\"\
    \\\\s+\", \" \");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', "        StringBuilder sb = new StringBuilder();\n        boolean space\
    \ = false;\n        for (int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if (c == ' ') {\n                if (space)\
    \ {\n                    sb.append('-');\n                    space = false;\n\
    \                } else {\n                    sb.append('_');\n             \
    \       space = true;\n                }\n            } else {\n             \
    \   sb.append(c);\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\
    \\\\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean first = true;\n        for (String word : words) {\n        \
    \    if (first) {\n                first = false;\n            } else {\n    \
    \            sb.append(\" \");\n            }\n            sb.append(word.replaceAll(\"\
    \\\\s+\", \"-\"));\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean space = false;\n        for (int\
    \ i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n   \
    \         if (c == ' ') {\n                if (space) {\n                    sb.append('-');\n\
    \                    space = false;\n                } else {\n              \
    \      sb.append('_');\n                    space = true;\n                }\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            sb.append(word).append(\" \"\
    );\n        }\n        words = sb.toString().split(\" \");\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        int i = 0;\n        while (i < words.length)\
    \ {\n            if (words[i].equals(\" \")) {\n                sb2.append(words[i]);\n\
    \                i++;\n            } else {\n                sb2.append(words[i]).append(\"\
    _\");\n                i++;\n            }\n        }\n        sb2.deleteCharAt(sb2.length()\
    \ - 1);\n        return sb2.toString();", '        return text.replaceAll("\\s+",
    "_");', "        return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\
    \\\\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     StringBuilder sb = new StringBuilder();\n        boolean isConsecutive =\
    \ false;\n        for (int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if (c == ' ') {\n                if (!isConsecutive)\
    \ {\n                    sb.append(c);\n                    isConsecutive = true;\n\
    \                } else {\n                    sb.append('-');\n             \
    \       isConsecutive = false;\n                }\n            } else {\n    \
    \            isConsecutive = false;\n                sb.append(c);\n         \
    \   }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean first = true;\n        for (int i\
    \ = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n     \
    \       if (c == ' ') {\n                if (first) {\n                    first\
    \ = false;\n                } else {\n                    sb.append('_');\n  \
    \              }\n            } else {\n                sb.append(c);\n      \
    \      }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        boolean first = true;\n        for (String word\
    \ : words) {\n            if (first) {\n                sb.append(word);\n   \
    \             first = false;\n            } else {\n                sb.append(\"\
    \ \");\n                sb.append(word);\n            }\n        }\n        return\
    \ sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder();\n        boolean isSpace\
    \ = false;\n        for(int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if(c == ' ') {\n                isSpace = true;\n\
    \            } else if(isSpace) {\n                isSpace = false;\n        \
    \        sb.append(c);\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();", "        String[] words\
    \ = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n    \
    \    for (String word : words) {\n            sb.append(word).append(\" \");\n\
    \        }\n        words = sb.toString().split(\" \");\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        int i = 0;\n        while (i < words.length)\
    \ {\n            if (words[i].equals(\" \")) {\n                sb2.append(words[i]);\n\
    \                i++;\n            } else {\n                sb2.append(words[i]).append(\"\
    \ \");\n                i++;\n            }\n        }\n        words = sb2.toString().split(\"\
    \ \");\n        StringBuilder sb3 = new StringBuilder();\n        int j = 0;\n\
    \        while (j < words.length) {\n            if (words[j].equals(\" \")) {\n\
    \                sb3.append(words[j]);\n                j++;\n            } else\
    \ {\n                sb3.append(words[j]).append(\" \");\n                j++;\n\
    \            }\n        }\n        words = sb3.toString().split(\" \");\n    \
    \    StringBuilder sb4 = new StringBuilder();\n        int k = 0;\n        while\
    \ (k < (words.length - 1)) {\n            if (words[k].equals(\" \")) {\n    \
    \            sb4.append(words[k]);\n                k++;\n            } else {\n\
    \                sb4.append(words[k]).append(\" \");\n                k++;\n \
    \           }\n        }\n        words = sb4.toString().split(\" \");\n     \
    \   StringBuilder sb5 = new StringBuilder();\n        int l = 0;\n        while\
    \ (l < (words.length - 1)) {\n            if (words[l].equals(\" \")) {\n    \
    \            sb5.append(words[l]);\n                l++;\n            } else {\n\
    \                sb5.append(words[l]).append(\" \");\n                l++;\n \
    \           }\n        }\n        words = sb5.toString().split(\" \");\n     \
    \   StringBuilder sb6 = new StringBuilder();\n        int m = 0;\n        while\
    \ (m < (words.length - 1)) {\n            if (words[m].equals(\" \")) {\n    \
    \            sb6.append(words[m]);\n                m++;\n            } else {\n\
    \                sb6.append(words[m]).append(\" \");\n                m++;\n \
    \           }\n        }\n        words = sb6.toString().split(\" \");\n     \
    \   StringBuilder sb7 = new StringBuilder();\n        int n = 0;\n        while\
    \ (n < (words.length - 1)) {\n            if (words[n].equals(\" \")) {\n    \
    \            sb7.append(words[n]);\n                n++;\n            } else {\n\
    \                sb7.append(words[n]).append(\" \");\n                n++;\n \
    \           }\n        }\n        words = sb7.toString().split(\" \");\n     \
    \   StringBuilder sb8 = new StringBuilder();\n        int o = 0;\n        while\
    \ (o < (words.length - 1)) {\n            if (words[o].equals(\" \")) {\n    \
    \            sb8.append(words[o]);\n                ", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\"\
    \ \", \"_\");\n        sb.replace(\" \", \"_\");\n        sb.replace(\" \", \"\
    _\");\n        sb.replace(\" \", \"-\");\n        sb.replace(\" \", \"-\");\n\
    \        sb.replace(\" \", \"-\");\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            sb.append(word.replaceAll(\"\\\\s+\", \"_\"));\n   \
    \         if (sb.length() > 2) {\n                sb.setCharAt(sb.length() - 1,\
    \ '-');\n            }\n            sb.append(\" \");\n        }\n        return\
    \ sb.toString();", "        StringBuilder sb = new StringBuilder();\n        boolean\
    \ isConsecutive = false;\n        boolean isFirst = true;\n        for (int i\
    \ = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n     \
    \       if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    isConsecutive = true;\n\
    \                }\n            } else {\n                if (isConsecutive) {\n\
    \                    isConsecutive = false;\n                    sb.append('-');\n\
    \                } else {\n                    sb.append(c);\n               \
    \ }\n            }\n        }\n        return sb.toString();", "        String[]\
    \ words = text.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
    \        boolean first = true;\n        for (String word : words) {\n        \
    \    if (first) {\n                result.append(word);\n                first\
    \ = false;\n            } else {\n                result.append(\" \");\n    \
    \            result.append(word);\n            }\n        }\n        return result.toString();",
  "        return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\
    \\\\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', "        String[] words\
    \ = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n    \
    \    for (String word : words) {\n            sb.append(word.replaceAll(\"\\\\\
    s+\", \"_\"));\n            if (sb.length() > 2) {\n                sb.setCharAt(sb.length()\
    \ - 1, '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean space = false;\n        for (int\
    \ i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n   \
    \         if (c == ' ') {\n                space = true;\n            } else if\
    \ (space) {\n                sb.append('_');\n                space = false;\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder();\n        boolean space\
    \ = false;\n        for (int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if (c == ' ') {\n                space = true;\n\
    \            } else if (space) {\n                sb.append('_');\n          \
    \      space = false;\n            } else {\n                sb.append(c);\n \
    \           }\n        }\n        return sb.toString();", "        return text.replaceAll(\"\
    \\\\s+\", \"_\").\n                replaceAll(\"\\\\s{2,}\", \"-\");", "     \
    \   return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\\\
    \\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     StringBuilder result = new StringBuilder();\n        boolean inSpace = false;\n\
    \        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == ' ') {\n                if (!inSpace) {\n              \
    \      inSpace = true;\n                    result.append(c);\n              \
    \  } else {\n                    inSpace = false;\n                    result.append(c);\n\
    \                }\n            } else {\n                result.append(c);\n\
    \            }\n        }\n        return result.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean isConsecutive = false;\n        for(int\
    \ i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n   \
    \         if(c == ' ') {\n                isConsecutive = true;\n            \
    \    sb.append('_');\n            } else if(isConsecutive) {\n               \
    \ sb.append('-');\n                isConsecutive = false;\n            }\n   \
    \         sb.append(c);\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        return text.replaceAll(\"\
    \\\\s+\", \"_\").\n                replaceAll(\"\\\\s{2,}\", \"-\");", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            sb.append(word).append(\" \"\
    );\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', "        StringBuilder\
    \ result = new StringBuilder();\n        boolean isConsecutive = false;\n    \
    \    for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == ' ') {\n                if (!isConsecutive) {\n        \
    \            result.append(c);\n                } else {\n                   \
    \ isConsecutive = false;\n                    result.append(c);\n            \
    \    }\n            } else {\n                result.append(c);\n            \
    \    isConsecutive = true;\n            }\n        }\n        return result.toString();",
  "        return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\
    \\\\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        String[] words = text.split(\" \");\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String word : words) {\n            result.append(word).append(\"\
    \ \");\n        }\n        return result.toString().replaceAll(\"\\\\s+\", \"\
    -\");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            sb.append(word.replaceAll(\"\\\\s+\", \"_\"));\n   \
    \         if (sb.length() > 2) {\n                sb.setCharAt(sb.length() - 1,\
    \ '-');\n            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder(text);\n        sb.replace(\" \", \"_\");\n        sb.replace(\"\
    \ \", \"_\");\n        if (sb.length() > 2) {\n            sb.replace(\" \", \"\
    -\");\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\
    \\\\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            sb.append(word.replaceAll(\"\\\\s+\", \"_\"));\n   \
    \         if (sb.length() > 2) {\n                sb.setCharAt(sb.length() - 1,\
    \ '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_");', "        StringBuilder result = new StringBuilder();\n\
    \        boolean first = true;\n        for (int i = 0; i < text.length(); i++)\
    \ {\n            char c = text.charAt(i);\n            if (c == ' ') {\n     \
    \           if (!first) {\n                    result.append(c);\n           \
    \     }\n                first = false;\n            } else {\n              \
    \  result.append(c);\n            }\n        }\n        return result.toString();",
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\
    \\\\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder();\n        boolean isSpace\
    \ = false;\n        for(int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if(c == ' ') {\n                isSpace = true;\n\
    \                sb.append('_');\n            }\n            else {\n        \
    \        if(isSpace) {\n                    sb.append('_');\n                \
    \    isSpace = false;\n                }\n                else {\n           \
    \         sb.append(c);\n                }\n            }\n        }\n       \
    \ return sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n\
    \        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if(c == ' ') {\n                if(first) {\n                   \
    \ first = false;\n                } else {\n                    sb.append(\"-\"\
    );\n                }\n            } else {\n                sb.append(c);\n \
    \           }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', "        return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\
    \\\\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        return text.replaceAll(\"\\\\s+\", \"_\").\n                replaceAll(\"\
    \\\\s{2,}\", \"-\");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            sb.append(word.replaceAll(\"\\\\s+\", \"-\"));\n   \
    \         if (sb.length() > 2) {\n                sb.setCharAt(sb.length() - 1,\
    \ '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        String[] words\
    \ = text.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
    \        for(int i = 0; i < words.length; i++) {\n            result.append(words[i]);\n\
    \            if(i != words.length - 1) {\n                result.append(\" \"\
    );\n            }\n        }\n        return result.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean isConsecutive = false;\n        for\
    \ (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == ' ') {\n                if (!isConsecutive) {\n        \
    \            sb.append('_');\n                    isConsecutive = true;\n    \
    \            } else {\n                    sb.append('-');\n                 \
    \   isConsecutive = false;\n                }\n            } else {\n        \
    \        isConsecutive = false;\n                sb.append(c);\n            }\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder(text);\n\
    \        sb.replace(\" \", \"_\");\n        sb.replace(\" \", \"_\");\n      \
    \  if (sb.length() > 2) {\n            sb.replace(\" \", \"-\");\n        }\n\
    \        return sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        return text.replaceAll(\"\\\\s+\"\
    , \"_\").\n                replaceAll(\"\\\\s{2,}\", \"-\");", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_");', "        StringBuilder sb = new\
    \ StringBuilder();\n        boolean first = true;\n        for (int i = 0; i <\
    \ text.length(); i++) {\n            char c = text.charAt(i);\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.append(\"-\");\n           \
    \     }\n            } else {\n                sb.append(c);\n            }\n\
    \        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\"\
    \ \", \"_\");\n        sb.replace(\" \", \"_\");\n        sb.replace(\" \", \"\
    -\");\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder();\n        boolean first\
    \ = true;\n        for(int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if(c == ' ') {\n                if(!first)\
    \ {\n                    sb.append('_');\n                }\n                first\
    \ = false;\n            } else {\n                sb.append(c);\n            }\n\
    \        }\n        return sb.toString();"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
