language: java
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min().getAsLong();\n\
    \        Long max = lst.stream().max().getAsLong();\n        Long min2 = lst.stream().min(Comparator.naturalOrder()).getAsLong();\n\
    \        Long max2 = lst.stream().max(Comparator.naturalOrder()).getAsLong();\n\
    \        Long min3 = lst.stream().min(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        Long max3 = lst.stream().max(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        Long min4 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        Long max4 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        Long min5 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        Long max5 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        Long min6 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        Long max6 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        Long min7 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        Long max7 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        Long min8 = lst.stream().min(Comparator.compar\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6wt4o85.java:29: error: ')' expected\n        Long min8 = lst.stream().min(Comparator.compar\n\
    \                                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        long mid = min + ((max -\
    \ min) / 2);\n        long temp;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            temp = lst.get(i);\n            if(temp < mid) {\n          \
    \      result.add(temp);\n                mid = temp;\n            }\n       \
    \     else if(temp > mid) {\n                result.add(mid);\n              \
    \  mid = temp;\n            }\n            else {\n                result.add(mid);\n\
    \                mid = temp;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpee4v0ije.java:37)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        long min = lst.get(0);\n        long max = lst.get(lst.size() - 1);\n\
    \        long mid = min + ((max - min) / 2);\n        for (long i : lst) {\n \
    \           if (i < mid) {\n                result.add(i);\n            } else\
    \ if (i > mid) {\n                result.add(mid);\n            } else {\n   \
    \             result.add(max);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkpfkrgad.java:31)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5usffhgk.java:65: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        long cur = min;\n      \
    \  long nextMax = max;\n        long nextMin = min;\n        for (long i : lst)\
    \ {\n            if (i < nextMin) {\n                result.add(cur);\n      \
    \          cur = i;\n                nextMin = i;\n            } else if (i >\
    \ nextMax) {\n                result.add(cur);\n                cur = i;\n   \
    \             nextMax = i;\n            } else {\n                cur = i;\n \
    \           }\n        }\n        result.add(cur);\n        result.add(nextMax);\n\
    \        result.add(nextMin);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvea67ed9.java:39)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < min) {\n \
    \               min = i;\n            }\n            if (i > max) {\n        \
    \        max = i;\n            }\n        }\n        result.add(min);\n      \
    \  result.add(max);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuh7c3msn.java:34)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbmb5ruyb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min2 = lst.stream().min(Comparator.naturalOrder()).getAsLong();\n\
    \        long max2 = lst.stream().max(Comparator.naturalOrder()).getAsLong();\n\
    \        long min3 = lst.stream().min(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        long max3 = lst.stream().max(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        long min4 = lst.stream().min(Comparator.comparingLong(Long::compareTo)).getAsLong();\n\
    \        long max4 = lst.stream().max(Comparator.comparingLong(Long::compareTo)).getAsLong();\n\
    \        long min5 = lst.stream().min(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long max5 = lst.stream().max(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long min6 = lst.stream().min(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long max6 = lst.stream().max(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long min7 = lst.stream().min(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long max7 = lst.stream().max(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long min8 = lst.stream().min(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long max8 = lst.stream().max(Comparator.comparingLong(Long::compare\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvkqgla1.java:30: error: ')' expected\n        long max8 = lst.stream().max(Comparator.comparingLong(Long::compare\n\
    \                                                                           ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpma4e_l9l.java:65: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().get\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_e70sgz.java:53: error: ';' expected\n        long min = lst.stream().min().get\n\
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        long next = 0;\n\
    \        for (long i : lst) {\n            if (i > mid) {\n                result.add(curr);\n\
    \                curr = next;\n                next = i;\n            } else if\
    \ (i < mid) {\n                next = i;\n            }\n        }\n        result.add(curr);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaknw5hn4.java:33)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compare).get();\n\
    \        Long max = lst.stream().max(Long::compare).get();\n        Long mid =\
    \ min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n     \
    \   max = mid;\n        for (Long i : lst) {\n            if (i < min) {\n   \
    \             min = i;\n            }\n            if (i > max) {\n          \
    \      max = i;\n            }\n        }\n        result.add(min);\n        result.add(max);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61jh4tqa.java:34)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2v7ww8d.java:17: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:18: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:19: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:20: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:21: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:22: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:23: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:24: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:25: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:26: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:27: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:28: error: variable max is already "
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        for (long i : lst) {\n \
    \           if (i < min) {\n                result.add(min);\n               \
    \ min = i;\n            } else if (i > max) {\n                result.add(max);\n\
    \                max = i;\n            } else {\n                result.add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nlp72ja.java:31)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long middle = lst.stream().filter(i -> i <=\
    \ mid).collect(Collectors.toList()).get(0);\n        long leftMax = lst.stream().filter(i\
    \ -> i > mid).collect(Collectors.toList()).get(0);\n        long rightMax = lst.stream().filter(i\
    \ -> i < mid).collect(Collectors.toList()).get(0);\n        long leftMin = lst.stream().filter(i\
    \ -> i > mid).collect(Collectors.toList()).get(0);\n        long rightMin = lst.stream().filter(i\
    \ -> i < mid).collect(Collectors.toList()).get(0);\n        long leftMiddle =\
    \ lst.stream().filter(i -> i <= mid).collect(Collectors.toList()).get(0);\n  \
    \      long rightMiddle = lst.stream().filter(i -> i > mid).collect(Collectors.toList()).get(0);\n\
    \        long leftMaxMiddle = lst.stream().filter(i -> i <= mid).collect(Collectors.toList()).get(0);\n\
    \        long rightMaxMiddle = lst.stream().filter(i -> i > mid).collect(Collectors.toList()).get(0);\n\
    \        long leftMinMiddle = lst.stream().filter(i -> i <= mid).collect(Collectors.toList()).get(0);\n\
    \        long rightMinMiddle = lst.stream().filter(i -> i > mid).collect(Collectors.toList()).get(0);\n\
    \        long leftMiddleMiddle = lst.stream().filter(i -> i <= mid).collect(Collectors.toList()).get(0);\n\
    \        long rightMiddleMiddle = lst.stream().filter(i -> i > mid).collect(Collectors.toList()).get(0);\n\
    \        long leftMaxMiddleMiddle = lst.stream().filter(i -> i <= mid).collect(Collectors.toList()).get(0);\n\
    \        long rightMaxMiddleMiddle = lst.stream().filter(i -> i > mid).collect(Collectors.toList()).get(0);\n\
    \        long leftMinMiddleMiddle = lst.stream().filter(i -> i <= mid).collect(Collectors.toList()).get(0);\n\
    \        long rightMinMiddleMiddle = lst.stream().filter(i -> i > mid).collect(Collectors.toList()).get(0);\n\
    \        long leftMiddleMiddleMiddle = lst.stream().filter(i -> i <= mid).collect(Collectors.toList()).\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx4crzjl3.java:35: error: <identifier> expected\n        long leftMiddleMiddleMiddle\
    \ = lst.stream().filter(i -> i <= mid).collect(Collectors.toList()).\n       \
    \                                                                            \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i < min) min =\
    \ i;\n            if (i > max) max = i;\n            result.add(i);\n        }\n\
    \        result.add(min);\n        result.add(max);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2bk5lbq3.java:31)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        for (long i : lst) {\n \
    \           if (i < min) {\n                min = i;\n            }\n        \
    \    if (i > max) {\n                max = i;\n            }\n        }\n    \
    \    long mid = min + ((max - min) / 2);\n        for (long i : lst) {\n     \
    \       if (i < mid) {\n                result.add(i);\n            } else if\
    \ (i > mid) {\n                result.add(mid - i);\n            } else {\n  \
    \              result.add(mid - i);\n                result.add(i);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0ubx3ix.java:39)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpphag212g.java:57: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max = lst.stream().max(Long::compareTo).get();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max = lst.stream().max(Long::compareTo).get();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max = lst.stream().max(Long::compareTo).get();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max = lst.stream().max(Long::compareTo).get();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max = lst.stream().max(Long::compareTo).get();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphjg3x1z_.java:46: error: ';' expected\n        Long max = lst.stream\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpphag212g.java:57: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        long mid = min + ((max -\
    \ min) / 2);\n        long temp;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                temp = i;\n            } else if (i > mid) {\n\
    \                temp = mid;\n            } else {\n                temp = min;\n\
    \            }\n            result.add(temp);\n            mid = (mid + temp)\
    \ / 2;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2tm4srb8.java:33)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long middle\
    \ = min + (max - min) / 2;\n        Long middle2 = min + (max - min) / 2;\n  \
    \      Long middle3 = min + (max - min) / 2;\n        Long middle4 = min + (max\
    \ - min) / 2;\n        Long middle5 = min + (max - min) / 2;\n        Long middle6\
    \ = min + (max - min) / 2;\n        Long middle7 = min + (max - min) / 2;\n  \
    \      Long middle8 = min + (max - min) / 2;\n        Long middle9 = min + (max\
    \ - min) / 2;\n        Long middle10 = min + (max - min) / 2;\n        Long middle11\
    \ = min + (max - min) / 2;\n        Long middle12 = min + (max - min) / 2;\n \
    \       Long middle13 = min + (max - min) / 2;\n        Long middle14 = min +\
    \ (max - min) / 2;\n        Long middle15 = min + (max - min) / 2;\n        Long\
    \ middle16 = min + (max - min) / 2;\n        Long middle17 = min + (max - min)\
    \ / 2;\n        Long middle18 = min + (max - min) / 2;\n        Long middle19\
    \ = min + (max - min) / 2;\n        Long middle20 = min + (max - min) / 2;\n \
    \       Long middle21 = min + (max - min) / 2;\n        Long middle22 = min +\
    \ (max - min) / 2;\n        Long middle23 = min + (max - min) / 2;\n        Long\
    \ middle24 = min + (max - min) / 2;\n        Long middle25 = min + (max - min)\
    \ / 2;\n        Long middle26 = min + (max - min) / 2;\n        Long middle27\
    \ = min + (max - min) / 2;\n        Long middle28 = min + (max - min) / 2;\n \
    \       Long middle29 = min + (max - min) / 2;\n        Long middle30 = min +\
    \ (max - min) / 2;\n        Long middle31 = min + (max - min) / 2;\n        Long\
    \ middle32 = min + (max - min) / 2;\n        Long middle33 = min + (max - min)\
    \ / 2;\n        Long middle34 = min + (max - min) / 2;\n        Long middle35\
    \ = min + (max - min) / 2;\n        Long middle36 = min + (max - min) / 2;\n \
    \       Long middle37 = min + (max - min) / 2;\n        Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1tzz6gnr.java:54: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmp1tzz6gnr.java:54: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        long curr = min;\n     \
    \   long next = max;\n        long temp;\n        while (curr != next) {\n   \
    \         temp = curr;\n            curr = next;\n            next = temp;\n \
    \           result.add(curr);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976359
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(mid);\n                max = i;\n  \
    \          } else {\n                result.add(mid);\n                min = mid;\n\
    \                max = mid;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx5tpyr6.java:37)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min3 = lst.stream().min(Long::compareTo).get();\n        Long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max4 = lst.stream().max(Long::compareTo).get();\n        Long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min6 = lst.stream().min(Long::compareTo).get();\n        Long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max7 = lst.stream().max(Long::compareTo).get();\n        Long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min9 = lst.stream().min(Long::compareTo).get();\n        Long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max10 = lst.stream().max(Long::compareTo).get();\n        Long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min12 = lst.stream().min(Long::compareTo).get();\n        Long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max13 = lst.stream().max(Long::compareTo).get();\n        Long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min15 = lst.stream().min(Long::compareTo).get();\n        Long max15\
    \ = l\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0nqnnk5q.java:44: error: ';' expected\n        Long max15 = l\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5usffhgk.java:65: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbmb5ruyb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        long mid = min + ((max -\
    \ min) / 2);\n        long temp;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                temp = i;\n            } else if (i > mid) {\n\
    \                temp = mid;\n            } else {\n                temp = mid;\n\
    \            }\n            result.add(temp);\n            mid = temp;\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4wlc_fwt.java:33)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long middle\
    \ = min + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle + 2;\n        long middle4 = middle + 3;\n        long middle5 = middle\
    \ + 4;\n        long middle6 = middle + 5;\n        long middle7 = middle + 6;\n\
    \        long middle8 = middle + 7;\n        long middle9 = middle + 8;\n    \
    \    long middle10 = middle + 9;\n        long middle11 = middle + 10;\n     \
    \   long middle12 = middle + 11;\n        long middle13 = middle + 12;\n     \
    \   long middle14 = middle + 13;\n        long middle15 = middle + 14;\n     \
    \   long middle16 = middle + 15;\n        long middle17 = middle + 16;\n     \
    \   long middle18 = middle + 17;\n        long middle19 = middle + 18;\n     \
    \   long middle20 = middle + 19;\n        long middle21 = middle + 20;\n     \
    \   long middle22 = middle + 21;\n        long middle23 = middle + 22;\n     \
    \   long middle24 = middle + 23;\n        long middle25 = middle + 24;\n     \
    \   long middle26 = middle + 25;\n        long middle27 = middle + 26;\n     \
    \   long middle28 = middle + 27;\n        long middle29 = middle + 28;\n     \
    \   long middle30 = middle + 29;\n        long middle31 = middle + 30;\n     \
    \   long middle32 = middle + 31;\n        long middle33 = middle + 32;\n     \
    \   long middle34 = middle + 33;\n        long middle35 = middle + 34;\n     \
    \   long middle36 = middle + 35;\n        long middle37 = middle + 36;\n     \
    \   long middle38 = middle + 37;\n        long middle39 = middle + 38;\n     \
    \   long middle40 = middle + 39;\n        long middle41 = middle + 40;\n     \
    \   long middle42 = middle + 41;\n        long middle43 = middle + 42;\n     \
    \   long middle44 = middle + 43;\n        long middle45 = middle + 44;\n     \
    \   long middle46 = middle + 45;\n        long middle47 = middle + 46;\n     \
    \   long middle48 = middle + 47;\n        long middle49 = middle + 48;\n     \
    \   long middle50 = middle + 49;\n        long \n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc0jh6mxd.java:67: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpc0jh6mxd.java:67: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     for (Long i : lst) {\n            if (i.compareTo(min) < 0) {\n        \
    \        result.add(i);\n                min = i;\n            }\n        }\n\
    \        max = mid;\n        for (Long i : lst) {\n            if (i.compareTo(max)\
    \ > 0) {\n                result.add(i);\n                max = i;\n         \
    \   }\n        }\n        result.add(min);\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpll82p_f0.java:37)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbmb5ruyb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n            mid\
    \ = (mid + temp) / 2;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpobf7mbe7.java:33)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n\
    \        Long middle = lst.get(lst.size() / 2);\n        for (Long i : lst) {\n\
    \            if (i < min) {\n                result.add(min);\n              \
    \  min = i;\n            } else if (i > max) {\n                result.add(max);\n\
    \                max = i;\n            } else if (i == middle) {\n           \
    \     result.add(middle);\n            } else {\n                result.add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_a_vvvf.java:35)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2v7ww8d.java:17: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:18: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:19: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:20: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:21: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:22: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:23: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:24: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:25: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:26: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:27: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:28: error: variable max is already "
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size()\
    \ - 1);\n        Long minIndex = Collections.binarySearch(lst,minValue);\n   \
    \     Long maxIndex = Collections.binarySearch(lst,maxValue);\n        Long minIndex\
    \ = Collections.binarySearch(lst,minValue);\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \        Long minIndex = Collections.binarySearch(lst,minValue);\n        Long\
    \ maxIndex = Collections.binarySearch(lst,maxValue);\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \        Long minIndex = Collections.binarySearch(lst,minValue);\n        Long\
    \ maxIndex = Collections.binarySearch(lst,maxValue);\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \        Long minIndex = Collections.binarySearch(lst,minValue);\n        Long\
    \ maxIndex = Collections.binarySearch(lst,maxValue);\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \        Long minIndex = Collections.binarySearch(lst,minValue);\n        Long\
    \ maxIndex = Collections.binarySearch(lst,maxValue);\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \        Long minIndex = Collections.binarySearch(lst,minValue);\n        Long\
    \ maxIndex = Collections.binarySearch(lst,maxValue);\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \        Long minIndex = Collections.binarySearch(lst,minValue);\n        Long\
    \ maxIndex = Collections.binarySearch(lst,maxValue);\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \        Long minIndex = Collections.binarySearch(lst,minValue);\n        Long\
    \ maxIndex = Collections.binarySearch(lst,maxValue);\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \        Long minIndex = Collections.binarySearch(lst,minValue);\n        Long\
    \ maxIndex = Collections.binarySearch(lst,maxValue);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgsei_ig7.java:18: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that int conforms to Long\n        Long minIndex\
    \ = Collections.binarySearch(lst,minValue);\n                                \
    \                ^\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>binarySearch(List<? extends Comparable<? super T>>,T)\n/tmp/tmpgsei_ig7.java:19:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ int conforms to Long\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \                                                ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>binarySearch(List<? extends Comparable<?\
    \ super T>>,T)\n/tmp/tmpgsei_ig7.java:20: error: variable minIndex is already\
    \ defined in method strangeSortList(ArrayList<Long>)\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n             ^\n/tmp/tmpgsei_ig7.java:20:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ int conforms to Long\n        Long minIndex = Collections.binarySearch(lst,minValue);\n\
    \                                                ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>binarySearch(List<? extends Comparable<?\
    \ super T>>,T)\n/tmp/tmpgsei_ig7.java:21: error: variable maxIndex is already\
    \ defined in method strangeSortList(ArrayList<Long>)\n        Long maxIndex =\
    \ Collections.binarySearch(lst,maxValue);\n             ^\n/tmp/tmpgsei_ig7.java:21:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ int conforms to Long\n        Long maxIndex = Collections.binarySearch(lst,maxValue);\n\
    \                                                ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>binarySearch(List<? extends Comparable<?\
    \ super T>>,T)\n/tmp/tmpgsei_ig7.java:22: error: variable minIndex is already\
    \ defined in method strangeSortList(ArrayList<Long>)\n        Long minIndex =\
    \ Collections.binarySearch(lst,minValue);\n             ^\n/tmp/tmp"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2v7ww8d.java:17: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:18: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:19: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:20: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:21: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:22: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:23: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:24: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:25: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:26: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:27: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:28: error: variable max is already "
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n            mid\
    \ = temp;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphjo2il34.java:33)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2v7ww8d.java:17: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:18: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:19: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:20: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:21: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:22: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:23: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:24: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:25: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:26: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:27: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:28: error: variable max is already "
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long current = min;\n\
    \        long nextMax = max;\n        long nextMin = min;\n        while (current\
    \ < max) {\n            result.add(current);\n            current = nextMax;\n\
    \            nextMax = nextMin;\n            nextMin = lst.stream().filter(i ->\
    \ i < current).min().getAsLong();\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ilr1n3l.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp1ilr1n3l.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp1ilr1n3l.java:24: error: method min in interface Stream<T> cannot be applied\
    \ to given types;\n            nextMin = lst.stream().filter(i -> i < current).min().getAsLong();\n\
    \                                                           ^\n  required: Comparator<?\
    \ super Long>\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n  where T is a type-variable:\n    T extends Object\
    \ declared in interface Stream\n3 errors\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i < min) {\n \
    \               min = i;\n            }\n            if (i > max) {\n        \
    \        max = i;\n            }\n        }\n        result.add(min);\n      \
    \  result.add(max);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptebc0b5u.java:34)\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(max);\n                max = i;\n  \
    \          } else {\n                result.add(min);\n                min = i;\n\
    \                max = i;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu8ey3dml.java:37)\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n     \
    \   max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5mn40zay.java:93: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        for (long i : lst) {\n \
    \           if (i < min) {\n                min = i;\n            }\n        \
    \    if (i > max) {\n                max = i;\n            }\n        }\n    \
    \    long mid = min + (max - min) / 2;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                result.add(i);\n            } else if (i\
    \ > mid) {\n                result.add(max - i);\n            } else {\n     \
    \           result.add(min - i);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz5yutpdk.java:38)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        result.add(mid);\n        long cur = mid;\n      \
    \  long nextMax = lst.stream().max().getAsLong();\n        while (cur < nextMax)\
    \ {\n            result.add(cur);\n            cur += 1;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplkjj9i_u.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmplkjj9i_u.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmplkjj9i_u.java:20: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long nextMax = lst.stream().max().getAsLong();\n  \
    \                                 ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 3;\n        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n     \
    \   long mid6 = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid\
    \ * 8;\n        long mid9 = mid * 9;\n        long mid10 = mid * 10;\n       \
    \ long mid11 = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 =\
    \ mid * 13;\n        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n\
    \        long mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long\
    \ mid18 = mid * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid\
    \ * 20;\n        long mid21 = mid * 21;\n        long mid22 = mid * 22;\n    \
    \    long mid23 = mid * 23;\n        long mid24 = mid * 24;\n        long mid25\
    \ = mid * 25;\n        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n\
    \        long mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long\
    \ mid30 = mid * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid\
    \ * 32;\n        long mid33 = mid * 33;\n        long mid34 = mid * 34;\n    \
    \    long mid35 = mid * 35;\n        long mid36 = mid * 36;\n        long mid37\
    \ = mid * 37;\n        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n\
    \        long mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long\
    \ mid42 = mid * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid\
    \ * 44;\n        long mid45 = mid * 45;\n        long mid46 = mid * 46;\n    \
    \    long mid47 = mid * 47;\n        long mid48 = mid * 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl4gizf45.java:65: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long min2 = lst.stream().min(Comparator.naturalOrder()).getAsLong();\n\
    \        long max2 = lst.stream().max(Comparator.naturalOrder()).getAsLong();\n\
    \        long mid2 = min2 + (max2 - min2) / 2;\n        long min3 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max3 = lst.stream().max(Comparator.comparingLong(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long mid3 = min3 + (max3 - min3) / 2;\n        long min4 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max4 = lst.stream().max(Comparator.comparingLong(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long mid4 = min4 + (max4 - min4) / 2;\n        long min5 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max5 = lst.stream().max(Comparator.comparingLong(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long mid5 = min5 + (max5 - min5) / 2;\n        long min6 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max6 = lst.stream().max(Comparator.comparingLong(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long mid6 = min6 + (max6 - min6) / 2;\n        long min7 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max7 = lst.stream().max(Comparator.comparingLong(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long mid7 = min7 + (max7 - min7) / 2;\n        long min8 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max8 = lst.stream().max(Comparator.comparingLong(Long::longValue)).or\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppxx_xf2o.java:37: error: ';' expected\n        long max8 = lst.stream().max(Comparator.comparingLong(Long::longValue)).or\n\
    \                                                                            \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long middle\
    \ = min + (max - min) / 2;\n        long middle2 = min + (max - min) / 2;\n  \
    \      long middle3 = min + (max - min) / 2;\n        long middle4 = min + (max\
    \ - min) / 2;\n        long middle5 = min + (max - min) / 2;\n        long middle6\
    \ = min + (max - min) / 2;\n        long middle7 = min + (max - min) / 2;\n  \
    \      long middle8 = min + (max - min) / 2;\n        long middle9 = min + (max\
    \ - min) / 2;\n        long middle10 = min + (max - min) / 2;\n        long middle11\
    \ = min + (max - min) / 2;\n        long middle12 = min + (max - min) / 2;\n \
    \       long middle13 = min + (max - min) / 2;\n        long middle14 = min +\
    \ (max - min) / 2;\n        long middle15 = min + (max - min) / 2;\n        long\
    \ middle16 = min + (max - min) / 2;\n        long middle17 = min + (max - min)\
    \ / 2;\n        long middle18 = min + (max - min) / 2;\n        long middle19\
    \ = min + (max - min) / 2;\n        long middle20 = min + (max - min) / 2;\n \
    \       long middle21 = min + (max - min) / 2;\n        long middle22 = min +\
    \ (max - min) / 2;\n        long middle23 = min + (max - min) / 2;\n        long\
    \ middle24 = min + (max - min) / 2;\n        long middle25 = min + (max - min)\
    \ / 2;\n        long middle26 = min + (max - min) / 2;\n        long middle27\
    \ = min + (max - min) / 2;\n        long middle28 = min + (max - min) / 2;\n \
    \       long middle29 = min + (max - min) / 2;\n        long middle30 = min +\
    \ (max - min) / 2;\n        long middle31 = min + (max - min) / 2;\n        long\
    \ middle32 = min + (max - min) / 2;\n        long middle33 = min + (max - min)\
    \ / 2;\n        long middle34 = min + (max - min) / 2;\n        long middle35\
    \ = min + (max - min) / 2;\n        long middle36 = min + (max - min) / 2;\n \
    \       long middle37 = min + (max - min) / 2;\n        long middle38 = min +\
    \ (max - min) / 2;\n        long middle39 = min + (max - min) / 2;\n        long\
    \ middle40 = min + (max - min) / 2;\n        long middle41 = \n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprfvmu9jj.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(mid);\n                max = i;\n  \
    \          } else {\n                result.add(mid);\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprmoejevy.java:35)\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long middle = min\
    \ + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle + 2;\n        long middle4 = middle + 3;\n        long middle5 = middle\
    \ + 4;\n        long middle6 = middle + 5;\n        long middle7 = middle + 6;\n\
    \        long middle8 = middle + 7;\n        long middle9 = middle + 8;\n    \
    \    long middle10 = middle + 9;\n        long middle11 = middle + 10;\n     \
    \   long middle12 = middle + 11;\n        long middle13 = middle + 12;\n     \
    \   long middle14 = middle + 13;\n        long middle15 = middle + 14;\n     \
    \   long middle16 = middle + 15;\n        long middle17 = middle + 16;\n     \
    \   long middle18 = middle + 17;\n        long middle19 = middle + 18;\n     \
    \   long middle20 = middle + 19;\n        long middle21 = middle + 20;\n     \
    \   long middle22 = middle + 21;\n        long middle23 = middle + 22;\n     \
    \   long middle24 = middle + 23;\n        long middle25 = middle + 24;\n     \
    \   long middle26 = middle + 25;\n        long middle27 = middle + 26;\n     \
    \   long middle28 = middle + 27;\n        long middle29 = middle + 28;\n     \
    \   long middle30 = middle + 29;\n        long middle31 = middle + 30;\n     \
    \   long middle32 = middle + 31;\n        long middle33 = middle + 32;\n     \
    \   long middle34 = middle + 33;\n        long middle35 = middle + 34;\n     \
    \   long middle36 = middle + 35;\n        long middle37 = middle + 36;\n     \
    \   long middle38 = middle + 37;\n        long middle39 = middle + 38;\n     \
    \   long middle40 = middle + 39;\n        long middle41 = middle + 40;\n     \
    \   long middle42 = middle + 41;\n        long middle43 = middle + 42;\n     \
    \   long middle44 = middle + 43;\n        long middle45 = middle + 44;\n     \
    \   long middle46 = middle + 45;\n        long middle47 = middle + 46;\n     \
    \   long middle48 = middle + 47;\n        long middle49 = middle + 48;\n     \
    \   long middle50 = middle + 49;\n        long middle51 = middle \n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1cl9p7l.java:67: error: ';' expected\n        long middle51 =\
    \ middle \n                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        result.add(mid);\n        long curr = mid;\n     \
    \   for (long i : lst) {\n            if (i > mid) {\n                result.add(curr);\n\
    \                curr = i;\n            } else {\n                curr = i;\n\
    \            }\n        }\n        result.add(curr);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcu0kb5d3.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpcu0kb5d3.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n     \
    \   Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min)\
    \ / 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min +\
    \ (max - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8\
    \ = min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n     \
    \   Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kjj2wo6.java:54: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmp_kjj2wo6.java:54: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n            mid\
    \ = (mid + temp) / 2;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpobf7mbe7.java:33)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpphag212g.java:57: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.get(0);\n\
    \        Long max = lst.get(lst.size() - 1);\n        for (Long i : lst) {\n \
    \           if (i < min) {\n                result.add(min);\n               \
    \ min = i;\n            } else if (i > max) {\n                result.add(max);\n\
    \                max = i;\n            } else {\n                result.add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp93fqejl1.java:31)\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7wmi4vde.java:88: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min2 = lst.stream().min(Comparator.naturalOrder()).getAsLong();\n\
    \        long max2 = lst.stream().max(Comparator.naturalOrder()).getAsLong();\n\
    \        long min3 = lst.stream().min(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        long max3 = lst.stream().max(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        long min4 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        long max4 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        long min5 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        long max5 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        long min6 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        long max6 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        long min7 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        long max7 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue).thenComparing(Long::longValue)).getAsLong();\n\
    \        long min8 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4r77veog.java:29: error: ')' expected\n        long min8 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Long::longValue\n\
    \                                                                            \
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        result.add(mid);\n        min = mid;\n        max\
    \ = mid;\n        for (Long i : lst) {\n            if (i < mid) {\n         \
    \       result.add(i);\n                min = i;\n            } else if (i > mid)\
    \ {\n                result.add(mid);\n                max = i;\n            }\
    \ else {\n                result.add(min);\n                result.add(max);\n\
    \                min = max;\n                max = i;\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxf1tll93.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpxf1tll93.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long temp = min;\n\
    \        min = max;\n        max = temp;\n        for (long i : lst) {\n     \
    \       if (i < min) {\n                min = i;\n            }\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        temp\
    \ = min;\n        min = max;\n        max = temp;\n        for (long i : lst)\
    \ {\n            if (i < min) {\n                min = i;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        temp = min;\n        min = max;\n        max = temp;\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        temp = min;\n        min = max;\n        max = temp;\n    \
    \    for (long i : lst) {\n            if (i < min) {\n                min = i;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        temp = min;\n        min = max;\n        max = temp;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                min\
    \ = i;\n            }\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        temp = min;\n        min = max;\n        max\
    \ = temp;\n        for (long i : lst) {\n            if (i < min) {\n        \
    \        min = i;\n            }\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        temp = min;\n        min = max;\n\
    \        max = temp;\n        for (long i : lst) {\n            if (i < min) {\n\
    \                min = i;\n            }\n            if (i > max) {\n       \
    \         max = i;\n            }\n        }\n        temp = min;\n        min\
    \ = max;\n        max = temp;\n        for (long i : lst) {\n            if (i\
    \ < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        temp = min;\n\
    \        min = max;\n        max = temp;\n        for (long i : lst) {\n     \
    \       if (i < min) {\n                min = i;\n            }\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        temp\
    \ = min;\n        min = max;\n        max = temp;\n        for (long i : lst)\
    \ {\n            if (i < min) {\n                min = i;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkc8u3fr8.java:135: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min3 = lst.stream().min(Long::compareTo).get();\n        Long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max4 = lst.stream().max(Long::compareTo).get();\n        Long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min6 = lst.stream().min(Long::compareTo).get();\n        Long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max7 = lst.stream().max(Long::compareTo).get();\n        Long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min9 = lst.stream().min(Long::compareTo).get();\n        Long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max10 = lst.stream().max(Long::compareTo).get();\n        Long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min12 = lst.stream().min(Long::compareTo).get();\n        Long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max13 = lst.stream().max(Long::compareTo).get();\n        Long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min15 = lst.stream().min(Long::compareTo).get();\n        Long max15\
    \ = l\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0nqnnk5q.java:44: error: ';' expected\n        Long max15 = l\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long min2 = lst.stream().filter(i -> i < mid).min().getAsLong();\n\
    \        long max2 = lst.stream().filter(i -> i > mid).max().getAsLong();\n  \
    \      long min3 = lst.stream().filter(i -> i < min2).min().getAsLong();\n   \
    \     long max3 = lst.stream().filter(i -> i > max2).max().getAsLong();\n    \
    \    long min4 = lst.stream().filter(i -> i < min3).min().getAsLong();\n     \
    \   long max4 = lst.stream().filter(i -> i > max3).max().getAsLong();\n      \
    \  long min5 = lst.stream().filter(i -> i < min4).min().getAsLong();\n       \
    \ long max5 = lst.stream().filter(i -> i > max4).max().getAsLong();\n        long\
    \ min6 = lst.stream().filter(i -> i < min5).min().getAsLong();\n        long max6\
    \ = lst.stream().filter(i -> i > max5).max().getAsLong();\n        long min7 =\
    \ lst.stream().filter(i -> i < min6).min().getAsLong();\n        long max7 = lst.stream().filter(i\
    \ -> i > max6).max().getAsLong();\n        long min8 = lst.stream().filter(i ->\
    \ i < min7).min().getAsLong();\n        long max8 = lst.stream().filter(i -> i\
    \ > max7).max().getAsLong();\n        long min9 = lst.stream().filter(i -> i <\
    \ min8).min().getAsLong();\n        long max9 = lst.stream().filter(i -> i > max8).max().getAsLong();\n\
    \        long min10 = lst.stream().filter(i -> i < min9).min().getAsLong();\n\
    \        long max10 = lst.stream().filter(i -> i > max9).max().getAsLong();\n\
    \        long min11 = lst.stream().filter(i -> i < min10).min().getAsLong();\n\
    \        long max11 = lst.stream().filter(i -> i > max10).max().getAsLong();\n\
    \        long min12 = lst.stream().filter(i -> i < min11).min().getAsLong();\n\
    \        long max12 = lst.stream().filter(i -> i > max11).max().getAsLong();\n\
    \        long min13 = lst.stream().filter(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuc3hflcl.java:41: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ i;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphk_pebaj.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmphk_pebaj.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n     \
    \   Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min)\
    \ / 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min +\
    \ (max - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8\
    \ = min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n     \
    \   Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kjj2wo6.java:54: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmp_kjj2wo6.java:54: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n     \
    \   long mid3 = mid + (max - min) / 2;\n        long mid4 = mid + (max - min)\
    \ / 2;\n        long mid5 = mid + (max - min) / 2;\n        long mid6 = mid +\
    \ (max - min) / 2;\n        long mid7 = mid + (max - min) / 2;\n        long mid8\
    \ = mid + (max - min) / 2;\n        long mid9 = mid + (max - min) / 2;\n     \
    \   long mid10 = mid + (max - min) / 2;\n        long mid11 = mid + (max - min)\
    \ / 2;\n        long mid12 = mid + (max - min) / 2;\n        long mid13 = mid\
    \ + (max - min) / 2;\n        long mid14 = mid + (max - min) / 2;\n        long\
    \ mid15 = mid + (max - min) / 2;\n        long mid16 = mid + (max - min) / 2;\n\
    \        long mid17 = mid + (max - min) / 2;\n        long mid18 = mid + (max\
    \ - min) / 2;\n        long mid19 = mid + (max - min) / 2;\n        long mid20\
    \ = mid + (max - min) / 2;\n        long mid21 = mid + (max - min) / 2;\n    \
    \    long mid22 = mid + (max - min) / 2;\n        long mid23 = mid + (max - min)\
    \ / 2;\n        long mid24 = mid + (max - min) / 2;\n        long mid25 = mid\
    \ + (max - min) / 2;\n        long mid26 = mid + (max - min) / 2;\n        long\
    \ mid27 = mid + (max - min) / 2;\n        long mid28 = mid + (max - min) / 2;\n\
    \        long mid29 = mid + (max - min) / 2;\n        long mid30 = mid + (max\
    \ - min) / 2;\n        long mid31 = mid + (max - min) / 2;\n        long mid32\
    \ = mid + (max - min) / 2;\n        long mid33 = mid + (max - min) / 2;\n    \
    \    long mid34 = mid + (max - min) / 2;\n        long mid35 = mid + (max - min)\
    \ / 2;\n        long mid36 = mid + (max - min) / 2;\n        long mid37 = mid\
    \ + (max - min) / 2;\n        long mid38 = mid + (max - min) / 2;\n        long\
    \ mid39 = mid + (max - min) / 2;\n        long mid40\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp82tgs96g.java:56: error: ';' expected\n        long mid40\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrj4onhb.java:32)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long minValue = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue2 = lst.stream().min(Long::compareTo).get();\n        Long maxValue2\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue3 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue3 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue4 = lst.stream().min(Long::compareTo).get();\n        Long maxValue4\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue5 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue5 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue6 = lst.stream().min(Long::compareTo).get();\n        Long maxValue6\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue7 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue7 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue8 = lst.stream().min(Long::compareTo).get();\n        Long maxValue8\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue9 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue9 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue10 = lst.stream().min(Long::compareTo).get();\n        Long maxValue10\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue11 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue11 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue12 = lst.stream().min(Long::compareTo).get();\n        Long maxValue12\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue13 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue13 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue14 = lst.stream().min(Long::compareTo).get();\n        Long maxValue14\
    \ = lst.stream().max(Long::compareTo\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiuku4urg.java:42: error: ')' expected\n        Long maxValue14\
    \ = lst.stream().max(Long::compareTo\n                                       \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for(long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            while(temp < mid) {\n      \
    \          result.add(temp);\n                temp++;\n            }\n       \
    \     while(temp > mid) {\n                result.add(temp);\n               \
    \ temp--;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplxo2io11.java:33)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        long mid = min + ((max -\
    \ min) / 2);\n        long temp;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                temp = i;\n            } else if (i > mid) {\n\
    \                temp = mid;\n            } else {\n                temp = min;\n\
    \            }\n            result.add(temp);\n            mid = temp;\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi58u18vd.java:33)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2v7ww8d.java:17: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:18: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:19: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:20: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:21: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:22: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:23: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:24: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:25: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:26: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:27: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:28: error: variable max is already "
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long cur = min;\n        for (long i : lst)\
    \ {\n            if (i > mid) {\n                result.add(cur);\n          \
    \      cur = mid;\n                mid = min + (max - min) / 2;\n            }\n\
    \            mid = cur;\n            cur = i;\n        }\n        result.add(cur);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfe45l2lk.java:32)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ i;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphk_pebaj.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmphk_pebaj.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long cur = min;\n        long next = 0;\n  \
    \      boolean done = false;\n        while (!done) {\n            if (cur ==\
    \ mid) {\n                result.add(cur);\n                cur = next;\n    \
    \            next = 0;\n                done = true;\n            } else if (cur\
    \ > mid) {\n                next = cur;\n                cur = mid;\n        \
    \        mid = cur + (mid - cur) / 2;\n            } else {\n                next\
    \ = mid;\n                mid = cur + (mid - cur) / 2;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptker4ip2.java:39)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        long min = lst.get(0);\n        long max = lst.get(lst.size() - 1);\n\
    \        long mid = min + ((max - min) / 2);\n        long temp;\n        for\
    \ (long i : lst) {\n            if (i < mid) {\n                temp = i;\n  \
    \          } else {\n                temp = mid;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qxm921b.java:31)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min2 = lst.stream().min(Comparator.naturalOrder()).getAsLong();\n\
    \        long max2 = lst.stream().max(Comparator.naturalOrder()).getAsLong();\n\
    \        long min3 = lst.stream().min(Comparator.comparing(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max3 = lst.stream().max(Comparator.comparing(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min4 = lst.stream().min(Comparator.comparing(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max4 = lst.stream().max(Comparator.comparing(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min5 = lst.stream().min(Comparator.comparing(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max5 = lst.stream().max(Comparator.comparing(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min6 = lst.stream().min(Comparator.comparing(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max6 = lst.stream().max(Comparator.comparing(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min7 = lst.stream().min(Comparator.comparing(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max7 = lst.stream().max(Comparator.comparing(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min8 = lst.stream().min(Comparator.comparing(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max8 = lst.stream().max(Comparator.comparing(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min9 = lst.stream().min(Comparator.comparing(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max9 = lst.stream().max(Comparator.comparing(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min10 = lst.stream().min(Comparator.comparing(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max10 = lst.stream().max(Comparator.comparing(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min11 = l\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwganora.java:35: error: ';' expected\n        long min11 = l\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        long min = lst.get(0);\n        long max = lst.get(lst.size() - 1);\n\
    \        long mid = min + ((max - min) / 2);\n        long temp;\n        for\
    \ (long i : lst) {\n            if (i < mid) {\n                temp = i;\n  \
    \          } else if (i > mid) {\n                temp = mid;\n            } else\
    \ {\n                temp = mid;\n            }\n            result.add(temp);\n\
    \            mid = temp;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ephqsns.java:34)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp45hk_jyn.java:92: error: <identifier> expected\n        Collections.\n\
    \                    ^\n/tmp/tmp45hk_jyn.java:92: error: not a statement\n   \
    \     Collections.\n                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp15w1a29e.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp15w1a29e.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long middle = min\
    \ + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle + 2;\n        long middle4 = middle + 3;\n        long middle5 = middle\
    \ + 4;\n        long middle6 = middle + 5;\n        long middle7 = middle + 6;\n\
    \        long middle8 = middle + 7;\n        long middle9 = middle + 8;\n    \
    \    long middle10 = middle + 9;\n        long middle11 = middle + 10;\n     \
    \   long middle12 = middle + 11;\n        long middle13 = middle + 12;\n     \
    \   long middle14 = middle + 13;\n        long middle15 = middle + 14;\n     \
    \   long middle16 = middle + 15;\n        long middle17 = middle + 16;\n     \
    \   long middle18 = middle + 17;\n        long middle19 = middle + 18;\n     \
    \   long middle20 = middle + 19;\n        long middle21 = middle + 20;\n     \
    \   long middle22 = middle + 21;\n        long middle23 = middle + 22;\n     \
    \   long middle24 = middle + 23;\n        long middle25 = middle + 24;\n     \
    \   long middle26 = middle + 25;\n        long middle27 = middle + 26;\n     \
    \   long middle28 = middle + 27;\n        long middle29 = middle + 28;\n     \
    \   long middle30 = middle + 29;\n        long middle31 = middle + 30;\n     \
    \   long middle32 = middle + 31;\n        long middle33 = middle + 32;\n     \
    \   long middle34 = middle + 33;\n        long middle35 = middle + 34;\n     \
    \   long middle36 = middle + 35;\n        long middle37 = middle + 36;\n     \
    \   long middle38 = middle + 37;\n        long middle39 = middle + 38;\n     \
    \   long middle40 = middle + 39;\n        long middle41 = middle + 40;\n     \
    \   long middle42 = middle + 41;\n        long middle43 = middle + 42;\n     \
    \   long middle44 = middle + 43;\n        long middle45 = middle + 44;\n     \
    \   long middle46 = middle + 45;\n        long middle47 = middle + 46;\n     \
    \   long middle48 = middle + 47;\n        long middle49 = middle + 48;\n     \
    \   long middle50 = middle + 49;\n        long middle51 = middle \n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1cl9p7l.java:67: error: ';' expected\n        long middle51 =\
    \ middle \n                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(lst.size()-1);\n \
    \       Long min2 = lst.get(1);\n        Long max2 = lst.get(lst.size()-2);\n\
    \        Long min3 = lst.get(2);\n        Long max3 = lst.get(lst.size()-3);\n\
    \        Long min4 = lst.get(3);\n        Long max4 = lst.get(lst.size()-4);\n\
    \        Long min5 = lst.get(4);\n        Long max5 = lst.get(lst.size()-5);\n\
    \        Long min6 = lst.get(5);\n        Long max6 = lst.get(lst.size()-6);\n\
    \        Long min7 = lst.get(6);\n        Long max7 = lst.get(lst.size()-7);\n\
    \        Long min8 = lst.get(7);\n        Long max8 = lst.get(lst.size()-8);\n\
    \        Long min9 = lst.get(8);\n        Long max9 = lst.get(lst.size()-9);\n\
    \        Long min10 = lst.get(9);\n        Long max10 = lst.get(lst.size()-10);\n\
    \        Long min11 = lst.get(10);\n        Long max11 = lst.get(lst.size()-11);\n\
    \        Long min12 = lst.get(11);\n        Long max12 = lst.get(lst.size()-12);\n\
    \        Long min13 = lst.get(12);\n        Long max13 = lst.get(lst.size()-13);\n\
    \        Long min14 = lst.get(13);\n        Long max14 = lst.get(lst.size()-14);\n\
    \        Long min15 = lst.get(14);\n        Long max15 = lst.get(lst.size()-15);\n\
    \        Long min16 = lst.get(15);\n        Long max16 = lst.get(lst.size()-16);\n\
    \        Long min17 = lst.get(16);\n        Long max17 = lst.get(lst.size()-17);\n\
    \        Long min18 = lst.get(17);\n        Long max18 = lst.get(lst.size()-18);\n\
    \        Long min19 = lst.get(18);\n        Long max19 = lst.get(lst.size()-19);\n\
    \        Long min20 = lst.get(19);\n        Long max20 = lst.get(lst.size()-20);\n\
    \        Long min21 = lst.get(20);\n        Long max21 = lst.get(lst.size()-21);\n\
    \        Long min22 = lst.get(21);\n        Long max22 = lst.get(\n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1d9v81v.java:60: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for(long i : lst) {\n        \
    \    if(i < mid) {\n                temp = i;\n            } else {\n        \
    \        temp = mid;\n            }\n            result.add(temp);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpvyk75v.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpmpvyk75v.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpma4e_l9l.java:65: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(mid);\n                max = i;\n  \
    \          } else {\n                result.add(mid);\n                min = mid;\n\
    \                max = mid;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4so6a10.java:37)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbmb5ruyb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        for (long i : lst) {\n \
    \           if (i < min) {\n                min = i;\n            }\n        \
    \    if (i > max) {\n                max = i;\n            }\n        }\n    \
    \    long mid = min + ((max - min) / 2);\n        for (long i : lst) {\n     \
    \       if (i < mid) {\n                result.add(i);\n            } else if\
    \ (i > mid) {\n                result.add(max - i);\n            } else {\n  \
    \              result.add(min - i);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zm904ke.java:38)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min2\
    \ = lst.stream().min(Long::compare).get();\n        long max2 = lst.stream().max(Long::compare).get();\n\
    \        long min3 = lst.stream().min(Long::compare).get();\n        long max3\
    \ = lst.stream().max(Long::compare).get();\n        long min4 = lst.stream().min(Long::compare).get();\n\
    \        long max4 = lst.stream().max(Long::compare).get();\n        long min5\
    \ = lst.stream().min(Long::compare).get();\n        long max5 = lst.stream().max(Long::compare).get();\n\
    \        long min6 = lst.stream().min(Long::compare).get();\n        long max6\
    \ = lst.stream().max(Long::compare).get();\n        long min7 = lst.stream().min(Long::compare).get();\n\
    \        long max7 = lst.stream().max(Long::compare).get();\n        long min8\
    \ = lst.stream().min(Long::compare).get();\n        long max8 = lst.stream().max(Long::compare).get();\n\
    \        long min9 = lst.stream().min(Long::compare).get();\n        long max9\
    \ = lst.stream().max(Long::compare).get();\n        long min10 = lst.stream().min(Long::compare).get();\n\
    \        long max10 = lst.stream().max(Long::compare).get();\n        long min11\
    \ = lst.stream().min(Long::compare).get();\n        long max11 = lst.stream().max(Long::compare).get();\n\
    \        long min12 = lst.stream().min(Long::compare).get();\n        long max12\
    \ = lst.stream().max(Long::compare).get();\n        long min13 = lst.stream().min(Long::compare).get();\n\
    \        long max13 = lst.stream().max(Long::compare).get();\n        long min14\
    \ = lst.stream().min(Long::compare).get();\n        long max14 = lst.stream().max(Long::compare).get();\n\
    \        long min15 = lst.stream().min(Long::compare).get();\n        long max15\
    \ = lst.stream().max(Long::compare).get();\n        long min16 = lst.stream().min(Long::compare).get();\n\
    \        long max16 = lst.stream().max(Long::compare).get();\n        long min17\
    \ = lst.stream().min(Long::compare).get();\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5u4dr6ek.java:49: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long minValue = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue2 = lst.stream().min(Long::compare).get();\n        Long maxValue2 =\
    \ lst.stream().max(Long::compare).get();\n        Long minValue3 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue3 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue4 = lst.stream().min(Long::compare).get();\n        Long maxValue4 =\
    \ lst.stream().max(Long::compare).get();\n        Long minValue5 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue5 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue6 = lst.stream().min(Long::compare).get();\n        Long maxValue6 =\
    \ lst.stream().max(Long::compare).get();\n        Long minValue7 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue7 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue8 = lst.stream().min(Long::compare).get();\n        Long maxValue8 =\
    \ lst.stream().max(Long::compare).get();\n        Long minValue9 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue9 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue10 = lst.stream().min(Long::compare).get();\n        Long maxValue10\
    \ = lst.stream().max(Long::compare).get();\n        Long minValue11 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue11 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue12 = lst.stream().min(Long::compare).get();\n        Long maxValue12\
    \ = lst.stream().max(Long::compare).get();\n        Long minValue13 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue13 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue14 = lst.stream().min(Long::compare).get();\n        Long maxValue14\
    \ = lst.stream().max(Long::compare).get();\n        Long minValue15 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue15 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1x14d0o.java:45: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(mid);\n                max = i;\n  \
    \          } else {\n                result.add(mid);\n            }\n       \
    \ }\n        result.add(max);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdz4ohrbb.java:36)\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        long next = 0;\n\
    \        for (long i : lst) {\n            if (curr == mid) {\n              \
    \  result.add(next);\n                curr = next;\n                next = i;\n\
    \            } else {\n                next = i;\n            }\n        }\n \
    \       result.add(next);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplg1i2j0u.java:33)\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().get\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_e70sgz.java:53: error: ';' expected\n        long min = lst.stream().min().get\n\
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long middle\
    \ = min + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle2 + 1;\n        long middle4 = middle3 + 1;\n        long middle5 =\
    \ middle4 + 1;\n        long middle6 = middle5 + 1;\n        long middle7 = middle6\
    \ + 1;\n        long middle8 = middle7 + 1;\n        long middle9 = middle8 +\
    \ 1;\n        long middle10 = middle9 + 1;\n        long middle11 = middle10 +\
    \ 1;\n        long middle12 = middle11 + 1;\n        long middle13 = middle12\
    \ + 1;\n        long middle14 = middle13 + 1;\n        long middle15 = middle14\
    \ + 1;\n        long middle16 = middle15 + 1;\n        long middle17 = middle16\
    \ + 1;\n        long middle18 = middle17 + 1;\n        long middle19 = middle18\
    \ + 1;\n        long middle20 = middle19 + 1;\n        long middle21 = middle20\
    \ + 1;\n        long middle22 = middle21 + 1;\n        long middle23 = middle22\
    \ + 1;\n        long middle24 = middle23 + 1;\n        long middle25 = middle24\
    \ + 1;\n        long middle26 = middle25 + 1;\n        long middle27 = middle26\
    \ + 1;\n        long middle28 = middle27 + 1;\n        long middle29 = middle28\
    \ + 1;\n        long middle30 = middle29 + 1;\n        long middle31 = middle30\
    \ + 1;\n        long middle32 = middle31 + 1;\n        long middle33 = middle32\
    \ + 1;\n        long middle34 = middle33 + 1;\n        long middle35 = middle34\
    \ + 1;\n        long middle36 = middle35 + 1;\n        long middle37 = middle36\
    \ + 1;\n        long middle38 = middle37 + 1;\n        long middle39 = middle38\
    \ + 1;\n        long middle40 = middle39 + 1;\n        long middle41 = middle40\
    \ + 1;\n        long middle42 = middle41 + 1;\n        long middle43 = middle42\
    \ + 1;\n        long middle44 = middle43 + 1;\n        long middle45 = middle44\
    \ + 1;\n        long middle46 = middle45 + 1;\n        long middle47 = middle46\
    \ + 1;\n        long middle48 = middle47 + 1;\n        long middle49 = middle48\
    \ + 1;\n        long middle50 = middle49 + 1;\n        long middle51 = middle50\
    \ + 1;\n        long middle52 = middle51 + 1;\n        long middle53 = middle52\
    \ + 1;\n        \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnzzk04u1.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        for (long i : lst) {\n \
    \           if (i < min) {\n                min = i;\n            }\n        \
    \    if (i > max) {\n                max = i;\n            }\n        }\n    \
    \    long mid = min + ((max - min) / 2);\n        for (long i : lst) {\n     \
    \       if (i < mid) {\n                result.add(i);\n            } else if\
    \ (i > mid) {\n                result.add(mid - i);\n            } else {\n  \
    \              result.add(mid - i);\n                result.add(i);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0ubx3ix.java:39)\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5usffhgk.java:65: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        long mid = min + ((max -\
    \ min) / 2);\n        long temp;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                temp = i;\n            } else if (i > mid) {\n\
    \                temp = mid;\n            } else {\n                temp = min;\n\
    \            }\n            result.add(temp);\n            mid = temp + ((max\
    \ - min) / 2);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx47_qd4t.java:33)\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (Long i : lst) {\n            if\
    \ (i < min) min = i;\n            if (i > max) max = i;\n        }\n        long\
    \ mid = min + (max - min) / 2;\n        long left = min;\n        long right =\
    \ max;\n        while (left < right) {\n            while (left < right && lst.get(left)\
    \ < mid) left++;\n            while (left < right && lst.get(right) > mid) right--;\n\
    \            if (left < right) {\n                result.add(lst.get(left));\n\
    \                result.add(lst.get(right));\n                left++;\n      \
    \          right--;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcw6o1zvz.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            while (left < right && lst.get(left) < mid) left++;\n\
    \                                           ^\n/tmp/tmpcw6o1zvz.java:26: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ while (left < right && lst.get(right) > mid) right--;\n                    \
    \                       ^\n/tmp/tmpcw6o1zvz.java:28: error: incompatible types:\
    \ possible lossy conversion from long to int\n                result.add(lst.get(left));\n\
    \                                   ^\n/tmp/tmpcw6o1zvz.java:29: error: incompatible\
    \ types: possible lossy conversion from long to int\n                result.add(lst.get(right));\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n\
    \        Long mid = min + ((max - min) / 2);\n        Long temp;\n        for\
    \ (Long i : lst) {\n            if (i < mid) {\n                temp = i;\n  \
    \          } else if (i > mid) {\n                temp = mid;\n            } else\
    \ {\n                temp = min;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeb8iil6n.java:33)\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min2 = lst.stream().min(Comparator.naturalOrder()).getAsLong();\n\
    \        long max2 = lst.stream().max(Comparator.naturalOrder()).getAsLong();\n\
    \        long min3 = lst.stream().min(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        long max3 = lst.stream().max(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        long min4 = lst.stream().min(Comparator.comparingLong(Long::compareTo)).getAsLong();\n\
    \        long max4 = lst.stream().max(Comparator.comparingLong(Long::compareTo)).getAsLong();\n\
    \        long min5 = lst.stream().min(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long max5 = lst.stream().max(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long min6 = lst.stream().min(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long max6 = lst.stream().max(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long min7 = lst.stream().min(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long max7 = lst.stream().max(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long min8 = lst.stream().min(Comparator.comparingLong(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo).thenComparing(Long::compareTo)).getAsLong();\n\
    \        long max8 = lst.stream().max(Comparator.comparingLong(Long::compare\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvkqgla1.java:30: error: ')' expected\n        long max8 = lst.stream().max(Comparator.comparingLong(Long::compare\n\
    \                                                                           ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3\
    \ = min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n     \
    \   long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min)\
    \ / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min +\
    \ (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpphag212g.java:57: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrj4onhb.java:32)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n\
    \        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long mid49 = mid48\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6bveilw.java:65: error: ';' expected\n        long mid49 = mid48\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n            mid\
    \ = (mid + temp) / 2;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpobf7mbe7.java:33)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        long next = 0;\n\
    \        while(curr <= max) {\n            next = curr;\n            curr += mid;\n\
    \            result.add(next);\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfi2ucuy8.java:28)\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min2\
    \ = lst.stream().min(Long::compare).get();\n        long max2 = lst.stream().max(Long::compare).get();\n\
    \        long min3 = lst.stream().min(Long::compare).get();\n        long max3\
    \ = lst.stream().max(Long::compare).get();\n        long min4 = lst.stream().min(Long::compare).get();\n\
    \        long max4 = lst.stream().max(Long::compare).get();\n        long min5\
    \ = lst.stream().min(Long::compare).get();\n        long max5 = lst.stream().max(Long::compare).get();\n\
    \        long min6 = lst.stream().min(Long::compare).get();\n        long max6\
    \ = lst.stream().max(Long::compare).get();\n        long min7 = lst.stream().min(Long::compare).get();\n\
    \        long max7 = lst.stream().max(Long::compare).get();\n        long min8\
    \ = lst.stream().min(Long::compare).get();\n        long max8 = lst.stream().max(Long::compare).get();\n\
    \        long min9 = lst.stream().min(Long::compare).get();\n        long max9\
    \ = lst.stream().max(Long::compare).get();\n        long min10 = lst.stream().min(Long::compare).get();\n\
    \        long max10 = lst.stream().max(Long::compare).get();\n        long min11\
    \ = lst.stream().min(Long::compare).get();\n        long max11 = lst.stream().max(Long::compare).get();\n\
    \        long min12 = lst.stream().min(Long::compare).get();\n        long max12\
    \ = lst.stream().max(Long::compare).get();\n        long min13 = lst.stream().min(Long::compare).get();\n\
    \        long max13 = lst.stream().max(Long::compare).get();\n        long min14\
    \ = lst.stream().min(Long::compare).get();\n        long max14 = lst.stream().max(Long::compare).get();\n\
    \        long min15 = lst.stream().min(Long::compare).get();\n        long max15\
    \ = lst.stream().max(Long::compare).get();\n        long min16 = lst.stream().min(Long::compare).get();\n\
    \        long max16 = lst.stream().max(Long::compare).get();\n        long min17\
    \ = lst.stream().min(Long::compare).get();\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5u4dr6ek.java:49: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n\
    \        Long middle = lst.get(lst.size() / 2);\n        Long temp;\n        for\
    \ (Long i : lst) {\n            if (i < min) {\n                temp = min;\n\
    \                min = i;\n            } else if (i > max) {\n               \
    \ temp = max;\n                max = i;\n            } else if (i == middle) {\n\
    \                temp = middle;\n                middle = i;\n            } else\
    \ {\n                temp = i;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzt8l17tx.java:38)\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrj4onhb.java:32)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(mid);\n                max = i;\n  \
    \          } else {\n                result.add(mid);\n                min = mid;\n\
    \                max = mid;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx5tpyr6.java:37)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n            mid\
    \ = (mid + temp) / 2;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpobf7mbe7.java:33)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpma4e_l9l.java:65: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrj4onhb.java:32)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long middle = min\
    \ + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle + 2;\n        long middle4 = middle + 3;\n        long middle5 = middle\
    \ + 4;\n        long middle6 = middle + 5;\n        long middle7 = middle + 6;\n\
    \        long middle8 = middle + 7;\n        long middle9 = middle + 8;\n    \
    \    long middle10 = middle + 9;\n        long middle11 = middle + 10;\n     \
    \   long middle12 = middle + 11;\n        long middle13 = middle + 12;\n     \
    \   long middle14 = middle + 13;\n        long middle15 = middle + 14;\n     \
    \   long middle16 = middle + 15;\n        long middle17 = middle + 16;\n     \
    \   long middle18 = middle + 17;\n        long middle19 = middle + 18;\n     \
    \   long middle20 = middle + 19;\n        long middle21 = middle + 20;\n     \
    \   long middle22 = middle + 21;\n        long middle23 = middle + 22;\n     \
    \   long middle24 = middle + 23;\n        long middle25 = middle + 24;\n     \
    \   long middle26 = middle + 25;\n        long middle27 = middle + 26;\n     \
    \   long middle28 = middle + 27;\n        long middle29 = middle + 28;\n     \
    \   long middle30 = middle + 29;\n        long middle31 = middle + 30;\n     \
    \   long middle32 = middle + 31;\n        long middle33 = middle + 32;\n     \
    \   long middle34 = middle + 33;\n        long middle35 = middle + 34;\n     \
    \   long middle36 = middle + 35;\n        long middle37 = middle + 36;\n     \
    \   long middle38 = middle + 37;\n        long middle39 = middle + 38;\n     \
    \   long middle40 = middle + 39;\n        long middle41 = middle + 40;\n     \
    \   long middle42 = middle + 41;\n        long middle43 = middle + 42;\n     \
    \   long middle44 = middle + 43;\n        long middle45 = middle + 44;\n     \
    \   long middle46 = middle + 45;\n        long middle47 = middle + 46;\n     \
    \   long middle48 = middle + 47;\n        long middle49 = middle + 48;\n     \
    \   long middle50 = middle + 49;\n        long middle51 = middle \n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1cl9p7l.java:67: error: ';' expected\n        long middle51 =\
    \ middle \n                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        Long mid2 = mid + (max - min) / 2;\n     \
    \   Long mid3 = mid2 + (max - min) / 2;\n        Long mid4 = mid3 + (max - min)\
    \ / 2;\n        Long mid5 = mid4 + (max - min) / 2;\n        Long mid6 = mid5\
    \ + (max - min) / 2;\n        Long mid7 = mid6 + (max - min) / 2;\n        Long\
    \ mid8 = mid7 + (max - min) / 2;\n        Long mid9 = mid8 + (max - min) / 2;\n\
    \        Long mid10 = mid9 + (max - min) / 2;\n        Long mid11 = mid10 + (max\
    \ - min) / 2;\n        Long mid12 = mid11 + (max - min) / 2;\n        Long mid13\
    \ = mid12 + (max - min) / 2;\n        Long mid14 = mid13 + (max - min) / 2;\n\
    \        Long mid15 = mid14 + (max - min) / 2;\n        Long mid16 = mid15 + (max\
    \ - min) / 2;\n        Long mid17 = mid16 + (max - min) / 2;\n        Long mid18\
    \ = mid17 + (max - min) / 2;\n        Long mid19 = mid18 + (max - min) / 2;\n\
    \        Long mid20 = mid19 + (max - min) / 2;\n        Long mid21 = mid20 + (max\
    \ - min) / 2;\n        Long mid22 = mid21 + (max - min) / 2;\n        Long mid23\
    \ = mid22 + (max - min) / 2;\n        Long mid24 = mid23 + (max - min) / 2;\n\
    \        Long mid25 = mid24 + (max - min) / 2;\n        Long mid26 = mid25 + (max\
    \ - min) / 2;\n        Long mid27 = mid26 + (max - min) / 2;\n        Long mid28\
    \ = mid27 + (max - min) / 2;\n        Long mid29 = mid28 + (max - min) / 2;\n\
    \        Long mid30 = mid29 + (max - min) / 2;\n        Long mid31 = mid30 + (max\
    \ - min) / 2;\n        Long mid32 = mid31 + (max - min) / 2;\n        Long mid33\
    \ = mid32 + (max - min) / 2;\n        Long mid34 = mid33 + (max - min) / 2;\n\
    \        Long mid35 = mid34 + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdsq4q_p.java:52: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < min) min =\
    \ i;\n            if (i > max) max = i;\n            result.add(i);\n        }\n\
    \        result.add(min);\n        result.add(max);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr3h391v_.java:31)\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i < min) {\n \
    \               min = i;\n            }\n            if (i > max) {\n        \
    \        max = i;\n            }\n            result.add(i);\n        }\n    \
    \    result.add(min);\n        result.add(max);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0yc5sy_j.java:35)\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp = mid;\n        long temp2 = mid;\n\
    \        long temp3 = mid;\n        long temp4 = mid;\n        long temp5 = mid;\n\
    \        long temp6 = mid;\n        long temp7 = mid;\n        long temp8 = mid;\n\
    \        long temp9 = mid;\n        long temp10 = mid;\n        long temp11 =\
    \ mid;\n        long temp12 = mid;\n        long temp13 = mid;\n        long temp14\
    \ = mid;\n        long temp15 = mid;\n        long temp16 = mid;\n        long\
    \ temp17 = mid;\n        long temp18 = mid;\n        long temp19 = mid;\n    \
    \    long temp20 = mid;\n        long temp21 = mid;\n        long temp22 = mid;\n\
    \        long temp23 = mid;\n        long temp24 = mid;\n        long temp25 =\
    \ mid;\n        long temp26 = mid;\n        long temp27 = mid;\n        long temp28\
    \ = mid;\n        long temp29 = mid;\n        long temp30 = mid;\n        long\
    \ temp31 = mid;\n        long temp32 = mid;\n        long temp33 = mid;\n    \
    \    long temp34 = mid;\n        long temp35 = mid;\n        long temp36 = mid;\n\
    \        long temp37 = mid;\n        long temp38 = mid;\n        long temp39 =\
    \ mid;\n        long temp40 = mid;\n        long temp41 = mid;\n        long temp42\
    \ = mid;\n        long temp43 = mid;\n        long temp44 = mid;\n        long\
    \ temp45 = mid;\n        long temp46 = mid;\n        long temp47 = mid;\n    \
    \    long temp48 = mid;\n        long temp49 = mid;\n        long temp50 = mid;\n\
    \        long temp51 = mid;\n        long temp52 = mid;\n        long temp53 =\
    \ mid;\n        long temp54 = mid;\n        long temp55 = mid;\n        long temp56\
    \ = mid;\n        long temp57 = mid;\n        long temp58 = mid;\n        long\
    \ temp59 = mid;\n        long temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxdi7wxr.java:77: error: ';' expected\n        long temp\n    \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long curr = min;\n        long next = 0;\n       \
    \ for (long i : lst) {\n            if (i == mid) {\n                result.add(curr);\n\
    \                curr = next;\n                next = 0;\n            } else if\
    \ (i == max) {\n                result.add(curr);\n                curr = next;\n\
    \                next = 0;\n            } else if (i == min) {\n             \
    \   result.add(curr);\n                curr = next;\n                next = 0;\n\
    \            } else {\n                next = i;\n            }\n        }\n \
    \       result.add(curr);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuo8ss5hr.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpuo8ss5hr.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        result.addAll(lst);\n\
    \        result.add(min);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbjc31ia.java:24)\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ i;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphk_pebaj.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmphk_pebaj.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976355
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n\
    \        Long mid = min + ((max - min) / 2);\n        Long mid2 = min + ((max\
    \ - min) / 2);\n        Long mid3 = min + ((max - min) / 2);\n        Long mid4\
    \ = min + ((max - min) / 2);\n        Long mid5 = min + ((max - min) / 2);\n \
    \       Long mid6 = min + ((max - min) / 2);\n        Long mid7 = min + ((max\
    \ - min) / 2);\n        Long mid8 = min + ((max - min) / 2);\n        Long mid9\
    \ = min + ((max - min) / 2);\n        Long mid10 = min + ((max - min) / 2);\n\
    \        Long mid11 = min + ((max - min) / 2);\n        Long mid12 = min + ((max\
    \ - min) / 2);\n        Long mid13 = min + ((max - min) / 2);\n        Long mid14\
    \ = min + ((max - min) / 2);\n        Long mid15 = min + ((max - min) / 2);\n\
    \        Long mid16 = min + ((max - min) / 2);\n        Long mid17 = min + ((max\
    \ - min) / 2);\n        Long mid18 = min + ((max - min) / 2);\n        Long mid19\
    \ = min + ((max - min) / 2);\n        Long mid20 = min + ((max - min) / 2);\n\
    \        Long mid21 = min + ((max - min) / 2);\n        Long mid22 = min + ((max\
    \ - min) / 2);\n        Long mid23 = min + ((max - min) / 2);\n        Long mid24\
    \ = min + ((max - min) / 2);\n        Long mid25 = min + ((max - min) / 2);\n\
    \        Long mid26 = min + ((max - min) / 2);\n        Long mid27 = min + ((max\
    \ - min) / 2);\n        Long mid28 = min + ((max - min) / 2);\n        Long mid29\
    \ = min + ((max - min) / 2);\n        Long mid30 = min + ((max - min) / 2);\n\
    \        Long mid31 = min + ((max - min) / 2);\n        Long mid32 = min + ((max\
    \ - min) / 2);\n        Long mid33 = min + ((max - min) / 2);\n        Long mid34\
    \ = min + ((max - min) / 2);\n        Long mid35 = min + ((max - min) / 2);\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp110z78ae.java:53: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        Long current = mid;\n\
    \        Long nextMax = mid;\n        for (Long i : lst) {\n            if (i.compareTo(nextMax)\
    \ > 0) {\n                result.add(current);\n                current = i;\n\
    \                nextMax = i;\n            } else if (i.compareTo(nextMax) ==\
    \ 0) {\n                current = i;\n                nextMax = i;\n         \
    \   }\n        }\n        result.add(current);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzquvh2i_.java:35)\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long current = min;\n\
    \        long nextMax = max;\n        long nextMin = min;\n        while(current\
    \ != nextMax) {\n            result.add(current);\n            nextMax = nextMax\
    \ + 1;\n            current = nextMax;\n        }\n        current = min;\n  \
    \      while(current != nextMin) {\n            result.add(current);\n       \
    \     nextMin = nextMin - 1;\n            current = nextMin;\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkbx_9ufg.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpkbx_9ufg.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min2 = lst.stream().min(Comparator.naturalOrder()).getAsLong();\n\
    \        long max2 = lst.stream().max(Comparator.naturalOrder()).getAsLong();\n\
    \        long min3 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(Long.MAX_VALUE);\n\
    \        long max3 = lst.stream().max(Comparator.comparingLong(Long::longValue)).orElse(Long.MIN_VALUE);\n\
    \        long min4 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Comparator.naturalOrder()))\n\
    \                .orElse(Long.MAX_VALUE);\n        long max4 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Comparator.naturalOrder()))\n\
    \                .orElse(Long.MIN_VALUE);\n        long min5 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Comparator.naturalOrder())\n\
    \                .thenComparing(Comparator.naturalOrder()))\n                .orElse(Long.MAX_VALUE);\n\
    \        long max5 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Comparator.naturalOrder())\n\
    \                .thenComparing(Comparator.naturalOrder()))\n                .orElse(Long.MIN_VALUE);\n\
    \        long min6 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Comparator.naturalOrder())\n\
    \                .thenComparing(Comparator.naturalOrder()).thenComparing(Comparator.naturalOrder()))\n\
    \                .orElse(Long.MAX_VALUE);\n        long max6 = lst.stream().max(Comparator.comparingLong(Long::longValue).thenComparing(Comparator.naturalOrder())\n\
    \                .thenComparing(Comparator.naturalOrder()).thenComparing(Comparator.naturalOrder()))\n\
    \                .orElse(Long.MIN_VALUE);\n        long min7 = lst.stream().min(Comparator.comparingLong(Long::longValue).thenComparing(Comparator.naturalOrder())\n\
    \                .thenComparing(Comparator.naturalOrder()).thenComparing(Comparator.naturalOrder()).thenComparing(Comparator.naturalOrder()))\n\
    \                .orElse(Long.MAX_VALUE);\n        long max7 = lst.stream().\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiopl8bmq.java:40: error: <identifier> expected\n        long max7\
    \ = lst.stream().\n                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5usffhgk.java:65: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        for(long i : lst) {\n            result.add(i);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfi9kw7n7.java:22)\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(mid);\n                max = i;\n  \
    \          } else {\n                result.add(mid);\n                min = mid;\n\
    \                max = mid;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4so6a10.java:37)\n"
  stdout: ''
  timestamp: 1659976356
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min =\
    \ lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2v7ww8d.java:17: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:18: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:19: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:20: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:21: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:22: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:23: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:24: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:25: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:26: error: variable max is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().max(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:27: error: variable min is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().min(Long::compare).get();\n\
    \             ^\n/tmp/tmpw2v7ww8d.java:28: error: variable max is already "
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long current = min;\n\
    \        long nextMax = max;\n        long nextMin = min;\n        long nextCurrent\
    \ = current;\n        long nextNextMax = nextMax;\n        long nextNextMin =\
    \ nextMin;\n        long nextNextCurrent = nextCurrent;\n        long nextNextNextMax\
    \ = nextNextMax;\n        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurrent\
    \ = nextNextCurrent;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurrent\
    \ = nextNextNextCurrent;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurrent\
    \ = nextNextNextNextCurrent;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n      \
    \  long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextNextMin = next\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo8rykrd.java:46: error: ';' expected\n        long nextNextNextNextNextNextNextNextNextMin\
    \ = next\n                                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else {\n      \
    \          temp = mid;\n            }\n            result.add(temp);\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprgp0h1d9.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmprgp0h1d9.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n\
    \        Long mid = min + ((max - min) / 2);\n        for (Long i : lst) {\n \
    \           if (i < mid) {\n                result.add(i);\n            } else\
    \ if (i > mid) {\n                result.add(mid);\n            } else {\n   \
    \             result.add(mid);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpacogki33.java:31)\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        for (long i : lst) {\n \
    \           if (i < min) {\n                min = i;\n            } else if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        long mid\
    \ = min + ((max - min) / 2);\n        for (long i : lst) {\n            if (i\
    \ < mid) {\n                result.add(i);\n            } else if (i > mid) {\n\
    \                result.add(mid - i);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmuyo5_nx.java:35)\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxukx8fe.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpfxukx8fe.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5usffhgk.java:65: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long mid = min\
    \ + (max - min) / 2;\n        for (long i : lst) {\n            if (i < mid) {\n\
    \                result.add(i);\n            } else if (i > mid) {\n         \
    \       result.add(mid - i);\n            } else {\n                result.add(mid\
    \ - i);\n                result.add(i);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm92bt20x.java:39)\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2\
    \ / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n       \
    \ long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7\
    \ / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n      \
    \  long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13\
    \ = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 /\
    \ 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n     \
    \   long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid49 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcpaextc3.java:66: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeusqjtb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 3;\n        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n     \
    \   long mid6 = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid\
    \ * 8;\n        long mid9 = mid * 9;\n        long mid10 = mid * 10;\n       \
    \ long mid11 = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 =\
    \ mid * 13;\n        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n\
    \        long mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long\
    \ mid18 = mid * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid\
    \ * 20;\n        long mid21 = mid * 21;\n        long mid22 = mid * 22;\n    \
    \    long mid23 = mid * 23;\n        long mid24 = mid * 24;\n        long mid25\
    \ = mid * 25;\n        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n\
    \        long mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long\
    \ mid30 = mid * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid\
    \ * 32;\n        long mid33 = mid * 33;\n        long mid34 = mid * 34;\n    \
    \    long mid35 = mid * 35;\n        long mid36 = mid * 36;\n        long mid37\
    \ = mid * 37;\n        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n\
    \        long mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long\
    \ mid42 = mid * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid\
    \ * 44;\n        long mid45 = mid * 45;\n        long mid46 = mid * 46;\n    \
    \    long mid47 = mid * 47;\n        long mid48 = mid * 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl4gizf45.java:65: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long middle\
    \ = min + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle + 2;\n        long middle4 = middle + 3;\n        long middle5 = middle\
    \ + 4;\n        long middle6 = middle + 5;\n        long middle7 = middle + 6;\n\
    \        long middle8 = middle + 7;\n        long middle9 = middle + 8;\n    \
    \    long middle10 = middle + 9;\n        long middle11 = middle + 10;\n     \
    \   long middle12 = middle + 11;\n        long middle13 = middle + 12;\n     \
    \   long middle14 = middle + 13;\n        long middle15 = middle + 14;\n     \
    \   long middle16 = middle + 15;\n        long middle17 = middle + 16;\n     \
    \   long middle18 = middle + 17;\n        long middle19 = middle + 18;\n     \
    \   long middle20 = middle + 19;\n        long middle21 = middle + 20;\n     \
    \   long middle22 = middle + 21;\n        long middle23 = middle + 22;\n     \
    \   long middle24 = middle + 23;\n        long middle25 = middle + 24;\n     \
    \   long middle26 = middle + 25;\n        long middle27 = middle + 26;\n     \
    \   long middle28 = middle + 27;\n        long middle29 = middle + 28;\n     \
    \   long middle30 = middle + 29;\n        long middle31 = middle + 30;\n     \
    \   long middle32 = middle + 31;\n        long middle33 = middle + 32;\n     \
    \   long middle34 = middle + 33;\n        long middle35 = middle + 34;\n     \
    \   long middle36 = middle + 35;\n        long middle37 = middle + 36;\n     \
    \   long middle38 = middle + 37;\n        long middle39 = middle + 38;\n     \
    \   long middle40 = middle + 39;\n        long middle41 = middle + 40;\n     \
    \   long middle42 = middle + 41;\n        long middle43 = middle + 42;\n     \
    \   long middle44 = middle + 43;\n        long middle45 = middle + 44;\n     \
    \   long middle46 = middle + 45;\n        long middle47 = middle + 46;\n     \
    \   long middle48 = middle + 47;\n        long middle49 = middle + 48;\n     \
    \   long middle50 = middle + 49;\n        long \n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc0jh6mxd.java:67: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpc0jh6mxd.java:67: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976353
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(mid);\n                max = i;\n  \
    \          } else {\n                result.add(mid);\n                min = mid;\n\
    \                max = mid;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx5tpyr6.java:37)\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(lst.size() - 1);\n\
    \        Long min2 = lst.get(1);\n        Long max2 = lst.get(lst.size() - 2);\n\
    \        Long min3 = lst.get(2);\n        Long max3 = lst.get(lst.size() - 3);\n\
    \        Long min4 = lst.get(3);\n        Long max4 = lst.get(lst.size() - 4);\n\
    \        Long min5 = lst.get(4);\n        Long max5 = lst.get(lst.size() - 5);\n\
    \        Long min6 = lst.get(5);\n        Long max6 = lst.get(lst.size() - 6);\n\
    \        Long min7 = lst.get(6);\n        Long max7 = lst.get(lst.size() - 7);\n\
    \        Long min8 = lst.get(7);\n        Long max8 = lst.get(lst.size() - 8);\n\
    \        Long min9 = lst.get(8);\n        Long max9 = lst.get(lst.size() - 9);\n\
    \        Long min10 = lst.get(9);\n        Long max10 = lst.get(lst.size() - 10);\n\
    \        Long min11 = lst.get(10);\n        Long max11 = lst.get(lst.size() -\
    \ 11);\n        Long min12 = lst.get(11);\n        Long max12 = lst.get(lst.size()\
    \ - 12);\n        Long min13 = lst.get(12);\n        Long max13 = lst.get(lst.size()\
    \ - 13);\n        Long min14 = lst.get(13);\n        Long max14 = lst.get(lst.size()\
    \ - 14);\n        Long min15 = lst.get(14);\n        Long max15 = lst.get(lst.size()\
    \ - 15);\n        Long min16 = lst.get(15);\n        Long max16 = lst.get(lst.size()\
    \ - 16);\n        Long min17 = lst.get(16);\n        Long max17 = lst.get(lst.size()\
    \ - 17);\n        Long min18 = lst.get(17);\n        Long max18 = lst.get(lst.size()\
    \ - 18);\n        Long min19 = lst.get(18);\n        Long max19 = lst.get(lst.size()\
    \ - 19);\n        Long min20 = lst.get(19);\n        Long max20 = lst.get(lst.size()\
    \ - 20);\n        Long min21 = lst.get(20);\n        Long max21 = lst.get(lst.size()\
    \ - 21);\n        Long min22 = lst.get(21);\n        Long \n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtnc9q1p.java:59: error: not a statement\n        Long \n     \
    \   ^\n/tmp/tmprtnc9q1p.java:59: error: ';' expected\n        Long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n            mid = (mid +\
    \ temp) / 2;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwaf8y92s.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpwaf8y92s.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        result.add(mid);\n        long cur = mid;\n      \
    \  long next = mid;\n        long prev;\n        do {\n            prev = cur;\n\
    \            cur = next;\n            next = cur + (max - cur) / 2;\n        \
    \    result.add(next);\n        } while (next < max);\n        result.add(min);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnm0du5mr.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpnm0du5mr.java:16: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj62n43jo.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976352
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 3;\n        long mid4 = mid * 4;\n        long mid5 = mid * 5;\n     \
    \   long mid6 = mid * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid\
    \ * 8;\n        long mid9 = mid * 9;\n        long mid10 = mid * 10;\n       \
    \ long mid11 = mid * 11;\n        long mid12 = mid * 12;\n        long mid13 =\
    \ mid * 13;\n        long mid14 = mid * 14;\n        long mid15 = mid * 15;\n\
    \        long mid16 = mid * 16;\n        long mid17 = mid * 17;\n        long\
    \ mid18 = mid * 18;\n        long mid19 = mid * 19;\n        long mid20 = mid\
    \ * 20;\n        long mid21 = mid * 21;\n        long mid22 = mid * 22;\n    \
    \    long mid23 = mid * 23;\n        long mid24 = mid * 24;\n        long mid25\
    \ = mid * 25;\n        long mid26 = mid * 26;\n        long mid27 = mid * 27;\n\
    \        long mid28 = mid * 28;\n        long mid29 = mid * 29;\n        long\
    \ mid30 = mid * 30;\n        long mid31 = mid * 31;\n        long mid32 = mid\
    \ * 32;\n        long mid33 = mid * 33;\n        long mid34 = mid * 34;\n    \
    \    long mid35 = mid * 35;\n        long mid36 = mid * 36;\n        long mid37\
    \ = mid * 37;\n        long mid38 = mid * 38;\n        long mid39 = mid * 39;\n\
    \        long mid40 = mid * 40;\n        long mid41 = mid * 41;\n        long\
    \ mid42 = mid * 42;\n        long mid43 = mid * 43;\n        long mid44 = mid\
    \ * 44;\n        long mid45 = mid * 45;\n        long mid46 = mid * 46;\n    \
    \    long mid47 = mid * 47;\n        long mid48 = mid * 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl4gizf45.java:65: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976354
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(lst.size() - 1);\n        long mid = min + (max -\
    \ min) / 2;\n        long temp;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                temp = i;\n            } else if (i > mid) {\n\
    \                temp = mid;\n            } else {\n                temp = mid;\n\
    \            }\n            result.add(temp);\n            mid = temp;\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp674f0frd.java:33)\n"
  stdout: ''
  timestamp: 1659976358
