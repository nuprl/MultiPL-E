name: HumanEval_87_get_row
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
  \    // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>>\
  \ lst, long x) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(getRow((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long,\
  \ Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l,\
  \ 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l),\
  \ (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long,\
  \ Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l,\
  \ 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l),\
  \ (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n\
  \    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long,\
  \ Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l,\
  \ 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l),\
  \ (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long,\
  \ Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l,\
  \ 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l),\
  \ (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())),\
  \ (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))),\
  \ (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()),\
  \ (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new\
  \ ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n    \
    \    ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col = new\
    \ ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.stream().filter(e\
    \ -> e == x).findFirst().ifPresent(row::add);\n            col.stream().filter(e\
    \ -> e == x).findFirst().ifPresent(col::add);\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        for (long r : row) {\n            for\
    \ (long c : col) {\n                res.add(new Pair<>(r, c));\n            }\n\
    \        }\n        return res;", "        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row36 = new ArrayList<>();\n        ArrayList<Pair<Long, Long", "   \
    \     ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \               col.add(0);\n                } else {\n                    row.add(1);\n\
    \                    col.add(1);\n                }\n            });\n       \
    \ }\n        Collections.sort(row);\n        Collections.sort(col);\n        for\
    \ (Long i : row) {\n            for (Long j : col) {\n                if (i ==\
    \ j) {\n                    res.add(new Pair<Long, Long>(i, j));\n           \
    \     }\n            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.forEach(x -> {\n                col.add(x);\n\
    \            });\n            Collections.sort(col);\n            row.forEach(x\
    \ -> {\n                if (x == x) {\n                    result.add(new Pair<>(row.get(0),\
    \ col.get(0)));\n                }\n            });\n            row.clear();\n\
    \            col.clear();\n        }\n        Collections.sort(result);\n    \
    \    return result;", "        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row4 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row8 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row36\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(e\
    \ -> {\n                if (e == x) {\n                    result.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                }\n            });\n        }\n        Collections.sort(result);\n\
    \        for (Pair<Long, Long> e : result) {\n            column.add(new Pair<>(e.getValue(),\
    \ e.getKey()));\n        }\n        Collections.sort(column);\n        for (Pair<Long,\
    \ Long> e : column) {\n            row.add(new Pair<>(e.getValue(), e.getKey()));\n\
    \        }\n        Collections.sort(row);\n        return row;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().filter(e -> e == x).findFirst().ifPresent(r\
    \ -> {\n                result.add(new Pair<>(r.get(0), r.get(1)));\n        \
    \    });\n        }\n        Collections.sort(result);\n        Collections.sort(row,\
    \ Comparator.reverseOrder());\n        Collections.sort(col, Comparator.reverseOrder());\n\
    \        for (Pair<Long, Long> pair : result) {\n            result.add(new Pair<>(pair.getLeft(),\
    \ pair.getRight()));\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n            col.stream().forEach(x -> {\n                res.add(new\
    \ Pair<>(row.get(0), x));\n            });\n            row.clear();\n       \
    \     col.clear();\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            for (Long y : row) {\n\
    \                if (y == x) {\n                    result.add(new Pair<>(row.size(),\
    \ row.size() - 1));\n                    row.add(new Pair<>(row.size(), row.size()\
    \ - 1));\n                    col.add(new Pair<>(row.size() - 1, row.size()));\n\
    \                }\n            }\n        }\n        Collections.sort(result);\n\
    \        Collections.sort(row);\n        Collections.sort(col);\n        result.addAll(row);\n\
    \        result.addAll(col);\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowCol = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowColCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> res =\
    \ new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n     \
    \   ArrayList<Long> col = new ArrayList<>();\n        for(ArrayList<Long> row\
    \ : lst) {\n            row.forEach(x -> {\n                col.add(x);\n    \
    \        });\n            col.forEach(x -> {\n                res.add(new Pair<>(row.get(0),\
    \ x));\n            });\n            row.clear();\n            col.clear();\n\
    \        }\n        return res;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n   \
    \     ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long> row\
    \ : lst) {\n            row.stream().forEach(x -> {\n                row.add(x,\
    \ x);\n            });\n            Collections.sort(row);\n            row.stream().forEach(x\
    \ -> {\n                col.add(x);\n            });\n            Collections.sort(col);\n\
    \            col.stream().forEach(x -> {\n                result.add(new Pair<>(row.get(0),\
    \ col.get(x)));\n            });\n        }\n        return result;", "      \
    \  ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().filter(e\
    \ -> e == x).findFirst().ifPresent(e -> {\n                res.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                row.remove(0);\n                col.remove(0);\n\
    \            });\n        }\n        Collections.sort(res);\n        Collections.sort(row,\
    \ Collections.reverseOrder());\n        Collections.sort(col, Collections.reverseOrder());\n\
    \        for (Pair<Long, Long> pair : res) {\n            row.add(pair.getFirst());\n\
    \            col.add(pair.getSecond());\n        }\n        return res;", "  \
    \      ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for(ArrayList<Long> row : lst) {\n            row.stream().filter(e ->\
    \ e == x).findFirst().ifPresent(e -> {\n                res.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                row.remove(0);\n                col.remove(0);\n\
    \            });\n        }\n        Collections.sort(res);\n        Collections.sort(row,\
    \ Collections.reverseOrder());\n        Collections.sort(col, Collections.reverseOrder());\n\
    \        res.add(new Pair<>(row.get(0), col.get(0)));\n        return res;", " \
    \       ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        ArrayList<Long> rowCol = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowColPair = new ArrayList<>();\n        for (ArrayList<Long> row : lst)\
    \ {\n            row.stream().forEach(x -> {\n                row.add(x);\n  \
    \          });\n            row.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n            row.stream().forEach(x -> {\n                rowCol.add(x);\n\
    \            });\n            row.stream().forEach(x -> {\n                rowColPair.add(new\
    \ Pair<>(x, col));\n            });\n        }\n        Collections.sort(rowColPair);\n\
    \        for (Pair<Long, Long> pair : rowColPair) {\n            if (pair.first().equals(x))\
    \ {\n                result.add(new Pair<>(pair.first(), pair.second()));\n  \
    \          }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp35 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> ", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n   \
    \     ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long> row\
    \ : lst) {\n            row.stream().forEach(e -> {\n                if (e ==\
    \ x) {\n                    result.add(new Pair<>(row.size(), col.size()));\n\
    \                    row.stream().forEach(e -> {\n                        col.clear();\n\
    \                        col.add(e);\n                        result.add(new Pair<>(row.size(),\
    \ col.size()));\n                    });\n                }\n            });\n\
    \        }\n        return result;", "        ArrayList<Pair<Long, Long>> res\
    \ = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n   \
    \     ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long> row\
    \ : lst) {\n            row.stream().filter(e -> e == x).findFirst().ifPresent(row::add);\n\
    \            col.stream().filter(e -> e == x).findFirst().ifPresent(col::add);\n\
    \        }\n        Collections.sort(row);\n        Collections.sort(col);\n \
    \       for (long r : row) {\n            for (long c : col) {\n             \
    \   res.add(new Pair<>(r, c));\n            }\n        }\n        return res;",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n\
    \            row.add(new Pair<>(row.get(0), row.get(1)));\n        }\n       \
    \ Collections.sort(row, new Comparator<Pair<Long, Long>>() {\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return\
    \ o1.getValue().compareTo(o2.getValue());\n            }\n        });\n      \
    \  Collections.sort(row, new Comparator<Pair<Long, Long>>() {\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return\
    \ o2.getValue().compareTo(o1.getValue());\n            }\n        });\n      \
    \  for (Pair<Long, Long> pair : row) {\n            if (pair.getValue().equals(x))\
    \ {\n                result.add(new Pair<>(pair.getKey(), pair.getValue()));\n\
    \            }\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n\
    \            row.stream().forEach(x -> {\n                row.add(x);\n      \
    \      });\n            row.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n            row.stream().forEach(x -> {\n                temp.add(new\
    \ Pair<Long, Long>(row, col));\n            });\n        }\n        Collections.sort(temp,\
    \ (x, y) -> {\n            Long xx = x.getKey().get(x);\n            Long yy =\
    \ y.getKey().get(y);\n            return xx.compareTo(yy);\n        });\n    \
    \    for(Pair<Long, Long> pair : temp) {\n            if(pair.getValue().get(x)\
    \ == x) {\n                result.add(pair);\n            }\n        }\n     \
    \   return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(x -> {\n                if (x == x) {\n              \
    \      result.add(new Pair<>(row.get(0), row.get(1)));\n                }\n  \
    \          });\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            for (long y : row) {\n\
    \                if (y == x) {\n                    row.add(new Pair<>(row, new\
    \ Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, ", "       \
    \ ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for(ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if(x == x) {\n                    result.add(new Pair<>(row.size(),\
    \ col.size()));\n                    row.add(col.get(0));\n                  \
    \  col.remove(0);\n                }\n            });\n        }\n        Collections.sort(result);\n\
    \        Collections.sort(result, Comparator.comparing(Pair::getLeft));\n    \
    \    Collections.sort(result, Comparator.comparing(Pair::getRight));\n       \
    \ return result;", "        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row4 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row8 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row36\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(e -> {\n                if (e\
    \ == x) {\n                    result.add(new Pair<>(row.size(), col.size()));\n\
    \                }\n            });\n            col.stream().forEach(e -> {\n\
    \                if (e == x) {\n                    result.add(new Pair<>(row.size(),\
    \ col.size()));\n                }\n            });\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n\
    \            for (long y : row) {\n                if (y == x) {\n           \
    \         result.add(new Pair<>(row.indexOf(y), row.indexOf(y)+1));\n        \
    \        }\n            }\n        }\n        Collections.sort(result);\n    \
    \    for (Pair<Long, Long> pair : result) {\n            row.add(pair.getFirst());\n\
    \            col.add(pair.getSecond());\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        result.addAll(row);\n        result.addAll(col);\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34", "       \
    \ ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp34", "        ArrayList<Pair<Long, Long>>\
    \ result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row4 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row8 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> ", " \
    \       ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Long>\
    \ row1 = new ArrayList<>();\n        ArrayList<Long> row2 = new ArrayList<>();\n\
    \        ArrayList<Long> row3 = new ArrayList<>();\n        ArrayList<Long> row4\
    \ = new ArrayList<>();\n        ArrayList<Long> row5 = new ArrayList<>();\n  \
    \      ArrayList<Long> row6 = new ArrayList<>();\n        ArrayList<Long> row7\
    \ = new ArrayList<>();\n        ArrayList<Long> row8 = new ArrayList<>();\n  \
    \      ArrayList<Long> row9 = new ArrayList<>();\n        ArrayList<Long> row10\
    \ = new ArrayList<>();\n        ArrayList<Long> row11 = new ArrayList<>();\n \
    \       ArrayList<Long> row12 = new ArrayList<>();\n        ArrayList<Long> row13\
    \ = new ArrayList<>();\n        ArrayList<Long> row14 = new ArrayList<>();\n \
    \       ArrayList<Long> row15 = new ArrayList<>();\n        ArrayList<Long> row16\
    \ = new ArrayList<>();\n        ArrayList<Long> row17 = new ArrayList<>();\n \
    \       ArrayList<Long> row18 = new ArrayList<>();\n        ArrayList<Long> row19\
    \ = new ArrayList<>();\n        ArrayList<Long> row20 = new ArrayList<>();\n \
    \       ArrayList<Long> row21 = new ArrayList<>();\n        ArrayList<Long> row22\
    \ = new ArrayList<>();\n        ArrayList<Long> row23 = new ArrayList<>();\n \
    \       ArrayList<Long> row24 = new ArrayList<>();\n        ArrayList<Long> row25\
    \ = new ArrayList<>();\n        ArrayList<Long> row26 = new ArrayList<>();\n \
    \       ArrayList<Long> row27 = new ArrayList<>();\n        ArrayList<Long> row28\
    \ = new ArrayList<>();\n        ArrayList<Long> row29 = new ArrayList<>();\n \
    \       ArrayList<Long> row30 = new ArrayList<>();\n        ArrayList<Long> row31\
    \ = new ArrayList<>();\n        ArrayList<Long> row32 = new ArrayList<>();\n \
    \       ArrayList<Long> row33 = new ArrayList<>();\n        ArrayList<Long> row34\
    \ = new ArrayList<>();\n        ArrayList<Long> row35 = new ArrayList<>();\n \
    \       ArrayList<Long> row36 = new ArrayList<>();\n        ArrayList<Long> row37\
    \ = new ArrayList<>();\n        ArrayList<Long> row38 = new ArrayList<>();\n \
    \       ArrayList<Long> row39 = new ArrayList<>();\n        ArrayList<Long> row40\
    \ = new ArrayList<>();\n        ArrayList<Long> row41 = new ArrayList<>();\n \
    \       ArrayList<Long> row42 = new ArrayList<>();\n        ArrayList<Long> row43\
    \ = new ArrayList<>();\n        ArrayList<Long> row44 = new ArrayList<>();\n \
    \       ArrayList<Long> row45 = new ArrayList<>();\n        ArrayList<Long> row46\
    \ = new ArrayList<>();\n        ArrayList<Long> row47 = new ArrayList<>();\n \
    \       ArrayList<Long> row48 = new ArrayList<>();\n        ArrayList<Long> row49\
    \ = new ArrayList<>();\n        ArrayList<Long", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(v -> {\n                if (v\
    \ == x) {\n                    result.add(new Pair<>(row.get(0), col.get(0)));\n\
    \                }\n            });\n            row.stream().forEach(v -> {\n\
    \                if (v != x) {\n                    row.add(v);\n            \
    \    }\n            });\n            col.stream().forEach(v -> {\n           \
    \     if (v != x) {\n                    col.add(v);\n                }\n    \
    \        });\n        }\n        Collections.sort(row);\n        Collections.sort(col);\n\
    \        result.add(new Pair<>(row.get(0), col.get(0)));\n        return result;",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(e\
    \ -> {\n                col.clear();\n                col.add(e);\n          \
    \      res.add(new Pair<>(row.get(0), col.get(0)));\n            });\n       \
    \ }\n        return res;", "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.add(new Pair<>(row.get(0), row.get(1)));\n   \
    \     }\n        Collections.sort(row);\n        Collections.sort(row, Comparator.comparing(Pair::getSecond));\n\
    \        for (Pair<Long, Long> pair : row) {\n            if (pair.getFirst()\
    \ == x) {\n                ret.add(pair);\n            }\n        }\n        return\
    \ ret;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n     \
    \   ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col = new\
    \ ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(0));\n\
    \            col.add(lst.get(i).get(1));\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        for(int i = 0; i < row.size(); i++) {\n\
    \            if(row.get(i) == x) {\n                res.add(new Pair<>(row.get(i),\
    \ col.get(i)));\n            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    result.add(new Pair<>(row.indexOf(x), col.indexOf(x)));\n\
    \                }\n            });\n        }\n        return result;", "   \
    \     ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.forEach(x -> {\n \
    \               if (x == x) {\n                    result.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                }\n            });\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n  \
    \      ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col =\
    \ new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    res.add(new Pair<>(row.size(),\
    \ col.size()));\n                }\n            });\n            col.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    res.add(new Pair<>(row.size(),\
    \ col.size()));\n                }\n            });\n        }\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n  \
    \      ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col =\
    \ new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    result.add(new Pair<>(row.size(),\
    \ col.size()));\n                }\n            });\n            col.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    result.add(new Pair<>(row.size(),\
    \ col.size()));\n                }\n            });\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            for (long y : row) {\n\
    \                if (y == x) {\n                    res.add(new Pair<>(row.indexOf(y),\
    \ row.lastIndexOf(y)));\n                }\n            }\n        }\n       \
    \ Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return\
    \ o1.first.compareTo(o2.first);\n            }\n        });\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                return o2.second.compareTo(o1.second);\n\
    \            }\n        });\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n            col.stream().forEach(x -> {\n                res.add(new\
    \ Pair<>(row.get(0), x));\n            });\n            row.clear();\n       \
    \     col.clear();\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(e -> {\n                col.add(e);\n\
    \            });\n            col.stream().forEach(e -> {\n                if\
    \ (e == x) {\n                    result.add(new Pair<>(row.get(0), col.get(0)));\n\
    \                }\n            });\n            row.clear();\n            col.clear();\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp34", "        ArrayList<Pair<Long, Long>>\
    \ result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for(ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if(x == x) {\n                    res.add(new Pair<Long,\
    \ Long>(row.get(0), row.get(1)));\n                }\n            });\n      \
    \  }\n        return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        ArrayList<Long> row2 = new ArrayList<>();\n  \
    \      ArrayList<Long> col2 = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().filter(e -> e == x).findFirst().ifPresent(row::add);\n\
    \            row.stream().filter(e -> e == x).findFirst().ifPresent(row2::add);\n\
    \            row.stream().filter(e -> e == x).findFirst().ifPresent(col::add);\n\
    \            row.stream().filter(e -> e == x).findFirst().ifPresent(col2::add);\n\
    \        }\n        Collections.sort(row);\n        Collections.sort(row2);\n\
    \        Collections.sort(col);\n        Collections.sort(col2);\n        for\
    \ (long r : row) {\n            for (long c : col) {\n                res.add(new\
    \ Pair<>(r, c));\n            }\n        }\n        for (long r : row2) {\n  \
    \          for (long c : col2) {\n                res.add(new Pair<>(r, c));\n\
    \            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                row.add(x);\n\
    \            });\n            col.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n            result.add(new Pair<>(row.get(0), col.get(0)));\n\
    \            result.add(new Pair<>(row.get(0), col.get(1)));\n            result.add(new\
    \ Pair<>(row.get(1), col.get(0)));\n            result.add(new Pair<>(row.get(1),\
    \ col.get(1)));\n        }\n        Collections.sort(result);\n        Collections.sort(result,\
    \ Comparator.comparing(Pair::getLeft).reversed());\n        Collections.sort(result,\
    \ Comparator.comparing(Pair::getRight).reversed());\n        for(Pair<Long, Long>\
    \ pair : result) {\n            if(pair.getLeft() == x) {\n                return\
    \ result;\n            }\n        }\n        return null;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().filter(e -> e == x).findFirst().ifPresent(e\
    \ -> {\n                result.add(new Pair<>(row.get(0), row.get(1)));\n    \
    \            row.remove(0);\n                col.remove(0);\n            });\n\
    \        }\n        Collections.sort(row, (a, b) -> {\n            if (a < b)\
    \ {\n                return -1;\n            }\n            if (a > b) {\n   \
    \             return 1;\n            }\n            return 0;\n        });\n \
    \       Collections.sort(col, (a, b) -> {\n            if (a < b) {\n        \
    \        return -1;\n            }\n            if (a > b) {\n               \
    \ return 1;\n            }\n            return 0;\n        });\n        for (Long\
    \ e : row) {\n            result.add(new Pair<>(e, col.get(0)));\n        }\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.stream().forEach(x -> {\n                if(x == x) {\n                \
    \    res.add(new Pair<Long, Long>(row.get(0), row.get(1)));\n                }\n\
    \            });\n        }\n        Collections.sort(res);\n        for(Pair<Long,\
    \ Long> pair : res) {\n            row.stream().forEach(x -> {\n             \
    \   if(x == x) {\n                    res.add(new Pair<Long, Long>(pair.getKey(),\
    \ pair.getValue()));\n                }\n            });\n        }\n        Collections.sort(res);\n\
    \        return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.stream().forEach(x -> {\n                col.add(x);\n            });\n\
    \            col.stream().forEach(x -> {\n                if(row.contains(x))\
    \ {\n                    res.add(new Pair<>(row.get(row.indexOf(x)), x));\n  \
    \              }\n            });\n            row.clear();\n            col.clear();\n\
    \        }\n        return res;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowSortedDesc3 = new ArrayList<>();\n   \
    \     ArrayList<Pair<Long, Long>> rowSortedDesc4 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> rowSortedDesc5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowSortedDesc6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowSortedDesc7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc9 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowSortedDesc11 = new ArrayList<>();\n  \
    \      ArrayList<Pair<Long, Long>> rowSortedDesc12 = new ArrayList<>();\n    \
    \    ArrayList<Pair<Long, Long>> rowSortedDesc13 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> rowSortedDesc14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowSortedDesc15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowSortedDesc16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc18 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc19 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowSortedDesc21 = new ArrayList<>();\n  \
    \      ArrayList<Pair<Long, Long>> rowSortedDesc22 = new ArrayList<>();\n    \
    \    ArrayList<Pair<Long, Long>> rowSortedDesc23 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> rowSortedDesc24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowSortedDesc25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowSortedDesc26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc28 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSortedDesc29 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n            row.stream().forEach(x -> {\n                if\
    \ (x == x) {\n                    result.add(new Pair<>(row.get(0), col.get(0)));\n\
    \                }\n            });\n        }\n        Collections.sort(result);\n\
    \        Collections.sort(result, Comparator.comparing(Pair::getValue));\n   \
    \     return result;", "        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row4 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row8 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row36\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp34", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        ArrayList<Long> row2 = new ArrayList<>();\n  \
    \      ArrayList<Long> col2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result3\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result4 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result7\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result11\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result13 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result16 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result17 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result18 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result19\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result23\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result25 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result28 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result29 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> result32 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result33 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> result34 = new ", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n\
    \            for (long y : row) {\n                if (y == x) {\n           \
    \         res.add(new Pair<>(row.indexOf(y), row.indexOf(y)+1));\n           \
    \     }\n            }\n        }\n        Collections.sort(res);\n        for\
    \ (Pair<Long, Long> pair : res) {\n            row.add(pair.getFirst());\n   \
    \         col.add(pair.getSecond());\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        for (Pair<Long, Long> pair : row) {\n\
    \            res.add(new Pair<>(pair.getFirst(), pair.getSecond()));\n       \
    \ }\n        for (Pair<Long, Long> pair : col) {\n            res.add(new Pair<>(pair.getFirst(),\
    \ pair.getSecond()));\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowCol = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowColCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(e\
    \ -> {\n                col.clear();\n                col.add(e);\n          \
    \      result.add(new Pair<>(row.get(0), col.get(0)));\n            });\n    \
    \    }\n        Collections.sort(result);\n        Collections.sort(result, Comparator.comparing(Pair::getValue));\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> column = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n\
    \            for(long y : row) {\n                if(y == x) {\n             \
    \       result.add(new Pair<>(row.indexOf(y), row.indexOf(y)+1));\n          \
    \      }\n            }\n        }\n        Collections.sort(result);\n      \
    \  for(Pair<Long, Long> pair : result) {\n            row.add(pair.getFirst());\n\
    \            column.add(pair.getSecond());\n        }\n        Collections.sort(column);\n\
    \        for(Pair<Long, Long> pair : column) {\n            result.add(new Pair<>(row.indexOf(pair.getFirst()),\
    \ pair.getSecond()));\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row1 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n     \
    \   ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col = new\
    \ ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(e\
    \ -> {\n                col.add(e);\n            });\n            col.stream().forEach(e\
    \ -> {\n                if (e == x) {\n                    res.add(new Pair<>(row.get(0),\
    \ col.get(0)));\n                }\n            });\n            row.clear();\n\
    \            col.clear();\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp34", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(x -> {\n                if (x == x) {\n              \
    \      row.add(0);\n                    col.add(0);\n                } else {\n\
    \                    row.add(1);\n                    col.add(1);\n          \
    \      }\n            });\n        }\n        Collections.sort(row);\n       \
    \ Collections.sort(col);\n        long row1 = row.get(0);\n        long col1 =\
    \ col.get(0);\n        long row2 = row.get(row.size() - 1);\n        long col2\
    \ = col.get(col.size() - 1);\n        long row3 = row.get(row.size() - 2);\n \
    \       long col3 = col.get(col.size() - 2);\n        long row4 = row.get(row.size()\
    \ - 3);\n        long col4 = col.get(col.size() - 3);\n        long row5 = row.get(row.size()\
    \ - 4);\n        long col5 = col.get(col.size() - 4);\n        long row6 = row.get(row.size()\
    \ - 5);\n        long col6 = col.get(col.size() - 5);\n        long row7 = row.get(row.size()\
    \ - 6);\n        long col7 = col.get(col.size() - 6);\n        long row8 = row.get(row.size()\
    \ - 7);\n        long col8 = col.get(col.size() - 7);\n        long row9 = row.get(row.size()\
    \ - 8);\n        long col9 = col.get(col.size() - 8);\n        long row10 = row.get(row.size()\
    \ - 9);\n        long col10 = col.get(col.size() - 9);\n        long row11 = row.get(row.size()\
    \ - 10);\n        long col11 = col.get(col.size() - 10);\n        long row12 =\
    \ row.get(row.size() - 11);\n        long col12 = col.get(col.size() - 11);\n\
    \        long row13 = row.get(row.size() - 12);\n        long col13 = col.get(col.size()\
    \ - 12);\n        long row14 = row.get(row.size() - 13);\n        long col14 =\
    \ col.get(col.size() - 13);\n        long row15 = row.get(row.size() - 14);\n\
    \        long col15 = col.get(col.size() - 14);\n        long row16 = row.get(row.size()\
    \ - 15);\n        long col16 = col.get(col.size() - 15);\n        long row17 =\
    \ row.get(row.size() - 16);\n        long col17 = col.get(col.size() - 16);\n\
    \        long row18 = row.get(row.size() - 17);\n        long col18 = col.get(col.size()\
    \ - 17);\n        long row19 = row.get(row.size() - 18);\n        long col19",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColCol = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowColColCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowColColColCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> res =\
    \ new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n     \
    \   ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long> row\
    \ : lst) {\n            row.stream().forEach(x -> {\n                if (x ==\
    \ x) {\n                    row.add(0);\n                } else {\n          \
    \          row.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \           } else {\n                    row.add(1);\n                }\n   \
    \         });\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                } else {\n       \
    \             row.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \           } else {\n                    row.add(1);\n                }\n   \
    \         });\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                } else {\n       \
    \             row.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \           } else {\n                    row.add(1);\n                }\n   \
    \         });\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                } else {\n       \
    \             row.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \           } else {\n                    row.add(1);\n                }\n   \
    \         });\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                } else {\n       \
    \             row.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \           } else {\n                    row.add(1);\n                }\n   \
    \         });\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                } else {\n       \
    \             row.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \           } else {\n                    row.add(1);\n                }\n   \
    \         });\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                } else {\n       \
    \             row.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \           } else {\n                    row.add(1);\n                }\n   \
    \         });\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                } else {\n       \
    \             row.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    row.add(0);\n     \
    \           } else {\n                    row.add(1);\n                }\n   \
    \         });\n            row.stream().forEach(x -> {", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.forEach(x -> {\n                if (x == x) {\n\
    \                    row.add(0L);\n                    col.add(0L);\n        \
    \        } else {\n                    row.add(1L);\n                    col.add(1L);\n\
    \                }\n            });\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        for (Long i : row) {\n            for\
    \ (Long j : col) {\n                if (i == j) {\n                    result.add(new\
    \ Pair<>(i, j));\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> colSorted = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> sortedRow = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> sortedCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSorted =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRow =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedColSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedColSortedRow\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRowSortedCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedColSortedRowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRowSortedColSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedColSortedRowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRowSortedColSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedColSortedRowSortedCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRowSortedColSortedRowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedColSortedRowSortedColSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRowSortedColSortedRowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedColSortedRowSortedColSortedRowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRowSortedColSortedRowSortedColSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSortedColSortedRowSortedColSortedRowSortedColSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedColSortedRowSortedColSortedRowSortedColSortedRowSortedColSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRowSorted",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for(ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if(x == x) {\n                    res.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                }\n            });\n        }\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34", "       \
    \ ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n\
    \            for (long y : row) {\n                if (y == x) {\n           \
    \         result.add(new Pair<>(row.indexOf(y), row.indexOf(y - 1)));\n      \
    \              break;\n                }\n            }\n        }\n        Collections.sort(result);\n\
    \        Collections.sort(row, Comparator.comparing(Pair::getSecond));\n     \
    \   return result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34", "       \
    \ ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                col.add(x);\n            });\n            col.stream().forEach(x\
    \ -> {\n                result.add(new Pair<>(row.get(0), x));\n            });\n\
    \            row.clear();\n            col.clear();\n        }\n        Collections.sort(result);\n\
    \        Collections.sort(result, Comparator.comparingLong(Pair::getValue));\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34", "       \
    \ ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    result.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                }\n            });\n        }\n        Collections.sort(result);\n\
    \        Collections.sort(result, Comparator.comparing(Pair::getLeft));\n    \
    \    Collections.sort(result, Comparator.comparing(Pair::getRight));\n       \
    \ for (Pair<Long, Long> pair : result) {\n            row.add(pair.getLeft());\n\
    \            col.add(pair.getRight());\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col, Comparator.reverseOrder());\n        for (long\
    \ r : row) {\n            for (long c : col) {\n                if (r == x &&\
    \ c == x) {\n                    result.add(new Pair<>(r, c));\n             \
    \   }\n            }\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            for (long y : row) {\n\
    \                if (y == x) {\n                    result.add(new Pair<>(row.indexOf(y),\
    \ row.indexOf(y)+1));\n                }\n            }\n        }\n        Collections.sort(result);\n\
    \        for (Pair<Long, Long> pair : result) {\n            row.add(new Pair<>(pair.first,\
    \ pair.second));\n        }\n        Collections.sort(row);\n        for (Pair<Long,\
    \ Long> pair : row) {\n            col.add(new Pair<>(pair.first, pair.second));\n\
    \        }\n        Collections.sort(col);\n        for (Pair<Long, Long> pair\
    \ : col) {\n            result.add(new Pair<>(pair.first, pair.second));\n   \
    \     }\n        return result;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row4 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row8 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> ", " \
    \       ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp34", "        ArrayList<Pair<Long, Long>>\
    \ result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColCol = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> row =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row36 = new ArrayList<>();\n        ArrayList<Pair<Long, Long", "   \
    \     ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp35 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> ", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n   \
    \     ArrayList<Long> col = new ArrayList<>();\n        for(ArrayList<Long> row\
    \ : lst) {\n            row.stream().forEach(x -> {\n                row.add(x);\n\
    \            });\n            col.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n            result.add(new Pair<>(row.get(0), col.get(0)));\n\
    \        }\n        Collections.sort(result);\n        Collections.sort(result,\
    \ (x, y) -> {\n            int r = Integer.compare(y.get(0), x.get(0));\n    \
    \        if(r != 0) return r;\n            r = Integer.compare(y.get(1), x.get(1));\n\
    \            if(r != 0) return r;\n            return 0;\n        });\n      \
    \  ArrayList<Pair<Long, Long>> rowResult = new ArrayList<>();\n        for(Pair<Long,\
    \ Long> pair : result) {\n            if((pair.getKey() % x) == 0) {\n       \
    \         rowResult.add(pair);\n            }\n        }\n        return rowResult;",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(e\
    \ -> {\n                col.clear();\n                col.add(e);\n          \
    \      res.add(new Pair<>(row.get(0), col.get(0)));\n            });\n       \
    \ }\n        Collections.sort(res);\n        Collections.sort(res, Comparator.comparing(Pair::getRight));\n\
    \        Collections.sort(res, Comparator.comparing(Pair::getLeft));\n       \
    \ return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34", "       \
    \ ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                col.add(x);\n            });\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    result.add(new Pair<>(row.get(0),\
    \ col.get(0)));\n                }\n            });\n            row.clear();\n\
    \            col.clear();\n        }\n        Collections.sort(result);\n    \
    \    Collections.sort(result, Comparator.comparing(Pair::getValue));\n       \
    \ return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(v -> {\n                if (v == x) {\n              \
    \      result.add(new Pair<>(row.get(0), col.get(0)));\n                }\n  \
    \          });\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                row.add(x);\n\
    \            });\n            col.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n        }\n        Collections.sort(row);\n        Collections.sort(col);\n\
    \        for (long i = 0; i < row.size(); i++) {\n            if (row.get(i) ==\
    \ x) {\n                res.add(new Pair<>(i, col.get(i)));\n            }\n \
    \       }\n        return res;", "        ArrayList<Pair<Long, Long>> res = new\
    \ ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long>\
    \ col = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n      \
    \      row.stream().forEach(v -> {\n                if (v == x) {\n          \
    \          res.add(new Pair<>(row.get(0), col.get(0)));\n                }\n \
    \           });\n            col.stream().forEach(v -> {\n                if (v\
    \ == x) {\n                    res.add(new Pair<>(row.get(0), col.get(1)));\n\
    \                }\n            });\n            row.stream().forEach(v -> {\n\
    \                if (v == x) {\n                    res.add(new Pair<>(row.get(1),\
    \ col.get(0)));\n                }\n            });\n            col.stream().forEach(v\
    \ -> {\n                if (v == x) {\n                    res.add(new Pair<>(row.get(1),\
    \ col.get(1)));\n                }\n            });\n        }\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n     \
    \   ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col = new\
    \ ArrayList<>();\n        long rowSum = 0;\n        long colSum = 0;\n       \
    \ long sum = 0;\n        long rowMax = 0;\n        long colMax = 0;\n        long\
    \ maxSum = 0;\n        long maxSumRow = 0;\n        long maxSumCol = 0;\n    \
    \    long maxSumRowCol = 0;\n        long maxSumRowCol2 = 0;\n        long maxSumRowCol3\
    \ = 0;\n        long maxSumRowCol4 = 0;\n        long maxSumRowCol5 = 0;\n   \
    \     long maxSumRowCol6 = 0;\n        long maxSumRowCol7 = 0;\n        long maxSumRowCol8\
    \ = 0;\n        long maxSumRowCol9 = 0;\n        long maxSumRowCol10 = 0;\n  \
    \      long maxSumRowCol11 = 0;\n        long maxSumRowCol12 = 0;\n        long\
    \ maxSumRowCol13 = 0;\n        long maxSumRowCol14 = 0;\n        long maxSumRowCol15\
    \ = 0;\n        long maxSumRowCol16 = 0;\n        long maxSumRowCol17 = 0;\n \
    \       long maxSumRowCol18 = 0;\n        long maxSumRowCol19 = 0;\n        long\
    \ maxSumRowCol20 = 0;\n        long maxSumRowCol21 = 0;\n        long maxSumRowCol22\
    \ = 0;\n        long maxSumRowCol23 = 0;\n        long maxSumRowCol24 = 0;\n \
    \       long maxSumRowCol25 = 0;\n        long maxSumRowCol26 = 0;\n        long\
    \ maxSumRowCol27 = 0;\n        long maxSumRowCol28 = 0;\n        long maxSumRowCol29\
    \ = 0;\n        long maxSumRowCol30 = 0;\n        long maxSumRowCol31 = 0;\n \
    \       long maxSumRowCol32 = 0;\n        long maxSumRowCol33 = 0;\n        long\
    \ maxSumRowCol34 = 0;\n        long maxSumRowCol35 = 0;\n        long maxSumRowCol36\
    \ = 0;\n        long maxSumRowCol37 = 0;\n        long maxSumRowCol38 = 0;\n \
    \       long maxSumRowCol39 = 0;\n        long maxSumRowCol40 = 0;\n        long\
    \ maxSumRowCol41 = 0;\n        long maxSumRowCol42 = 0;\n        long maxSumRowCol43\
    \ = 0;\n        long maxSumRowCol44 = 0;\n        long maxSumRowCol45 = 0;\n \
    \       long maxSumRowCol46 = 0;\n        long maxSumRowCol47 = 0;\n        long\
    \ maxSumRowCol48 = 0;\n        long maxSumRow", "        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34\
    \ = new ArrayList<>();\n", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(v -> {\n                if (v == x) {\n              \
    \      res.add(new Pair<>(row.get(0), row.get(1)));\n                }\n     \
    \       });\n        }\n        return res;", "        ArrayList<Pair<Long, Long>>\
    \ result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n\
    \            row.stream().forEach(x -> {\n                row.add(x, x);\n   \
    \         });\n            Collections.sort(row);\n            row.stream().forEach(x\
    \ -> {\n                col.add(x);\n            });\n            Collections.sort(col);\n\
    \            col.stream().forEach(x -> {\n                tuple.add(new Pair<>(row.get(0),\
    \ col.get(x)));\n            });\n        }\n        Collections.sort(tuple);\n\
    \        for (Pair<Long, Long> tuple : tuple) {\n            if (tuple.getValue().equals(x))\
    \ {\n                result.add(tuple);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> column = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> columnSorted = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> columnSorted2 = new ArrayList<>();\n    \
    \    ArrayList<Pair<Long, Long>> rowSorted3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> columnSorted3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowSorted4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> columnSorted4\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> columnSorted5 = new ArrayList<>();\n    \
    \    ArrayList<Pair<Long, Long>> rowSorted6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> columnSorted6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowSorted7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> columnSorted7\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> columnSorted8 = new ArrayList<>();\n    \
    \    ArrayList<Pair<Long, Long>> rowSorted9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> columnSorted9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowSorted10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> columnSorted10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted11 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> columnSorted11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowSorted12 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> columnSorted12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowSorted13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ columnSorted13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> columnSorted14 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowSorted15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> columnSorted15 = new ArrayList<>();\n   \
    \     ArrayList<Pair<Long, Long>> rowSorted16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> ", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.add(new Pair<>(row.get(0), row.get(1)));\n   \
    \     }\n        Collections.sort(row, Comparator.comparingLong(Pair::getValue));\n\
    \        Collections.sort(row, Comparator.comparingLong(Pair::getKey));\n    \
    \    for (Pair<Long, Long> pair : row) {\n            if (pair.getKey() == x)\
    \ {\n                result.add(new Pair<>(pair.getValue(), pair.getKey()));\n\
    \            }\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(v -> {\n                if(v\
    \ == x) {\n                    result.add(new Pair<>(row.get(0), row.get(1)));\n\
    \                }\n            });\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                if(o1.getKey() < o2.getKey())\
    \ {\n                    return -1;\n                } else if(o1.getKey() > o2.getKey())\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        });\n        for(Pair<Long,\
    \ Long> pair : result) {\n            row.add(pair.getKey());\n            col.add(pair.getValue());\n\
    \        }\n        Collections.sort(col, new Comparator<Long>() {\n         \
    \   public int compare(Long o1, Long o2) {\n                if(o1 < o2) {\n  \
    \                  return -1;\n                } else if(o1 > o2) {\n        \
    \            return 1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        for(Long c : col) {\n\
    \            result.add(new Pair<>(row.get(0), c));\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n  \
    \      ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34", "       \
    \ ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().filter(x -> x == x).forEach(x -> {\n                column.add(new\
    \ Pair<Long, Long>(x - 1, row.size() - 1));\n            });\n        }\n    \
    \    Collections.sort(column);\n        Collections.sort(row, Comparator.comparing(Pair::getValue));\n\
    \        for (Pair<Long, Long> pair : row) {\n            result.add(new Pair<Long,\
    \ Long>(pair.getValue(), pair.getKey()));\n        }\n        return result;",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach((e)\
    \ -> {\n                col.clear();\n                col.add(e);\n          \
    \      res.add(new Pair<>(row.get(0), col.get(0)));\n            });\n       \
    \ }\n        return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.forEach(x -> {\n                if(x == x) {\n                    res.add(new\
    \ Pair<>(row.get(0), row.get(1)));\n                }\n            });\n     \
    \   }\n        return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.stream().forEach(x -> {\n                col.add(x);\n            });\n\
    \            col.stream().forEach(x -> {\n                res.add(new Pair<>(row.get(0),\
    \ x));\n            });\n            row.clear();\n            col.clear();\n\
    \        }\n        return res;", "        ArrayList<Pair<Long, Long>> res = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n\
    \            for(long y : row) {\n                if(y == x) {\n             \
    \       row.add(Pair.of(0, y));\n                    res.add(row);\n         \
    \           row = new ArrayList<>();\n                    col.add(Pair.of(0, y));\n\
    \                    res.add(col);\n                    col = new ArrayList<>();\n\
    \                    temp.add(Pair.of(0, y));\n                    res.add(temp);\n\
    \                    temp = new ArrayList<>();\n                }\n          \
    \  }\n        }\n        Collections.sort(res);\n        Collections.sort(res,\
    \ Comparator.comparing(Pair::getLeft));\n        Collections.sort(res, Comparator.comparing(Pair::getRight));\n\
    \        return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(x -> {\n                col.stream().forEach(y -> {\n\
    \                    if (x == x) {\n                        res.add(new Pair<>(row,\
    \ y));\n                    }\n                });\n            });\n        }\n\
    \        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n        \
    \    public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n        \
    \        return o1.getValue().compareTo(o2.getValue());\n            }\n     \
    \   });\n        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n\
    \            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n\
    \                return o2.getValue().compareTo(o1.getValue());\n            }\n\
    \        });\n        return res;", "        ArrayList<Pair<Long, Long>> res =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34",
  "        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row1 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row6 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row34\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row35 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long", "        ArrayList<Pair<Long, Long>> res\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColCol = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> res =\
    \ new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n     \
    \   ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long> row\
    \ : lst) {\n            row.stream().forEach(e -> {\n                col.clear();\n\
    \                col.add(e);\n                res.add(new Pair<>(row.get(0), col.get(0)));\n\
    \            });\n        }\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o1.getFirst().compareTo(o2.getFirst());\n    \
    \        }\n        });\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o2.getSecond().compareTo(o1.getSecond());\n  \
    \          }\n        });\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(e -> {\n                if (e\
    \ == x) {\n                    res.add(new Pair<>(row.size(), col.size()));\n\
    \                }\n                else if (e < x) {\n                    row.add(e);\n\
    \                }\n                else {\n                    col.add(e);\n\
    \                }\n            });\n        }\n        Collections.sort(res);\n\
    \        Collections.sort(row, Collections.reverseOrder());\n        Collections.sort(col,\
    \ Collections.reverseOrder());\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(v -> {\n                if (v\
    \ == x) {\n                    result.add(new Pair<>(row.size(), col.size()));\n\
    \                }\n            });\n            col.stream().forEach(v -> {\n\
    \                if (v == x) {\n                    result.add(new Pair<>(row.size(),\
    \ col.size()));\n                }\n            });\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.stream().forEach(x -> {\n                if(x == x) {\n                \
    \    result.add(new Pair<>(row.get(0), row.get(1)));\n                }\n    \
    \        });\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            for (Long val : row) {\n\
    \                if (val == x) {\n                    row.add(Pair.of(0, row.size()\
    \ - 1));\n                    result.add(Pair.of(0, row.size() - 1));\n      \
    \              break;\n                }\n            }\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        for (Pair<Long, Long> pair : row) {\n\
    \            for (Pair<Long, Long> pair2 : col) {\n                if (pair2.getLeft()\
    \ == pair.getLeft()) {\n                    result.add(Pair.of(pair.getRight(),\
    \ pair2.getRight()));\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().filter(e -> e == x).findFirst().ifPresent(e -> {\n           \
    \     result.add(new Pair<>(row.get(0), row.get(1)));\n            });\n     \
    \   }\n        Collections.sort(result, (a, b) -> {\n            if (a.first()\
    \ < b.first()) {\n                return -1;\n            } else if (a.first()\
    \ > b.first()) {\n                return 1;\n            } else {\n          \
    \      return 0;\n            }\n        });\n        for (Pair<Long, Long> pair\
    \ : result) {\n            row.add(pair.first());\n            col.add(pair.second());\n\
    \        }\n        Collections.sort(row, (a, b) -> {\n            if (a < b)\
    \ {\n                return -1;\n            } else if (a > b) {\n           \
    \     return 1;\n            } else {\n                return 0;\n           \
    \ }\n        });\n        Collections.sort(col, (a, b) -> {\n            if (a\
    \ < b) {\n                return -1;\n            } else if (a > b) {\n      \
    \          return 1;\n            } else {\n                return 0;\n      \
    \      }\n        });\n        result.add(new Pair<>(row.get(0), col.get(0)));\n\
    \        result.add(new Pair<>(row.get(0), col.get(1)));\n        return result;",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                    col.add(0);\n\
    \                } else {\n                    row.add(1);\n                 \
    \   col.add(1);\n                }\n            });\n            row.stream().forEach(x\
    \ -> {\n                for (long y : col) {\n                    temp.add(new\
    \ Pair(x, y));\n                }\n            });\n        }\n        temp.stream().forEach(x\
    \ -> {\n            if (x.first().equals(x.second())) {\n                res.add(new\
    \ Pair(x.first(), x.second()));\n            }\n        });\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                return o1.first().compareTo(o2.first());\n\
    \            }\n        });\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o2.second().compareTo(o1.second());\n        \
    \    }\n        });\n        return res;", "        ArrayList<Pair<Long, Long>>\
    \ ret = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(v -> {\n                if(v.equals(x))\
    \ {\n                    ret.add(new Pair<>(row.size(), col.size()));\n      \
    \          }\n            });\n            row.clear();\n            col.clear();\n\
    \        }\n        return ret;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34",
  "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new\
    \ ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            for (Long\
    \ val : row) {\n                if (val == x) {\n                    row.add(Pair.of(0,\
    \ row.size() - 1));\n                    col.add(Pair.of(0, row.size() - 1));\n\
    \                    ret.add(Pair.of(row.size() - 1, row.size() - 1));\n     \
    \               break;\n                }\n            }\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        ret.add(Pair.of(0, row.size() - 1));\n\
    \        ret.add(Pair.of(row.size() - 1, row.size() - 1));\n        ret.add(Pair.of(row.size()\
    \ - 1, 0));\n        ret.add(Pair.of(0, 0));\n        for (Pair<Long, Long> p\
    \ : row) {\n            ret.add(Pair.of(p.getFirst(), p.getSecond()));\n     \
    \   }\n        for (Pair<Long, Long> p : col) {\n            ret.add(Pair.of(p.getFirst(),\
    \ p.getSecond()));\n        }\n        return ret;", "        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row6 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row34\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row35 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row36 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n  \
    \      ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col =\
    \ new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.forEach(x\
    \ -> {\n                if (x == x) {\n                    result.add(new Pair<>(row.size(),\
    \ col.size()));\n                    row.remove(0);\n                    col.remove(0);\n\
    \                }\n            });\n        }\n        return result;", "   \
    \     ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().filter(e\
    \ -> e == x).findFirst().ifPresent(e -> {\n                res.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n            });\n        }\n        Collections.sort(res, new\
    \ Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return\
    \ o1.getValue().compareTo(o2.getValue());\n            }\n        });\n      \
    \  Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n            @Override\n\
    \            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n\
    \                return o2.getValue().compareTo(o1.getValue());\n            }\n\
    \        });\n        for (Pair<Long, Long> e : res) {\n            row.add(e.getValue());\n\
    \            col.add(e.getFirst());\n        }\n        Collections.sort(row,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return o1 - o2;\n            }\n        });\n\
    \        Collections.sort(col, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                return o2\
    \ - o1;\n            }\n        });\n        for (Long e : row) {\n          \
    \  res.add(new Pair<>(e - x, col.get(row.indexOf(e))));\n        }\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n  \
    \      ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColCol = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowColColColCol = new ArrayList<>();\n       \
    \ ArrayList<Pair<Long, Long>> rowColColColColCol = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> rowColColColColColCol = new ArrayList<>();\n  \
    \      ArrayList<Pair<Long, Long>> rowColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> res =\
    \ new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n     \
    \   ArrayList<Long> col = new ArrayList<>();\n        ArrayList<Long> row2 = new\
    \ ArrayList<>();\n        ArrayList<Long> col2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res3 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res4 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> res5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res7 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> res9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res11\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> res13 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res16 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> res17 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res18 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res19\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> res21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res23\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> res25 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res28 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> res29 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> res32 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> res33 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> res34 = new ", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(x -> {\n                col.add(x);\n            });\n\
    \            col.stream().forEach(x -> {\n                res.add(new Pair<>(row.get(0),\
    \ x));\n            });\n            col.clear();\n            row.clear();\n\
    \        }\n        return res;", "        ArrayList<Pair<Long, Long>> res = new\
    \ ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long>\
    \ col = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n      \
    \      row.stream().forEach(v -> {\n                if (v == x) {\n          \
    \          res.add(new Pair<>(row.get(0), row.get(1)));\n                }\n \
    \           });\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.add(new\
    \ Pair<>(row.get(0), row.get(1)));\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(row, Comparator.comparing(Pair::getSecond).reversed());\n\
    \        for (Pair<Long, Long> pair : row) {\n            if (pair.getFirst()\
    \ == x) {\n                res.add(new Pair<>(pair.getFirst(), pair.getSecond()));\n\
    \            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowCol = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowColCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> res =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            for(long y : row) {\n                if(y == x) {\n\
    \                    res.add(new Pair<>(row.indexOf(y), row.indexOf(y)+1));\n\
    \                }\n            }\n        }\n        Collections.sort(res);\n\
    \        for(Pair<Long, Long> p : res) {\n            row.add(new Pair<>(p.getFirst(),\
    \ p.getSecond()));\n        }\n        Collections.sort(row);\n        for(Pair<Long,\
    \ Long> p : row) {\n            col.add(new Pair<>(p.getFirst(), p.getSecond()));\n\
    \        }\n        Collections.sort(col);\n        for(Pair<Long, Long> p : col)\
    \ {\n            res.add(new Pair<>(p.getFirst(), p.getSecond()));\n        }\n\
    \        return res;", "        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> reverse = new ArrayList<>();\n        for (ArrayList<Long> row : lst)\
    \ {\n            row.stream().forEach((e) -> {\n                if (e == x) {\n\
    \                    row.stream().forEach((e) -> {\n                        Pair<Long,\
    \ Long> pair = new Pair<>(row, e);\n                        sorted.add(pair);\n\
    \                    });\n                }\n            });\n        }\n    \
    \    sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.first, e.second);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.second, e.first);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.first, e.second);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.second, e.first);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.first, e.second);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.second, e.first);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.first, e.second);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.second, e.first);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.first, e.second);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.second, e.first);\n            reverse.add(pair);\n        });\n  \
    \      sorted.stream().forEach((e) -> {\n            Pair<Long, Long> pair = new\
    \ Pair<>(e.first, e.second);\n            reverse.add(pair);\n        });\n  \
    \      ", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n    \
    \    for (ArrayList<Long> row : lst) {\n            long y = row.get(x);\n   \
    \         if (y != -1) {\n                res.add(new Pair<>(row.get(0), y));\n\
    \            }\n        }\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o1.getValue().compareTo(o2.getValue());\n    \
    \        }\n        });\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o2.getValue().compareTo(o1.getValue());\n    \
    \        }\n        });\n        return res;", "        ArrayList<Pair<Long, Long>>\
    \ res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    row.add(0);\n                    col.add(0);\n\
    \                } else {\n                    row.add(1);\n                 \
    \   col.add(1);\n                }\n            });\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        for (long i = 0; i < row.size(); i++)\
    \ {\n            if (row.get(i) == x) {\n                res.add(new Pair<>(i,\
    \ col.get(i)));\n            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                col.add(x);\n\
    \            });\n            row.stream().forEach(x -> {\n                if\
    \ (x == x) {\n                    result.add(new Pair<>(row.get(0), col.get(0)));\n\
    \                }\n            });\n            row.clear();\n            col.clear();\n\
    \        }\n        return result;", "        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sorted = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> sortedRow = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> sortedRow2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ sortedRow3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow4\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> sortedRow6 = new ArrayList<>();\n       \
    \ ArrayList<Pair<Long, Long>> sortedRow7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> sortedRow8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ sortedRow9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow11 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> sortedRow13 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> sortedRow14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> sortedRow15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ sortedRow16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow18 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> sortedRow20 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> sortedRow21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> sortedRow22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ sortedRow23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow25 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> sortedRow27 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> sortedRow28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> sortedRow29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ sortedRow30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> sortedRow32 = new\
    \ ArrayList<>();\n        ArrayList<Pair<", "        ArrayList<Pair<Long, Long>>\
    \ res = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n      \
    \      for (long y : row) {\n                if (y == x) {\n                 \
    \   res.add(new Pair<>(row.indexOf(y), row.lastIndexOf(y)));\n               \
    \ }\n            }\n        }\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o1.first.compareTo(o2.first);\n            }\n\
    \        });\n        Collections.sort(res, new Comparator<Pair<Long, Long>>()\
    \ {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2)\
    \ {\n                return o2.second.compareTo(o1.second);\n            }\n \
    \       });\n        return res;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n   \
    \     ArrayList<Long> col = new ArrayList<>();\n        ArrayList<Long> row2 =\
    \ new ArrayList<>();\n        ArrayList<Long> col2 = new ArrayList<>();\n    \
    \    ArrayList<Pair<Long, Long>> rowResult = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> colResult = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColResult\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2ColResult = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2RowResult = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col2RowResult = new ArrayList<>();\n    \
    \    ArrayList<Pair<Long, Long>> col2ColResult = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row2Row2Result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ col2Row2Result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Col2Result\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col2Col2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Row2ColResult = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col2Row2ColResult = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Col2ColResult = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Row2RowResult = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col2Row2RowResult = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col2Col2RowResult = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Col2Row2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Row2Col2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col2Row2Col2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Col2Row2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col2Col2Row2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Row2Row2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col2Row2Row2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col2Col2Row2Result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2Col2Row2ColResult =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, ", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        for(ArrayList<Long> row : lst) {\n            for(long y : row) {\n \
    \               if(y == x) {\n                    row.add(new Pair<>(row, new\
    \ Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(row,\
    \ new Pair<>(row, new Pair<>(row, new Pair<>(row, new Pair<>(", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            for(long y : row) {\n                if(y == x) {\n\
    \                    row.add(new Pair<>(row, row));\n                    col.add(new\
    \ Pair<>(row, row));\n                    res.add(new Pair<>(row, row));\n   \
    \             }\n            }\n        }\n        Collections.sort(row);\n  \
    \      Collections.sort(col);\n        for(Pair<Long, Long> p : row) {\n     \
    \       temp.clear();\n            for(Pair<Long, Long> c : col) {\n         \
    \       if(p.getFirst().equals(c.getFirst())) {\n                    temp.clear();\n\
    \                    temp.add(p);\n                    temp.sort((p1, p2) -> {\n\
    \                        if(p1.getSecond() > p2.getSecond()) return 1;\n     \
    \                   if(p1.getSecond() < p2.getSecond()) return -1;\n         \
    \               return 0;\n                    });\n                    res.add(temp);\n\
    \                }\n            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp34", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().filter(x -> x == x).forEach(x -> {\n                row.add(0L);\n\
    \            });\n            row.stream().filter(x -> x == x).forEach(x -> {\n\
    \                row.add(0L);\n            });\n            row.stream().filter(x\
    \ -> x == x).forEach(x -> {\n                row.add(0L);\n            });\n \
    \           row.stream().filter(x -> x == x).forEach(x -> {\n                row.add(0L);\n\
    \            });\n            row.stream().filter(x -> x == x).forEach(x -> {\n\
    \                row.add(0L);\n            });\n            row.stream().filter(x\
    \ -> x == x).forEach(x -> {\n                row.add(0L);\n            });\n \
    \           row.stream().filter(x -> x == x).forEach(x -> {\n                row.add(0L);\n\
    \            });\n            row.stream().filter(x -> x == x).forEach(x -> {\n\
    \                row.add(0L);\n            });\n            row.stream().filter(x\
    \ -> x == x).forEach(x -> {\n                row.add(0L);\n            });\n \
    \           row.stream().filter(x -> x == x).forEach(x -> {\n                row.add(0L);\n\
    \            });\n            row.stream().filter(x -> x == x).forEach(x -> {\n\
    \                row.add(0L);\n            });\n            row.stream().filter(x\
    \ -> x == x).forEach(x -> {\n                row.add(0L);\n            });\n \
    \           row.stream().filter(x -> x == x).forEach(x -> {\n                row.add(0L);\n\
    \            });\n            row.stream().filter(x -> x == x).forEach(x -> {\n\
    \                row.add(0L);\n            });\n            row.stream().filter(x\
    \ -> x == x).forEach(x -> {\n                row.add(0L);\n            });\n \
    \           row.stream().filter(x -> x == x).forEach(x -> {\n                row.add(0L);\n\
    \            });\n            row.stream().filter(x -> x == x).forEach(x -> {\n\
    \                row.add(0L);\n            });\n            row.stream().filter(x\
    \ -> x == x).forEach(x -> {\n                row.add(0L);\n            });\n \
    \           row.stream().filter(x -> x == x).forEach(x -> {\n                row.add(0L);\n\
    \            });\n            row.stream().filter(x -> x == x).forEach(x -> {\n\
    \                row.add(0L);\n            });\n            row.stream().filter(x\
    \ -> x == x).forEach(x -> ", "        ArrayList<Pair<Long, Long>> result = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(e\
    \ -> {\n                if (e == x) {\n                    result.add(new Pair<>(row.size(),\
    \ col.size()));\n                    row.stream().forEach(e -> {\n           \
    \             result.add(new Pair<>(row.size(), col.size()));\n              \
    \      });\n                }\n            });\n            col.stream().forEach(e\
    \ -> {\n                if (e == x) {\n                    result.add(new Pair<>(row.size(),\
    \ col.size()));\n                    col.stream().forEach(e -> {\n           \
    \             result.add(new Pair<>(row.size(), col.size()));\n              \
    \      });\n                }\n            });\n        }\n        return result;",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new\
    \ ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    res.add(new Pair<Long,\
    \ Long>(row.size(), x));\n                }\n            });\n        }\n    \
    \    Collections.sort(res);\n        for (Pair<Long, Long> pair : res) {\n   \
    \         if (pair.first == x) {\n                row.add(new Pair<Long, Long>(pair.second,\
    \ pair.first));\n            }\n        }\n        Collections.sort(row);\n  \
    \      for (Pair<Long, Long> pair : row) {\n            if (pair.first == x) {\n\
    \                col.add(new Pair<Long, Long>(pair.second, pair.first));\n   \
    \         }\n        }\n        Collections.sort(col);\n        for (Pair<Long,\
    \ Long> pair : col) {\n            if (pair.first == x) {\n                res.add(new\
    \ Pair<Long, Long>(pair.second, pair.first));\n            }\n        }\n    \
    \    return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(e -> {\n                col.add(e);\n            });\n\
    \            col.stream().forEach(e -> {\n                res.add(new Pair<>(row.get(0),\
    \ e));\n            });\n            row.clear();\n            col.clear();\n\
    \        }\n        return res;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row4 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row8 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> ", " \
    \       ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> pairs = new ArrayList<>();\n        long\
    \ rowSum = 0;\n        long colSum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            row.add(lst.get(i).get(0));\n            col.add(lst.get(i).get(1));\n\
    \            rowSum += lst.get(i).get(0) + lst.get(i).get(1);\n            colSum\
    \ += lst.get(i).get(0) * lst.get(i).get(1)\n        }\n        for (int i = 0;\
    \ i < row.size(); i++) {\n            if (row.get(i) == x) {\n               \
    \ pairs.add(new Pair<>(i, 0));\n            }\n        }\n        for (int i =\
    \ 0; i < row.size(); i++) {\n            if (row.get(i) != x) {\n            \
    \    for (int j = 0; j < col.size(); j++) {\n                    if (col.get(j)\
    \ == 0) {\n                        pairs.add(new Pair<>(i, j));\n            \
    \        }\n                }\n            }\n        }\n        Collections.sort(pairs,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue().compareTo(o2.getValue());\n\
    \            }\n        });\n        for (int i = 0; i < pairs.size(); i++) {\n\
    \            res.add(new Pair<>(pairs.get(i).getValue(), pairs.get(i).getKey()));\n\
    \        }\n        return res;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> column = new ArrayList<>();\n        for\
    \ (ArrayList<Long> row : lst) {\n            for (long y : row) {\n          \
    \      if (y == x) {\n                    result.add(new Pair<>(row.indexOf(y),\
    \ row.indexOf(y - 1)));\n                }\n            }\n        }\n       \
    \ Collections.sort(result);\n        for (Pair<Long, Long> pair : result) {\n\
    \            column.add(new Pair<>(pair.first, pair.second - 1));\n        }\n\
    \        Collections.sort(column);\n        for (Pair<Long, Long> pair : column)\
    \ {\n            row.add(new Pair<>(pair.first, pair.second - 1));\n        }\n\
    \        Collections.sort(row);\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(e -> {\n                if (e\
    \ == x) {\n                    result.add(new Pair<>(row.get(0), row.get(1)));\n\
    \                }\n            });\n        }\n        Collections.sort(result);\n\
    \        Collections.sort(result, Comparator.comparing(Pair::getRight));\n   \
    \     return result;", "        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp34 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp35\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> ", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowCol = new ArrayList<>();\n        for\
    \ (ArrayList<Long> row : lst) {\n            row.stream().filter(e -> e == x).findFirst().ifPresent(e\
    \ -> {\n                row.stream().filter(e -> e != x).findFirst().ifPresent(e1\
    \ -> {\n                    col.stream().filter(e -> e != x).findFirst().ifPresent(e2\
    \ -> {\n                        rowCol.add(new Pair<>(e1, e2));\n            \
    \        });\n                });\n            });\n        }\n        Collections.sort(rowCol,\
    \ Comparator.comparing(Pair::getFirst));\n        Collections.sort(col, Comparator.comparing(Pair::getSecond).reversed());\n\
    \        for (Pair<Long, Long> r : rowCol) {\n            row.add(new Pair<>(r.getFirst(),\
    \ r.getSecond()));\n        }\n        for (Pair<Long, Long> c : col) {\n    \
    \        col.add(new Pair<>(c));\n        }\n        Collections.sort(row, Comparator.comparing(Pair::getFirst));\n\
    \        Collections.sort(col, Comparator.comparing(Pair::getSecond).reversed());\n\
    \        for (Pair<Long, Long> r : row) {\n            for (Pair<Long, Long> c\
    \ : col) {\n                res.add(new Pair<>(r.getFirst(), c.getSecond()));\n\
    \            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            for(long y : row) {\n                if(y == x) {\n\
    \                    res.add(new Pair<>(row.size(), col.size()));\n          \
    \          break;\n                }\n            }\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                return o1.getFirst().compareTo(o2.getFirst());\n\
    \            }\n        });\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o2.getSecond().compareTo(o1.getSecond());\n  \
    \          }\n        });\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if (x == x) {\n                    result.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                }\n            });\n        }\n        Collections.sort(result);\n\
    \        for (Pair<Long, Long> pair : result) {\n            if (pair.first()\
    \ == x) {\n                row.add(new Pair<>(pair.first(), pair.second()));\n\
    \            }\n        }\n        Collections.sort(row);\n        for (Pair<Long,\
    \ Long> pair : row) {\n            if (pair.second() == x) {\n               \
    \ col.add(new Pair<>(pair.first(), pair.second()));\n            }\n        }\n\
    \        Collections.sort(col);\n        for (Pair<Long, Long> pair : col) {\n\
    \            result.add(new Pair<>(pair.first(), pair.second()));\n        }\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(e -> {\n                if (e == x) {\n              \
    \      result.add(new Pair<>(row.size(), col.size()));\n                    row.stream().forEach(e\
    \ -> {\n                        col.add(e);\n                    });\n       \
    \         }\n            });\n        }\n        Collections.sort(result);\n \
    \       Collections.sort(row, Collections.reverseOrder());\n        Collections.sort(col,\
    \ Collections.reverseOrder());\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row5 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row9 =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row34 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row35 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> ", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n  \
    \      ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col =\
    \ new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n            row.stream().forEach((e)\
    \ -> {\n                col.add(e);\n            });\n            col.stream().forEach((e)\
    \ -> {\n                if(e == x) {\n                    res.add(new Pair<>(row.get(0),\
    \ col.get(0)));\n                }\n            });\n            col.clear();\n\
    \            row.clear();\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowCol = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowColCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> res =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            for(long y : row) {\n                if(y == x) {\n\
    \                    row.add(new Pair<>(row.indexOf(y), row.indexOf(y)+1));\n\
    \                    col.add(new Pair<>(row.indexOf(y), row.indexOf(y)-1));\n\
    \                }\n            }\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        for(Pair<Long, Long> r : row) {\n   \
    \         for(Pair<Long, Long> c : col) {\n                res.add(new Pair<>(r.first(),\
    \ c.first()));\n            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp35 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> ", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.add(new Pair<>(row.get(0), row.get(1)));\n   \
    \     }\n        Collections.sort(row, new Comparator<Pair<Long, Long>>() {\n\
    \            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n\
    \                return o1.getValue().compareTo(o2.getValue());\n            }\n\
    \        });\n        Collections.sort(row, new Comparator<Pair<Long, Long>>()\
    \ {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2)\
    \ {\n                return o2.getValue().compareTo(o1.getValue());\n        \
    \    }\n        });\n        for (Pair<Long, Long> pair : row) {\n           \
    \ if (pair.getValue().equals(x)) {\n                result.add(new Pair<>(pair.getKey(),\
    \ pair.getValue()));\n            }\n        }\n        return result;", "   \
    \     ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse2 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse4 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> rowReverse5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowReverse6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowReverse7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse9 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse11 = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowReverse12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowReverse13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowReverse14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse16 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse18 = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowReverse19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowReverse20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowReverse21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse23 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse25 = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowReverse26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowReverse27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowReverse28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse30 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse32 = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().filter(e -> e == x).findFirst().ifPresent(e -> {\n           \
    \     result.add(new Pair<>(row.get(0), row.get(1)));\n                row.remove(0);\n\
    \                col.remove(0);\n            });\n        }\n        Collections.sort(row);\n\
    \        Collections.sort(col);\n        result.add(new Pair<>(row.get(0), col.get(0)));\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach(x -> {\n                col.add(x);\n            });\n\
    \            row.stream().forEach(x -> {\n                if (x == x) {\n    \
    \                result.add(new Pair<>(row.get(0), col.get(0)));\n           \
    \     }\n            });\n            row.clear();\n            col.clear();\n\
    \        }\n        return result;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n   \
    \     ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long> row\
    \ : lst) {\n            row.stream().filter(x -> x == x).forEach(x -> {\n    \
    \            row.add(x);\n            });\n            row.stream().filter(x ->\
    \ x == x).forEach(x -> {\n                col.add(x);\n            });\n     \
    \   }\n        Collections.sort(row);\n        Collections.sort(col);\n      \
    \  long row1 = row.get(0);\n        long row2 = row.get(row.size() - 1);\n   \
    \     long col1 = col.get(0);\n        long col2 = col.get(col.size() - 1);\n\
    \        if (row1 == row2) {\n            if (col1 == col2) {\n              \
    \  result.add(new Pair<>(row1, col1));\n            } else {\n               \
    \ result.add(new Pair<>(row1, col2));\n            }\n        } else if (col1\
    \ == col2) {\n            result.add(new Pair<>(row2, col1));\n        } else\
    \ {\n            result.add(new Pair<>(row2, col2));\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n  \
    \      ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col =\
    \ new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n            row.forEach(x\
    \ -> {\n                col.add(x);\n            });\n            col.forEach(x\
    \ -> {\n                res.add(new Pair<>(row.get(0), x));\n            });\n\
    \            row.clear();\n            col.clear();\n        }\n        res.sort((o1,\
    \ o2) -> {\n            if(o1.getKey() < o2.getKey()) {\n                return\
    \ -1;\n            }\n            if(o1.getKey() > o2.getKey()) {\n          \
    \      return 1;\n            }\n            return 0;\n        });\n        for(Pair<Long,\
    \ Long> pair : res) {\n            if(pair.getKey() == x) {\n                return\
    \ res;\n            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n\
    \            long y = row.get(x);\n            if (y != -1) {\n              \
    \  res.add(new Pair<>(row.get(0), y));\n            }\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                return o1.getFirst().compareTo(o2.getFirst());\n\
    \            }\n        });\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o2.getSecond().compareTo(o1.getSecond());\n  \
    \          }\n        });\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp34", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.stream().forEach((e) -> {\n                col.add(e);\n            });\n\
    \            row.stream().forEach((e) -> {\n                if(e == x) {\n   \
    \                 result.add(new Pair<>(row.get(0), col.get(0)));\n          \
    \      }\n            });\n        }\n        Collections.sort(result);\n    \
    \    return result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.stream().forEach(x -> {\n                if(x == x) {\n                \
    \    res.add(new Pair<>(row.indexOf(x), col.indexOf(x)));\n                }\n\
    \            });\n            col.stream().forEach(x -> {\n                if(x\
    \ == x) {\n                    res.add(new Pair<>(row.indexOf(x), col.indexOf(x)));\n\
    \                }\n            });\n            row.stream().forEach(x -> {\n\
    \                if(x == x) {\n                    res.add(new Pair<>(row.indexOf(x),\
    \ col.indexOf(x)));\n                }\n            });\n            col.stream().forEach(x\
    \ -> {\n                if(x == x) {\n                    res.add(new Pair<>(row.indexOf(x),\
    \ col.indexOf(x)));\n                }\n            });\n        }\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n     \
    \   ArrayList<Long> row1 = new ArrayList<>();\n        ArrayList<Long> row2 =\
    \ new ArrayList<>();\n        ArrayList<Long> row3 = new ArrayList<>();\n    \
    \    ArrayList<Long> row4 = new ArrayList<>();\n        ArrayList<Long> row5 =\
    \ new ArrayList<>();\n        ArrayList<Long> row6 = new ArrayList<>();\n    \
    \    ArrayList<Long> row7 = new ArrayList<>();\n        ArrayList<Long> row8 =\
    \ new ArrayList<>();\n        ArrayList<Long> row9 = new ArrayList<>();\n    \
    \    ArrayList<Long> row10 = new ArrayList<>();\n        ArrayList<Long> row11\
    \ = new ArrayList<>();\n        ArrayList<Long> row12 = new ArrayList<>();\n \
    \       ArrayList<Long> row13 = new ArrayList<>();\n        ArrayList<Long> row14\
    \ = new ArrayList<>();\n        ArrayList<Long> row15 = new ArrayList<>();\n \
    \       ArrayList<Long> row16 = new ArrayList<>();\n        ArrayList<Long> row17\
    \ = new ArrayList<>();\n        ArrayList<Long> row18 = new ArrayList<>();\n \
    \       ArrayList<Long> row19 = new ArrayList<>();\n        ArrayList<Long> row20\
    \ = new ArrayList<>();\n        ArrayList<Long> row21 = new ArrayList<>();\n \
    \       ArrayList<Long> row22 = new ArrayList<>();\n        ArrayList<Long> row23\
    \ = new ArrayList<>();\n        ArrayList<Long> row24 = new ArrayList<>();\n \
    \       ArrayList<Long> row25 = new ArrayList<>();\n        ArrayList<Long> row26\
    \ = new ArrayList<>();\n        ArrayList<Long> row27 = new ArrayList<>();\n \
    \       ArrayList<Long> row28 = new ArrayList<>();\n        ArrayList<Long> row29\
    \ = new ArrayList<>();\n        ArrayList<Long> row30 = new ArrayList<>();\n \
    \       ArrayList<Long> row31 = new ArrayList<>();\n        ArrayList<Long> row32\
    \ = new ArrayList<>();\n        ArrayList<Long> row33 = new ArrayList<>();\n \
    \       ArrayList<Long> row34 = new ArrayList<>();\n        ArrayList<Long> row35\
    \ = new ArrayList<>();\n        ArrayList<Long> row36 = new ArrayList<>();\n \
    \       ArrayList<Long> row37 = new ArrayList<>();\n        ArrayList<Long> row38\
    \ = new ArrayList<>();\n        ArrayList<Long> row39 = new ArrayList<>();\n \
    \       ArrayList<Long> row40 = new ArrayList<>();\n        ArrayList<Long> row41\
    \ = new ArrayList<>();\n        ArrayList<Long> row42 = new ArrayList<>();\n \
    \       ArrayList<Long> row43 = new ArrayList<>();\n        ArrayList<Long> row44\
    \ = new ArrayList<>();\n        ArrayList<Long> row45 = new ArrayList<>();\n \
    \       ArrayList<Long> row46 = new ArrayList<>();\n        ArrayList<Long> row47\
    \ = new ArrayList<>();\n        ArrayList<Long> row48 = new ArrayList<>();\n \
    \       ArrayList<Long> row49 = new ArrayList<>();\n        ArrayList<Long", " \
    \       ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp34", "        ArrayList<Pair<Long, Long>>\
    \ result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(x -> {\n                if (x\
    \ == x) {\n                    result.add(new Pair<>(row.get(0), row.get(1)));\n\
    \                }\n            });\n        }\n        return result;", "   \
    \     ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.stream().filter(e\
    \ -> e == x).findFirst().ifPresent(e -> {\n                col.stream().filter(e\
    \ -> e == x).findFirst().ifPresent(e -> {\n                    res.add(new Pair<>(row.get(0),\
    \ col.get(0)));\n                    res.add(new Pair<>(row.get(0), col.get(1)));\n\
    \                });\n            });\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                return o1.getFirst().compareTo(o2.getFirst());\n\
    \            }\n        });\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return o2.getFirst().compareTo(o1.getFirst());\n    \
    \        }\n        });\n        return res;", "        ArrayList<Pair<Long, Long>>\
    \ res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowRes = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> colRes\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  row.stream().forEach((e) -> {\n                if (e == x) {\n            \
    \        rowRes.add(new Pair<>(row.size(), e));\n                }\n         \
    \   });\n        }\n        for (ArrayList<Long> col : lst) {\n            col.stream().forEach((e)\
    \ -> {\n                if (e == x) {\n                    colRes.add(new Pair<>(col.size(),\
    \ e));\n                }\n            });\n        }\n        rowRes.sort((e1,\
    \ e2) -> {\n            if (e1.getKey() < e2.getKey()) {\n                return\
    \ -1;\n            }\n            return 1;\n        });\n        colRes.sort((e1,\
    \ e2) -> {\n            if (e1.getKey() < e2.getKey()) {\n                return\
    \ -1;\n            }\n            return 1;\n        });\n        for (Pair<Long,\
    \ Long> r : rowRes) {\n            for (Pair<Long, Long> c : colRes) {\n     \
    \           res.add(new Pair<>(r.getKey() - c.getKey(), r.getValue() - c.getValue()));\n\
    \            }\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse2 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse4 = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> rowReverse5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowReverse6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowReverse7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse9 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse10 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse11 = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowReverse12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowReverse13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowReverse14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse16 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse18 = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowReverse19 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowReverse20 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowReverse21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse23 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse25 = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowReverse26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowReverse27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowReverse28 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse29\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse30 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowReverse31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowReverse32 = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowReverse33 = new ArrayList<>();\n        ArrayList<Pair",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for(ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                if(x == x) {\n                    result.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                }\n            });\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.stream().filter(x -> x == x).forEach(row::add);\n            col.stream().filter(x\
    \ -> x == x).forEach(col::add);\n        }\n        Collections.sort(row);\n \
    \       Collections.sort(col);\n        for(long r : row) {\n            for(long\
    \ c : col) {\n                if(c <= r) {\n                    result.add(new\
    \ Pair<>(r, c));\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ row.stream().forEach(x -> {\n                if(x == x) {\n                \
    \    result.add(new Pair<>(row.get(0), row.get(1)));\n                }\n    \
    \        });\n        }\n        Collections.sort(result);\n        for(Pair<Long,\
    \ Long> pair : result) {\n            col.stream().forEach(x -> {\n          \
    \      if(x == x) {\n                    result.add(new Pair<>(pair.getKey(),\
    \ pair.getValue()));\n                }\n            });\n        }\n        Collections.sort(result);\n\
    \        for(Pair<Long, Long> pair : result) {\n            row.stream().forEach(x\
    \ -> {\n                if(x == x) {\n                    result.add(new Pair<>(pair.getKey(),\
    \ pair.getValue()));\n                }\n            });\n        }\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n  \
    \      ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col =\
    \ new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(v\
    \ -> {\n                if (v == x) {\n                    res.add(new Pair<>(row.get(0),\
    \ row.get(1)));\n                }\n            });\n        }\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n     \
    \   ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col = new\
    \ ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(x\
    \ -> {\n                col.add(x);\n            });\n            col.stream().forEach(x\
    \ -> {\n                res.add(new Pair<>(row.get(0), x));\n            });\n\
    \            col.clear();\n            row.clear();\n        }\n        res.stream().forEach(x\
    \ -> {\n            res.add(new Pair<>(x.first(), x));\n        });\n        res.stream().forEach(x\
    \ -> {\n            res.add(new Pair<>(x.first(), x));\n        });\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return\
    \ o1.first().compareTo(o2.first());\n            }\n        });\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return\
    \ o2.first().compareTo(o1.first());\n            }\n        });\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n\
    \            for (long y : row) {\n                if (y == x) {\n           \
    \         res.add(new Pair<>(row.size(), col.size()));\n                    row.add(0);\n\
    \                    col.add(0);\n                }\n            }\n        }\n\
    \        Collections.sort(res);\n        Collections.sort(row, Comparator.comparingLong(Pair::getFirst));\n\
    \        Collections.sort(col, Comparator.comparingLong(Pair::getSecond).reversed());\n\
    \        return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n\
    \            row.sort(Comparator.comparingLong(Long::longValue));\n          \
    \  col.sort(Comparator.comparingLong(Long::longValue).reversed());\n         \
    \   for (long y : row) {\n                if (y == x) {\n                    res.add(new\
    \ Pair<>(row.get(0), col.get(0)));\n                }\n            }\n       \
    \ }\n        return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            for (long y : row) {\n\
    \                if (y == x) {\n                    res.add(new Pair<>(row.indexOf(y),\
    \ row.lastIndexOf(y)));\n                }\n            }\n        }\n       \
    \ Collections.sort(res, Comparator.comparing(Pair::getFirst));\n        Collections.sort(res,\
    \ Comparator.comparing(Pair::getSecond));\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().filter(e -> e == x).findFirst().ifPresent(e\
    \ -> {\n                res.add(new Pair<>(row.get(0), row.get(1)));\n       \
    \         row.remove(0);\n                col.remove(0);\n            });\n  \
    \      }\n        Collections.sort(res);\n        Collections.sort(col, Comparator.reverseOrder());\n\
    \        for (Pair<Long, Long> e : res) {\n            row.add(e.getFirst());\n\
    \            col.add(e.getSecond());\n        }\n        return res;", "     \
    \   ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for (ArrayList<Long> row : lst) {\n            row.forEach(x -> {\n \
    \               if (x == x) {\n                    res.add(new Pair<>(row.indexOf(x),\
    \ col.indexOf(x)));\n                }\n            });\n        }\n        Collections.sort(res,\
    \ (x, y) -> {\n            if (x.first() < y.first()) {\n                return\
    \ -1;\n            }\n            if (x.first() > y.first()) {\n             \
    \   return 1;\n            }\n            return 0;\n        });\n        Collections.sort(res,\
    \ (x, y) -> {\n            if (x.second() < y.second()) {\n                return\
    \ -1;\n            }\n            if (x.second() > y.second()) {\n           \
    \     return 1;\n            }\n            return 0;\n        });\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n     \
    \   ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col = new\
    \ ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n            row.stream().forEach(v\
    \ -> {\n                if (v == x) {\n                    res.add(new Pair<>(row.size(),\
    \ col.size()));\n                }\n            });\n            col.clear();\n\
    \        }\n        return res;", "        ArrayList<Pair<Long, Long>> res = new\
    \ ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long>\
    \ col = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n       \
    \     row.stream().filter(e -> e == x).findFirst().ifPresent(e -> {\n        \
    \        res.add(new Pair<>(row.get(0), row.get(1)));\n                row.remove(0);\n\
    \                col.remove(0);\n            });\n        }\n        Collections.sort(res);\n\
    \        Collections.sort(row, Collections.reverseOrder());\n        Collections.sort(col,\
    \ Collections.reverseOrder());\n        res.add(new Pair<>(row.get(0), col.get(0)));\n\
    \        return res;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColCol = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowColColColCol = new ArrayList<>();\n       \
    \ ArrayList<Pair<Long, Long>> rowColColColColCol = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> rowColColColColColCol = new ArrayList<>();\n  \
    \      ArrayList<Pair<Long, Long>> rowColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n   \
    \     ArrayList<Long> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ tuple = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple2 = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> tuple4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> tuple8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> tuple12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> tuple16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> tuple20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> tuple24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> tuple28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> tuple32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> tuple33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> tuple34\
    \ = new ArrayList<>();\n        ArrayList<Pair<", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowCol = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> rowColCol = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColCol =\
    \ new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> res =\
    \ new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n     \
    \   ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long> row\
    \ : lst) {\n            row.stream().filter(e -> e == x).findFirst().ifPresent(e\
    \ -> {\n                col.stream().filter(e -> e == e).findFirst().ifPresent(e1\
    \ -> {\n                    res.add(new Pair<>(row.get(0), col.get(0)));\n   \
    \                 res.add(new Pair<>(row.get(0), col.get(1)));\n             \
    \   });\n            });\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for (ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(v -> {\n                if (v\
    \ == x) {\n                    result.add(new Pair<>(row.get(0), row.get(1)));\n\
    \                }\n            });\n        }\n        return result;", "   \
    \     ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> pairs = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(v -> {\n                if(v.equals(x))\
    \ {\n                    pairs.add(new Pair<Long, Long>(row.get(0), row.get(1)));\n\
    \                }\n            });\n        }\n        pairs.stream().sorted(Comparator.comparing(Pair::getLeft)).forEach(v\
    \ -> {\n            col.stream().forEach(v1 -> {\n                if(v1.equals(v.getRight()))\
    \ {\n                    res.add(new Pair<Long, Long>(v.getLeft(), v.getRight()));\n\
    \                }\n            });\n        });\n        pairs.stream().sorted(Comparator.comparing(Pair::getRight)).forEach(v\
    \ -> {\n            row.stream().forEach(v1 -> {\n                if(v1.equals(v.getLeft()))\
    \ {\n                    res.add(new Pair<Long, Long>(v.getLeft(), v.getRight()));\n\
    \                }\n            });\n        });\n        return res;", "    \
    \    ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column\
    \ = new ArrayList<>();\n        for (ArrayList<Long> row : lst) {\n          \
    \  for (long y : row) {\n                if (y == x) {\n                    result.add(new\
    \ Pair<>(row.indexOf(y), row.indexOf(row.get(row.indexOf(y)))));\n           \
    \     }\n            }\n        }\n        Collections.sort(result);\n       \
    \ for (Pair<Long, Long> p : result) {\n            row.add(p.getFirst());\n  \
    \          column.add(p.getSecond());\n        }\n        Collections.sort(column);\n\
    \        for (Pair<Long, Long> p : column) {\n            result.add(new Pair<>(p.getFirst(),\
    \ p.getSecond()));\n        }\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        for(ArrayList<Long>\
    \ row : lst) {\n            row.stream().forEach(e -> {\n                if(e\
    \ == x) {\n                    res.add(new Pair<Long, Long>(row.get(0), row.get(1)));\n\
    \                }\n            });\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                if(o1.getKey() < o2.getKey())\
    \ {\n                    return -1;\n                } else if(o1.getKey() > o2.getKey())\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        });\n        for(Pair<Long,\
    \ Long> e : res) {\n            row.add(e.getKey());\n            col.add(e.getValue());\n\
    \        }\n        Collections.sort(col, new Comparator<Long>() {\n         \
    \   public int compare(Long o1, Long o2) {\n                if(o1 < o2) {\n  \
    \                  return -1;\n                } else if(o1 > o2) {\n        \
    \            return 1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        for(Long e : col) {\n\
    \            res.add(new Pair<Long, Long>(0, e));\n        }\n        return res;",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Long>\
    \ row = new ArrayList<>();\n        ArrayList<Long> col = new ArrayList<>();\n\
    \        for(ArrayList<Long> row : lst) {\n            row.stream().forEach(e\
    \ -> {\n                col.add(e);\n            });\n            col.stream().forEach(e\
    \ -> {\n                result.add(new Pair<>(row.get(0), e));\n            });\n\
    \            row.clear();\n            col.clear();\n        }\n        Collections.sort(result);\n\
    \        Collections.sort(result, Comparator.comparingLong(Pair::getValue));\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n\
    \        for(ArrayList<Long> row : lst) {\n            row.forEach(x -> {\n  \
    \              row.add(x, x);\n            });\n            row.forEach(x -> {\n\
    \                col.add(x);\n            });\n            row.forEach(x -> {\n\
    \                result.add(new Pair<>(row.get(0), col.get(0)));\n           \
    \ });\n        }\n        Collections.sort(result);\n        for(Pair<Long, Long>\
    \ pair : result) {\n            temp.clear();\n            temp.add(pair);\n \
    \           temp.sort(Comparator.comparing(Pair::getRight));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getRight));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getRight));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getRight));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getRight));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getRight));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getRight));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getRight));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getRight));\n            temp.sort(Comparator.comparing(Pair::getLeft));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));\n            temp.sort(Comparator.comparing(Pair::getRight));\n\
    \            temp.sort(Comparator.comparing(Pair::getLeft));", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp34", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Long> row = new ArrayList<>();\n        ArrayList<Long> col\
    \ = new ArrayList<>();\n        for(ArrayList<Long> row : lst) {\n           \
    \ for(long y : row) {\n                if(y == x) {\n                    result.add(new\
    \ Pair<>(row.size(), col.size()));\n                }\n            }\n       \
    \ }\n        Collections.sort(result);\n        Collections.sort(result, Comparator.comparingLong(Pair::getFirst));\n\
    \        Collections.sort(result, Comparator.comparingLong(Pair::getSecond));\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColCol = new ArrayList<>();\n     \
    \   ArrayList<Pair<Long, Long>> rowColColColCol = new ArrayList<>();\n       \
    \ ArrayList<Pair<Long, Long>> rowColColColColCol = new ArrayList<>();\n      \
    \  ArrayList<Pair<Long, Long>> rowColColColColColCol = new ArrayList<>();\n  \
    \      ArrayList<Pair<Long, Long>> rowColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColCol = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> rowColColColColColColColColColColColColColColColCol\
    \ = new ArrayList<>();\n        ", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n   \
    \     ArrayList<Long> col = new ArrayList<>();\n        ArrayList<Pair<Long, Long>>\
    \ rowResult = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> colResult\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> resultRow = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> resultCol = new ArrayList<>();\n        for\
    \ (ArrayList<Long> row : lst) {\n            row.stream().filter(x -> x == x).forEach(x\
    \ -> row.add(x));\n        }\n        Collections.sort(row);\n        Collections.sort(col);\n\
    \        for (Long row : row) {\n            row.stream().filter(x -> x == x).forEach(x\
    \ -> rowResult.add(new Pair<>(x, row)));\n        }\n        for (Long col : col)\
    \ {\n            col.stream().filter(x -> x == x).forEach(x -> colResult.add(new\
    \ Pair<>(x, col)));\n        }\n        for (Pair<Long, Long> rowResult : rowResult)\
    \ {\n            for (Pair<Long, Long> colResult : colResult) {\n            \
    \    if (rowResult.getLeft() == colResult.getLeft()) {\n                    result.add(new\
    \ Pair<>(rowResult.getRight(), colResult.getRight()));\n                }\n  \
    \          }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> col = new\
    \ ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp34", "        ArrayList<Pair<Long, Long>>\
    \ res = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> col = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp2\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp3 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp4 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp5 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp6\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp7 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp8 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp9 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp10\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp11 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp12 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp13 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp14\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp15 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp16 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp17 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp18\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp19 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp20 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp21 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp22\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp23 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp24 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp25 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp26\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp27 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp28 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp29 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp30\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp31 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp32 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp33 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp34",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> row = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> column\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp2 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp3 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp4\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp5 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp6 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp7 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp8\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp9 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp10 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp11 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp12\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp13 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp14 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp15 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp16\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp17 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp18 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp19 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp20\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp21 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp22 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp23 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp24\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp25 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp26 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp27 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp28\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp29 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp30 = new ArrayList<>();\n        ArrayList<Pair<Long,\
    \ Long>> temp31 = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp32\
    \ = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> temp33 = new ArrayList<>();\n\
    \        ArrayList<Pair<Long, Long>> temp34", "        ArrayList<Pair<Long, Long>>\
    \ res = new ArrayList<>();\n        ArrayList<Long> row = new ArrayList<>();\n\
    \        ArrayList<Long> col = new ArrayList<>();\n        long rowCount = 0;\n\
    \        long colCount = 0;\n        for (ArrayList<Long> row : lst) {\n     \
    \       rowCount++;\n            for (Long val : row) {\n                colCount++;\n\
    \                if (val == x) {\n                    res.add(new Pair<>(rowCount,\
    \ colCount));\n                    break;\n                }\n            }\n\
    \        }\n        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n\
    \            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n\
    \                return o1.getFirst() - o2.getFirst();\n            }\n      \
    \  });\n        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n \
    \           public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n \
    \               return o2.getSecond() - o1.getSecond();\n            }\n     \
    \   });\n        return res;"]
stop_tokens:
- "\n    }\n"
