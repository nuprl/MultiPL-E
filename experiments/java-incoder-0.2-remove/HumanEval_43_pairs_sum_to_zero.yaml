name: HumanEval_43_pairs_sum_to_zero
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
  \    // it returns True if there are two distinct elements in the list that\n  \
  \  // sum to zero, and False otherwise.\n    public static boolean pairsSumToZero(ArrayList<Integer>\
  \ l) {\n"
tests: "return true;\n    }\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)5, (int)0)))) == (false));\n\
  \    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
  \ (int)-2, (int)1)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)7)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)-5, (int)3, (int)5, (int)7)))) == (true));\n    assert(pairsSumToZero((new\
  \ ArrayList<Integer>(Arrays.asList((int)1)))) == (false));\n    assert(pairsSumToZero((new\
  \ ArrayList<Integer>(Arrays.asList((int)-3, (int)9, (int)-1, (int)3, (int)2, (int)30))))\
  \ == (true));\n    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)9, (int)-1, (int)3, (int)2, (int)31)))) == (true));\n    assert(pairsSumToZero((new\
  \ ArrayList<Integer>(Arrays.asList((int)-3, (int)9, (int)-1, (int)4, (int)2, (int)30))))\
  \ == (false));\n    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)9, (int)-1, (int)4, (int)2, (int)31)))) == (false));\n    }\n\n}\n"
completions: ["        ArrayList<Integer> pairs = new ArrayList<Integer>();\n    \
    \    for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size();\
    \ j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                   \
    \ pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n           \
    \     }\n            }\n        }\n        return pairs.size() == 2;", "     \
    \   HashSet<Integer> set = new HashSet<Integer>();\n        for(int i : l) {\n\
    \            set.add(Math.abs(i));\n        }\n        return set.size() == 2;",
  "        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l.size(); i++) {\n            int x = l.get(i);\n            int y =\
    \ l.get(i + 1);\n            int z = x + y;\n            l2.add(z);\n        }\n\
    \        Collections.sort(l2);\n        for(int i = 0; i < l2.size(); i++) {\n\
    \            int x = l2.get(i);\n            int y = l2.get(i + 1);\n        \
    \    int z = x + y;\n            if(z == 0)\n                return true;\n  \
    \      }\n        return false;", "        Set<Integer> set = new HashSet<>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j\
    \ < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n       \
    \             pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n\
    \                }\n            }\n        }\n        return pairs.size() == 2;",
  "        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i = 0;\
    \ i < l.size(); i++) {\n            int key = l.get(i);\n            map.put(key,\
    \ map.getOrDefault(key, 0) + 1);\n        }\n        for(int i = 0; i < l.size();\
    \ i++) {\n            int key = l.get(i);\n            map.put(key, map.getOrDefault(key,\
    \ 0) - 1);\n        }\n        return map.values().stream().allMatch(i -> i ==\
    \ 0);", "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n      \
    \  for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size();\
    \ j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                   \
    \ pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n           \
    \     }\n            }\n        }\n        return pairs.size() == 2;", "     \
    \   Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n          \
    \  set.add(Math.abs(i));\n        }\n        return set.size() == 2;", "     \
    \   boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n   \
    \         for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n  \
    \              if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        HashMap<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n      \
    \      int key = l.get(i);\n            map.put(key, map.getOrDefault(key, 0)\
    \ + 1);\n        }\n        for(int i = 0; i < l.size(); i++) {\n            int\
    \ key = l.get(i);\n            int count = map.get(key);\n            if(count\
    \ > 1) {\n                return false;\n            }\n            map.put(key,\
    \ count - 1);\n        }\n        return true;", "        ArrayList<Integer> l1\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            l1.add(l.get(i));\n\
    \        }\n        for(int i = 0; i < l.size(); i++) {\n            l2.add(l.get(i));\n\
    \        }\n        for(int i = 0; i < l1.size(); i++) {\n            for(int\
    \ j = 0; j < l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n\
    \                    l1.remove(l1.get(i));\n                    l2.remove(l2.get(j));\n\
    \                }\n            }\n        }\n        if(l1.size() != l2.size())\
    \ {\n            return false;\n        }\n        return true;", "        ArrayList<Integer>\
    \ pairs = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n  \
    \          for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    pairs.add(new Integer(l.get(i)));\n\
    \                    pairs.add(new Integer(l.get(j)));\n                }\n  \
    \          }\n        }\n        return pairs.size() == 2;", "        HashSet<Integer>\
    \ set = new HashSet<Integer>();\n        for(int i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;", "        HashMap<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i : l) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        for(int i : map.keySet()) {\n            int count\
    \ = map.get(i);\n            if(count > 1) {\n                return false;\n\
    \            }\n        }\n        return true;", "        ArrayList<Integer>\
    \ l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i : l) {\n            l1.add(i);\n            l2.add(-l[i]);\n\
    \        }\n        boolean result = l1.equals(l2);\n        return result;",
  "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() > 1;", "        ArrayList<Integer> pairs\
    \ = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n        \
    \    for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j)\
    \ == 0) {\n                    pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n\
    \                }\n            }\n        }\n        return pairs.size() == 2;",
  "        Set<Integer> set = new HashSet<Integer>();\n        for(int i : l) {\n\
    \            set.add(Math.abs(i));\n        }\n        return set.size() == 2;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n    \
    \            if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(new\
    \ Integer(i));\n                    pairs.add(new Integer(j));\n             \
    \   }\n            }\n        }\n        return pairs.size() == 2;", "       \
    \ ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for(int i : l) {\n\
    \            int sum = 0;\n            for(int j : l) {\n                sum +=\
    \ j;\n            }\n            if(sum == 0) {\n                l2.add(i);\n\
    \            }\n        }\n        return l2.size() == 2;", "        boolean result\
    \ = false;\n        for(int i = 0; i < l.size(); i++) {\n            for(int j\
    \ = i + 1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0)\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            l1.add(l.get(i));\n\
    \        }\n        for(int i = 0; i < l.size(); i++) {\n            l2.add(l.get(i));\n\
    \        }\n        for(int i = 0; i < l1.size(); i++) {\n            for(int\
    \ j = 0; j < l2.size(); j++) {\n                if(l1.get(i) + l2.get(j) == 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n        return false;", "        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : l){\n            set.add(Math.abs(i));\n        }\n     \
    \   return set.size() == 2;", "        boolean result = false;\n        for (int\
    \ i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++)\
    \ {\n                if (l.get(i) + l.get(j) == 0) {\n                    result\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int sum = 0;\n     \
    \       for(int j = 0; j < l.size(); j++) {\n                sum += l.get(j);\n\
    \            }\n            if(sum == 0) {\n                l2.add(l.get(i));\n\
    \            }\n        }\n        return l2.size() == 2;", "        ArrayList<Integer>\
    \ pairs = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n  \
    \          for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n             \
    \       pairs.add(l.get(j));\n                }\n            }\n        }\n  \
    \      return pairs.size() == 2;", "        boolean result = false;\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    result\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> pairs = new ArrayList<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j <\
    \ l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n         \
    \           pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n \
    \               }\n            }\n        }\n        return pairs.size() == 2;",
  "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        Set<Integer> set = new\
    \ HashSet<>();\n        for(int i : l)\n            set.add(Math.abs(i));\n  \
    \      return set.size() == 2;", "        HashMap<Integer, Integer> map = new\
    \ HashMap<>();\n        for(int i : l) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        return map.values().stream().allMatch(i -> i ==\
    \ 2);", "        Set<Integer> set = new HashSet<Integer>();\n        for(int i\
    \ : l) {\n            set.add(Math.abs(i));\n        }\n        return set.size()\
    \ == 2;", "        ArrayList<Integer> l2 = new ArrayList<Integer>();\n       \
    \ for(int i = 0; i < l.size(); i++) {\n            int j = i + 1;\n          \
    \  while(j < l.size() && l.get(j) == l.get(i)) {\n                l2.add(l.get(j));\n\
    \                j++;\n            }\n        }\n        return l2.size() == 2;",
  "        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l.size(); i++) {\n            int j = i + 1;\n            while(j < l.size()\
    \ && l.get(i) + l.get(j) == 0) {\n                l2.add(l.get(i));\n        \
    \        j++;\n            }\n        }\n        return l2.size() == 2;", "  \
    \      int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
    \  sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n\
    \        }\n        return false;", "        boolean result = false;\n       \
    \ for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size();\
    \ j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                   \
    \ result = true;\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        HashMap<Integer, Integer> map =\
    \ new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n            int\
    \ key = l.get(i);\n            int value = map.get(key);\n            if (value\
    \ == null) {\n                map.put(key, 1);\n            } else {\n       \
    \         map.put(key, value + 1);\n            }\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            int\
    \ value = map.get(key);\n            if (value == 1) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        boolean result\
    \ = false;\n        for(int i = 0; i < l.size(); i++) {\n            for(int j\
    \ = i + 1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0)\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        int sum\
    \ = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n\
    \        }\n        return sum == 0;", "        boolean found = false;\n     \
    \   for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size();\
    \ j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                   \
    \ found = true;\n                    break;\n                }\n            }\n\
    \        }\n        return found;", "        boolean result = false;\n       \
    \ for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size();\
    \ j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                   \
    \ result = true;\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        HashMap<Integer, Integer> map =\
    \ new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n            int\
    \ key = l.get(i);\n            map.put(key, map.containsKey(key) ? map.get(key)\
    \ + 1 : 1);\n        }\n        for(int i = 0; i < l.size(); i++) {\n        \
    \    int key = l.get(i);\n            int count = map.get(key);\n            if(count\
    \ > 1) {\n                return false;\n            }\n            map.put(key,\
    \ 0);\n        }\n        return true;", "        ArrayList<Integer> l2 = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n       \
    \     int j = i;\n            while(j > 0 && l.get(j - 1) != l.get(j)) {\n   \
    \             l2.add(l.get(j));\n                j--;\n            }\n       \
    \ }\n        return l2.size() == 2;", "        boolean result = false;\n     \
    \   for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size();\
    \ j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                   \
    \ result = true;\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        HashSet<Integer> hs = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            if (hs.add(i)) {\n               \
    \ return true;\n            }\n        }\n        return false;", "        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n\
    \            int key = l.get(i);\n            int value = map.get(key);\n    \
    \        map.put(key, value == null ? 1 : value + 1);\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            int\
    \ value = map.get(key);\n            if(value == 1) return false;\n        }\n\
    \        return true;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : l) {\n            map.put(i, map.getOrDefault(i, 0)\
    \ + 1);\n        }\n        for (Integer i : map.keySet()) {\n            if (map.get(i)\
    \ != 1) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        ArrayList<Integer> l1 = new ArrayList<Integer>();\n       \
    \ ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            l1.add(l.get(i));\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            l2.add(l.get(i));\n        }\n    \
    \    for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size();\
    \ j++) {\n                if(l1.get(i) + l2.get(j) == 0) {\n                 \
    \   return true;\n                }\n            }\n        }\n        return\
    \ false;", "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n   \
    \     for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size();\
    \ j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                   \
    \ pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n           \
    \     }\n            }\n        }\n        return pairs.size() == 2;", "     \
    \   boolean pairs = false;\n        for(int i = 0; i < l.size()-1; i++) {\n  \
    \          for(int j = i+1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    pairs = true;\n                    break;\n\
    \                }\n            }\n        }\n        return pairs;", "      \
    \  ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int i = 0;\
    \ i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        ArrayList<Integer> pairs\
    \ = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n \
    \           for(int j = i+1; j < l.size(); j++) {\n                pairs.add(l.get(i)\
    \ + l.get(j));\n            }\n        }\n        boolean result = pairs.size()\
    \ > 1 && pairs.stream().distinct().count() == 2;\n        return result;", " \
    \       ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(new\
    \ Integer(i));\n                    pairs.add(new Integer(j));\n             \
    \   }\n            }\n        }\n        return pairs.size() == 2;", "       \
    \ HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i <\
    \ l.size(); i++) {\n            int key = l.get(i);\n            map.put(key,\
    \ map.getOrDefault(key, 0) + 1);\n        }\n        for(int i = 0; i < l.size();\
    \ i++) {\n            int key = l.get(i);\n            if(map.getOrDefault(key,\
    \ 0) == 1) {\n                return false;\n            }\n        }\n      \
    \  return true;", "        boolean result = false;\n        for(int i = 0; i <\
    \ l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n    \
    \            if(l.get(i) + l.get(j) == 0) {\n                    result = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        boolean result = false;\n        for(int i = 0;\
    \ i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == 0) {\n                    result =\
    \ true;\n                    break;\n                }\n            }\n      \
    \  }\n        return result;", "        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int x = l.get(i);\n\
    \            int y = l.get(i + 1);\n            l2.add(x + y);\n        }\n  \
    \      for(int i = 0; i < l2.size(); i++) {\n            int x = l2.get(i);\n\
    \            int y = l2.get(i + 1);\n            if(x != y) {\n              \
    \  return false;\n            }\n        }\n        return true;", "        ArrayList<Integer>\
    \ pairs = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n  \
    \          for(int j = i+1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    pairs.add(new Integer(i));\n       \
    \             pairs.add(new Integer(j));\n                }\n            }\n \
    \       }\n        return pairs.size() > 1;", "        Set<Integer> set = new\
    \ HashSet<Integer>();\n        for(int i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;", "        boolean result = false;\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j\
    \ < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n       \
    \             result = true;\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            l1.add(l.get(i));\n\
    \            l2.add(0);\n        }\n        for(int i = 0; i < l.size(); i++)\
    \ {\n            for(int j = 0; j < l.size(); j++) {\n                if(i !=\
    \ j) {\n                    if(l1.get(i) + l1.get(j) == 0) {\n               \
    \         l2.set(j, l2.get(j) + l2.get(i));\n                        l1.set(i,\
    \ 0);\n                        l1.set(j, 0);\n                    }\n        \
    \        }\n            }\n        }\n        return l1.size() == l2.size();",
  "        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n       \
    \     if(i == 0) return false;\n            set.add(Math.abs(i));\n        }\n\
    \        return set.size() == 2;", "        ArrayList<Integer> l1 = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            l1.add(l.get(i));\n        }\n      \
    \  for(int i = 0; i < l.size(); i++) {\n            l2.add(l.get(i));\n      \
    \  }\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0;\
    \ j < l2.size(); j++) {\n                if(l1.get(i) + l2.get(j) == 0) {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \        return false;", "        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            map.put(key, map.getOrDefault(key, 0) + 1);\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            int\
    \ count = map.get(key);\n            if(count > 1) {\n                return false;\n\
    \            }\n            map.put(key, count - 1);\n        }\n        return\
    \ true;", "        boolean pairs = false;\n        for(int i = 0; i < l.size();\
    \ i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n              \
    \  if(l.get(i) + l.get(j) == 0) {\n                    pairs = true;\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ pairs;", "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(new\
    \ Integer(i));\n                    pairs.add(new Integer(j));\n             \
    \   }\n            }\n        }\n        return pairs.size() > 1;", "        boolean\
    \ result = false;\n        for(int i = 0; i < l.size(); i++) {\n            for(int\
    \ j = i + 1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0)\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        HashSet<Integer>\
    \ set = new HashSet<>();\n        for(int i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;", "        HashSet<Integer> set =\
    \ new HashSet<>();\n        for(int i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;", "        ArrayList<Integer> l2 =\
    \ new ArrayList<>();\n        for(int i : l) {\n            l2.add(i);\n     \
    \   }\n        for(int i : l2) {\n            for(int j : l2) {\n            \
    \    if(i != j && l2.contains(i+j)) {\n                    return true;\n    \
    \            }\n            }\n        }\n        return false;", "        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(int i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;", "        Set<Integer> set = new\
    \ HashSet<>();\n        for(int i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;", "        ArrayList<Integer> pairs\
    \ = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n        \
    \    for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j)\
    \ == 0) {\n                    pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n\
    \                }\n            }\n        }\n        return pairs.size() == 2;",
  "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n    \
    \            if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(new\
    \ Integer(l.get(i)));\n                    pairs.add(new Integer(l.get(j)));\n\
    \                }\n            }\n        }\n        return pairs.size() == 2;",
  "        Set<Integer> set = new HashSet<>();\n        for(int i : l) set.add(i);\n\
    \        for(int i : l) if(set.contains(i)) return true;\n        return false;",
  "        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
    \  sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n\
    \        }\n        return false;", "        ArrayList<Integer> pairs = new ArrayList<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j <\
    \ l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n         \
    \           pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n \
    \               }\n            }\n        }\n        return pairs.size() == 2;",
  "        Set<Integer> set = new HashSet<Integer>();\n        for(int i : l) {\n\
    \            set.add(Math.abs(i));\n        }\n        return set.size() == 2;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i+1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n       \
    \     set.add(Math.abs(i));\n        }\n        return set.size() == 2;", "  \
    \      HashSet<Integer> set = new HashSet<>();\n        for(int i : l) {\n   \
    \         set.add(Math.abs(i));\n        }\n        return set.size() == 2;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i =\
    \ 0; i < l.size(); i++) {\n            map.put(i, l.get(i));\n        }\n    \
    \    Set<Integer> keySet = map.keySet();\n        Set<Integer> keySet2 = map.keySet();\n\
    \        Set<Integer> keySet3 = map.keySet();\n        Set<Integer> keySet4 =\
    \ map.keySet();\n        Set<Integer> keySet5 = map.keySet();\n        Set<Integer>\
    \ keySet6 = map.keySet();\n        Set<Integer> keySet7 = map.keySet();\n    \
    \    Set<Integer> keySet8 = map.keySet();\n        Set<Integer> keySet9 = map.keySet();\n\
    \        Set<Integer> keySet10 = map.keySet();\n        Set<Integer> keySet11\
    \ = map.keySet();\n        Set<Integer> keySet12 = map.keySet();\n        Set<Integer>\
    \ keySet13 = map.keySet();\n        Set<Integer> keySet14 = map.keySet();\n  \
    \      Set<Integer> keySet15 = map.keySet();\n        Set<Integer> keySet16 =\
    \ map.keySet();\n        Set<Integer> keySet17 = map.keySet();\n        Set<Integer>\
    \ keySet18 = map.keySet();\n        Set<Integer> keySet19 = map.keySet();\n  \
    \      Set<Integer> keySet20 = map.keySet();\n        Set<Integer> keySet21 =\
    \ map.keySet();\n        Set<Integer> keySet22 = map.keySet();\n        Set<Integer>\
    \ keySet23 = map.keySet();\n        Set<Integer> keySet24 = map.keySet();\n  \
    \      Set<Integer> keySet25 = map.keySet();\n        Set<Integer> keySet26 =\
    \ map.keySet();\n        Set<Integer> keySet27 = map.keySet();\n        Set<Integer>\
    \ keySet28 = map.keySet();\n        Set<Integer> keySet29 = map.keySet();\n  \
    \      Set<Integer> keySet30 = map.keySet();\n        Set<Integer> keySet31 =\
    \ map.keySet();\n        Set<Integer> keySet32 = map.keySet();\n        Set<Integer>\
    \ keySet33 = map.keySet();\n        Set<Integer> keySet34 = map.keySet();\n  \
    \      Set<Integer> keySet35 = map.keySet();\n        Set<Integer", "        boolean\
    \ result = false;\n        for(int i = 0; i < l.size(); i++) {\n            for(int\
    \ j = i + 1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0)\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ pairs = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++)\
    \ {\n            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    pairs.add(new Integer(l.get(i)));\n\
    \                    pairs.add(new Integer(l.get(j)));\n                }\n  \
    \          }\n        }\n        return pairs.size() == 2;", "        ArrayList<Integer>\
    \ l2 = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n\
    \            l2.add(l.get(i));\n        }\n        for(int i = 0; i < l2.size();\
    \ i++) {\n            for(int j = i+1; j < l2.size(); j++) {\n               \
    \ if(l2.get(i) + l2.get(j) == 0) {\n                    return true;\n       \
    \         }\n            }\n        }\n        return false;", "        boolean\
    \ result = false;\n        for(int i = 0; i < l.size(); i++) {\n            for(int\
    \ j = i+1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0)\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n\
    \            int key = l.get(i);\n            map.put(key, map.getOrDefault(key,\
    \ 0) + 1);\n        }\n        for(int i = 0; i < l.size(); i++) {\n         \
    \   int key = l.get(i);\n            if(map.containsKey(key) && map.get(key) ==\
    \ 1) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        Set<Integer> set = new HashSet<>();\n        for(int i : l)\
    \ {\n            set.add(Math.abs(i));\n        }\n        return set.size() ==\
    \ 2;", "        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int x = l.get(i);\n            int\
    \ y = l.get(i + 1);\n            l2.add(x + y);\n        }\n        boolean result\
    \ = l2.stream().distinct().count() == 2;\n        return result;", "        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n\
    \            int key = l.get(i);\n            map.put(key, map.containsKey(key)\
    \ ? map.get(key) + 1 : 1);\n        }\n        for(int i = 0; i < l.size(); i++)\
    \ {\n            int key = l.get(i);\n            if(map.containsKey(key) && map.get(key)\
    \ == 1) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        Set<Integer> set = new HashSet<>();\n        for(int i : l)\
    \ {\n            set.add(Math.abs(i));\n        }\n        return set.size() ==\
    \ 2;", "        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            map.put(key,\
    \ map.containsKey(key) ? map.get(key) + 1 : 1);\n        }\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            if(map.containsKey(key)\
    \ && map.get(key) == 1) {\n                return false;\n            }\n    \
    \    }\n        return true;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            map.put(key, map.getOrDefault(key, 0) + 1);\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            if(map.get(key)\
    \ == 1) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(new\
    \ Integer(i));\n                    pairs.add(new Integer(j));\n             \
    \   }\n            }\n        }\n        return pairs.size() == 2;", "       \
    \ HashSet<Integer> hs = new HashSet<Integer>();\n        for(int i : l) {\n  \
    \          hs.add(i);\n        }\n        for(int i : l) {\n            if(!hs.contains(i))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n  \
    \              if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(new\
    \ Integer(i));\n                    pairs.add(new Integer(j));\n             \
    \   }\n            }\n        }\n        return pairs.size() == 2;", "       \
    \ HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i <\
    \ l.size(); i++) {\n            int key = l.get(i);\n            int value = map.get(key);\n\
    \            if(value == null) {\n                map.put(key, 1);\n         \
    \   } else {\n                map.put(key, value + 1);\n            }\n      \
    \  }\n        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            int value = map.get(key);\n            if(value == 1) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        HashSet<Integer> set = new HashSet<>();\n        for(int i : l) {\n   \
    \         set.add(Math.abs(i));\n        }\n        return set.size() == 2;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i+1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        ArrayList<Integer> l2\
    \ = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n \
    \           int sum = 0;\n            for(int j = 0; j < l.size(); j++) {\n  \
    \              sum += l.get(j);\n            }\n            if(sum == 0) {\n \
    \               l2.add(l.get(i));\n            }\n        }\n        if(l2.size()\
    \ > 1) {\n            return true;\n        }\n        return false;", "     \
    \   Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n          \
    \  set.add(Math.abs(i));\n        }\n        return set.size() == 2;", "     \
    \   boolean ret = false;\n        for(int i = 0; i < l.size(); i++) {\n      \
    \      for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i) +\
    \ l.get(j) == 0) {\n                    ret = true;\n                    break;\n\
    \                }\n            }\n        }\n        return ret;", "        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n\
    \            int key = l.get(i);\n            map.put(key, map.getOrDefault(key,\
    \ 0) + 1);\n        }\n        for(int i = 0; i < l.size(); i++) {\n         \
    \   int key = l.get(i);\n            if(map.getOrDefault(key, 0) == 2) {\n   \
    \             return true;\n            }\n        }\n        return false;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n           \
    \ sum += l.get(i);\n        }\n        return sum == 0;", "        int sum = 0;\n\
    \        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n\
    \        }\n        if (sum == 0) {\n            return true;\n        }\n   \
    \     return false;", "        Set<Integer> set = new HashSet<Integer>();\n  \
    \      for(int i : l) {\n            set.add(Math.abs(i));\n        }\n      \
    \  return set.size() == 2;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : l) {\n            map.putIfAbsent(i, 0);\n         \
    \   map.put(i, map.get(i) + 1);\n        }\n        return map.values().stream().allMatch(i\
    \ -> i == 1);", "        ArrayList<Integer> l1 = new ArrayList<Integer>();\n \
    \       ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l.size(); i++) {\n            l1.add(l.get(i));\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            l2.add(l.get(i));\n        }\n    \
    \    for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size();\
    \ j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    l1.remove(i);\n\
    \                    l2.remove(j);\n                }\n            }\n       \
    \ }\n        if(l1.size() != l2.size()) {\n            return false;\n       \
    \ }\n        return true;", "        boolean pairs = false;\n        for(int i\
    \ = 0; i < l.size()-1; i++) {\n            for(int j = i+1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    pairs\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        return pairs;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            map.put(key, map.getOrDefault(key, 0) + 1);\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            if(map.getOrDefault(key,\
    \ 0) == 2) {\n                return true;\n            }\n        }\n       \
    \ return false;", "        HashSet<Integer> set = new HashSet<>();\n        for(int\
    \ i : l) {\n            set.add(Math.abs(i));\n        }\n        return set.size()\
    \ == 2;", "        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            map.put(key,\
    \ map.containsKey(key) ? map.get(key) + 1 : 1);\n        }\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            int\
    \ value = map.get(key);\n            if(value == 1) {\n                return\
    \ false;\n            }\n            map.put(key, value - 1);\n        }\n   \
    \     return true;", "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j\
    \ < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n       \
    \             pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n\
    \                }\n            }\n        }\n        return pairs.size() == 2;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        HashSet<Integer> set = new HashSet<Integer>();\n        for(int i : l)\
    \ {\n            set.add(Math.abs(i));\n        }\n        return set.size() ==\
    \ 2;", "        HashSet<Integer> set = new HashSet<Integer>();\n        for(int\
    \ i : l)\n            set.add(Math.abs(i));\n        return set.size() == 2;",
  "        Set<Integer> set = new HashSet<Integer>();\n        for(int i : l) {\n\
    \            set.add(Math.abs(i));\n        }\n        return set.size() == 2;",
  "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n\
    \                pairs.add(l.get(i) + l.get(j));\n            }\n        }\n \
    \       boolean result = pairs.size() > 1;\n        return result;", "       \
    \ ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int i = 0;\
    \ i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        HashMap<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n      \
    \      int key = l.get(i);\n            int value = map.get(key);\n          \
    \  if(value == null) {\n                map.put(key, 1);\n            } else {\n\
    \                map.put(key, value + 1);\n            }\n        }\n        for(Map.Entry<Integer,\
    \ Integer> entry : map.entrySet()) {\n            if(entry.getValue() == 2) {\n\
    \                return true;\n            }\n        }\n        return false;",
  "        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n       \
    \     set.add(Math.abs(i));\n        }\n        return set.size() == 2;", "  \
    \      HashSet<Integer> hs = new HashSet<Integer>();\n        for(int i : l) {\n\
    \            hs.add(i);\n        }\n        for(int i : l) {\n            if(!hs.contains(i))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        HashSet<Integer> set = new HashSet<Integer>();\n        for(int i : l)\
    \ {\n            set.add(Math.abs(i));\n        }\n        return set.size() ==\
    \ 2;", "        HashSet<Integer> set = new HashSet<>();\n        for(int i : l)\
    \ set.add(i);\n        for(int i : l) if(set.contains(i)) return true;\n     \
    \   return false;", "        boolean pairs = false;\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n  \
    \              if(l.get(i) + l.get(j) == 0) {\n                    pairs = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return pairs;", "        ArrayList<Integer> l1 = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            l1.add(l.get(i));\n        }\n      \
    \  for(int i = 0; i < l.size(); i++) {\n            l2.add(l.get(i));\n      \
    \  }\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0;\
    \ j < l2.size(); j++) {\n                if(l1.get(i) + l2.get(j) == 0) {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \        return false;", "        boolean pairs = false;\n        for(int i =\
    \ 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == 0) {\n                    pairs = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return pairs;", "        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            l2.add(l.get(i));\n\
    \        }\n        for(int i = 0; i < l2.size(); i++) {\n            for(int\
    \ j = i + 1; j < l2.size(); j++) {\n                if(l2.get(i) + l2.get(j) ==\
    \ 0) {\n                    return true;\n                }\n            }\n \
    \       }\n        return false;", "        HashSet<Integer> set = new HashSet<>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        boolean result = false;\n        for (int\
    \ i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++)\
    \ {\n                if (l.get(i) + l.get(j) == 0) {\n                    result\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j <\
    \ l.size(); j++) {\n                pairs.add(l.get(i) + l.get(j));\n        \
    \    }\n        }\n        return pairs.size() == l.size() - 1;", "        int\
    \ n = l.size();\n        if (n == 0) return false;\n        int sum = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            sum += l.get(i);\n        }\n\
    \        for (int i = 0; i < n; i++) {\n            int j = i + 1;\n         \
    \   while (j < n && l.get(i) + l.get(j) == 0) {\n                j++;\n      \
    \      }\n            if (j - i == 1) {\n                return true;\n      \
    \      }\n        }\n        return false;", "        boolean ret = false;\n \
    \       int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n         \
    \   sum += l.get(i);\n            if (sum == 0) {\n                ret = true;\n\
    \                break;\n            }\n        }\n        return ret;", "   \
    \     ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        Set<Integer> set = new\
    \ HashSet<Integer>();\n        for(int i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;", "        ArrayList<Integer> l1 =\
    \ new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            l1.add(l.get(i));\n\
    \        }\n        for(int i = 0; i < l.size(); i++) {\n            l2.add(l.get(i));\n\
    \        }\n        for(int i = 0; i < l1.size(); i++) {\n            for(int\
    \ j = 0; j < l2.size(); j++) {\n                if(l1.get(i) + l2.get(j) == 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n        return false;", "        ArrayList<Integer> l2 = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int sum = 0;\n     \
    \       for(int j = 0; j < l.size(); j++) {\n                sum += l.get(j);\n\
    \                if(sum == 0) l2.add(j);\n            }\n        }\n        return\
    \ l2.size() == 2;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            map.put(key, map.getOrDefault(key, 0) + 1);\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            if(map.get(key)\
    \ == 1) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        Set<Integer> set = new HashSet<Integer>();\n        for(int\
    \ i : l) {\n            set.add(Math.abs(i));\n        }\n        return set.size()\
    \ == 2;", "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(new\
    \ Integer(l.get(i)));\n                    pairs.add(new Integer(l.get(j)));\n\
    \                }\n            }\n        }\n        return pairs.size() == 2;",
  "        HashSet<Integer> set = new HashSet<>();\n        for(int i : l) {\n   \
    \         set.add(Math.abs(i));\n        }\n        return set.size() == 2;",
  "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n    \
    \            if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        int n = l.size();\n \
    \       for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;",
  "        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i = 0;\
    \ i < l.size(); i++) {\n            int key = l.get(i);\n            map.put(key,\
    \ map.containsKey(key) ? map.get(key) + 1 : 1);\n        }\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            int key = l.get(i);\n            if(map.containsKey(key)\
    \ && map.get(key) == 1) {\n                return false;\n            }\n    \
    \    }\n        return true;", "        boolean result = false;\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    result\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> pairs = new ArrayList<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j <\
    \ l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n         \
    \           pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n \
    \               }\n            }\n        }\n        return pairs.size() == 2;",
  "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        ArrayList<Integer> pairs\
    \ = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n \
    \           for(int j = i+1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n             \
    \       pairs.add(l.get(j));\n                }\n            }\n        }\n  \
    \      return pairs.size() == 2;", "        HashSet<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        Set<Integer> set = new HashSet<>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            map.put(key, map.containsKey(key) ? map.get(key) + 1 : 1);\n    \
    \    }\n        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            if(map.containsKey(key) && map.get(key) == 1) {\n               \
    \ return false;\n            }\n        }\n        return true;", "        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n\
    \            int key = l.get(i);\n            map.put(key, map.containsKey(key)\
    \ ? map.get(key) + 1 : 1);\n        }\n        for(int i = 0; i < l.size(); i++)\
    \ {\n            int key = l.get(i);\n            int value = map.get(key);\n\
    \            if(value == 1) {\n                return false;\n            }\n\
    \            map.put(key, value - 1);\n        }\n        return true;", "   \
    \     ArrayList<Integer> pairs = new ArrayList<>();\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n    \
    \            if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        Set<Integer> set = new\
    \ HashSet<Integer>();\n        for(int i : l) {\n            if(i == 0)\n    \
    \            continue;\n            set.add(Math.abs(i));\n        }\n       \
    \ return set.size() < 2;", "        ArrayList<Integer> pairs = new ArrayList<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j <\
    \ l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n         \
    \           pairs.add(new Integer(l.get(i)));\n                    pairs.add(new\
    \ Integer(l.get(j)));\n                }\n            }\n        }\n        return\
    \ pairs.size() == 2;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            map.put(key, map.containsKey(key) ? map.get(key) + 1 : 1);\n    \
    \    }\n        for(int i = 0; i < l.size(); i++) {\n            int key = l.get(i);\n\
    \            if(map.containsKey(key) && map.get(key) == 1) {\n               \
    \ return false;\n            }\n        }\n        return true;", "        Set<Integer>\
    \ set = new HashSet<Integer>();\n        for(int i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;", "        Set<Integer> set = new\
    \ HashSet<Integer>();\n        for(int i : l)\n            set.add(Math.abs(i));\n\
    \        return set.size() == 2;", "        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer i : l) {\n            set.add(i - 1);\n        }\n     \
    \   return set.size() == 2;", "        ArrayList<Integer> pairs = new ArrayList<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j <\
    \ l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n         \
    \           pairs.add(new Pair(l.get(i), l.get(j)));\n                }\n    \
    \        }\n        }\n        return pairs.size() > 1;", "        ArrayList<Integer>\
    \ pairs = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n  \
    \          for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    pairs.add(new Integer(i));\n       \
    \             pairs.add(new Integer(j));\n                }\n            }\n \
    \       }\n        return pairs.size() > 1;", "        boolean result = false;\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j <\
    \ l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n         \
    \           result = true;\n                    break;\n                }\n  \
    \          }\n        }\n        return result;", "        HashMap<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n      \
    \      int key = l.get(i);\n            map.put(key, map.getOrDefault(key, 0)\
    \ + 1);\n        }\n        for(int i = 0; i < l.size(); i++) {\n            int\
    \ key = l.get(i);\n            int value = map.getOrDefault(key, 0);\n       \
    \     if(value == 2) {\n                return true;\n            }\n        }\n\
    \        return false;", "        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        ArrayList<Integer> pairs = new ArrayList<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j <\
    \ l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n         \
    \           pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n \
    \               }\n            }\n        }\n        return pairs.size() == 2;",
  "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int i = 0; i\
    \ < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n  \
    \              if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        Set<Integer> set = new\
    \ HashSet<Integer>();\n        for(int i : l) {\n            if(i == 0) return\
    \ false;\n            set.add(Math.abs(i));\n        }\n        return set.size()\
    \ == 2;", "        Set<Integer> set = new HashSet<>();\n        for(int i : l)\
    \ {\n            set.add(Math.abs(i));\n        }\n        return set.size() ==\
    \ 2;", "        ArrayList<Integer> pairs = new ArrayList<>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    pairs.add(l.get(i));\n\
    \                    pairs.add(l.get(j));\n                }\n            }\n\
    \        }\n        return pairs.size() == 2;", "        ArrayList<Integer> pairs\
    \ = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n        \
    \    for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j)\
    \ == 0) {\n                    pairs.add(new Integer(i));\n                  \
    \  pairs.add(new Integer(j));\n                }\n            }\n        }\n \
    \       return pairs.size() == 2;", "        ArrayList<Integer> pairs = new ArrayList<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j\
    \ < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n       \
    \             pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n\
    \                }\n            }\n        }\n        return pairs.size() == 2;",
  "        HashSet<Integer> hs = new HashSet<Integer>();\n        for(int i : l) {\n\
    \            hs.add(i);\n        }\n        for(int i : l) {\n            if(!hs.contains(i))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ l2 = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n\
    \            l1.add(l.get(i));\n            l2.add(l.get(i));\n        }\n   \
    \     for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size();\
    \ j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    l1.remove(i);\n\
    \                    l2.remove(j);\n                }\n            }\n       \
    \ }\n        if(l1.size() != l2.size()) {\n            return false;\n       \
    \ }\n        return true;", "        ArrayList<Integer> pairs = new ArrayList<>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j\
    \ < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n       \
    \             pairs.add(new Integer(l.get(i)));\n                    pairs.add(new\
    \ Integer(l.get(j)));\n                }\n            }\n        }\n        return\
    \ pairs.size() == 2;", "        HashSet<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j\
    \ < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n       \
    \             pairs.add(l.get(i));\n                    pairs.add(l.get(j));\n\
    \                }\n            }\n        }\n        return pairs.size() == 2;",
  "        boolean pairs = false;\n        for(int i = 0; i < l.size(); i++) {\n \
    \           for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    pairs = true;\n                    break;\n\
    \                }\n            }\n        }\n        return pairs;", "      \
    \  boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n    \
    \        for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        Set<Integer> set = new HashSet<Integer>();\n        for(int i : l) {\n\
    \            set.add(Math.abs(i));\n        }\n        return set.size() == 2;",
  "        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i : l)\
    \ {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        return\
    \ map.values().stream().allMatch(i -> i == 2);", "        ArrayList<Integer> l2\
    \ = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n \
    \           int x = l.get(i);\n            int y = l.get(i + 1);\n           \
    \ int z = x + y;\n            l2.add(z);\n        }\n        for(int i = 0; i\
    \ < l2.size(); i++) {\n            int x = l2.get(i);\n            int y = l2.get(i\
    \ + 1);\n            int z = x + y;\n            if(z == 0) return true;\n   \
    \     }\n        return false;", "        boolean result = false;\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    result\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        return result;", "        HashSet<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i : l) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n\
    \        }\n        for(int i : map.keySet()) {\n            int count = map.get(i);\n\
    \            if(count > 1) {\n                return false;\n            }\n \
    \       }\n        return true;", "        Set<Integer> set = new HashSet<>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        Set<Integer> set = new HashSet<Integer>();\n\
    \        for(int i : l) {\n            set.add(Math.abs(i));\n        }\n    \
    \    return set.size() == 2;", "        boolean result = false;\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    result\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> l1 = new ArrayList<>();\n\
    \        ArrayList<Integer> l2 = new ArrayList<>();\n        for(int i : l) {\n\
    \            l1.add(i);\n        }\n        for(int i : l) {\n            l2.add(i);\n\
    \        }\n        for(int i : l1) {\n            for(int j : l2) {\n       \
    \         if(i != j && l1.get(i) + l2.get(j) == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;",
  "        boolean result = false;\n        for(int i = 0; i < l.size(); i++) {\n\
    \            for(int j = i + 1; j < l.size(); j++) {\n                if(l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n       \
    \     set.add(Math.abs(i));\n        }\n        return set.size() == 2;", "  \
    \      boolean result = false;\n        for (int i = 0; i < l.size(); i++) {\n\
    \            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i)\
    \ + l.get(j) == 0) {\n                    result = true;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
