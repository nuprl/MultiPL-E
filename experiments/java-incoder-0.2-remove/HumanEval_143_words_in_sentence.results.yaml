language: java
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4fkto0i7.java:44: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmp4fkto0i7.java:45:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp4fkto0i7.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n    \
    \            result.add(word);\n            } else {\n                for (int\
    \ i = 2; i <= Math.sqrt(len); i++) {\n                    if (len % i == 0) {\n\
    \                        result.add(word);\n                        break;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb2lhoi7o.java:40)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48lf5zcf.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) continue;\n          \
    \  if (length == 2 && word.equals(\"a\")) continue;\n            if (length ==\
    \ 2 && word.equals(\"b\")) continue;\n            if (length == 2 && word.equals(\"\
    c\")) continue;\n            if (length == 2 && word.equals(\"d\")) continue;\n\
    \            if (length == 2 && word.equals(\"e\")) continue;\n            if\
    \ (length == 2 && word.equals(\"f\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"g\")) continue;\n            if (length == 2 && word.equals(\"\
    h\")) continue;\n            if (length == 2 && word.equals(\"i\")) continue;\n\
    \            if (length == 2 && word.equals(\"j\")) continue;\n            if\
    \ (length == 2 && word.equals(\"k\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"l\")) continue;\n            if (length == 2 && word.equals(\"\
    m\")) continue;\n            if (length == 2 && word.equals(\"n\")) continue;\n\
    \            if (length == 2 && word.equals(\"o\")) continue;\n            if\
    \ (length == 2 && word.equals(\"p\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"q\")) continue;\n            if (length == 2 && word.equals(\"\
    r\")) continue;\n            if (length == 2 && word.equals(\"s\")) continue;\n\
    \            if (length == 2 && word.equals(\"t\")) continue;\n            if\
    \ (length == 2 && word.equals(\"u\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"v\")) continue;\n            if (length == 2 && word.equals(\"\
    w\")) continue;\n            if (length == 2 && word.equals(\"x\")) continue;\n\
    \            if (length == 2 && word.equals(\"y\")) continue;\n            if\
    \ (length == 2 && word.equals(\"z\")) continue;\n            if (length == 3 &&\
    \ word.equals(\"aa\")) continue;\n            if (length == 3 && word.equals(\"\
    ab\")) continue;\n            if (length == 3 && word.equals(\"ac\")) continue;\n\
    \            if (length == 3 && word.equals(\"ad\")) continue;\n            if\
    \ (length == 3 && word.equals(\"ae\")) continue;\n            if (length == 3\
    \ && word.equals(\"af\")) continue;\n            if (length == 3 && word.equals(\"\
    ag\")) continue;\n            if (length == 3 && word.equals(\"ah\")) continue;\n\
    \            if (length == 3 && word.equals(\"ai\")) continue;\n            if\
    \ (length == 3 && word.equals(\"aj\")) continue;\n            if (length == 3\
    \ && word.equals(\"ak\")) continue;\n            if (length == 3 && word.equals(\"\
    al\")) continue;\n            if (length == 3 && word.equals(\"am\")) continue;\n\
    \            if (length == 3 && word.equals(\"an\")) continue;\n            if\
    \ (length\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9t4ftye4.java:65: error: ')' expected\n            if (length\n\
    \                      ^\n/tmp/tmp9t4ftye4.java:66: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp9t4ftye4.java:67: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + word.substring(0, i));\n                        break;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyawa4m39.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpecr_hctj.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zkk7htk.java:45: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp9zkk7htk.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    b\")) continue;\n            if (length == 2 && word.equals(\"c\")) continue;\n\
    \            if (length == 2 && word.equals(\"d\")) continue;\n            if\
    \ (length == 2 && word.equals(\"e\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"f\")) continue;\n            if (length == 2 && word.equals(\"\
    g\")) continue;\n            if (length == 2 && word.equals(\"h\")) continue;\n\
    \            if (length == 2 && word.equals(\"i\")) continue;\n            if\
    \ (length == 2 && word.equals(\"j\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"k\")) continue;\n            if (length == 2 && word.equals(\"\
    l\")) continue;\n            if (length == 2 && word.equals(\"m\")) continue;\n\
    \            if (length == 2 && word.equals(\"n\")) continue;\n            if\
    \ (length == 2 && word.equals(\"o\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"p\")) continue;\n            if (length == 2 && word.equals(\"\
    q\")) continue;\n            if (length == 2 && word.equals(\"r\")) continue;\n\
    \            if (length == 2 && word.equals(\"s\")) continue;\n            if\
    \ (length == 2 && word.equals(\"t\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"u\")) continue;\n            if (length == 2 && word.equals(\"\
    v\")) continue;\n            if (length == 2 && word.equals(\"w\")) continue;\n\
    \            if (length == 2 && word.equals(\"x\")) continue;\n            if\
    \ (length == 2 && word.equals(\"y\")) continue;\n            if (length == 2 &&\
    \ word.equals(\"z\")) continue;\n            if (length == 3 && word.equals(\"\
    aa\")) continue;\n            if (length == 3 && word.equals(\"ab\")) continue;\n\
    \            if (length == 3 && word.equals(\"ac\")) continue;\n            if\
    \ (length == 3 && word.equals(\"ad\")) continue;\n            if (length == 3\
    \ && word.equals(\"ae\")) continue;\n            if (length == 3 && word.equals(\"\
    af\")) continue;\n            if (length == 3 && word.equals(\"ag\")) continue;\n\
    \            if (length == 3 && word.equals(\"ah\")) continue;\n            if\
    \ (length == 3 && word.equals(\"ai\")) continue;\n            if (length == 3\
    \ && word.equals(\"aj\")) continue;\n            if (length == 3 && word.equals(\"\
    ak\")) continue;\n            if (length == 3 && word.equals(\"al\")) continue;\n\
    \            if (length == 3 && word.equals(\"am\")) continue;\n            if\
    \ (length == 3 && word.equals(\"an\")) continue;\n            if (length\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyo5y4u1l.java:65: error: ')' expected\n            if (length\n\
    \                      ^\n/tmp/tmpyo5y4u1l.java:66: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpyo5y4u1l.java:67: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpecr_hctj.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len == 1) {\n     \
    \           sb.append(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == word.charAt(1)) {\n                sb.append(word);\n            } else if\
    \ (len == 2 && word.charAt(0) == word.charAt(1)) {\n                sb.append(word);\n\
    \            } else if (len == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3)) {\n                sb.append(word);\n            } else if\
    \ (len == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                sb.append(word);\n            } else if (len == 4 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5))\
    \ {\n                sb.append(word);\n            } else if (len == 4 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5))\
    \ {\n                sb.append(word);\n            } else if (len == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                sb.append(word);\n \
    \           } else if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                sb.append(word);\n            } else if (len == 6 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)) {\n\
    \                sb.append(word);\n            } else if (len == 6 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)) {\n\
    \                sb.append(word);\n            } else if (len == 7 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11)) {\n                sb.append(word);\n            } else\
    \ if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5fslfza4.java:49: error: <identifier> expected\n            } else\
    \ if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.\n                                               \
    \                                                                            \
    \                                                                            \
    \                     ^\n/tmp/tmp5fslfza4.java:50: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp5fslfza4.java:51: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.add(word);\n            }\n\
    \        }\n        return result.stream().collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphttnlvyx.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            if(length == 1) {\n                result.add(word);\n\
    \            }\n            else if(length == 2 && word.equals(\"a\") || word.equals(\"\
    e\") || word.equals(\"i\") || word.equals(\"o\") || word.equals(\"u\")) {\n  \
    \              result.add(word);\n            }\n            else if(length ==\
    \ 3 && word.equals(\"ab\") || word.equals(\"ba\") || word.equals(\"ca\") || word.equals(\"\
    da\") || word.equals(\"eb\") || word.equals(\"eb\") || word.equals(\"ec\") ||\
    \ word.equals(\"ed\") || word.equals(\"fa\") || word.equals(\"ga\") || word.equals(\"\
    ha\") || word.equals(\"ib\") || word.equals(\"ja\") || word.equals(\"ka\") ||\
    \ word.equals(\"ke\") || word.equals(\"la\") || word.equals(\"ma\") || word.equals(\"\
    me\") || word.equals(\"na\") || word.equals(\"ne\") || word.equals(\"oa\") ||\
    \ word.equals(\"oe\") || word.equals(\"ou\") || word.equals(\"pa\") || word.equals(\"\
    pe\") || word.equals(\"qa\") || word.equals(\"re\") || word.equals(\"sa\") ||\
    \ word.equals(\"se\") || word.equals(\"ta\") || word.equals(\"te\") || word.equals(\"\
    ua\") || word.equals(\"ue\") || word.equals(\"uo\") || word.equals(\"va\") ||\
    \ word.equals(\"ve\") || word.equals(\"wa\") || word.equals(\"we\") || word.equals(\"\
    xa\") || word.equals(\"xe\") || word.equals(\"xo\") || word.equals(\"ya\") ||\
    \ word.equals(\"ye\") || word.equals(\"yo\") || word.equals(\"za\") || word.equals(\"\
    ze\") || word.equals(\"zo\")) {\n                result.add(word);\n         \
    \   }\n            else if(length == 4 && word.equals(\"aba\") || word.equals(\"\
    abe\") || word.equals(\"abi\") || word.equals(\"abo\") || word.equals(\"abu\"\
    )) {\n                result.add(word);\n            }\n            else if(length\
    \ == 5 && word.equals(\"abba\") || word.equals(\"abbe\") || word.equals(\"abbi\"\
    ) || word.equals(\"abbo\") || word.equals(\"abbu\")) {\n                result.add(word);\n\
    \            }\n            else if(length == 6 && word.equals(\"abbba\") || word.equals(\"\
    abbbe\") || word.equals(\"abbbi\") || \n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85vmtxp4.java:40: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp85vmtxp4.java:41: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.equals(\"a\")) continue;\n            if (len == 2 && word.equals(\"\
    b\")) continue;\n            if (len == 2 && word.equals(\"c\")) continue;\n \
    \           if (len == 2 && word.equals(\"d\")) continue;\n            if (len\
    \ == 2 && word.equals(\"e\")) continue;\n            if (len == 2 && word.equals(\"\
    f\")) continue;\n            if (len == 2 && word.equals(\"g\")) continue;\n \
    \           if (len == 2 && word.equals(\"h\")) continue;\n            if (len\
    \ == 2 && word.equals(\"i\")) continue;\n            if (len == 2 && word.equals(\"\
    j\")) continue;\n            if (len == 2 && word.equals(\"k\")) continue;\n \
    \           if (len == 2 && word.equals(\"l\")) continue;\n            if (len\
    \ == 2 && word.equals(\"m\")) continue;\n            if (len == 2 && word.equals(\"\
    n\")) continue;\n            if (len == 2 && word.equals(\"o\")) continue;\n \
    \           if (len == 2 && word.equals(\"p\")) continue;\n            if (len\
    \ == 2 && word.equals(\"q\")) continue;\n            if (len == 2 && word.equals(\"\
    r\")) continue;\n            if (len == 2 && word.equals(\"s\")) continue;\n \
    \           if (len == 2 && word.equals(\"t\")) continue;\n            if (len\
    \ == 2 && word.equals(\"u\")) continue;\n            if (len == 2 && word.equals(\"\
    v\")) continue;\n            if (len == 2 && word.equals(\"w\")) continue;\n \
    \           if (len == 2 && word.equals(\"x\")) continue;\n            if (len\
    \ == 2 && word.equals(\"y\")) continue;\n            if (len == 2 && word.equals(\"\
    z\")) continue;\n            if (len == 3 && word.equals(\"aa\")) continue;\n\
    \            if (len == 3 && word.equals(\"ab\")) continue;\n            if (len\
    \ == 3 && word.equals(\"ac\")) continue;\n            if (len == 3 && word.equals(\"\
    ad\")) continue;\n            if (len == 3 && word.equals(\"ae\")) continue;\n\
    \            if (len == 3 && word.equals(\"af\")) continue;\n            if (len\
    \ == 3 && word.equals(\"ag\")) continue;\n            if (len == 3 && word.equals(\"\
    ah\")) continue;\n            if (len == 3 && word.equals(\"ai\")) continue;\n\
    \            if (len == 3 && word.equals(\"aj\")) continue;\n            if (len\
    \ == 3 && word.equals(\"ak\")) continue;\n            if (len == 3 && word.equals(\"\
    al\")) continue;\n            if (len == 3 && word.equals(\"am\")) continue;\n\
    \            if (len == 3 && word.equals(\"an\")) continue;\n            if (len\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpopkvihyc.java:65: error: ')' expected\n            if (len\n  \
    \                 ^\n/tmp/tmpopkvihyc.java:66: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpopkvihyc.java:67: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len > 1 && len % 2\
    \ == 0) {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n     \
    \               if (len % i == 0) {\n                        sb.append(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyweokt28.java:37)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcaizi5y8.java:35: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpcaizi5y8.java:36: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> words = new ArrayList<>();\n        String[] words =\
    \ sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                words.add(word);\n\
    \            }\n            else if (length == 2 && word.charAt(0) == word.charAt(1))\
    \ {\n                words.add(word);\n            }\n            else if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                words.add(word);\n            }\n            else if (length\
    \ == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5)) {\n                words.add(word);\n \
    \           }\n            else if (length == 5 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7)) {\n                words.add(word);\n            }\n    \
    \        else if (length == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                words.add(word);\n \
    \           }\n            else if (length == 7 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11)) {\n                words.add(word);\n            }\n      \
    \      else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                words.add(word);\n  \
    \          }\n            else if (length == 9 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14) ==\
    \ word.charAt(15)) {\n                words.add(word);\n            }\n      \
    \      else if (length == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1e13x_zd.java:51: error: <identifier> expected\n            else\
    \ if (length == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\n/tmp/tmp1e13x_zd.java:52: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp1e13x_zd.java:53: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            for(int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                if(length%i == 0) {\n                    if(length/i != i) {\n\
    \                        result.add(word);\n                        break;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9r4jbc25.java:36)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqytl2iff.java:34: error: ')' expected\n            if (length ==\
    \ 11 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14\n                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  ^\n/tmp/tmpqytl2iff.java:35: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpqytl2iff.java:36: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8ye2tcp.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<Integer> primes\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int n\
    \ = Integer.parseInt(word);\n            if(n == 1) {\n                primes.add(n);\n\
    \            }\n            for(int i = 2; i <= Math.sqrt(n); i++) {\n       \
    \         if(n % i == 0) {\n                    primes.add(i);\n             \
    \       break;\n                }\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(Integer prime : primes) {\n         \
    \   sb.append(prime).append(\" \");\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.wordsInSentence(tmp3ghxit47.java:23)\n\tat Problem.main(tmp3ghxit47.java:41)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bi94ira.java:31)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.equals(\"a\")) continue;\n            if (len == 2 && word.equals(\"\
    b\")) continue;\n            if (len == 2 && word.equals(\"c\")) continue;\n \
    \           if (len == 2 && word.equals(\"d\")) continue;\n            if (len\
    \ == 2 && word.equals(\"e\")) continue;\n            if (len == 2 && word.equals(\"\
    f\")) continue;\n            if (len == 2 && word.equals(\"g\")) continue;\n \
    \           if (len == 2 && word.equals(\"h\")) continue;\n            if (len\
    \ == 2 && word.equals(\"i\")) continue;\n            if (len == 2 && word.equals(\"\
    j\")) continue;\n            if (len == 2 && word.equals(\"k\")) continue;\n \
    \           if (len == 2 && word.equals(\"l\")) continue;\n            if (len\
    \ == 2 && word.equals(\"m\")) continue;\n            if (len == 2 && word.equals(\"\
    n\")) continue;\n            if (len == 2 && word.equals(\"o\")) continue;\n \
    \           if (len == 2 && word.equals(\"p\")) continue;\n            if (len\
    \ == 2 && word.equals(\"q\")) continue;\n            if (len == 2 && word.equals(\"\
    r\")) continue;\n            if (len == 2 && word.equals(\"s\")) continue;\n \
    \           if (len == 2 && word.equals(\"t\")) continue;\n            if (len\
    \ == 2 && word.equals(\"u\")) continue;\n            if (len == 2 && word.equals(\"\
    v\")) continue;\n            if (len == 2 && word.equals(\"w\")) continue;\n \
    \           if (len == 2 && word.equals(\"x\")) continue;\n            if (len\
    \ == 2 && word.equals(\"y\")) continue;\n            if (len == 2 && word.equals(\"\
    z\")) continue;\n            if (len == 2 && word.equals(\"a\")) continue;\n \
    \           if (len == 2 && word.equals(\"b\")) continue;\n            if (len\
    \ == 2 && word.equals(\"c\")) continue;\n            if (len == 2 && word.equals(\"\
    d\")) continue;\n            if (len == 2 && word.equals(\"e\")) continue;\n \
    \           if (len == 2 && word.equals(\"f\")) continue;\n            if (len\
    \ == 2 && word.equals(\"g\")) continue;\n            if (len == 2 && word.equals(\"\
    h\")) continue;\n            if (len == 2 && word.equals(\"i\")) continue;\n \
    \           if (len == 2 && word.equals(\"j\")) continue;\n            if (len\
    \ == 2 && word.equals(\"k\")) continue;\n            if (len == 2 && word.equals(\"\
    l\")) continue;\n            if (len == 2 && word.equals(\"m\")) continue;\n \
    \           if (len == 2 && word.equals(\"n\")) continue;\n            if (len\
    \ == 2 && word.equal\n    }\n    public static void main(String[] args) {\n  \
    \  assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1g886v49.java:65: error: ')' expected\n            if (len == 2\
    \ && word.equal\n                                      ^\n/tmp/tmp1g886v49.java:66:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp1g886v49.java:67: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlme8tyk.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len > 1 && len % 2 == 0) {\n         \
    \       result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp10vavusu.java:31)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\") && word.startsWith(\"f\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\") && word.startsWith(\"e\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"f\") && word.endsWith(\"z\") && word.startsWith(\"g\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.startsWith(\"a\") && \n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpng67jt5a.java:41: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpng67jt5a.java:42: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && Character.isLetter(word.charAt(0)))\n                continue;\n      \
    \      if (len == 2 && Character.isLetter(word.charAt(1)))\n                continue;\n\
    \            if (len == 2 && Character.isLetter(word.charAt(0)))\n           \
    \     continue;\n            if (len == 2 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 3 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (len == 3 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 3 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (len == 4 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (len == 4 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 4 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (len == 5 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (len == 5 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 5 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (len == 6 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (len == 6 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 6 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (len == 7 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (len == 7 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 7 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (len == 8 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (len == 8 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 8 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (len == 9 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (len == 9 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 9 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (len == 10 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (len == 10 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (len == 10 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (len == 11 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqg617qwl.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpqg617qwl.java:85: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len > 1) {\n                for (int i\
    \ = 2; i <= Math.sqrt(len); i++) {\n                    if (len % i == 0) {\n\
    \                        result.add(word);\n                        break;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbwp_i_6g.java:36)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n    \
    \            result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == word.charAt(1)) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                result.add(word);\n            } else if (len == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (len == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                result.add(word);\n\
    \            } else if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11)) {\n\
    \                result.add(word);\n            } else if (len == 7 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11)) {\n                result.add(word);\n            } else\
    \ if (len == 8 && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui6zspof.java:50: error: <identifier> expected\n            } else\
    \ if (len == 8 && word.\n                                        ^\n/tmp/tmpui6zspof.java:51:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpui6zspof.java:52: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 11 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)) &&\
    \ Character.isLetter(word.charAt(8))) {\n                result.add(word);\n \
    \           } else if (length13 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.is\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6xhw8j7h.java:40: error: ')' expected\n            } else if (length13\
    \ && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.is\n                                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                 ^\n/tmp/tmp6xhw8j7h.java:41:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp6xhw8j7h.java:42: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int len\
    \ = word.length();\n            for(int i = 2; i <= Math.sqrt(len); i++) {\n \
    \               if(len % i == 0) {\n                    if(len / i != i) {\n \
    \                       result.add(word);\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjj91cwtk.java:36)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len == 1) {\n                continue;\n\
    \            }\n            int count = 0;\n            for (int i = 0; i < len;\
    \ i++) {\n                char c = word.charAt(i);\n                if (Character.isLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count % 2 == 0) {\n                result.add(word);\n            }\n\
    \        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_q41wt_q.java:41)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqytl2iff.java:34: error: ')' expected\n            if (length ==\
    \ 11 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14\n                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  ^\n/tmp/tmpqytl2iff.java:35: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpqytl2iff.java:36: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length != 1 && length != 2 && length\
    \ != 3 && length != 5 && length != 7 && length != 11 && length != 13 && length\
    \ != 17 && length != 19 && length != 23 && length != 29 && length != 31 && length\
    \ != 37 && length != 41 && length != 43) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoqf5zpe1.java:31)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                boolean isPrime = true;\n             \
    \   for (int i = 2; i <= Math.sqrt(length); i++) {\n                    if (length\
    \ % i == 0) {\n                        isPrime = false;\n                    \
    \    break;\n                    }\n                }\n                if (isPrime)\
    \ {\n                    result.add(word);\n                }\n            }\n\
    \        }\n        return result.stream().collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvylanpax.java:42)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\")\n              \
    \      || word.startsWith(\"e\")\n                    || word.startsWith(\"i\"\
    )\n                    || word.startsWith(\"o\")\n                    || word.startsWith(\"\
    u\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"b\")\n                    || word.startsWith(\"c\")\n \
    \                   || word.startsWith(\"d\")\n                    || word.startsWith(\"\
    f\")\n                    || word.startsWith(\"g\")\n                    || word.startsWith(\"\
    h\")\n                    || word.startsWith(\"j\")\n                    || word.startsWith(\"\
    k\")\n                    || word.startsWith(\"l\")\n                    || word.startsWith(\"\
    m\")\n                    || word.startsWith(\"n\")\n                    || word.startsWith(\"\
    p\")\n                    || word.startsWith(\"q\")\n                    || word.startsWith(\"\
    r\")\n                    || word.startsWith(\"s\")\n                    || word.startsWith(\"\
    t\")\n                    || word.startsWith(\"v\")\n                    || word.startsWith(\"\
    w\")\n                    || word.startsWith(\"x\")\n                    || word.startsWith(\"\
    y\")\n                    || word.startsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"ab\")\n             \
    \       || word.startsWith(\"cd\")\n                    || word.startsWith(\"\
    ef\")\n                    || word.startsWith(\"gh\")\n                    ||\
    \ word.startsWith(\"ij\")\n                    || word.startsWith(\"kl\")\n  \
    \                  || word.startsWith(\"mn\")\n                    || word.startsWith(\"\
    op\")\n                    || word.startsWith(\"pq\")\n                    ||\
    \ word.startsWith(\"rst\")\n                    || word.startsWith(\"uv\")\n \
    \                   || word.startsWith(\"wx\")\n                    || word.startsWith(\"\
    yz\")\n                    || word.startsWith(\"za\")\n                    ||\
    \ word.startsWith(\"ab\")\n                    || word.startsWith(\"cd\")\n  \
    \                  || word.startsWith(\"ef\")\n                    || word.startsWith(\"\
    gh\")\n                    || word.startsWith(\"ij\")\n                    ||\
    \ word.startsWith(\"kl\")\n                    || word.startsWith(\"mn\")\n  \
    \                  || word.startsWith(\"op\")\n                    || word.startsWith(\"\
    pq\")\n                    || word.startsWith(\"rst\")\n                    ||\
    \ word.startsWith(\"uv\")\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8_s067rp.java:78: error: ')' expected\n                    || word.startsWith(\"\
    uv\")\n                                            ^\n/tmp/tmp8_s067rp.java:79:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp8_s067rp.java:80: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len > 1 && len % 2\
    \ == 0) {\n                for (int i = 3; i <= Math.sqrt(len); i += 2) {\n  \
    \                  if (len % i == 0) {\n                        sb.append(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptmv1khfy.java:37)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            boolean isPrime\
    \ = true;\n            for (int i = 2; i <= Math.sqrt(len); i++) {\n         \
    \       if (len % i == 0) {\n                    isPrime = false;\n          \
    \          break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<Integer> primes\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int len\
    \ = word.length();\n            for(int i = 2; i <= Math.sqrt(len); i++) {\n \
    \               if(len % i == 0) {\n                    primes.add(i);\n     \
    \               break;\n                }\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(String word : words) {\n            int\
    \ len = word.length();\n            for(int i = 2; i <= Math.sqrt(len); i++) {\n\
    \                if(len % i == 0) {\n                    if(primes.contains(i))\
    \ {\n                        sb.append(word);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi63qo4fl.java:46)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(int i = 0; i < words.length; i++){\n     \
    \       String word = words[i];\n            int length = word.length();\n   \
    \         for(int j = i + 1; j < words.length; j++){\n                String nextWord\
    \ = words[j];\n                if(nextWord.length() == length){\n            \
    \        if(isPrime(length) && isPrime(nextWord.length())){\n                \
    \        result.add(word);\n                        result.add(nextWord);\n  \
    \                      break;\n                    }\n                }\n    \
    \        }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavgyzbei.java:28: error: cannot find symbol\n                 \
    \   if(isPrime(length) && isPrime(nextWord.length())){\n                     \
    \  ^\n  symbol:   method isPrime(int)\n  location: class Problem\n/tmp/tmpavgyzbei.java:28:\
    \ error: cannot find symbol\n                    if(isPrime(length) && isPrime(nextWord.length())){\n\
    \                                          ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8ye2tcp.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpecr_hctj.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\") || word.equals(\"e\") ||\
    \ word.equals(\"i\") || word.equals(\"o\") || word.equals(\"u\")) {\n        \
    \        result.add(word);\n            } else if (len == 2 && word.equals(\"\
    ab\") || word.equals(\"bc\") || word.equals(\"cd\") || word.equals(\"de\") ||\
    \ word.equals(\"ef\") || word.equals(\"fg\") || word.equals(\"gh\") || word.equals(\"\
    hi\") || word.equals(\"ij\") || word.equals(\"jk\") || word.equals(\"kl\") ||\
    \ word.equals(\"lm\") || word.equals(\"mn\") || word.equals(\"no\") || word.equals(\"\
    op\") || word.equals(\"pq\") || word.equals(\"qr\") || word.equals(\"rs\") ||\
    \ word.equals(\"st\") || word.equals(\"tu\") || word.equals(\"uv\") || word.equals(\"\
    vw\") || word.equals(\"xy\") || word.equals(\"yz\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"abc\") || word.equals(\"bcd\"\
    ) || word.equals(\"cde\") || word.equals(\"def\") || word.equals(\"efg\") || word.equals(\"\
    fgh\") || word.equals(\"ghi\") || word.equals(\"hij\") || word.equals(\"ijk\"\
    ) || word.equals(\"jkl\") || word.equals(\"klm\") || word.equals(\"lmn\") || word.equals(\"\
    mno\") || word.equals(\"nop\") || word.equals(\"opq\") || word.equals(\"pqr\"\
    ) || word.equals(\"qrs\") || word.equals(\"rst\") || word.equals(\"stu\") || word.equals(\"\
    tuv\") || word.equals(\"uvw\") || word.equals(\"vwx\") || word.equals(\"wxy\"\
    ) || word.equals(\"xyz\")) {\n                result.add(word);\n            }\
    \ else if (len == 3 && word.equals(\"abcd\") || word.equals(\"bcde\") || word.equals(\"\
    cdef\") || word.equals(\"defg\") || word.equals(\"efgh\") || word.equals(\"fghi\"\
    ) || word.equals(\"ghij\") || word.equals(\"hijk\") || word.equals(\"ijkl\") ||\
    \ word.equals(\"jklm\") || word.equals(\"klmn\") || word.equals(\"lmno\") || word.equals(\"\
    mnop\") || word.equals(\"nopq\") \n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo09pv1dl.java:32: error: ')' expected\n            } else if (len\
    \ == 3 && word.equals(\"abcd\") || word.equals(\"bcde\") || word.equals(\"cdef\"\
    ) || word.equals(\"defg\") || word.equals(\"efgh\") || word.equals(\"fghi\") ||\
    \ word.equals(\"ghij\") || word.equals(\"hijk\") || word.equals(\"ijkl\") || word.equals(\"\
    jklm\") || word.equals(\"klmn\") || word.equals(\"lmno\") || word.equals(\"mnop\"\
    ) || word.equals(\"nopq\") \n                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \ ^\n/tmp/tmpo09pv1dl.java:33: error: illegal start of statement\n    }\n    ^\n\
    /tmp/tmpo09pv1dl.java:34: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            boolean isPrime = true;\n            for (int i =\
    \ 2; i <= Math.sqrt(length); i++) {\n                if (length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + \" \" + i);\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74jw_84y.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n    \
    \            result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == word.charAt(1)) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                result.add(word);\n            } else if (len == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (len == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                result.add(word);\n\
    \            } else if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11)) {\n\
    \                result.add(word);\n            } else if (len == 7 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11)) {\n                result.add(word);\n            } else\
    \ if (len == 8 && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpju5jp3y5.java:50: error: <identifier> expected\n            } else\
    \ if (len == 8 && word.\n                                        ^\n/tmp/tmpju5jp3y5.java:51:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpju5jp3y5.java:52: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcaizi5y8.java:35: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpcaizi5y8.java:36: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) continue;\n\
    \            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)) continue;\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) continue;\n            if (len == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) continue;\n            if (len == 8 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13))\
    \ continue;\n            if (len == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) continue;\n\
    \            if (len == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.charAt(16) == word.charAt(17)) continue;\n            if (len == 11 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aeyvu1v.java:35: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp6aeyvu1v.java:36: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4fkto0i7.java:44: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmp4fkto0i7.java:45:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp4fkto0i7.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8x9hfta.java:44: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmpu8x9hfta.java:45:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpu8x9hfta.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpecr_hctj.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 2 || length == 3) {\n          \
    \      result.add(word);\n            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi3_ox055.java:32)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\") && word.startsWith(\"f\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\") && word.startsWith(\"e\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"f\") && word.endsWith(\"z\") && word.startsWith(\"g\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.startsWith(\"a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptj819vkn.java:40: error: unclosed string literal\n            }\
    \ else if (length == 2 && word.startsWith(\"a\n                              \
    \                        ^\n/tmp/tmptj819vkn.java:42: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 2 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)) continue;\n\
    \            if (len == 3 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3)) continue;\n         \
    \   if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)) continue;\n\
    \            if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5)) continue;\n            if (len == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(5) == word.charAt(6)) continue;\n            if (len == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(5) == word.charAt(6) && word.charAt(6) == word.charAt(7)) continue;\n\
    \            if (len == 8 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(7) == word.charAt(8)) continue;\n         \
    \   if (len == 9 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(5) == word.charAt(6) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(7) == word.charAt(8) && word.charAt(8) == word.charAt(9)) continue;\n\
    \            if (len == 10 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(7) == word.charAt(8) && word.charAt(8) == \n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_3jzqu4.java:35: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpj_3jzqu4.java:36: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return String.join(\" \"\
    , result);\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl906qps4.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8ye2tcp.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len % 2 == 0) {\n \
    \               sb.append(word);\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxujbrzq.java:32)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len == 1) {\n     \
    \           sb.append(word);\n            } else {\n                for (int i\
    \ = 2; i <= Math.sqrt(len); i++) {\n                    if (len % i == 0) {\n\
    \                        sb.append(word);\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxmohnje.java:39)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8ye2tcp.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"the\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"and\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"to\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"of\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"in\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"is\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"that\")) {\n               \
    \ result.add(word);\n            } else if (len == 2 && word.equals(\"it\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    have\")) {\n                result.add(word);\n            } else if (len == 2\
    \ && word.equals(\"it\")) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.equals(\"that\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"it\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"were\")) {\n               \
    \ result.add(word);\n            } else if (len == 2 && word.equals(\"have\"))\
    \ {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    it\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.equals(\"that\")) {\n                result.add(word);\n            } else\
    \ if (len == 2 && word.equals(\"it\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"were\")) {\n               \
    \ result.add(word);\n            } else if (len == 2 && word.equals(\"have\"))\
    \ {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    it\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.equals(\"that\")) {\n                result.add(word);\n            } else\
    \ if (len == 2 && word.equals(\"it\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"were\")) {\n               \
    \ result.add(word);\n            } else if (len == 2 && word.equals(\"have\"))\
    \ {\n                result.add(word);\n            } else if (len == 2 && \n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj44h6ltm.java:85: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpj44h6ltm.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            int length = word.length();\n            if (length\
    \ == 1) {\n                result.append(word);\n            } else {\n      \
    \          for (int i = 2; i <= Math.sqrt(length); i++) {\n                  \
    \  if (length % i == 0) {\n                        result.append(word);\n    \
    \                    break;\n                    }\n                }\n      \
    \      }\n        }\n        return result.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgv4x2aa2.java:39)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len > 1 && len % 2 == 0) {\n         \
    \       result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp10vavusu.java:31)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + \" \" + i);\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74jw_84y.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            boolean isPrime = true;\n            for(int i\
    \ = 2; i <= Math.sqrt(length); i++) {\n                if(length%i == 0) {\n \
    \                   isPrime = false;\n                    break;\n           \
    \     }\n            }\n            if(isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvmuu6c7r.java:38)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int len\
    \ = word.length();\n            if(len == 1) {\n                result.add(word);\n\
    \            }\n            else if(len == 2 && isPrime(len)) {\n            \
    \    result.add(word);\n            }\n            else if(len == 3 && isPrime(len))\
    \ {\n                result.add(word);\n            }\n            else if(len\
    \ == 4 && isPrime(len)) {\n                result.add(word);\n            }\n\
    \            else if(len == 5 && isPrime(len)) {\n                result.add(word);\n\
    \            }\n            else if(len == 6 && isPrime(len)) {\n            \
    \    result.add(word);\n            }\n            else if(len == 7 && isPrime(len))\
    \ {\n                result.add(word);\n            }\n            else if(len\
    \ == 8 && isPrime(len)) {\n                result.add(word);\n            }\n\
    \            else if(len == 9 && isPrime(len)) {\n                result.add(word);\n\
    \            }\n            else if(len == 10 && isPrime(len)) {\n           \
    \     result.add(word);\n            }\n            else if(len == 11 && isPrime(len))\
    \ {\n                result.add(word);\n            }\n            else if(len\
    \ == 12 && isPrime(len)) {\n                result.add(word);\n            }\n\
    \            else if(len == 13 && isPrime(len)) {\n                result.add(word);\n\
    \            }\n            else if(len == 14 && isPrime(len)) {\n           \
    \     result.add(word);\n            }\n            else if(len == 15 && isPrime(len))\
    \ {\n                result.add(word);\n            }\n            else if(len\
    \ == 16 && isPrime(len)) {\n                result.add(word);\n            }\n\
    \            else if(len == 17 && isPrime(len)) {\n                result.add(word);\n\
    \            }\n            else if(len == 18 && isPrime(len)) {\n           \
    \     result.add(word);\n            }\n            else if(len == 19 && isPrime(len))\
    \ {\n                result.add(word);\n            }\n            else if(len\
    \ == 20 && isPrime(len)) {\n                result.add(word);\n            }\n\
    \            else if(len == 21 && isPrime(len)) {\n                result.add(word);\n\
    \            }\n            else if(len == 22 && isPrime(len)) {\n           \
    \     result.add(word);\n            }\n            else if(len == 23 && isPrime(len))\
    \ {\n                result.add(word);\n            }\n            else if(len\
    \ == 24 && isPrime(len)) {\n                result.add(word);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq5wsz8s4.java:96: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            boolean isPrime = true;\n            for (int i =\
    \ 2; i <= Math.sqrt(length); i++) {\n                if (length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            int prime = 1;\n            while (prime * prime <=\
    \ length) {\n                if (length % prime == 0) {\n                    break;\n\
    \                }\n                prime++;\n            }\n            if (prime\
    \ > 1) {\n                result.add(word);\n            }\n        }\n      \
    \  return result.stream().collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzv8ejat.java:41)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   for (int i = 2; i <= Math.sqrt(len); i++) {\n                    if (len %\
    \ i == 0) {\n                        result.add(word);\n                     \
    \   break;\n                    }\n                }\n            }\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n    }\n \
    \   public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_v7txo1.java:36)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeda6k53l.java:31)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n        }\n        return String.join(\" \", result);\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplls4r942.java:26: error: cannot find symbol\n            } else\
    \ if (length == 2 && isPrime(length)) {\n                                    \
    \  ^\n  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zkk7htk.java:45: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp9zkk7htk.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8x9hfta.java:44: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmpu8x9hfta.java:45:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpu8x9hfta.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeda6k53l.java:31)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlme8tyk.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<Integer> primes\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            for(int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                if(length%i == 0) {\n                    primes.add(i);\n   \
    \                 break;\n                }\n            }\n        }\n      \
    \  StringBuilder sb = new StringBuilder();\n        for(Integer prime : primes)\
    \ {\n            sb.append(words[prime-1]);\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpguu0il0d.java:38)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len == 1) {\n                continue;\n\
    \            }\n            boolean isPrime = true;\n            for (int i =\
    \ 2; i <= Math.sqrt(len); i++) {\n                if (len % i == 0) {\n      \
    \              isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) continue;\n\
    \            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)) continue;\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) continue;\n            if (len == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) continue;\n            if (len == 8 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13))\
    \ continue;\n            if (len == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) continue;\n\
    \            if (len == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.charAt(16) == word.charAt(17)) continue;\n            if (len == 11 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14\n    }\n    public static void main(String[] args) {\n   \
    \ assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1_roqvy.java:34: error: ')' expected\n            if (len == 11\
    \ && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14\n                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               ^\n/tmp/tmpw1_roqvy.java:35: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpw1_roqvy.java:36: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int len\
    \ = word.length();\n            if(len == 1) {\n                result.add(word);\n\
    \            } else {\n                boolean isPrime = true;\n             \
    \   for(int i = 2; i <= Math.sqrt(len); i++) {\n                    if(len % i\
    \ == 0) {\n                        isPrime = false;\n                        break;\n\
    \                    }\n                }\n                if(isPrime) {\n   \
    \                 result.add(word);\n                }\n            }\n      \
    \  }\n        return result.stream().collect(Collectors.joining(\" \"));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0x56qoaf.java:42)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'a') {\n                continue;\n            }\n            if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i') {\n                continue;\n            }\n            if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'u') {\n                continue;\n            }\n            if (length\
    \ == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'e') {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'i') {\n                continue;\n            }\n            if (length\
    \ == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'o') {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'u') {\n                continue;\n            }\n            if (length\
    \ == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'i') {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == 'i' && word.charAt(1)\
    \ == 'o') {\n                continue;\n            }\n            if (length\
    \ == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'u') {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == 'o' && word.charAt(1)\
    \ == 'o') {\n                continue;\n            }\n            if (length\
    \ == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'u') {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == 'u' && word.charAt(1)\
    \ == 'u') {\n                continue;\n            }\n            if (length\
    \ == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) ==\
    \ 'a') {\n                continue;\n            }\n            if (length ==\
    \ 3 && word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'e')\
    \ {\n                continue;\n            }\n            if (length == 3 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'i') {\n\
    \                continue;\n            }\n            if (length == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'o') {\n              \
    \  continue;\n            }\n            if (length == 3 && word.charAt(0) ==\
    \ 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'u') {\n                continue;\n\
    \            }\n            if (length\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp44d33j19.java:87: error: ')' expected\n            if (length\n\
    \                      ^\n/tmp/tmp44d33j19.java:88: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp44d33j19.java:89: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (len == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6))) {\n                result.add(word);\n\
    \            } else if (len == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLet\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ic1amdj.java:46: error: ')' expected\n            } else if (len\
    \ == 9 && Character.isLet\n                                                  ^\n\
    /tmp/tmp9ic1amdj.java:47: error: illegal start of statement\n    }\n    ^\n/tmp/tmp9ic1amdj.java:48:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            boolean isPrime = true;\n            for (int i =\
    \ 2; i <= Math.sqrt(length); i++) {\n                if (length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\")\n              \
    \      && word.endsWith(\"z\")) {\n                result.add(word);\n       \
    \     } else if (length == 2 && word.startsWith(\"a\")\n                    &&\
    \ word.endsWith(\"z\")) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.startsWith(\"a\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"b\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\")\n                    && word.endsWith(\"z\")\n   \
    \                 && word.startsWith(\"b\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 4\
    \ && word.startsWith(\"a\")\n                    && word.endsWith(\"z\")\n   \
    \                 && word.startsWith(\"b\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"c\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 5\
    \ && word.startsWith(\"a\")\n                    && word.endsWith(\"z\")\n   \
    \                 && word.startsWith(\"b\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"c\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"d\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 6\
    \ && word.startsWith(\"a\")\n                    && word.endsWith(\"z\")\n   \
    \                 && word.startsWith(\"b\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"c\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"d\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"e\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 7\
    \ && word.startsWith(\"a\")\n                    && word.endsWith(\"z\")\n   \
    \                 && word.startsWith(\"b\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"c\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"d\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"e\")\n                    && word.endsWith(\"\
    z\")\n                    && word.startsWith(\"f\")\n                    && word.endsWith(\"\
    z\")) {\n                result.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpive2a4gq.java:81: error: <identifier> expected\n              \
    \  result.\n                       ^\n/tmp/tmpive2a4gq.java:81: error: not a statement\n\
    \                result.\n                      ^\n/tmp/tmpive2a4gq.java:83: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.add(word);\n            }\n\
    \        }\n        return String.join(\" \", result);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpow3skn6g.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len == 1) {\n                continue;\n\
    \            }\n            if (isPrime(len)) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwy_9gzs.java:27: error: cannot find symbol\n            if (isPrime(len))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   for (int i = 3; i <= Math.sqrt(len); i += 2) {\n                    if (len\
    \ % i == 0) {\n                        result.add(word);\n                   \
    \     break;\n                    }\n                }\n            }\n      \
    \  }\n        return result.stream().collect(Collectors.joining(\" \"));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8ufq8lq.java:36)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 2 && word.charAt(0)\
    \ == word.charAt(2)) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.charAt(0) == word.charAt(2)\n                    &&\
    \ word.charAt(1) == word.charAt(3)) {\n                result.add(word);\n   \
    \         } else if (length == 3 && word.charAt(0) == word.charAt(3)\n       \
    \             && word.charAt(1) == word.charAt(2)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(2)\n    \
    \                && word.charAt(1) == word.charAt(3) && word.charAt(2) == word.charAt(4))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.charAt(0) == word.charAt(2)\n                    && word.charAt(1) == word.charAt(3)\
    \ && word.charAt(2) == word.charAt(4)\n                    && word.charAt(3) ==\
    \ word.charAt(5)) {\n                result.add(word);\n            } else if\
    \ (length == 6 && word.charAt(0) == word.charAt(2)\n                    && word.charAt(1)\
    \ == word.charAt(3) && word.charAt(2) == word.charAt(4)\n                    &&\
    \ word.charAt(3) == word.charAt(5) && word.charAt(4) == word.charAt(6)) {\n  \
    \              result.add(word);\n            } else if (length == 7 && word.charAt(0)\
    \ == word.charAt(2)\n                    && word.charAt(1) == word.charAt(3) &&\
    \ word.charAt(2) == word.charAt(4)\n                    && word.charAt(3) == word.charAt(5)\
    \ && word.charAt(4) == word.charAt(6)\n                    && word.charAt(5) ==\
    \ word.charAt(7)) {\n                result.add(word);\n            } else if\
    \ (length == 8 && word.charAt(0) == word.charAt(2)\n                    && word.charAt(1)\
    \ == word.charAt(3) && word.charAt(2) == word.charAt(4)\n                    &&\
    \ word.charAt(3) == word.charAt(5) && word.charAt(4) == word.charAt(6)\n     \
    \               && word.charAt(5) == word.charAt(7) && word.charAt(6) == word.charAt(8))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ word.charAt(0) == word.charAt(2)\n                    && word.charAt(1) == word.charAt(3)\
    \ && word.charAt(2) == word.charAt(4)\n                    && word.charAt(3) ==\
    \ word.charAt(5) && word.charAt(4) == word.charAt(6)\n                    && word.charAt(5)\
    \ == word.charAt(7) && word.charAt(6) == word.charAt(8)\n                    &&\
    \ word.charAt(7) == word.charAt(9)) {\n                result.add(word);\n   \
    \         } else if (length == 10 && word.charAt(0) == word.charAt(2)\n      \
    \              && word.charAt(1) == word.charAt(3) && word.charAt(2\n    }\n \
    \   public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsjxnjemy.java:64: error: ')' expected\n                    && word.charAt(1)\
    \ == word.charAt(3) && word.charAt(2\n                                       \
    \                                 ^\n/tmp/tmpsjxnjemy.java:65: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpsjxnjemy.java:66: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48lf5zcf.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<Integer> primeNumbers\
    \ = new ArrayList<>();\n        List<String> primeStrings = new ArrayList<>();\n\
    \        for(String word : words) {\n            int prime = Integer.parseInt(word);\n\
    \            primeNumbers.add(prime);\n            primeStrings.add(word);\n \
    \       }\n        Collections.sort(primeNumbers);\n        Collections.sort(primeStrings);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < primeNumbers.size();\
    \ i++) {\n            sb.append(primeStrings.get(i));\n            sb.append(\"\
    \ \");\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.wordsInSentence(tmpqmhyyy5j.java:24)\n\tat Problem.main(tmpqmhyyy5j.java:38)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len % 2 == 1) {\n \
    \               sb.append(word);\n                sb.append(\" \");\n        \
    \    }\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vjghnom.java:33)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlme8tyk.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48lf5zcf.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.contains(\"a\") && word.contains(\"b\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.contains(\"\
    a\") && word.contains(\"c\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.contains(\"b\") && word.contains(\"c\")) {\n \
    \               result.add(word);\n            } else if (len == 3 && word.contains(\"\
    a\") && word.contains(\"b\") && word.contains(\"c\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.contains(\"a\") && word.contains(\"c\"\
    ) && word.contains(\"b\")) {\n                result.add(word);\n            }\
    \ else if (len == 3 && word.contains(\"b\") && word.contains(\"c\") && word.contains(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.contains(\"a\") && word.contains(\"b\") && word.contains(\"c\") && word.contains(\"\
    d\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.contains(\"b\") && word.contains(\"c\") && word.contains(\"d\") && word.contains(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.contains(\"c\") && word.contains(\"d\") && word.contains(\"a\") && word.contains(\"\
    b\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.contains(\"c\") && word.contains(\"d\") && word.contains(\"b\") && word.contains(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.contains(\"d\") && word.contains(\"a\") && word.contains(\"b\") && word.contains(\"\
    c\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.contains(\"d\") && word.contains(\"b\") && word.contains(\"c\") && word.contains(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.contains(\"d\") && word.contains(\"c\") && word.contains(\"a\") && word.contains(\"\
    b\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.contains(\"d\") && word.contains(\"c\") && word.contains(\"b\") && word.contains(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 4 &&\
    \ word.contains(\"a\") && word.contains(\"b\") && word.contains(\"c\") && word.contains(\"\
    d\")) {\n                result.add(word);\n            } else if (len == 4 &&\
    \ word.contains(\"a\") && word.contains(\"c\") \n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn9hrjv0n.java:56: error: ')' expected\n            } else if (len\
    \ == 4 && word.contains(\"a\") && word.contains(\"c\") \n                    \
    \                                                       ^\n/tmp/tmpn9hrjv0n.java:57:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpn9hrjv0n.java:58: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len % 2 == 0) {\n \
    \               for (int i = 0; i < len / 2; i++) {\n                    sb.append(word.charAt(i));\n\
    \                }\n            } else {\n                for (int i = 0; i <\
    \ len / 2; i++) {\n                    sb.append(word.charAt(len - 1 - i));\n\
    \                }\n            }\n            sb.append(\" \");\n        }\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcome2h5q.java:39)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcaizi5y8.java:35: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpcaizi5y8.java:36: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeda6k53l.java:31)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (String word : result) {\n            int len = word.length();\n \
    \           if (len % 2 == 0) {\n                sb.append(word);\n          \
    \  }\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnroz8qf.java:38)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.add(word);\n            }\n\
    \        }\n        return String.join(\" \", result);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpow3skn6g.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 2 && word.charAt(0)\
    \ == word.charAt(2)) {\n                result.add(word);\n            } else\
    \ if (length == 2 && word.charAt(1) == word.charAt(2)) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2)) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.charAt(0) == word.charAt(2) && word.charAt(1) == word.charAt(3))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(3)) {\n  \
    \              result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(3) && word.charAt(1) == word.charAt(2)) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.charAt(1) == word.charAt(3) && word.charAt(2)\
    \ == word.charAt(3)) {\n                result.add(word);\n            } else\
    \ if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(2) && word.charAt(1)\
    \ == word.charAt(3) && word.charAt(2) == word.charAt(4)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.charAt(0) == word.charAt(2) && word.charAt(1) == word.charAt(3) && word.charAt(2)\
    \ == word.charAt(4) && word.charAt(3) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == \n    }\n    public static void main(String[] args) {\n  \
    \  assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0m9styk4.java:57: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp0m9styk4.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len > 1 && len % 2\
    \ == 0) {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n     \
    \               if (len % i == 0) {\n                        sb.append(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyweokt28.java:37)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   for (int i = 3; i <= Math.sqrt(len); i += 2) {\n                    if (len\
    \ % i == 0) {\n                        result.add(word);\n                   \
    \     break;\n                    }\n                }\n            }\n      \
    \  }\n        return result.stream().collect(Collectors.joining(\" \"));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8ufq8lq.java:36)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len == 1) {\n                continue;\n\
    \            }\n            if (isPrime(len)) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwy_9gzs.java:27: error: cannot find symbol\n            if (isPrime(len))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 2 && word.charAt(0)\
    \ == word.charAt(1)) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n  \
    \              result.add(word);\n            } else if (length == 4 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5))\
    \ {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5)) {\n                result.add(word);\n            } else\
    \ if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)) {\n\
    \                result.add(word);\n            } else if (length == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11)) {\n\
    \                result.add(word);\n            } else if (length == 7 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11)) {\n                result.add(word);\n            } else\
    \ if (length == 8 && word.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo45d0tom.java:50: error: <identifier> expected\n            } else\
    \ if (length == 8 && word.\n                                           ^\n/tmp/tmpo45d0tom.java:51:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpo45d0tom.java:52: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            if (length == 2 && word.charAt(0) == word.charAt(1))\
    \ {\n                continue;\n            }\n            if (length == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n  \
    \              continue;\n            }\n            if (length == 4 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5))\
    \ {\n                continue;\n            }\n            if (length == 5 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7)) {\n                continue;\n\
    \            }\n            if (length == 6 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) {\n                continue;\n\
    \            }\n            if (length == 7 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11)) {\n                continue;\n            }\n            if\
    \ (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13)) {\n                continue;\n            }\n            if\
    \ (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n                continue;\n\
    \            }\n            if (length == 10 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14) ==\
    \ word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n                continue;\n\
    \            }\n            if (length == 11 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt0o7llcy.java:54: error: ')' expected\n            if (length ==\
    \ 11 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4\n                                                            \
    \                                                         ^\n/tmp/tmpt0o7llcy.java:55:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpt0o7llcy.java:56: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bi94ira.java:31)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + \" \" + i);\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74jw_84y.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            boolean isPrime = true;\n            for (int i =\
    \ 2; i <= Math.sqrt(length); i++) {\n                if (length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && Character.isLetter(word.charAt(0)))\n                result.add(word);\n\
    \            else if (length == 2 && !Character.isLetter(word.charAt(0)))\n  \
    \              result.add(word);\n            else if (length == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)))\n                result.add(word);\n\
    \            else if (length == 3 && !Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)))\n\
    \                result.add(word);\n            else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\n\
    \                result.add(word);\n            else if (length == 4 && !Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\n\
    \                result.add(word);\n            else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)))\n                result.add(word);\n\
    \            else if (length == 5 && !Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\n\
    \                result.add(word);\n            else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\n\
    \                result.add(word);\n            else if (length == 6 && !Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\n\
    \                result.add(word);\n            else if (length == 7 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)))\n                result.add(word);\n\
    \            else if (length == 7 && !Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbjlhe18.java:48: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpvbjlhe18.java:49: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcaizi5y8.java:35: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpcaizi5y8.java:36: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeda6k53l.java:31)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + \"*\" + i);\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6mnphmy.java:38)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlme8tyk.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8ye2tcp.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<Integer> primes\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            for(int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                if(length%i == 0) {\n                    primes.add(i);\n   \
    \                 break;\n                }\n            }\n        }\n      \
    \  StringBuilder sb = new StringBuilder();\n        for(Integer prime : primes)\
    \ {\n            sb.append(words[prime-1]).append(\" \");\n        }\n       \
    \ return sb.toString();\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8k4g7k52.java:38)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<Integer> primes\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            if(length == 1) {\n                primes.add(1);\n\
    \            } else {\n                for(int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if(length%i == 0) {\n                        primes.add(i);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        StringBuilder sb = new StringBuilder();\n   \
    \     for(Integer prime : primes) {\n            for(int i = 0; i < words.length;\
    \ i++) {\n                if(words[i].length() == prime) {\n                 \
    \   sb.append(words[i]);\n                }\n            }\n        }\n      \
    \  return sb.toString();\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp86f24gqs.java:46)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"a\") || word.equals(\"e\"\
    ) || word.equals(\"i\") || word.equals(\"o\") || word.equals(\"u\")) {\n     \
    \           result.add(word);\n            } else if (length == 2 && word.equals(\"\
    ab\") || word.equals(\"ba\") || word.equals(\"ca\") || word.equals(\"da\") ||\
    \ word.equals(\"ea\") || word.equals(\"fa\") || word.equals(\"ga\") || word.equals(\"\
    ha\") || word.equals(\"ia\") || word.equals(\"ja\") || word.equals(\"ka\") ||\
    \ word.equals(\"la\") || word.equals(\"ma\") || word.equals(\"na\") || word.equals(\"\
    oa\") || word.equals(\"pa\") || word.equals(\"qa\") || word.equals(\"ra\") ||\
    \ word.equals(\"sa\") || word.equals(\"ta\") || word.equals(\"ua\") || word.equals(\"\
    va\") || word.equals(\"wa\") || word.equals(\"xa\") || word.equals(\"ya\") ||\
    \ word.equals(\"za\") || word.equals(\"aba\") || word.equals(\"baa\") || word.equals(\"\
    cab\") || word.equals(\"cba\") || word.equals(\"dab\") || word.equals(\"dba\"\
    ) || word.equals(\"eab\") || word.equals(\"eba\") || word.equals(\"fab\") || word.equals(\"\
    gab\") || word.equals(\"gba\") || word.equals(\"hab\") || word.equals(\"iab\"\
    ) || word.equals(\"iba\") || word.equals(\"jab\") || word.equals(\"jba\") || word.equals(\"\
    kab\") || word.equals(\"kba\") || word.equals(\"lba\") || word.equals(\"lbb\"\
    ) || word.equals(\"mba\") || word.equals(\"nab\") || word.equals(\"nba\") || word.equals(\"\
    oab\") || word.equals(\"oba\") || word.equals(\"pab\") || word.equals(\"pba\"\
    ) || word.equals(\"qab\") || word.equals(\"qba\") || word.equals(\"rab\") || word.equals(\"\
    rba\") || word.equals(\"sab\") || word.equals(\"sba\") || word.equals(\"tab\"\
    ) || word.equals(\"tba\") || word.equals(\"uab\") || word.equals(\"uba\") || word.equals(\"\
    vab\") || word.equals(\"vba\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11k4cfay.java:28: error: unclosed string literal\n            }\
    \ else if (length == 2 && word.equals(\"ab\") || word.equals(\"ba\") || word.equals(\"\
    ca\") || word.equals(\"da\") || word.equals(\"ea\") || word.equals(\"fa\") ||\
    \ word.equals(\"ga\") || word.equals(\"ha\") || word.equals(\"ia\") || word.equals(\"\
    ja\") || word.equals(\"ka\") || word.equals(\"la\") || word.equals(\"ma\") ||\
    \ word.equals(\"na\") || word.equals(\"oa\") || word.equals(\"pa\") || word.equals(\"\
    qa\") || word.equals(\"ra\") || word.equals(\"sa\") || word.equals(\"ta\") ||\
    \ word.equals(\"ua\") || word.equals(\"va\") || word.equals(\"wa\") || word.equals(\"\
    xa\") || word.equals(\"ya\") || word.equals(\"za\") || word.equals(\"aba\") ||\
    \ word.equals(\"baa\") || word.equals(\"cab\") || word.equals(\"cba\") || word.equals(\"\
    dab\") || word.equals(\"dba\") || word.equals(\"eab\") || word.equals(\"eba\"\
    ) || word.equals(\"fab\") || word.equals(\"gab\") || word.equals(\"gba\") || word.equals(\"\
    hab\") || word.equals(\"iab\") || word.equals(\"iba\") || word.equals(\"jab\"\
    ) || word.equals(\"jba\") || word.equals(\"kab\") || word.equals(\"kba\") || word.equals(\"\
    lba\") || word.equals(\"lbb\") || word.equals(\"mba\") || word.equals(\"nab\"\
    ) || word.equals(\"nba\") || word.equals(\"oab\") || word.equals(\"oba\") || word.equals(\"\
    pab\") || word.equals(\"pba\") || word.equals(\"qab\") || word.equals(\"qba\"\
    ) || word.equals(\"rab\") || word.equals(\"rba\") || word.equals(\"sab\") || word.equals(\"\
    sba\") || word.equals(\"tab\") || word.equals(\"tba\") || word.equals(\"uab\"\
    ) || word.equals(\"uba\") || word.equals(\"vab\") || word.equals(\"vba\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 "
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len < 2 || len % 2 == 0) {\n             \
    \   continue;\n            }\n            String newWord = word;\n           \
    \ while (newWord.length() != len) {\n                newWord = newWord.substring(0,\
    \ newWord.length() - 1);\n            }\n            if (newWord.length() == len)\
    \ {\n                result.add(newWord);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss9y_tlj.java:38)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            boolean isPrime = true;\n            for (int i =\
    \ 2; i <= Math.sqrt(length); i++) {\n                if (length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqytl2iff.java:34: error: ')' expected\n            if (length ==\
    \ 11 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14\n                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  ^\n/tmp/tmpqytl2iff.java:35: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpqytl2iff.java:36: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len == 1) {\n     \
    \           sb.append(word);\n            } else {\n                for (int i\
    \ = 2; i <= Math.sqrt(len); i++) {\n                    if (len % i == 0) {\n\
    \                        sb.append(word);\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxmohnje.java:39)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkfkcuntb.java:48: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8x9hfta.java:44: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmpu8x9hfta.java:45:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpu8x9hfta.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return String.join(\" \"\
    , result);\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl906qps4.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<Integer> primes\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            for(int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                if(length%i == 0) {\n                    primes.add(i);\n   \
    \                 break;\n                }\n            }\n        }\n      \
    \  StringBuilder result = new StringBuilder();\n        for(Integer prime : primes)\
    \ {\n            String primeString = Integer.toString(prime);\n            for(int\
    \ i = 0; i < words.length; i++) {\n                if(words[i].length() == prime)\
    \ {\n                    result.append(words[i]);\n                }\n       \
    \     }\n        }\n        return result.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc8d41_hf.java:43)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zkk7htk.java:45: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp9zkk7htk.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeda6k53l.java:31)\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 2 && word.charAt(0)\
    \ == word.charAt(2)) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.charAt(0) == word.charAt(2)\n                    &&\
    \ word.charAt(1) == word.charAt(3)) {\n                result.add(word);\n   \
    \         } else if (length == 3 && word.charAt(0) == word.charAt(3)\n       \
    \             && word.charAt(1) == word.charAt(2)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(2)\n    \
    \                && word.charAt(1) == word.charAt(3) && word.charAt(2) == word.charAt(4))\
    \ {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.charAt(0) == word.charAt(3)\n                    && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(4)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(2)\n    \
    \                && word.charAt(1) == word.charAt(3) && word.charAt(2) == word.charAt(4)\n\
    \                    && word.charAt(3) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(3)\n    \
    \                && word.charAt(1) == word.charAt(2) && word.charAt(2) == word.charAt(4)\n\
    \                    && word.charAt(3) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.charAt(0) == word.charAt(2)\n    \
    \                && word.charAt(1) == word.charAt(3) && word.charAt(2) == word.charAt(4)\n\
    \                    && word.charAt(3) == word.charAt(5) && word.charAt(4) ==\
    \ word.charAt(6)) {\n                result.add(word);\n            } else if\
    \ (length == 6 && word.charAt(0) == word.charAt(3)\n                    && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(4)\n                    &&\
    \ word.charAt(3) == word.charAt(5) && word.charAt(4) == word.charAt(6)) {\n  \
    \              result.add(word);\n            } else if (length == 7 && word.charAt(0)\
    \ == word.charAt(2)\n                    && word.charAt(1) == word.charAt(3) &&\
    \ word.charAt(2) == word.charAt(4)\n                    && word.charAt(3) == word.charAt(5)\
    \ && word.charAt(4) == word.charAt(6)\n                    && word.charAt(5) ==\
    \ word.charAt(7)) {\n                result.add(word);\n            } else if\
    \ (length == 7 && word.charAt(0) == word.charAt(3)\n                    && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(4)\n                    &&\
    \ word.charAt(3) == word.charAt(5) && word.charAt(4\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpewp8sts0.java:65: error: ')' expected\n                    && word.charAt(3)\
    \ == word.charAt(5) && word.charAt(4\n                                       \
    \                                 ^\n/tmp/tmpewp8sts0.java:66: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpewp8sts0.java:67: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.add(word);\n            }\n\
    \        }\n        return result.stream().collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphttnlvyx.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n    \
    \            result.add(word);\n            } else if (len == 2 && word.charAt(0)\
    \ == word.charAt(1)) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                result.add(word);\n            } else if (len == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (len == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                result.add(word);\n\
    \            } else if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            } else if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11)) {\n\
    \                result.add(word);\n            } else if (len == 7 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11)) {\n                result.add(word);\n            } else\
    \ if (len == 8 && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpju5jp3y5.java:50: error: <identifier> expected\n            } else\
    \ if (len == 8 && word.\n                                        ^\n/tmp/tmpju5jp3y5.java:51:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpju5jp3y5.java:52: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            for(int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                if(length % i == 0) {\n                    result.add(word);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.stream().collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqtwcsba3.java:34)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.add(word);\n            }\n\
    \        }\n        return result.stream().collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphttnlvyx.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len > 1 && len % 2 == 0) {\n         \
    \       result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp10vavusu.java:31)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 2 &&\
    \ word.charAt(0) == word.charAt(2)) continue;\n            if (len == 3 && word.charAt(0)\
    \ == word.charAt(2)) continue;\n            if (len == 3 && word.charAt(0) ==\
    \ word.charAt(3)) continue;\n            if (len == 4 && word.charAt(0) == word.charAt(2))\
    \ continue;\n            if (len == 4 && word.charAt(0) == word.charAt(3)) continue;\n\
    \            if (len == 5 && word.charAt(0) == word.charAt(2)) continue;\n   \
    \         if (len == 5 && word.charAt(0) == word.charAt(3)) continue;\n      \
    \      if (len == 6 && word.charAt(0) == word.charAt(2)) continue;\n         \
    \   if (len == 6 && word.charAt(0) == word.charAt(3)) continue;\n            if\
    \ (len == 7 && word.charAt(0) == word.charAt(2)) continue;\n            if (len\
    \ == 7 && word.charAt(0) == word.charAt(3)) continue;\n            if (len ==\
    \ 8 && word.charAt(0) == word.charAt(2)) continue;\n            if (len == 8 &&\
    \ word.charAt(0) == word.charAt(3)) continue;\n            if (len == 9 && word.charAt(0)\
    \ == word.charAt(2)) continue;\n            if (len == 9 && word.charAt(0) ==\
    \ word.charAt(3)) continue;\n            if (len == 10 && word.charAt(0) == word.charAt(2))\
    \ continue;\n            if (len == 10 && word.charAt(0) == word.charAt(3)) continue;\n\
    \            if (len == 11 && word.charAt(0) == word.charAt(2)) continue;\n  \
    \          if (len == 11 && word.charAt(0) == word.charAt(3)) continue;\n    \
    \        if (len == 12 && word.charAt(0) == word.charAt(2)) continue;\n      \
    \      if (len == 12 && word.charAt(0) == word.charAt(3)) continue;\n        \
    \    if (len == 13 && word.charAt(0) == word.charAt(2)) continue;\n          \
    \  if (len == 13 && word.charAt(0) == word.charAt(3)) continue;\n            if\
    \ (len == 14 && word.charAt(0) == word.charAt(2)) continue;\n            if (len\
    \ == 14 && word.charAt(0) == word.charAt(3)) continue;\n            if (len ==\
    \ 15 && word.charAt(0) == word.charAt(2)) continue;\n            if (len == 15\
    \ && word.charAt(0) == word.charAt(3)) continue;\n            if (len == 16 &&\
    \ word.charAt(0) == word.charAt(2)) continue;\n            if (len == 16 && word.charAt(0)\
    \ == word.charAt(3)) continue;\n            if (len == 17 && word.charAt(0) ==\
    \ word.charAt(2)) continue;\n            if (len == 17 && word.charAt(0) == word.charAt(3))\
    \ continue;\n            if (len == 18 && word.charAt(0) == word.charAt(2)) continue;\n\
    \            if (len == \n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvgncjgej.java:59: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpvgncjgej.java:60: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + \" \" + i);\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74jw_84y.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3vpe5sb.java:45: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpa3vpe5sb.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48lf5zcf.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word + \" \" + i);\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74jw_84y.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3vpe5sb.java:45: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpa3vpe5sb.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 11 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)) &&\
    \ Character.isLetter(word.charAt(8))) {\n                result.add(word);\n \
    \           } else if (length13 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.is\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6xhw8j7h.java:40: error: ')' expected\n            } else if (length13\
    \ && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.is\n                                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                 ^\n/tmp/tmp6xhw8j7h.java:41:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp6xhw8j7h.java:42: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlme8tyk.java:38)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int length\
    \ = word.length();\n            boolean isPrime = true;\n            for(int i\
    \ = 2; i <= Math.sqrt(length); i++) {\n                if(length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if(isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvxq5r2b.java:38)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.equals(\"a\")) continue;\n            if (len == 2 && word.equals(\"\
    b\")) continue;\n            if (len == 2 && word.equals(\"c\")) continue;\n \
    \           if (len == 2 && word.equals(\"d\")) continue;\n            if (len\
    \ == 2 && word.equals(\"e\")) continue;\n            if (len == 2 && word.equals(\"\
    f\")) continue;\n            if (len == 2 && word.equals(\"g\")) continue;\n \
    \           if (len == 2 && word.equals(\"h\")) continue;\n            if (len\
    \ == 2 && word.equals(\"i\")) continue;\n            if (len == 2 && word.equals(\"\
    j\")) continue;\n            if (len == 2 && word.equals(\"k\")) continue;\n \
    \           if (len == 2 && word.equals(\"l\")) continue;\n            if (len\
    \ == 2 && word.equals(\"m\")) continue;\n            if (len == 2 && word.equals(\"\
    n\")) continue;\n            if (len == 2 && word.equals(\"o\")) continue;\n \
    \           if (len == 2 && word.equals(\"p\")) continue;\n            if (len\
    \ == 2 && word.equals(\"q\")) continue;\n            if (len == 2 && word.equals(\"\
    r\")) continue;\n            if (len == 2 && word.equals(\"s\")) continue;\n \
    \           if (len == 2 && word.equals(\"t\")) continue;\n            if (len\
    \ == 2 && word.equals(\"u\")) continue;\n            if (len == 2 && word.equals(\"\
    v\")) continue;\n            if (len == 2 && word.equals(\"w\")) continue;\n \
    \           if (len == 2 && word.equals(\"x\")) continue;\n            if (len\
    \ == 2 && word.equals(\"y\")) continue;\n            if (len == 2 && word.equals(\"\
    z\")) continue;\n            if (len == 3 && word.equals(\"aa\")) continue;\n\
    \            if (len == 3 && word.equals(\"ab\")) continue;\n            if (len\
    \ == 3 && word.equals(\"ac\")) continue;\n            if (len == 3 && word.equals(\"\
    ad\")) continue;\n            if (len == 3 && word.equals(\"ae\")) continue;\n\
    \            if (len == 3 && word.equals(\"af\")) continue;\n            if (len\
    \ == 3 && word.equals(\"ag\")) continue;\n            if (len == 3 && word.equals(\"\
    ah\")) continue;\n            if (len == 3 && word.equals(\"ai\")) continue;\n\
    \            if (len == 3 && word.equals(\"aj\")) continue;\n            if (len\
    \ == 3 && word.equals(\"ak\")) continue;\n            if (len == 3 && word.equals(\"\
    al\")) continue;\n            if (len == 3 && word.equals(\"am\")) continue;\n\
    \            if (len == 3 && word.equals(\"an\")) continue;\n            if (len\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpopkvihyc.java:65: error: ')' expected\n            if (len\n  \
    \                 ^\n/tmp/tmpopkvihyc.java:66: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpopkvihyc.java:67: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcaizi5y8.java:35: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpcaizi5y8.java:36: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : words) {\n            int len\
    \ = word.length();\n            if(len > 1 && len % 2 == 0) {\n              \
    \  result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq8m9x2e8.java:31)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4fkto0i7.java:44: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmp4fkto0i7.java:45:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp4fkto0i7.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6fcv_q2x.java:48: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int length = word.length();\n            if (length != 1) {\n\
    \                for (int i = 2; i <= Math.sqrt(length); i++) {\n            \
    \        if (length % i == 0) {\n                        break;\n            \
    \        }\n                }\n                if (i == Math.sqrt(length)) {\n\
    \                    sb.append(word);\n                }\n            }\n    \
    \    }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi3ynmt8x.java:31: error: cannot find symbol\n                if\
    \ (i == Math.sqrt(length)) {\n                    ^\n  symbol:   variable i\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\")\n                 \
    \   && word.endsWith(\"z\")) {\n                result.add(word);\n          \
    \  } else if (len == 2 && word.startsWith(\"a\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\")\n                    && word.endsWith(\"z\")) {\n   \
    \             result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\")\n                 \
    \   && word.endsWith(\"z\")) {\n                result.add(word);\n          \
    \  } else if (len == 2 && word.startsWith(\"a\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\")\n                    && word.endsWith(\"z\")) {\n   \
    \             result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\")\n                 \
    \   && word.endsWith(\"z\")) {\n                result.add(word);\n          \
    \  } else if (len == 2 && word.startsWith(\"a\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\")\n                    && word.endsWith(\"z\")) {\n   \
    \             result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\")\n                 \
    \   && word.endsWith(\"z\")) {\n                result.add(word);\n          \
    \  } else if (len == 2 && word.startsWith(\"a\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\")\n                    && word.endsWith(\"z\")) {\n   \
    \             result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\")\n                 \
    \   && word.endsWith(\"z\")) {\n                result.add(word);\n          \
    \  } else if (len == 2 && word.startsWith(\"a\")\n                    && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\")\n                    && word.endsWith(\"z\")) {\n   \
    \             result.\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbeupp56m.java:82: error: <identifier> expected\n              \
    \  result.\n                       ^\n/tmp/tmpbeupp56m.java:82: error: not a statement\n\
    \                result.\n                      ^\n/tmp/tmpbeupp56m.java:84: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\")\n              \
    \      && word.endsWith(\"z\")) {\n                result.add(word);\n       \
    \     } else if (length == 2 && word.startsWith(\"a\")\n                    &&\
    \ word.endsWith(\"z\")\n                    && word.startsWith(\"a\")\n      \
    \              && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\")\n              \
    \      && word.endsWith(\"z\")\n                    && word.startsWith(\"a\")\n\
    \                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.startsWith(\"a\")\n              \
    \      && word.endsWith(\"z\")\n                    && word.startsWith(\"a\")\n\
    \                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.startsWith(\"a\")\n              \
    \      && word.endsWith(\"z\")\n                    && word.startsWith(\"a\")\n\
    \                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.startsWith(\"a\")\n              \
    \      && word.endsWith(\"z\")\n                    && word.startsWith(\"a\")\n\
    \                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.startsWith(\"a\")\n              \
    \      && word.endsWith(\"z\")\n                    && word.startsWith(\"a\")\n\
    \                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith(\"z\")\n                    && word.startsWith(\"\
    a\")\n                    && word.endsWith\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ej8_q8a.java:81: error: ')' expected\n                    && word.endsWith\n\
    \                                    ^\n/tmp/tmp2ej8_q8a.java:82: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmp2ej8_q8a.java:83: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && Character.isLetter(word.charAt(0)))\n                continue;\n   \
    \         if (length == 2 && Character.isLetter(word.charAt(1)))\n           \
    \     continue;\n            if (length == 3 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 3 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 3 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length == 4 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 4 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 4 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length == 5 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 5 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 5 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length == 6 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 6 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 6 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length == 7 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 7 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 7 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length == 8 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 8 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 8 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length == 9 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 9 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 9 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length == 10 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 10 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 10 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length == 11 && Character.isLetter(word.charAt(0)))\n\
    \                continue;\n            if (length == 11 && Character.isLetter(word.charAt(1)))\n\
    \                continue;\n            if (length == 11 && Character.isLetter(word.charAt(2)))\n\
    \                continue;\n            if (length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26wz_1ev.java:83: error: ')' expected\n            if (length\n\
    \                      ^\n/tmp/tmp26wz_1ev.java:84: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp26wz_1ev.java:85: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int length = word.length();\n            if (length == 1) {\n\
    \                sb.append(word);\n            } else {\n                boolean\
    \ isPrime = true;\n                for (int i = 2; i <= Math.sqrt(length); i++)\
    \ {\n                    if (length % i == 0) {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (isPrime) {\n                    sb.append(word);\n\
    \                }\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhgav74n.java:43)\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ len = word.length();\n            if (len > 1 && len % 2 == 0) {\n         \
    \       result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp10vavusu.java:31)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8ye2tcp.java:24: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\") || word.equals(\"b\") ||\
    \ word.equals(\"c\") || word.equals(\"d\") || word.equals(\"e\") || word.equals(\"\
    f\") || word.equals(\"g\") || word.equals(\"h\") || word.equals(\"i\") || word.equals(\"\
    j\") || word.equals(\"k\") || word.equals(\"l\") || word.equals(\"m\") || word.equals(\"\
    n\") || word.equals(\"o\") || word.equals(\"p\") || word.equals(\"q\") || word.equals(\"\
    r\") || word.equals(\"s\") || word.equals(\"t\") || word.equals(\"u\") || word.equals(\"\
    v\") || word.equals(\"w\") || word.equals(\"x\") || word.equals(\"y\") || word.equals(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.equals(\"aa\") || word.equals(\"ab\") || word.equals(\"ac\") || word.equals(\"\
    ad\") || word.equals(\"ae\") || word.equals(\"af\") || word.equals(\"ag\") ||\
    \ word.equals(\"ah\") || word.equals(\"ai\") || word.equals(\"aj\") || word.equals(\"\
    ak\") || word.equals(\"al\") || word.equals(\"am\") || word.equals(\"an\") ||\
    \ word.equals(\"ao\") || word.equals(\"ap\") || word.equals(\"aq\") || word.equals(\"\
    ar\") || word.equals(\"as\") || word.equals(\"at\") || word.equals(\"au\") ||\
    \ word.equals(\"av\") || word.equals(\"aw\") || word.equals(\"ax\") || word.equals(\"\
    ay\") || word.equals(\"az\")) {\n                result.add(word);\n         \
    \   } else if (len == 4 && word.equals(\"ba\") || word.equals(\"bb\") || word.equals(\"\
    bc\") || word.equals(\"bd\") || word.equals(\"be\") || word.equals(\"bf\") ||\
    \ word.equals(\"bg\") || word.equals(\"bh\") || word.equals(\"bi\") || word.equals(\"\
    bj\") || word.equals(\"bk\") || word.equals(\"bl\") || word.equals(\"bm\") ||\
    \ word.equals(\"bn\") || word.equals(\"bo\") || word.equals(\"bp\") || word.equals(\"\
    bq\") || word.equals(\"br\") || word.equals(\"bs\") || word.equals(\"bt\") ||\
    \ word.equals(\"bu\") || word.equals(\"bv\") || word.equal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0dmzq5_x.java:30: error: ')' expected\n            } else if (len\
    \ == 4 && word.equals(\"ba\") || word.equals(\"bb\") || word.equals(\"bc\") ||\
    \ word.equals(\"bd\") || word.equals(\"be\") || word.equals(\"bf\") || word.equals(\"\
    bg\") || word.equals(\"bh\") || word.equals(\"bi\") || word.equals(\"bj\") ||\
    \ word.equals(\"bk\") || word.equals(\"bl\") || word.equals(\"bm\") || word.equals(\"\
    bn\") || word.equals(\"bo\") || word.equals(\"bp\") || word.equals(\"bq\") ||\
    \ word.equals(\"br\") || word.equals(\"bs\") || word.equals(\"bt\") || word.equals(\"\
    bu\") || word.equals(\"bv\") || word.equal\n                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  ^\n/tmp/tmp0dmzq5_x.java:31: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp0dmzq5_x.java:32: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length == 1) {\n                continue;\n\
    \            }\n            boolean isPrime = true;\n            for (int i =\
    \ 2; i <= Math.sqrt(length); i++) {\n                if (length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkfkcuntb.java:48: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve2covv9.java:38)\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        List<String> result = new ArrayList<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ length = word.length();\n            if (length != 1) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf7wlf4sm.java:31)\n"
  stdout: ''
  timestamp: 1660010417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr78dbzz.java:23: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static String wordsInSentence(String sentence)\
    \ {\n        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\") && word.startsWith(\"f\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\") && word.startsWith(\"e\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"f\") && word.endsWith(\"z\") && word.startsWith(\"g\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.startsWith(\"a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpni2evchd.java:40: error: unclosed string literal\n            }\
    \ else if (length == 2 && word.startsWith(\"a\n                              \
    \                        ^\n/tmp/tmpni2evchd.java:42: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010416
