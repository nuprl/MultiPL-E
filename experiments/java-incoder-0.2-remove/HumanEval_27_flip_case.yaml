name: HumanEval_27_flip_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    public static String flipCase(String string)\
  \ {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
  \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        for (char\
    \ c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n \
    \               sb.append(Character.toUpperCase(c));\n            } else {\n \
    \               sb.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return sb.toString();", "        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \ } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n\
    \            }\n        }\n        return new String(chars);", "        return\
    \ string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.toUpperCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)))\n                .collect(Collectors.joining());",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        return string.chars()\n    \
    \            .mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)))\n                .collect(Collectors.joining());",
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.chars().mapToObj(c -> (char) (c
    == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        StringBuilder builder = new\
    \ StringBuilder();\n        for(char c : string.toCharArray()) {\n           \
    \ builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n\
    \        }\n        return builder.toString();", '        return string.toLowerCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return string.toString();", "        return string.chars()\n        \
    \    .mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)))\n            .collect(Collectors.joining());",
  "        StringBuilder builder = new StringBuilder();\n        for(char c : string.toCharArray())\
    \ {\n            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c));\n        }\n        return builder.toString();",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        StringBuilder sb = new StringBuilder();\n\
    \        for(char c : string.toCharArray()) {\n            if(Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.chars().mapToObj(c -> (char) (c
    == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.chars().mapToObj(c -> (char) (c
    == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (Character.isLowerCase(charArray[i])) {\n           \
    \     charArray[i] = Character.toUpperCase(charArray[i]);\n            }\n   \
    \         if (Character.isUpperCase(charArray[i])) {\n                charArray[i]\
    \ = Character.toLowerCase(charArray[i]);\n            }\n        }\n        return\
    \ new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).forEach(c -> {\n\
    \            if (Character.isUpperCase(c)) {\n                charArray[c] = Character.toUpperCase(c);\n\
    \            }\n        });\n        return new String(charArray);", "       \
    \ StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if(c == 'a' || c\
    \ == 'A') {\n                sb.append('A');\n            } else if(c == 'b' ||\
    \ c == 'B') {\n                sb.append('B');\n            } else if(c == 'c'\
    \ || c == 'C') {\n                sb.append('C');\n            } else if(c ==\
    \ 'd' || c == 'D') {\n                sb.append('D');\n            } else if(c\
    \ == 'e' || c == 'E') {\n                sb.append('E');\n            } else if(c\
    \ == 'f' || c == 'F') {\n                sb.append('F');\n            } else if(c\
    \ == 'g' || c == 'G') {\n                sb.append('G');\n            } else if(c\
    \ == 'h' || c == 'H') {\n                sb.append('H');\n            } else if(c\
    \ == 'i' || c == 'I') {\n                sb.append('I');\n            } else if(c\
    \ == 'j' || c == 'J') {\n                sb.append('J');\n            } else if(c\
    \ == 'k' || c == 'K') {\n                sb.append('K');\n            } else if(c\
    \ == 'l' || c == 'L') {\n                sb.append('L');\n            } else if(c\
    \ == 'm' || c == 'M') {\n                sb.append('M');\n            } else if(c\
    \ == 'n' || c == 'N') {\n                sb.append('N');\n            } else if(c\
    \ == 'o' || c == 'O') {\n                sb.append('O');\n            } else if(c\
    \ == 'p' || c == 'P') {\n                sb.append('P');\n            } else if(c\
    \ == 'q' || c == 'Q') {\n                sb.append('Q');\n            } else if(c\
    \ == 'r' || c == 'R') {\n                sb.append('R');\n            } else if(c\
    \ == 's' || c == 'S') {\n                sb.append('S');\n            } else if(c\
    \ == 't' || c == 'T') {\n                sb.append('T');\n            } else if(c\
    \ == 'u' || c == 'U') {\n                sb.append('U');\n            } else if(c\
    \ == 'v' || c == 'V') {\n                sb.append('V');\n            } else if(c\
    \ == 'w' || c == 'W') {\n                sb.append('W');\n            } else if(c\
    \ == 'x' || c == 'X') {\n                sb.append('X');\n            } else if(c\
    \ == 'y' || c == 'Y') {\n                sb.append('Y');\n            } else if(c\
    \ == 'z' || c == 'Z') {\n                s", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for(char c : string.toCharArray()) {\n            if(Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars().mapToObj(c -> (char) (c\
    \ == (char) 'a' ? 'A' : (char) 'a')).collect(Collectors.joining(\"\"));", "  \
    \      char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (Character.isLowerCase(chars[i])) {\n               \
    \ chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i]))\
    \ {\n                chars[i] = Character.toLowerCase(chars[i]);\n           \
    \ }\n        }\n        return new String(chars);", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  '        return string.toUpperCase().replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).forEach(System.out::print);\n        return String.valueOf(charArray);",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.toUpperCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : (char) 'a'))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : c))\n                .collect(Collectors.joining(\"\
    \"));", '        return string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c)
    ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n\
    \            if (Character.isLowerCase(c)) {\n                charArray[i] = Character.toUpperCase(c);\n\
    \            } else {\n                charArray[i] = Character.toLowerCase(c);\n\
    \            }\n        }\n        return new String(charArray);", "        StringBuilder\
    \ builder = new StringBuilder();\n        for(char c : string.toCharArray()) {\n\
    \            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c));\n        }\n        return builder.toString();",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  '        return string.chars().mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(Collectors.joining());', "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        return string.chars()\n    \
    \            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars()\n                .mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n\
    \                .collect(Collectors.joining());", "        char[] charArray =\
    \ string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", '        return string.toLowerCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        StringBuilder sb = new StringBuilder();\n    \
    \    for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(c == ' ') {\n                sb.append(' ');\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        StringBuilder sb = new StringBuilder();\n    \
    \    char[] charArray = string.toCharArray();\n        for (char c : charArray)\
    \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.toLowerCase()\n\
    \                .chars()\n                .mapToObj(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                .collect(Collectors.joining());",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars()\n                .mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n\
    \                .collect(Collectors.joining());", "        char[] charArray =\
    \ string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        return string.chars()\n            .mapToObj(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.toLowerCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : c))\n                .collect(Collectors.joining(\"\
    \"));", "        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n   \
    \         if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        StringBuilder sb = new StringBuilder(string);\n        for(int i = 0; i\
    \ < sb.length(); i++) {\n            char c = sb.charAt(i);\n            if(Character.isLowerCase(c))\
    \ {\n                sb.setCharAt(i, Character.toUpperCase(c));\n            }\n\
    \            else if(Character.isUpperCase(c)) {\n                sb.setCharAt(i,\
    \ Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();",
  "        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i\
    \ < string.length(); i++) {\n            char c = string.charAt(i);\n        \
    \    if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(Character::toLowerCase).forEach(c\
    \ -> {\n            if (Character.isUpperCase(c)) {\n                charArray[c]\
    \ = Character.toUpperCase(c);\n            }\n        });\n        return new\
    \ String(charArray);", "        StringBuilder builder = new StringBuilder();\n\
    \        for(char c : string.toCharArray()) {\n            if(Character.isLowerCase(c))\
    \ {\n                builder.append(Character.toUpperCase(c));\n            }\
    \ else {\n                builder.append(Character.toLowerCase(c));\n        \
    \    }\n        }\n        return builder.toString();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", '        return string.toLowerCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        StringBuilder builder = new\
    \ StringBuilder();\n        char[] chars = string.toCharArray();\n        for\
    \ (int i = 0; i < chars.length; i++) {\n            builder.append(chars[i]);\n\
    \            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                builder.append((char)\
    \ (chars[i] - 'a' + 'A'));\n            } else if (chars[i] >= 'A' && chars[i]\
    \ <= 'Z') {\n                builder.append((char) (chars[i] - 'A' + 'a'));\n\
    \            }\n        }\n        return builder.toString();", "        return\
    \ string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \            .mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a'))\n          \
    \      .collect(Collectors.joining());", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars()\n                .mapToObj(c\
    \ -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n\
    \                .collect(Collectors.joining());", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         } else if (Character.isUpperCase(charArray[i])) {\n                charArray[i]\
    \ = Character.toLowerCase(charArray[i]);\n            }\n        }\n        return\
    \ new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         }\n            if (Character.isUpperCase(charArray[i])) {\n        \
    \        charArray[i] = Character.toLowerCase(charArray[i]);\n            }\n\
    \        }\n        return new String(charArray);", "        return string.chars()\n\
    \            .mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)))\n            .collect(Collectors.joining());",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        StringBuilder sb = new StringBuilder(string);\n\
    \        for(int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n\
    \            if(Character.isLowerCase(c)) {\n                sb.setCharAt(i, Character.toUpperCase(c));\n\
    \            } else if(Character.isUpperCase(c)) {\n                sb.setCharAt(i,\
    \ Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        return string.chars()\n    \
    \            .mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a'))\n          \
    \      .collect(Collectors.joining());", "        return string.toLowerCase()\n\
    \            .chars()\n            .mapToObj(c -> Character.toUpperCase((char)\
    \ c))\n            .collect(Collectors.joining());", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", '        return string.chars().mapToObj(c
    -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            charArray[i] = (char) (charArray[i] + 'A' - 'a');\n            }\
    \ else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i]\
    \ = (char) (charArray[i] + 'a' - 'A');\n            }\n        }\n        return\
    \ new String(charArray);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder builder = new\
    \ StringBuilder();\n        for(char c : string.toCharArray()) {\n           \
    \ builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n\
    \        }\n        return builder.toString();", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if(Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)))\n            .collect(Collectors.joining());",
  "        StringBuilder builder = new StringBuilder();\n        for(char c : string.toCharArray())\
    \ {\n            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c));\n        }\n        return builder.toString();",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)))\n                .collect(Collectors.joining());",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  "        return string.chars()\n            .mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n            .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        StringBuilder builder = new\
    \ StringBuilder();\n        for(char c : string.toCharArray()) {\n           \
    \ builder.append((char) (c == (char) c ? Character.toUpperCase(c) : Character.toLowerCase(c)));\n\
    \        }\n        return builder.toString();", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  '        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)
    ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  '        return string.toLowerCase().replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", "        StringBuilder builder = new\
    \ StringBuilder();\n        for (char c : string.toCharArray()) {\n          \
    \  if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", '        return
    string.toLowerCase().replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]", "[a-z]");',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(Character::toLowerCase).forEach(c\
    \ -> {\n            if (Character.isUpperCase(c)) {\n                charArray[c]\
    \ = Character.toUpperCase(c);\n            }\n        });\n        return new\
    \ String(charArray);", "        StringBuilder sb = new StringBuilder();\n    \
    \    for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.toLowerCase()\n                .chars()\n\
    \                .mapToObj(i -> (char) i)\n                .collect(Collectors.joining(\"\
    \"));", "        char[] charArray = string.toCharArray();\n        for (int i\
    \ = 0; i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                charArray[i] = (char) (charArray[i] + 32);\n    \
    \        } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n          \
    \      charArray[i] = (char) (charArray[i] - 32);\n            }\n        }\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.chars().mapToObj(c -> (char) (c
    == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c));\n        }\n        return builder.toString();",
  "        StringBuilder builder = new StringBuilder();\n        for(char c : string.toCharArray())\
    \ {\n            builder.append((char) (c == (char) c ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)));\n        }\n        return builder.toString();",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return string.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).forEach(c -> {\n\
    \            charArray[charArray.length - 1] = Character.toUpperCase(c);\n   \
    \     });\n        return new String(charArray);", "        StringBuilder builder\
    \ = new StringBuilder();\n        for(char c : string.toCharArray()) {\n     \
    \       builder.append(Character.toUpperCase(c));\n        }\n        return builder.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for(char c : string.toCharArray())\
    \ {\n            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.toUpperCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", '        return string.toLowerCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        return string.chars()\n    \
    \            .mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)))\n                .collect(Collectors.joining());",
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  '        return string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c)
    ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());',
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars()\n            .mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n\
    \            .collect(Collectors.joining());", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars().mapToObj(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                charArray[i] = (char) (charArray[i]\
    \ + 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                charArray[i] = (char) (charArray[i] - 32);\n            }\n \
    \       }\n        return new String(charArray);", "        char[] charArray =\
    \ string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", '        return string.toLowerCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        return string.toLowerCase()\n\
    \                .chars()\n                .mapToObj(c -> Character.toUpperCase((char)\
    \ c))\n                .collect(Collectors.joining());", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        StringBuilder sb = new StringBuilder(string);\n\
    \        for(int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n\
    \            if(Character.isLowerCase(c)) {\n                sb.setCharAt(i, Character.toUpperCase(c));\n\
    \            }\n            else if(Character.isUpperCase(c)) {\n            \
    \    sb.setCharAt(i, Character.toLowerCase(c));\n            }\n        }\n  \
    \      return sb.toString();", "        StringBuilder builder = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            builder.append((char)\
    \ (c == (char) c ? Character.toUpperCase(c) : Character.toLowerCase(c)));\n  \
    \      }\n        return builder.toString();", "        StringBuilder builder\
    \ = new StringBuilder();\n        for(char c : string.toCharArray()) {\n     \
    \       builder.append((char) (c == (char) c ? Character.toUpperCase(c) : Character.toLowerCase(c)));\n\
    \        }\n        return builder.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars()\n                .mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n\
    \                .collect(Collectors.joining());", '        return string.toLowerCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());']
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
