name: HumanEval_158_find_max
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts a list of strings.\n    //\
  \ The list contains different words. Return the word with maximum number\n    //\
  \ of unique characters. If multiple strings have maximum number of unique\n    //\
  \ characters, return the one which comes first in lexicographical order.\n    public\
  \ static String findMax(ArrayList<String> words) {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"\
  )))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
  )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        // Write your code here\n        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n            }\n      \
    \  }\n        Integer maxValue = Collections.max(map.values());\n        if (maxValue\
    \ != null) {\n            String maxKey = map.entrySet().stream()\n          \
    \          .filter(e -> e.getValue().equals(maxValue))\n                    .map(Map.Entry::getKey)\n\
    \                    .findFirst()\n                    .get();\n            return\
    \ maxKey;\n        } else {\n            return null;\n        }", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = 0;\n            for(char c : word.toCharArray()) {\n      \
    \          if(map.containsKey(c)) {\n                    count = map.get(c) +\
    \ 1;\n                } else {\n                    map.put(c, 1);\n         \
    \       }\n            }\n            map.put(word, count);\n        }\n     \
    \   \n        for(Map.Entry<String, Integer> entry : map.entrySet()) {\n     \
    \       if(entry.getValue() > words.size()) {\n                return entry.getKey();\n\
    \            }\n        }\n        \n        return words.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = map.get(word);\n            map.put(word, count == null ? 1\
    \ : count + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n\
    \        \n        Optional<String> maxKey = keys.stream().max(Comparator.comparing(k\
    \ -> map.get(k)));\n        \n        return maxKey.orElse(null);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.entrySet().stream().map(e -> e.getKey() + \": \" + e.getValue()).collect(Collectors.joining(\"\
    , \"));", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        if (iterator.hasNext()) {\n            String key\
    \ = iterator.next();\n            int value = map.get(key);\n            if (value\
    \ > 1) {\n                return key;\n            }\n        }\n        return\
    \ null;", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        int maxCount = -1;\n        String maxWord = null;\n\
    \        while (iterator.hasNext()) {\n            String word = iterator.next();\n\
    \            int count = map.get(word);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                Integer\
    \ count = map.get(c);\n                if (count == null) {\n                \
    \    map.put(c, 1);\n                } else {\n                    map.put(c,\
    \ count + 1);\n                }\n            }\n        }\n        Integer maxCount\
    \ = Collections.max(map.values());\n        Integer maxKey = Collections.max(map.keySet());\n\
    \        for (String word : words) {\n            if (map.get(word).equals(maxCount))\
    \ {\n                return word;\n            }\n        }\n        return maxKey;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            map.put(word, count);\n        }\n   \
    \     Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n      \
    \  return words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            map.put(word, count + 1);\n        }\n        \n        Set<String>\
    \ uniqueWords = new HashSet<>(map.keySet());\n        \n        if (uniqueWords.size()\
    \ == 1) {\n            return uniqueWords.iterator().next();\n        }\n    \
    \    \n        Collections.sort(uniqueWords);\n        \n        return uniqueWords.iterator().next();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        int maxCount = Integer.MIN_VALUE;\n        String maxWord\
    \ = null;\n        for (String key : keys) {\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = key;\n            }\n        }\n        return maxWord;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keys\
    \ = map.keySet();\n        Iterator<String> it = keys.iterator();\n        String\
    \ maxKey = it.next();\n        int maxCount = map.get(maxKey);\n        while\
    \ (it.hasNext()) {\n            String key = it.next();\n            int count\
    \ = map.get(key);\n            if (count > maxCount) {\n                maxKey\
    \ = key;\n                maxCount = count;\n            }\n        }\n      \
    \  return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n   \
    \     for (String word : words) {\n            int count = map.get(word);\n  \
    \          if (count == null) {\n                map.put(word, 1);\n         \
    \   } else {\n                map.put(word, count + 1);\n            }\n     \
    \   }\n        List<String> result = new ArrayList<>();\n        for (String word\
    \ : map.keySet()) {\n            if (map.get(word) == map.get(word).max()) {\n\
    \                result.add(word);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        return words.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collections.sort(words,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return words.get(0);", "        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ Integer count = counts.get(word);\n            if (count == null) {\n      \
    \          count = 0;\n            }\n            counts.put(word, count + 1);\n\
    \        }\n        Integer maxCount = Collections.max(counts.values());\n   \
    \     for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n         \
    \   if (entry.getValue() == maxCount) {\n                return entry.getKey();\n\
    \            }\n        }\n        return null;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Collections.sort(words, Comparator.comparing(s\
    \ -> map.get(s)));\n        return words.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n  \
    \              } else {\n                    map.put(c, 1);\n                }\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.keySet().stream().findFirst().get().getKey();", "        Map<String,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          int count = counts.get(word);\n            if (count == null) {\n \
    \               counts.put(word, 1);\n            } else {\n                counts.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        for (String word : counts.keySet()) {\n            if (counts.get(word)\
    \ == maxCount) {\n                return word;\n            }\n        }\n   \
    \     return null;", "        Map<String, Integer> map = new HashMap<>();\n  \
    \      for (String word : words) {\n            int count = 0;\n            for\
    \ (char c : word.toCharArray()) {\n                map.putIfAbsent(String.valueOf(c),\
    \ 0);\n                map.put(String.valueOf(c), map.getOrDefault(String.valueOf(c),\
    \ 0) + 1);\n            }\n        }\n        List<String> result = new ArrayList<>();\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if (entry.getValue() > result.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ result.get(0);\n        }\n        return null;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.put(c, map.get(c)\
    \ + 1);\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n        return maxEntry.getKey();",
  "        Map<String, Integer> counts = new HashMap<>();\n        for (String word\
    \ : words) {\n            Integer count = counts.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            counts.put(word,\
    \ count + 1);\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        String maxWord = null;\n        for (String word : counts.keySet()) {\n\
    \            if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 1;\n            } else {\n                count++;\n       \
    \     }\n            map.put(word, count);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = map.get(word);\n            if(count == null) {\n         \
    \       count = 1;\n            } else {\n                count++;\n         \
    \   }\n            map.put(word, count);\n        }\n        \n        Set<String>\
    \ keySet = map.keySet();\n        \n        for(String key : keySet) {\n     \
    \       if(map.get(key) == keySet.size()) {\n                return key;\n   \
    \         }\n        }\n        return null;", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();",
  "        // Write your code here\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = 0;\n            for(char\
    \ c : word.toCharArray()) {\n                if(map.containsKey(c)) {\n      \
    \              count = map.get(c) + 1;\n                }\n                map.put(c,\
    \ count);\n            }\n        }\n        \n        Set<String> keySet = map.keySet();\n\
    \        \n        Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \        \n        if(maxValue != null) {\n            String maxKey = maxValue.toString();\n\
    \            \n            for(String word : words) {\n                if(word.equals(maxKey))\
    \ {\n                    return word;\n                }\n            }\n    \
    \    }\n        \n        return null;", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = 0;\n\
    \            for (int i = 0; i < word.length(); i++) {\n                char c\
    \ = word.charAt(i);\n                if (map.containsKey(c)) {\n             \
    \       map.put(c, map.get(c) + 1);\n                } else {\n              \
    \      map.put(c, 1);\n                }\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = map.get(word);\n            if(count == null) {\n         \
    \       map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        \n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        \n        Map.Entry<String, Integer>\
    \ maxEntry = entries.stream().max(Map.Entry.comparingByValue()).get();\n     \
    \   \n        return maxEntry.getKey();", "        Map<String, Integer> countMap\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = countMap.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      countMap.put(word, count);\n        }\n        \n        Set<String> uniqueWords\
    \ = new HashSet<>(countMap.keySet());\n        \n        Integer maxCount = countMap.get(uniqueWords.iterator().next());\n\
    \        \n        for (String word : uniqueWords) {\n            if (countMap.get(word)\
    \ == maxCount) {\n                return word;\n            }\n        }\n   \
    \     \n        return null;", "        Map<String, Integer> count = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = count.get(word);\n\
    \            if (count == null) {\n                count.put(word, 1);\n     \
    \       } else {\n                count.put(word, count + 1);\n            }\n\
    \        }\n        Integer maxCount = count.values().stream().max(Integer::compare).get();\n\
    \        return maxCount == null ? \"No words\" : maxCount.toString();", "   \
    \     Map<String, Integer> map = new HashMap<>();\n        for(String word : words)\
    \ {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        Collections.sort(words);\n        for(String word : words)\
    \ {\n            if(map.containsKey(word)) {\n                if(map.get(word)\
    \ == word.length()) {\n                    return word;\n                }\n \
    \           }\n        }\n        return null;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> keys = map.keySet();\n      \
    \  if (keys.size() == 1) {\n            return keys.get(0);\n        }\n     \
    \   Collections.sort(keys);\n        return keys.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 1;\n            } else {\n                count = count + 1;\n\
    \            }\n            map.put(word, count);\n        }\n        List<String>\
    \ result = new ArrayList<>();\n        for (String word : map.keySet()) {\n  \
    \          if (map.get(word) == map.get(word).max()) {\n                result.add(word);\n\
    \            }\n        }\n        if (result.size() == 0) {\n            return\
    \ \"No word with maximum number of unique characters\";\n        }\n        if\
    \ (result.size() == 1) {\n            return result.get(0);\n        }\n     \
    \   Collections.sort(result);\n        return result.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        return Collections.max(map.entrySet(),\
    \ Map.Entry.comparingByValue()).getKey();", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        Collection<String> keys = map.keySet();\n\
    \        int maxCount = Collections.max(map.values());\n        String maxWord\
    \ = null;\n        for (String word : keys) {\n            if (map.get(word) ==\
    \ maxCount) {\n                maxWord = word;\n                break;\n     \
    \       }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        \n        Set<String> uniqueWords = new HashSet<>(words);\n\
    \        \n        for(String word : uniqueWords) {\n            int count = map.get(word);\n\
    \            if(count > 1) {\n                return word;\n            }\n  \
    \      }\n        \n        return null;", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                map.putIfAbsent(String.valueOf(c),\
    \ 0);\n                map.put(String.valueOf(c), map.get(c) + 1);\n         \
    \       count++;\n            }\n            if (count > map.size()) {\n     \
    \           map.put(word, count);\n            }\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        Collections.sort(keys, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        return\
    \ keys.get(0);", "        Map<String, Integer> map = new HashMap<>();\n      \
    \  for (String word : words) {\n            int count = map.get(word);\n     \
    \       if (count == null) {\n                map.put(word, 1);\n            }\
    \ else {\n                map.put(word, count + 1);\n            }\n        }\n\
    \        List<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() > result.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() == 0) {\n            return null;\n        }\n     \
    \   return result.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        \n        Collections.sort(words, new Comparator<String>()\
    \ {\n            @Override\n            public int compare(String o1, String o2)\
    \ {\n                Integer count1 = map.get(o1);\n                Integer count2\
    \ = map.get(o2);\n                if (count1 == null) {\n                    return\
    \ -1;\n                } else if (count2 == null) {\n                    return\
    \ 1;\n                } else {\n                    return count1.compareTo(count2);\n\
    \                }\n            }\n        });\n        \n        return words.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return words.get(0);", "        Map<String, Integer> counts = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = counts.get(word);\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(word, count + 1);\n        }\n        Integer maxCount\
    \ = null;\n        for (String word : counts.keySet()) {\n            if (maxCount\
    \ == null || counts.get(word) > maxCount) {\n                maxCount = counts.get(word);\n\
    \            }\n        }\n        if (maxCount == null) {\n            return\
    \ null;\n        }\n        Collection<String> wordsWithMaxCount = new ArrayList<>();\n\
    \        for (String word : counts.keySet()) {\n            if (counts.get(word)\
    \ == maxCount) {\n                wordsWithMaxCount.add(word);\n            }\n\
    \        }\n        if (wordsWithMaxCount.size() == 1) {\n            return wordsWithMaxCount.get(0);\n\
    \        }\n        Collections.sort(wordsWithMaxCount);\n        return wordsWithMaxCount.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keys\
    \ = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        List<String> sortedKeys = keys.stream().sorted((a, b) -> map.get(b)\
    \ - map.get(a)).collect(Collectors.toList());\n        return sortedKeys.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            Integer count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = map.get(word);\n            map.put(word, count == null ? 1\
    \ : count + 1);\n        }\n        Collection<String> keys = map.keySet();\n\
    \        String maxKey = keys.get(0);\n        int maxCount = map.get(maxKey);\n\
    \        for(String key : keys) {\n            int count = map.get(key);\n   \
    \         if(count > maxCount) {\n                maxKey = key;\n            \
    \    maxCount = count;\n            }\n        }\n        return maxKey;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        List<String> result = new ArrayList<>();\n        for (String\
    \ word : map.keySet()) {\n            if (map.get(word) == map.size()) {\n   \
    \             result.add(word);\n            }\n        }\n        if (result.size()\
    \ > 1) {\n            return result.get(0);\n        } else {\n            return\
    \ result.get(0);\n        }", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count + 1);\n        }\n        \n        List<String>\
    \ result = new ArrayList<>();\n        for(String word : map.keySet()) {\n   \
    \         if(map.get(word) == map.get(word).max()) {\n                result.add(word);\n\
    \            }\n        }\n        \n        if(result.size() == 1) {\n      \
    \      return result.get(0);\n        }\n        \n        Collections.sort(result);\n\
    \        \n        return result.get(0);", "        // Write your code here\n\
    \        Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c);\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ map.put(word, count);\n        }\n        Collections.sort(words, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        return\
    \ words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n     \
    \   for (String word : words) {\n            int count = map.get(word);\n    \
    \        map.put(word, count + 1);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        String max =\
    \ null;\n        int maxCount = 0;\n        while (iterator.hasNext()) {\n   \
    \         String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                max = key;\n           \
    \     maxCount = count;\n            }\n        }\n        return max;", "   \
    \     Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collections.sort(words,\
    \ Comparator.comparing(s -> map.get(s)));\n        return words.get(0);", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                count += map.getOrDefault(String.valueOf(c),\
    \ 0);\n                map.put(String.valueOf(c), count + 1);\n            }\n\
    \        }\n        Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n\
    \        return words.get(0);", "        Map<String, Integer> count = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = count.get(word);\n\
    \            if (count == null) {\n                count.put(word, 1);\n     \
    \       } else {\n                count.put(word, count + 1);\n            }\n\
    \        }\n        Integer maxCount = Collections.max(count.values());\n    \
    \    String maxWord = null;\n        for (String word : count.keySet()) {\n  \
    \          if (count.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \        return map.entrySet().stream().findFirst().get().getKey();", "      \
    \  Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                count += map.getOrDefault(String.valueOf(c), 0);\n      \
    \          map.put(String.valueOf(c), count + 1);\n            }\n        }\n\
    \        Collection<String> maxWords = map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \        return maxWords.isEmpty() ? null : maxWords.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          Integer count = counts.get(word);\n            if (count == null) {\n\
    \                counts.put(word, 1);\n            } else {\n                counts.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        String maxWord = null;\n        for (String word : counts.keySet()) {\n\
    \            if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collection<Map.Entry<String, Integer>> entries\
    \ = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entries.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Integer maxValue = Collections.max(map.values());\n        for\
    \ (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue()\
    \ == maxValue) {\n                return entry.getKey();\n            }\n    \
    \    }\n        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> count = new\
    \ HashMap<>();\n        for (String word : words) {\n            Integer count\
    \ = count.get(word);\n            if (count == null) {\n                count.put(word,\
    \ 1);\n            } else {\n                count.put(word, count + 1);\n   \
    \         }\n        }\n        Integer maxCount = count.values().stream().max(Integer::compareTo).get();\n\
    \        String maxWord = null;\n        for (String word : count.keySet()) {\n\
    \            if (count.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1);\n            } else {\n         \
    \       map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        iterator.next();\n        int maxCount = 0;\n        String maxWord =\
    \ null;\n        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int count = map.get(key);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = key;\n         \
    \   }\n        }\n        return maxWord;", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        if (keys.size()\
    \ == 1) {\n            return keys.get(0);\n        }\n        Collections.sort(keys);\n\
    \        return keys.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                count += map.get(c);\n\
    \                map.put(c, count + 1);\n            }\n        }\n        Collections.sort(words,\
    \ Comparator.comparing(s -> map.get(s)));\n        return words.get(0);", "  \
    \      // Write your code here\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = 0;\n            for(char\
    \ c : word.toCharArray()) {\n                if(map.containsKey(c)) {\n      \
    \              count++;\n                }\n                map.put(c, count);\n\
    \            }\n        }\n        \n        Set<Map.Entry<String, Integer>> set\
    \ = map.entrySet();\n        \n        Map.Entry<String, Integer> maxEntry = null;\n\
    \        \n        for(Map.Entry<String, Integer> entry : set) {\n           \
    \ if(maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n         \
    \       maxEntry = entry;\n            }\n        }\n        \n        return\
    \ maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n  \
    \      Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        // Write your code here\n      \
    \  Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.entrySet().stream().map(e -> e.getValue()).max().getAsString()\
    \ + \" \";", "        Map<String, Integer> counts = new HashMap<>();\n       \
    \ for (String word : words) {\n            Integer count = counts.get(word);\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(word, count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        String maxWord = null;\n      \
    \  for (String word : counts.keySet()) {\n            if (counts.get(word) ==\
    \ maxCount) {\n                maxWord = word;\n                break;\n     \
    \       }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> keys = map.keySet();\n      \
    \  if (keys.size() == 1) {\n            return keys.get(0);\n        }\n     \
    \   int maxCount = 0;\n        String maxWord = null;\n        for (String word\
    \ : keys) {\n            int count = map.get(word);\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count + 1);\n        }\n \
    \       \n        Set<String> keySet = map.keySet();\n        \n        for(String\
    \ key : keySet) {\n            int value = map.get(key);\n            if(value\
    \ > 1) {\n                return key;\n            }\n        }\n        \n  \
    \      return null;", "        Map<String, Integer> map = new HashMap<>();\n \
    \       for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        List<String> result = new ArrayList<>();\n        for (String\
    \ word : map.keySet()) {\n            if (map.get(word) == map.get(word).max())\
    \ {\n                result.add(word);\n            }\n        }\n        if (result.size()\
    \ == 0) {\n            return null;\n        }\n        return result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Collections.sort(keys);\n        return keys.get(0);", " \
    \       Map<String, Integer> countMap = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = countMap.get(word);\n         \
    \   if (count == null) {\n                count = 1;\n            } else {\n \
    \               count++;\n            }\n            countMap.put(word, count);\n\
    \        }\n        Integer maxCount = Collections.max(countMap.values());\n \
    \       String maxWord = null;\n        for (String word : countMap.keySet())\
    \ {\n            if (countMap.get(word) == maxCount) {\n                maxWord\
    \ = word;\n                break;\n            }\n        }\n        return maxWord;",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n\
    \        \n        Integer maxCount = null;\n        String maxWord = null;\n\
    \        for(String key : keys) {\n            Integer count = map.get(key);\n\
    \            if(maxCount == null || count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = key;\n            }\n        }\n       \
    \ \n        return maxWord;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Collection<String> keys = map.keySet();\n        String maxKey\
    \ = keys.stream().max(Comparator.comparing(k -> map.get(k)))\n               \
    \ .orElse(null);\n        return maxKey;", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        String\
    \ maxKey = keys.stream().max(Comparator.comparingInt(key -> map.get(key))).get();\n\
    \        return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        List<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() == words.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() > 1) {\n            return result.get(0);\n        }\n\
    \        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count == null ? 1 : count + 1);\n        }\n      \
    \  Collection<String> keys = map.keySet();\n        if (keys.size() > 1) {\n \
    \           String maxKey = keys.stream().max(Comparator.comparingInt(String::length)).orElse(keys.iterator().next());\n\
    \            return maxKey;\n        } else {\n            return keys.get(0);\n\
    \        }", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = map.get(word);\n          \
    \  if (count == null) {\n                count = 1;\n            } else {\n  \
    \              count++;\n            }\n            map.put(word, count);\n  \
    \      }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        iterator.next();\n        int maxCount\
    \ = keySet.size();\n        String maxWord = null;\n        while (iterator.hasNext())\
    \ {\n            String word = iterator.next();\n            int count = map.get(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // Write your code here\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word: words) {\n            int count = 0;\n            for(char\
    \ c: word.toCharArray()) {\n                if(map.containsKey(c)) {\n       \
    \             map.put(c, map.get(c) + 1);\n                } else {\n        \
    \            map.put(c, 1);\n                }\n                count++;\n   \
    \         }\n            map.put(word, count);\n        }\n        Collections.sort(map.entrySet());\n\
    \        Map.Entry<String, Integer> maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count + 1);\n        }\n        \n        Set<String>\
    \ keys = map.keySet();\n        \n        if (keys.size() == 1) {\n          \
    \  return keys.get(0);\n        }\n        \n        int maxCount = keys.size();\n\
    \        for (String key : keys) {\n            if (map.get(key) > maxCount) {\n\
    \                maxCount = map.get(key);\n            }\n        }\n        \n\
    \        return keys.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n\
    \        return words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Integer maxCount\
    \ = keySet.size();\n        String maxWord = null;\n        for (String word :\
    \ keySet) {\n            if (maxCount.equals(map.get(word))) {\n             \
    \   maxWord = word;\n            }\n        }\n        return maxWord;", "   \
    \     // Write your code here\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n            }\n      \
    \  }\n        \n        Integer maxValue = Collections.max(map.values());\n  \
    \      \n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n \
    \           if (entry.getValue().equals(maxValue)) {\n                return entry.getKey();\n\
    \            }\n        }\n        \n        return null;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        int maxCount\
    \ = keySet.size();\n        String maxWord = null;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = key;\n            }\n        }\n        return maxWord;",
  "        Map<String, Integer> counts = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = counts.getOrDefault(word, 0);\n        \
    \    counts.put(word, count + 1);\n        }\n        \n        Collection<String>\
    \ max = new ArrayList<>();\n        for (String word : counts) {\n           \
    \ if (counts.get(word).equals(counts.keySet().stream().mapToInt(Integer::intValue).max()))\
    \ {\n                max.add(word);\n            }\n        }\n        \n    \
    \    if (max.isEmpty()) {\n            return null;\n        }\n        \n   \
    \     return max.stream().findFirst().get();", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        if (keySet.size()\
    \ > 1) {\n            String maxKey = iterator.next();\n            int maxValue\
    \ = map.get(maxKey);\n            while (iterator.hasNext()) {\n             \
    \   String nextKey = iterator.next();\n                int nextValue = map.get(nextKey);\n\
    \                if (nextValue > maxValue) {\n                    maxKey = nextKey;\n\
    \                    maxValue = nextValue;\n                }\n            }\n\
    \            return maxKey;\n        } else {\n            return keySet.iterator().next();\n\
    \        }", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = map.get(word);\n          \
    \  if (count == null) {\n                count = 1;\n            } else {\n  \
    \              count++;\n            }\n            map.put(word, count);\n  \
    \      }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        String max = null;\n        int maxCount\
    \ = 0;\n        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int count = map.get(key);\n            if (count > maxCount) {\n\
    \                max = key;\n                maxCount = count;\n            }\n\
    \        }\n        return max;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        if (iterator.hasNext()) {\n         \
    \   String key = iterator.next();\n            int value = map.get(key);\n   \
    \         if (value > keySet.size()) {\n                return key;\n        \
    \    }\n        }\n        return null;", "        Map<String, Integer> countMap\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = countMap.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      countMap.put(word, count);\n        }\n        Set<String> uniqueWords\
    \ = new HashSet<>(countMap.keySet());\n        uniqueWords.stream().sorted().forEach(word\
    \ -> System.out.println(word + \" \" + countMap.get(word)));\n        System.out.println(uniqueWords);\n\
    \        return uniqueWords.isEmpty() ? null : uniqueWords.iterator().next();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keys = map.keySet();\n        String\
    \ maxKey = keys.stream().max(Comparator.comparing(k -> map.get(k))).get();\n \
    \       return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        \n        Set<String> keySet = map.keySet();\n        \n \
    \       Iterator<String> iterator = keySet.iterator();\n        \n        while(iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > 1) {\n                return key;\n            }\n  \
    \      }\n        \n        return null;", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        \n        Set<String> keySet = map.keySet();\n \
    \       \n        Integer maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \        \n        if (maxCount == null) {\n            return null;\n       \
    \ }\n        \n        String maxWord = null;\n        for (String word : keySet)\
    \ {\n            if (maxCount.equals(map.get(word))) {\n                maxWord\
    \ = word;\n                break;\n            }\n        }\n        \n      \
    \  return maxWord;", "        Map<String, Integer> map = new HashMap<>();\n  \
    \      for (String word : words) {\n            int count = map.get(word);\n \
    \           if (count == null) {\n                count = 0;\n            }\n\
    \            map.put(word, count + 1);\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      String max = null;\n        int maxCount = 0;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                max = key;\n           \
    \     maxCount = count;\n            }\n        }\n        return max;", "   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String word\
    \ : words) {\n            Integer count = counts.get(word);\n            if (count\
    \ == null) {\n                counts.put(word, 1);\n            } else {\n   \
    \             counts.put(word, count + 1);\n            }\n        }\n       \
    \ Integer maxCount = Collections.max(counts.values());\n        String maxWord\
    \ = null;\n        for (String word : counts.keySet()) {\n            if (counts.get(word)\
    \ == maxCount) {\n                maxWord = word;\n                break;\n  \
    \          }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ count = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = count.get(word);\n            if (count == null) {\n               \
    \ count.put(word, 1);\n            } else {\n                count.put(word, count\
    \ + 1);\n            }\n        }\n        Integer maxCount = count.values().stream().max(Integer::compareTo).get();\n\
    \        return count.entrySet().stream().filter(e -> e.getValue() == maxCount).map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count =\
    \ count + 1;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keys = map.keySet();\n        Collections.sort(keys);\n   \
    \     String maxKey = keys.get(0);\n        int maxCount = map.get(maxKey);\n\
    \        for (String key : keys) {\n            if (map.get(key) == maxCount)\
    \ {\n                maxKey = key;\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return maxKey;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    count = map.get(c) + 1;\n    \
    \            }\n                map.put(c, count);\n            }\n        }\n\
    \        for(String word : words) {\n            int maxCount = Integer.MIN_VALUE;\n\
    \            for(char c : word.toCharArray()) {\n                if(map.containsKey(c))\
    \ {\n                    if(maxCount < map.get(c)) {\n                       \
    \ maxCount = map.get(c);\n                    }\n                }\n         \
    \   }\n            if(maxCount > Integer.MIN_VALUE) {\n                return\
    \ word;\n            }\n        }\n        return null;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        String maxKey\
    \ = iterator.next();\n        int maxCount = map.get(maxKey);\n        while (iterator.hasNext())\
    \ {\n            String nextKey = iterator.next();\n            int nextCount\
    \ = map.get(nextKey);\n            if (nextCount > maxCount) {\n             \
    \   maxKey = nextKey;\n                maxCount = nextCount;\n            }\n\
    \        }\n        return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        int maxCount = 0;\n        String maxWord\
    \ = null;\n        while (iterator.hasNext()) {\n            String word = iterator.next();\n\
    \            int count = map.get(word);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;", "        // Write your code here\n\
    \        Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.entrySet().stream().filter(e -> e.getValue().equals(map.size()))\n\
    \                .map(Map.Entry::getKey).findFirst().orElse(null);", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        Integer maxCount = keySet.isEmpty() ? null\
    \ : keySet.stream().max(Comparator.comparingInt(Integer::intValue)).get();\n \
    \       \n        if (maxCount == null) {\n            return null;\n        }\n\
    \        \n        for (String word : keySet) {\n            if (maxCount.intValue()\
    \ < map.get(word).intValue()) {\n                return word;\n            }\n\
    \        }\n        \n        return null;", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Integer maxCount = keySet.isEmpty() ? null : keySet.stream().max(Integer::compare).get();\n\
    \        if (maxCount == null) {\n            return null;\n        }\n      \
    \  for (String word : keySet) {\n            if (maxCount.equals(map.get(word)))\
    \ {\n                return word;\n            }\n        }\n        return null;",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          int count = counts.get(word);\n            if (count == null) {\n \
    \               count = 0;\n            }\n            counts.put(word, count\
    \ + 1);\n        }\n        Integer maxCount = null;\n        for (String word\
    \ : counts.keySet()) {\n            if (maxCount == null || counts.get(word) >\
    \ maxCount) {\n                maxCount = counts.get(word);\n            }\n \
    \       }\n        if (maxCount == null) {\n            return null;\n       \
    \ }\n        return counts.entrySet().stream()\n                .filter(e -> e.getValue()\
    \ == maxCount)\n                .map(Map.Entry::getKey)\n                .findFirst()\n\
    \                .orElse(null);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            map.put(word, count + 1);\n        }\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : map.keySet()) {\n         \
    \   if (map.get(word) == map.get(word).max()) {\n                result.add(word);\n\
    \            }\n        }\n        if (result.size() == 0) {\n            return\
    \ null;\n        }\n        return result.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<String> keys = map.keySet();\n\
    \        Iterator<String> iterator = keys.iterator();\n        int maxCount =\
    \ 1;\n        String maxWord = null;\n        while (iterator.hasNext()) {\n \
    \           String word = iterator.next();\n            int count = map.get(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // Write your code here\n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        ", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        if (iterator.hasNext())\
    \ {\n            String maxKey = iterator.next();\n            int maxValue =\
    \ map.get(maxKey);\n            for (String key : keySet) {\n                if\
    \ (map.get(key) > maxValue) {\n                    maxKey = key;\n           \
    \         maxValue = map.get(key);\n                }\n            }\n       \
    \     return maxKey;\n        } else {\n            return null;\n        }",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<String>\
    \ keys = map.keySet();\n        Collections.sort(keys);\n        return keys.get(0);",
  "        Map<String, Integer> counts = new HashMap<>();\n        for(String word\
    \ : words) {\n            int count = counts.get(word);\n            if(count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            counts.put(word, count);\n        }\n\
    \        \n        Collection<String> maxCountWords = counts.entrySet().stream()\n\
    \                .sorted(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .collect(Collectors.toList());\n        \n        if(maxCountWords.size()\
    \ > 1) {\n            return maxCountWords.get(0);\n        } else {\n       \
    \     return maxCountWords.get(0);\n        }", "        // Write your code here\n\
    \        Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > map.size()) {\n                return key;\n        \
    \    }\n        }\n        return null;", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return keys.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<String> result = new ArrayList<>();\n   \
    \     for (String word : map.keySet()) {\n            if (map.get(word) == map.size())\
    \ {\n                result.add(word);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        return null;",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        List<String> maxWords\
    \ = map.entrySet().stream()\n                .sorted(Map.Entry.comparingByValue())\n\
    \                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n\
    \        \n        return maxWords.get(0);", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for(String word : words) {\n            int count\
    \ = map.get(word);\n            map.put(word, count == null ? 1 : count + 1);\n\
    \        }\n        \n        Set<String> uniqueWords = new HashSet<>(map.keySet());\n\
    \        \n        for(String word : uniqueWords) {\n            int count = map.get(word);\n\
    \            if(count > 1) {\n                return word;\n            }\n  \
    \      }\n        \n        return null;", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \        return map.entrySet().stream().findFirst().get().getKey();", "      \
    \  Map<String, Integer> map = new HashMap<>();\n        for(String word : words)\
    \ {\n            int count = map.get(word);\n            if(count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for(Map.Entry<String, Integer> entry : set) {\n           \
    \ if(maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n         \
    \       maxEntry = entry;\n            }\n        }\n        \n        return\
    \ maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        if (keys.size()\
    \ > 1) {\n            String maxKey = keys.stream().max(Comparator.comparingInt(k\
    \ -> map.get(k)))\n                    .orElseThrow(IllegalArgumentException::new);\n\
    \            return maxKey;\n        } else {\n            return keys.get(0);\n\
    \        }", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = map.get(word);\n          \
    \  if (count == null) {\n                count = 1;\n            } else {\n  \
    \              count++;\n            }\n            map.put(word, count);\n  \
    \      }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        iterator.next();\n        String maxKey\
    \ = iterator.next();\n        int maxValue = map.get(maxKey);\n        for (String\
    \ key : keySet) {\n            if (map.get(key) > maxValue) {\n              \
    \  maxKey = key;\n                maxValue = map.get(key);\n            }\n  \
    \      }\n        return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Integer maxCount\
    \ = keySet.size();\n        String maxWord = null;\n        for (String word :\
    \ keySet) {\n            Integer count = map.get(word);\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keys = map.keySet();\n\
    \        Collections.sort(keys, new Comparator<String>() {\n            public\
    \ int compare(String o1, String o2) {\n                return map.get(o1).compareTo(map.get(o2));\n\
    \            }\n        });\n        return keys.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 1;\n            } else {\n                count++;\n       \
    \     }\n            map.put(word, count);\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n        return\
    \ maxEntry.getKey();", "        // Write your code here\n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        ", "      \
    \  Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<String> keys = map.keySet();\n      \
    \  if (keys.size() > 1) {\n            String maxKey = keys.stream().max(Comparator.comparingInt(k\
    \ -> map.get(k)))\n                    .orElseThrow(RuntimeException::new);\n\
    \            return maxKey;\n        } else {\n            return keys.get(0);\n\
    \        }", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = 0;\n            for (char c\
    \ : word.toCharArray()) {\n                if (map.containsKey(c)) {\n       \
    \             count = map.get(c) + 1;\n                } else {\n            \
    \        map.put(c, 1);\n                }\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Set<String> keySet = map.keySet();\n        Iterator<String> iterator\
    \ = keySet.iterator();\n        iterator.next();\n        iterator.next();\n \
    \       iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        iterator.next();\n\
    \        iterator.next();\n        iterator.next();\n        ", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<String> keys = map.keySet();\n\
    \        Collections.sort(keys, new Comparator<String>() {\n            public\
    \ int compare(String o1, String o2) {\n                return map.get(o1).compareTo(map.get(o2));\n\
    \            }\n        });\n        return keys.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n\
    \                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c);\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ map.put(word, count + 1);\n        }\n        Collections.sort(words, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                int\
    \ count1 = map.get(o1);\n                int count2 = map.get(o2);\n         \
    \       return count1 - count2;\n            }\n        });\n        return words.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<String> result = new ArrayList<>();\n\
    \        for (String word : map.keySet()) {\n            if (map.get(word) ==\
    \ map.size()) {\n                result.add(word);\n            }\n        }\n\
    \        if (result.size() > 1) {\n            return result.get(0);\n       \
    \ } else {\n            return result.get(0);\n        }", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    count = map.get(c);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            map.put(word, count + 1);\n        }\n      \
    \  Set<Map.Entry<String, Integer>> set = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = null;\n        for (Map.Entry<String, Integer> entry : set)\
    \ {\n            if (maxEntry == null || entry.getValue() > maxEntry.getValue())\
    \ {\n                maxEntry = entry;\n            }\n        }\n        return\
    \ maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        \n        Set<String> uniqueWords = new HashSet<>();\n      \
    \  for (String word : map.keySet()) {\n            uniqueWords.add(word);\n  \
    \      }\n        \n        Collections.sort(uniqueWords);\n        \n       \
    \ return uniqueWords.isEmpty() ? null : uniqueWords.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 0;\n            }\n            map.put(word, count + 1);\n \
    \       }\n        Integer maxCount = Collections.max(map.values());\n       \
    \ String maxWord = null;\n        for (String word : map.keySet()) {\n       \
    \     if (maxCount.equals(map.get(word))) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;", " \
    \       Map<String, Integer> count = new HashMap<>();\n        for(String word\
    \ : words) {\n            Integer count = count.get(word);\n            if(count\
    \ == null) {\n                count.put(word, 1);\n            } else {\n    \
    \            count.put(word, count + 1);\n            }\n        }\n        \n\
    \        Set<String> keys = count.keySet();\n        \n        Integer maxCount\
    \ = null;\n        String maxWord = null;\n        for(String key : keys) {\n\
    \            Integer count = count.getOrDefault(key, 0);\n            if(maxCount\
    \ == null || count > maxCount) {\n                maxCount = count;\n        \
    \        maxWord = key;\n            }\n        }\n        \n        return maxWord;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keys\
    \ = map.keySet();\n        Integer maxValue = Collections.max(map.values());\n\
    \        String maxKey = keys.stream().filter(x -> map.get(x) == maxValue).findFirst().get();\n\
    \        return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n  \
    \      Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>();\n        for (String word : map.keySet()) {\n  \
    \          if (map.get(word) == map.size()) {\n                result.add(word);\n\
    \            }\n        }\n        if (result.size() == 1) {\n            return\
    \ result.get(0);\n        }\n        Collections.sort(result);\n        return\
    \ result.get(0);", "        Map<String, Integer> map = new HashMap<>();\n    \
    \    for (String word : words) {\n            int count = map.get(word);\n   \
    \         if (count == null) {\n                map.put(word, 1);\n          \
    \  } else {\n                map.put(word, count + 1);\n            }\n      \
    \  }\n        Set<String> keySet = map.keySet();\n        Iterator<String> iterator\
    \ = keySet.iterator();\n        int maxCount = Integer.MIN_VALUE;\n        String\
    \ maxWord = null;\n        while (iterator.hasNext()) {\n            String word\
    \ = iterator.next();\n            int count = map.get(word);\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.iterator().next();",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            if(count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        \n     \
    \   Set<String> uniqueWords = new HashSet<>(words);\n        \n        for(String\
    \ word : uniqueWords) {\n            int count = map.get(word);\n            if(count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count--;\n            }\n            map.put(word, count);\n        }\n  \
    \      \n        Iterator<String> iterator = map.keySet().iterator();\n      \
    \  \n        while(iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if(value == 0) {\n       \
    \         return key;\n            }\n        }\n        \n        return null;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 0;\n            }\n            map.put(word, count\
    \ + 1);\n        }\n        \n        Collections.sort(words, (a, b) -> map.get(b).compareTo(map.get(a)));\n\
    \        return words.get(0);", "        Map<String, Integer> countMap = new HashMap<>();\n\
    \        for(String word : words) {\n            Integer count = countMap.get(word);\n\
    \            if(count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            countMap.put(word, count);\n\
    \        }\n        \n        Integer maxCount = countMap.values().stream().max(Integer::compare).get();\n\
    \        \n        for(String word : countMap.keySet()) {\n            if(countMap.get(word)\
    \ == maxCount) {\n                return word;\n            }\n        }\n   \
    \     \n        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keys = map.keySet();\n        Iterator<String>\
    \ iterator = keys.iterator();\n        String max = null;\n        int maxCount\
    \ = 0;\n        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int count = map.get(key);\n            if (count > maxCount) {\n\
    \                max = key;\n                maxCount = count;\n            }\n\
    \        }\n        return max;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        \n        Set<String> keySet = map.keySet();\n        \n \
    \       Integer maxCount = keySet.size();\n        \n        if (maxCount == 0)\
    \ {\n            return null;\n        }\n        \n        Iterator<String> iterator\
    \ = keySet.iterator();\n        \n        while (iterator.hasNext()) {\n     \
    \       String key = iterator.next();\n            \n            Integer count\
    \ = map.get(key);\n            \n            if (count > maxCount) {\n       \
    \         return key;\n            }\n        }\n        \n        return null;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collections.sort(words,\
    \ (a, b) -> map.get(b).compareTo(map.get(a)));\n        return words.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Collections.sort(words,\
    \ Comparator.comparing(s -> map.get(s)));\n        \n        return words.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<String>\
    \ keys = map.keySet();\n        Collections.sort(keys, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        return\
    \ keys.get(0);", "        Map<String, Integer> map = new HashMap<>();\n      \
    \  for (String word : words) {\n            int count = 0;\n            for (char\
    \ c : word.toCharArray()) {\n                map.putIfAbsent(String.valueOf(c),\
    \ 0);\n                map.put(String.valueOf(c), map.get(c) + 1);\n         \
    \   }\n        }\n        List<Map.Entry<String, Integer>> list = map.entrySet().stream()\n\
    \                .sorted(Map.Entry.comparingByValue().reversed())\n          \
    \      .collect(Collectors.toList());\n        return list.get(0).getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().findFirst().get().getKey();",
  "        Map<String, Integer> countMap = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = countMap.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            countMap.put(word, count);\n        }\n\
    \        Collection<String> sortedWords = countMap.entrySet().stream()\n     \
    \           .sorted(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .collect(Collectors.toList());\n        return sortedWords.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Integer maxCount\
    \ = Collections.max(map.values());\n        String maxWord = null;\n        for\
    \ (String word : map.keySet()) {\n            if (maxCount == map.get(word)) {\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        return Collections.max(map.entrySet(),\
    \ Map.Entry.comparingByValue()).getKey();", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        \n        Set<String> keys = map.keySet();\n   \
    \     \n        Integer maxCount = null;\n        String maxWord = null;\n   \
    \     for (String key : keys) {\n            Integer count = map.get(key);\n \
    \           if (maxCount == null || count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = key;\n            }\n        }\n       \
    \ \n        return maxWord;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<String> keys\
    \ = map.keySet();\n        Iterator<String> iterator = keys.iterator();\n    \
    \    while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            if (map.get(key) == map.size()) {\n                return key;\n\
    \            }\n        }\n        return null;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n  \
    \              } else {\n                    map.put(c, 1);\n                }\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> counts = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = counts.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            counts.put(word,\
    \ count + 1);\n        }\n        Integer max = Collections.max(counts.values());\n\
    \        for (String word : counts.keySet()) {\n            if (counts.get(word)\
    \ == max) {\n                return word;\n            }\n        }\n        return\
    \ null;", "        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            if(count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      \n        List<String> result = new ArrayList<>();\n        for(String\
    \ word : map.keySet()) {\n            if(map.get(word) == map.get(word).max())\
    \ {\n                result.add(word);\n            }\n        }\n        \n \
    \       if(result.size() == 1) {\n            return result.get(0);\n        }\n\
    \        \n        Collections.sort(result);\n        return result.get(0);",
  "        Map<String, Integer> count = new HashMap<>();\n        for (String word\
    \ : words) {\n            Integer count = count.get(word);\n            if (count\
    \ == null) {\n                count.put(word, 1);\n            } else {\n    \
    \            count.put(word, count + 1);\n            }\n        }\n        Integer\
    \ maxCount = Collections.max(count.values());\n        String maxWord = null;\n\
    \        for (String word : count.keySet()) {\n            if (count.get(word)\
    \ == maxCount) {\n                maxWord = word;\n                break;\n  \
    \          }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> counts = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = counts.getOrDefault(word,\
    \ 0);\n            counts.put(word, count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        for (String word : counts.keySet())\
    \ {\n            if (counts.get(word) == maxCount) {\n                return word;\n\
    \            }\n        }\n        return null;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        if (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > 1) {\n                return key;\n            }\n  \
    \      }\n        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count == null ? 1 : count + 1);\n        }\n      \
    \  Set<String> keySet = map.keySet();\n        int maxCount = keySet.size();\n\
    \        String maxWord = null;\n        for(String word : keySet) {\n       \
    \     int count = map.get(word);\n            if(count > maxCount) {\n       \
    \         maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            map.put(word, count + 1);\n        }\n        Collections.sort(words,\
    \ Comparator.comparing(s -> map.get(s)));\n        return words.get(0);", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collections.sort(words,\
    \ Comparator.comparing(s -> map.get(s)));\n        return words.get(0);", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            Integer count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        Iterator<String> iterator = keys.iterator();\n\
    \        String max = null;\n        while (iterator.hasNext()) {\n          \
    \  String key = iterator.next();\n            Integer count = map.get(key);\n\
    \            if (count > map.get(max)) {\n                max = key;\n       \
    \     }\n        }\n        return max;", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for(String word : words) {\n            int count\
    \ = map.get(word);\n            map.put(word, count == null ? 1 : count + 1);\n\
    \        }\n        \n        Set<String> keySet = map.keySet();\n        \n \
    \       Integer maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \        \n        if(maxCount != null) {\n            String maxWord = map.get(maxCount);\n\
    \            \n            for(String word : words) {\n                if(word.equals(maxWord))\
    \ {\n                    return word;\n                }\n            }\n    \
    \    }\n        \n        return null;", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = 0;\n\
    \            for (char c : word.toCharArray()) {\n                map.putIfAbsent(Character.toString(c),\
    \ 0);\n                map.putIfAbsent(Character.toString(c), map.get(c) + 1);\n\
    \            }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Collections.sort(words, Comparator.comparing(s\
    \ -> map.get(s)));\n        return words.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Collections.sort(keySet);\n\
    \        Integer maxCount = keySet.get(0);\n        for (String key : keySet)\
    \ {\n            if (maxCount.intValue() < map.get(key).intValue()) {\n      \
    \          maxCount = map.get(key);\n            }\n        }\n        return\
    \ maxCount.intValue() == 1 ? maxCount.intValue() : maxCount.intValue() + \" characters\"\
    ;", "        Map<String, Integer> map = new HashMap<>();\n        for(String word\
    \ : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keySet = map.keySet();\n\
    \        \n        Iterator<String> iterator = keySet.iterator();\n        \n\
    \        while(iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            \n            if(value ==\
    \ map.size()) {\n                return key;\n            }\n        }\n     \
    \   \n        return null;", "        Map<String, Integer> counts = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = counts.get(word);\n\
    \            if (count == null) {\n                counts.put(word, 1);\n    \
    \        } else {\n                counts.put(word, count + 1);\n            }\n\
    \        }\n        Integer maxCount = Collections.max(counts.values());\n   \
    \     String maxWord = null;\n        for (String word : counts.keySet()) {\n\
    \            if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        String max = null;\n        int maxCount = -1;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                max = key;\n           \
    \     maxCount = count;\n            }\n        }\n        return max;", "   \
    \     Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 0;\n            }\n            map.put(word, count\
    \ + 1);\n        }\n        Collection<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return keys.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        if (keys.size()\
    \ == 1) {\n            return keys.get(0);\n        }\n        Integer maxCount\
    \ = Collections.max(map.values());\n        Set<String> maxKeys = new HashSet<>();\n\
    \        for (String key : keys) {\n            if (map.get(key) == maxCount)\
    \ {\n                maxKeys.add(key);\n            }\n        }\n        if (maxKeys.size()\
    \ == 1) {\n            return maxKeys.iterator().next();\n        }\n        Collections.sort(maxKeys);\n\
    \        return maxKeys.iterator().next();", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 0;\n            }\n            map.put(word, count + 1);\n        }\n      \
    \  Set<String> keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        iterator.next();\n        String maxKey = iterator.next();\n        int\
    \ maxCount = map.get(maxKey);\n        for (String key : keySet) {\n         \
    \   if (map.get(key) > maxCount) {\n                maxKey = key;\n          \
    \      maxCount = map.get(key);\n            }\n        }\n        return maxKey;",
  "        // Write your code here\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = 0;\n            for(char\
    \ c : word.toCharArray()) {\n                if(!map.containsKey(c)) {\n     \
    \               map.put(c, 1);\n                } else {\n                   \
    \ map.put(c, map.get(c) + 1);\n                }\n            }\n        }\n \
    \       \n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for(Map.Entry<String,\
    \ Integer> entry : entrySet) {\n            if(maxEntry == null || maxEntry.getValue()\
    \ < entry.getValue()) {\n                maxEntry = entry;\n            }\n  \
    \      }\n        \n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        if (keys.size()\
    \ == 1) {\n            return keys.get(0);\n        }\n        Set<String> maxKeys\
    \ = new TreeSet<>();\n        for (String key : keys) {\n            Integer count\
    \ = map.get(key);\n            if (count > maxKeys.size()) {\n               \
    \ maxKeys.clear();\n                maxKeys.add(key);\n            } else if (count\
    \ == maxKeys.size()) {\n                maxKeys.add(key);\n            }\n   \
    \     }\n        return maxKeys.iterator().next();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Integer maxCount = Collections.max(map.values());\n        String\
    \ maxWord = null;\n        for (String word : map.keySet()) {\n            if\
    \ (map.get(word) == maxCount) {\n                maxWord = word;\n           \
    \     break;\n            }\n        }\n        return maxWord;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            map.put(word, count);\n        }\n   \
    \     Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        if (iterator.hasNext()) {\n            String maxKey = iterator.next();\n\
    \            int maxValue = map.get(maxKey);\n            for (String key : keySet)\
    \ {\n                if (map.get(key) > maxValue) {\n                    maxKey\
    \ = key;\n                    maxValue = map.get(key);\n                }\n  \
    \          }\n            return maxKey;\n        } else {\n            return\
    \ null;\n        }", "        Map<String, Integer> map = new HashMap<>();\n  \
    \      for (String word : words) {\n            Integer count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys);\n\
    \        return keys.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        \n        Set<String> keys = map.keySet();\n        \n      \
    \  Collections.sort(keys, new Comparator<String>() {\n            public int compare(String\
    \ o1, String o2) {\n                return map.get(o1).compareTo(map.get(o2));\n\
    \            }\n        });\n        \n        return keys.get(0);", "       \
    \ // Write your code here\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c);\n                }\n            \
    \    map.put(c, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = set.stream().max(Comparator.comparing(Map.Entry::getValue)).get();\n     \
    \   return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Collections.sort(words, (a, b) -> map.get(b).compareTo(map.get(a)));\n\
    \        return words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count == null ? 1 : count + 1);\n        }\n      \
    \  Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n        return\
    \ words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n     \
    \   for (String word : words) {\n            int count = map.get(word);\n    \
    \        map.put(word, count == null ? 1 : count + 1);\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Collections.sort(keys);\n        return keys.get(0);", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n\
    \        \n        Integer maxValue = Collections.max(map.values());\n       \
    \ \n        for (String key : keys) {\n            if (map.get(key) == maxValue)\
    \ {\n                return key;\n            }\n        }\n        \n       \
    \ return null;", "        Map<String, Integer> map = new HashMap<>();\n      \
    \  for (String word : words) {\n            Integer count = map.get(word);\n \
    \           if (count == null) {\n                map.put(word, 1);\n        \
    \    } else {\n                map.put(word, count + 1);\n            }\n    \
    \    }\n        Set<String> keySet = map.keySet();\n        Integer maxCount =\
    \ keySet.size();\n        if (maxCount == 1) {\n            return keySet.iterator().next();\n\
    \        }\n        List<String> result = new ArrayList<>();\n        for (String\
    \ word : keySet) {\n            Integer count = map.get(word);\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                result\
    \ = new ArrayList<>(Arrays.asList(word));\n            }\n        }\n        if\
    \ (result.isEmpty()) {\n            return null;\n        }\n        Collections.sort(result);\n\
    \        return result.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keys = map.keySet();\n        Optional<String> maxKey\
    \ = keys.stream().max(Comparator.comparingInt(k -> map.get(k)));\n        return\
    \ maxKey.orElse(null);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        if (iterator.hasNext()) {\n         \
    \   String maxKey = iterator.next();\n            int maxValue = map.get(maxKey);\n\
    \            for (String key : keySet) {\n                if (map.get(key) > maxValue)\
    \ {\n                    maxKey = key;\n                    maxValue = map.get(key);\n\
    \                }\n            }\n            return maxKey;\n        } else\
    \ {\n            return null;\n        }", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for(String word : words) {\n            int count\
    \ = 0;\n            for(char c : word.toCharArray()) {\n                if(map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n            }\n      \
    \  }\n        \n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n     \
    \   Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Collection<String> maxWords = map.entrySet().stream()\n     \
    \           .sorted(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .collect(Collectors.toList());\n        if (maxWords.size() ==\
    \ 1) {\n            return maxWords.get(0);\n        }\n        return maxWords.get(0);",
  "        // Write your code here\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                }\n        \
    \        map.put(c, count);\n            }\n        }\n        Integer maxValue\
    \ = Collections.max(map.values());\n        String maxKey = null;\n        for\
    \ (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue().equals(maxValue))\
    \ {\n                maxKey = entry.getKey();\n            }\n        }\n    \
    \    return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n \
    \       for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n\
    \        return words.get(0);"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
