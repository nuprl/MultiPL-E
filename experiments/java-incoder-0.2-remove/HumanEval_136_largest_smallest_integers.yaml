name: HumanEval_136_largest_smallest_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that returns a tuple (a, b), where 'a'\
  \ is\n    // the largest of negative integers, and 'b' is the smallest\n    // of\
  \ positive integers in a list.\n    // If there is no negative or positive integers,\
  \ return them as None.\n    // Examples:\n    public static Pair<Optional<Long>,\
  \ Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Pair.with(-2l,\
  \ 1l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Pair.with(-7l,\
  \ 2l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Pair.with(-9l,\
  \ 2l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Pair.with(-3l, 1l)));\n \
  \   assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Pair.with(-3l,\
  \ 1l)));\n    }\n\n}\n"
completions: ["        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> a = Optional.empty();\n \
    \       Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n \
    \           if (i.signum() < 0) {\n                a = Optional.of(i);\n     \
    \       } else if (i.signum() > 0) {\n                b = Optional.of(i);\n  \
    \          }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0)\n                smallest =\
    \ Optional.of(i);\n        }\n        return largest.map(Pair::of).orElseGet(Pair::of).map(Pair::of);",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        } else if (maxNegative.isPresent())\
    \ {\n            return Pair.of(Optional.of(maxNegative.get()), Optional.empty());\n\
    \        } else if (minPositive.isPresent()) {\n            return Pair.of(Optional.empty(),\
    \ minPositive);\n        } else {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        }", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (i.signum() < 0) {\n                if (min == null || i.compareTo(min)\
    \ < 0) {\n                    min = Optional.of(i);\n                }\n     \
    \       } else {\n                if (max == null || i.compareTo(max) > 0) {\n\
    \                    max = Optional.of(i);\n                }\n            }\n\
    \        }\n        return Pair.of(min, max);", "        Optional<Long> max =\
    \ null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n  \
    \          if (i.signum() < 0) {\n                if (max == null) {\n       \
    \             max = Optional.of(i);\n                } else {\n              \
    \      max = Optional.of(Math.max(max, i));\n                }\n            }\
    \ else {\n                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        if (max == null &&\
    \ min == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(Optional.of(Long.MAX_VALUE),\
    \ min);\n        } else if (min == null) {\n            return Pair.of(max, Optional.of(Long.MIN_VALUE));\n\
    \        } else {\n            return Pair.of(max, min);\n        }", "      \
    \  Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n     \
    \   Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n   \
    \     if (maxNegative.isPresent() && minPositive.isPresent()) {\n            return\
    \ new Pair<>(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (i < 0) {\n      \
    \          if (max == null) {\n                    max = Optional.of(i);\n   \
    \             } else {\n                    max = Optional.of(Math.max(max, i));\n\
    \                }\n            } else if (i > 0) {\n                if (min ==\
    \ null) {\n                    min = Optional.of(i);\n                } else {\n\
    \                    min = Optional.of(Math.min(min, i));\n                }\n\
    \            }\n        }\n        if (min == null && max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        } else if (min\
    \ == null) {\n            return Pair.of(max, Optional.empty());\n        } else\
    \ if (max == null) {\n            return Pair.of(Optional.empty(), min);\n   \
    \     } else {\n            return Pair.of(min, max);\n        }", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (i < 0) {\n      \
    \          if (max == null) {\n                    max = Optional.of(i);\n   \
    \             } else {\n                    max = Optional.of(Math.max(max, i));\n\
    \                }\n            } else {\n                if (min == null) {\n\
    \                    min = Optional.of(i);\n                } else {\n       \
    \             min = Optional.of(Math.min(min, i));\n                }\n      \
    \      }\n        }\n        return Pair.of(max, min);", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min, max);",
  "        Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (long i : lst) {\n            if (i < 0) {\n                if (max ==\
    \ null) {\n                    max = Optional.of(i);\n                } else {\n\
    \                    max = Optional.of(Math.max(max, i));\n                }\n\
    \            } else if (i > 0) {\n                if (min == null) {\n       \
    \             min = Optional.of(i);\n                } else {\n              \
    \      min = Optional.of(Math.min(min, i));\n                }\n            }\n\
    \        }\n        return Pair.of(max, min);", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (Long i : lst)\
    \ {\n            if (i < 0) {\n                if (max == null) {\n          \
    \          max = Optional.of(i);\n                } else {\n                 \
    \   max = Optional.of(Math.max(max, i));\n                }\n            } else\
    \ if (i > 0) {\n                if (min == null) {\n                    min =\
    \ Optional.of(i);\n                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        if (max == null &&\
    \ min == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        } else if (min == null) {\n            return Pair.of(Optional.empty(),\
    \ max);\n        } else {\n            return Pair.of(max, min);\n        }",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(x\
    \ -> x >= 0).findFirst();\n        return maxNegative.map(x -> Pair.of(x, minPositive.orElse(Long.MAX_VALUE))).orElseGet(()\
    \ -> minPositive.map(x -> Pair.of(Long.MAX_VALUE, x)));", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (Long i : lst)\
    \ {\n            if (i.signum() < 0) {\n                if (max == null) {\n \
    \                   max = Optional.of(i);\n                } else {\n        \
    \            max = Optional.of(Math.max(max, i));\n                }\n       \
    \     } else {\n                if (min == null) {\n                    min =\
    \ Optional.of(i);\n                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        if (max == null &&\
    \ min == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(Optional.of(Long.MAX_VALUE),\
    \ min);\n        } else if (min == null) {\n            return Pair.of(max, Optional.of(Long.MIN_VALUE));\n\
    \        } else {\n            return Pair.of(max, min);\n        }", "      \
    \  Optional<Long> maxOpt = Optional.empty();\n        Optional<Long> minOpt =\
    \ Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                if (maxOpt.isPresent()) {\n                    maxOpt = Optional.of(Math.max(maxOpt.get(),\
    \ i));\n                } else {\n                    maxOpt = Optional.of(i);\n\
    \                }\n            } else if (i > 0) {\n                if (minOpt.isPresent())\
    \ {\n                    minOpt = Optional.of(Math.min(minOpt.get(), i));\n  \
    \              } else {\n                    minOpt = Optional.of(i);\n      \
    \          }\n            }\n        }\n        return Pair.of(maxOpt, minOpt);",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(maxNegative, minPositive);\n        }\n      \
    \  return Pair.of(Optional.empty(), Optional.empty());", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null) {\n                    min = Optional.of(i);\n               \
    \ } else {\n                    min = Optional.of(Math.min(i.longValue(), min.longValue()));\n\
    \                }\n            } else {\n                if (max == null) {\n\
    \                    max = Optional.of(i);\n                } else {\n       \
    \             max = Optional.of(Math.max(i.longValue(), max.longValue()));\n \
    \               }\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (i.signum() < 0) {\n\
    \                max = Optional.of(i);\n            } else if (i.signum() > 0)\
    \ {\n                min = Optional.of(i);\n            }\n        }\n       \
    \ if (max.isPresent() && min.isPresent()) {\n            return Pair.of(max, min);\n\
    \        } else {\n            return Pair.of(max, min);\n        }", "      \
    \  Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return null;",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (i.signum() < 0) {\n\
    \                if (max == null) {\n                    max = Optional.of(i);\n\
    \                } else {\n                    max = Optional.of(Math.max(max,\
    \ i));\n                }\n            } else {\n                if (min == null)\
    \ {\n                    min = Optional.of(i);\n                } else {\n   \
    \                 min = Optional.of(Math.min(min, i));\n                }\n  \
    \          }\n        }\n        if (max == null && min == null) {\n         \
    \   return Pair.of(Optional.empty(), Optional.empty());\n        } else if (max\
    \ == null) {\n            return Pair.of(Optional.of(Long.MAX_VALUE), min);\n\
    \        } else if (min == null) {\n            return Pair.of(max, Optional.of(Long.MIN_VALUE));\n\
    \        } else {\n            return Pair.of(max, min);\n        }", "      \
    \  Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n   \
    \     Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return largest.map(x -> new Pair<>(x, smallest)).orElse(null);", "  \
    \      Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> min = null;\n        Optional<Long> max = null;\n\
    \        for (Long i : lst) {\n            if (min == null || i < min) {\n   \
    \             min = Optional.of(i);\n            }\n            if (max == null\
    \ || i > max) {\n                max = Optional.of(i);\n            }\n      \
    \  }\n        return Pair.of(min, max);", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).min();\n        return maxNegative.map(Pair::of).orElse(minPositive.map(Pair::of));",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null || i.compareTo(min) < 0) {\n                    min = Optional.of(i);\n\
    \                }\n            } else {\n                if (max == null || i.compareTo(max)\
    \ > 0) {\n                    max = Optional.of(i);\n                }\n     \
    \       }\n        }\n        if (min == null && max == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        } else if (min == null)\
    \ {\n            return Pair.of(max, Optional.empty());\n        } else if (max\
    \ == null) {\n            return Pair.of(Optional.empty(), max);\n        } else\
    \ {\n            return Pair.of(min, max);\n        }", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> max = null;\n        Optional<Long> min = null;\n\
    \        for (long i : lst) {\n            if (i < 0) {\n                if (max\
    \ == null) {\n                    max = Optional.of(i);\n                } else\
    \ {\n                    max = Optional.of(Math.max(max, i));\n              \
    \  }\n            } else if (i > 0) {\n                if (min == null) {\n  \
    \                  min = Optional.of(i);\n                } else {\n         \
    \           min = Optional.of(Math.min(min, i));\n                }\n        \
    \    }\n        }\n        if (max == null && min == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        } else if (max == null)\
    \ {\n            return Pair.of(min, Optional.empty());\n        } else if (min\
    \ == null) {\n            return Pair.of(Optional.empty(), max);\n        } else\
    \ {\n            return Pair.of(max, min);\n        }", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        if (min == null && max\
    \ == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }\n        if (min == null) {\n            return Pair.of(Optional.of(Long.MIN_VALUE),\
    \ max);\n        }\n        if (max == null) {\n            return Pair.of(min,\
    \ Optional.of(Long.MAX_VALUE));\n        }\n        return Pair.of(min, max);",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return null;",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return maxNegative.map(Pair::of).orElseGet(() -> minPositive.map(Pair::of));",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null || i < min) {\n                    min = Optional.of(i);\n    \
    \            }\n            } else {\n                if (max == null || i > max)\
    \ {\n                    max = Optional.of(i);\n                }\n          \
    \  }\n        }\n        if (min == null && max == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        } else if (min == null)\
    \ {\n            return Pair.of(max, Optional.empty());\n        } else if (max\
    \ == null) {\n            return Pair.of(min, Optional.empty());\n        } else\
    \ {\n            return Pair.of(min, max);\n        }", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return maxNegative.map(Pair::of).orElse(minPositive.map(Pair::of));",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return maxNegative.map(Optional::of).orElse(minPositive.map(Optional::of));",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(x -> x >= 0).min();\n\
    \        return maxNegative.map(x -> new Pair<>(x, minPositive.orElse(Long.MAX_VALUE))).orElseGet(()\
    \ -> new Pair<>(null, null));", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(maxNegative, minPositive);\n        }\n      \
    \  return Pair.of(Optional.empty(), Optional.empty());", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).min();\n        return Pair.of(maxNegative,\
    \ minPositive);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> largest = Optional.empty();\n\
    \        Optional<Long> smallest = Optional.empty();\n        for (Long i : lst)\
    \ {\n            if (i < 0) {\n                largest = Optional.of(i);\n   \
    \         } else if (i > 0) {\n                smallest = Optional.of(i);\n  \
    \          }\n        }\n        return Pair.of(largest, smallest);", "      \
    \  Optional<Long> max = null;\n        Optional<Long> min = null;\n        for\
    \ (long i : lst) {\n            if (i < 0) {\n                if (max == null)\
    \ {\n                    max = Optional.of(i);\n                } else {\n   \
    \                 max = Optional.of(Math.max(max, i));\n                }\n  \
    \          } else if (i > 0) {\n                if (min == null) {\n         \
    \           min = Optional.of(i);\n                } else {\n                \
    \    min = Optional.of(Math.min(min, i));\n                }\n            }\n\
    \        }\n        return Pair.of(max, min);", "        Optional<Long> largest\
    \ = lst.stream().max(Comparator.naturalOrder());\n        Optional<Long> smallest\
    \ = lst.stream().min(Comparator.naturalOrder());\n        return largest.map(x\
    \ -> new Pair<>(x, smallest)).orElseGet(()->new Pair<>(null,null));", "      \
    \  Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> min = null;\n        Optional<Long> max = null;\n\
    \        for (Long i : lst) {\n            if (min == null || i < min) {\n   \
    \             min = Optional.of(i);\n            }\n            if (max == null\
    \ || i > max) {\n                max = Optional.of(i);\n            }\n      \
    \  }\n        return Pair.of(min.orElse(null), max.orElse(null));", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return Pair.of(maxNegative, minPositive);", "        Optional<Long> min\
    \ = null;\n        Optional<Long> max = null;\n        for (Long i : lst) {\n\
    \            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));", "        Optional<Long> a = Optional.empty();\n       \
    \ Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ } else if (i.signum() > 0) {\n                b = Optional.of(i);\n        \
    \    }\n        }\n        return Pair.of(a, b);", "        Optional<Long> max\
    \ = null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                if (max == null) {\n     \
    \               max = Optional.of(i);\n                } else {\n            \
    \        max = Optional.of(Math.max(max, i));\n                }\n           \
    \ } else {\n                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        if (min == null &&\
    \ max == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (min == null) {\n            return Pair.of(max, Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(Optional.empty(),\
    \ min);\n        } else {\n            return Pair.of(min, max);\n        }",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> max = null;\n        Optional<Long> min = null;\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                if (max\
    \ == null) {\n                    max = Optional.of(i);\n                } else\
    \ {\n                    max = Optional.of(Math.max(max, i));\n              \
    \  }\n            } else if (i > 0) {\n                if (min == null) {\n  \
    \                  min = Optional.of(i);\n                } else {\n         \
    \           min = Optional.of(Math.min(min, i));\n                }\n        \
    \    }\n        }\n        if (max == null && min == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        } else if (max == null)\
    \ {\n            return Pair.of(Optional.of(Long.MAX_VALUE), min);\n        }\
    \ else if (min == null) {\n            return Pair.of(max, Optional.of(Long.MIN_VALUE));\n\
    \        } else {\n            return Pair.of(max, min);\n        }", "      \
    \  Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n   \
    \     Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return Pair.of(largest, smallest);", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (i.signum() < 0) {\n                if (min == null) {\n \
    \                   min = Optional.of(i);\n                } else {\n        \
    \            min = Optional.min(min, Optional.of(i));\n                }\n   \
    \         } else {\n                if (max == null) {\n                    max\
    \ = Optional.of(i);\n                } else {\n                    max = Optional.max(max,\
    \ Optional.of(i));\n                }\n            }\n        }\n        if (min\
    \ == null && max == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (min == null) {\n            return Pair.of(max, Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        } else {\n            return Pair.of(min, max);\n        }", "      \
    \  Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n   \
    \     Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (largest.isPresent() && smallest.isPresent()) {\n            return\
    \ Pair.of(largest, smallest);\n        } else {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        }", "        Optional<Long> max = null;\n      \
    \  Optional<Long> min = null;\n        for (Long i : lst) {\n            if (i\
    \ < 0) {\n                if (max == null) {\n                    max = Optional.of(i);\n\
    \                } else {\n                    max = Optional.of(Math.max(max,\
    \ i));\n                }\n            } else if (i > 0) {\n                if\
    \ (min == null) {\n                    min = Optional.of(i);\n               \
    \ } else {\n                    min = Optional.of(Math.min(min, i));\n       \
    \         }\n            }\n        }\n        if (max == null && min == null)\
    \ {\n            return Pair.of(Optional.empty(), Optional.empty());\n       \
    \ } else if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        } else if (min == null) {\n            return Pair.of(Optional.empty(),\
    \ max);\n        } else {\n            return Pair.of(max, min);\n        }",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = i;\n            }\n            if (max == null\
    \ || i > max) {\n                max = i;\n            }\n        }\n        if\
    \ (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        }\n        if (min == null) {\n            return\
    \ Pair.of(Optional.of(max), Optional.empty());\n        }\n        if (max ==\
    \ null) {\n            return Pair.of(Optional.empty(), Optional.of(min));\n \
    \       }\n        return Pair.of(Optional.of(max), Optional.of(min));", "   \
    \     Optional<Long> min = null;\n        Optional<Long> max = null;\n       \
    \ for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null || i < min) {\n                    min = Optional.of(i);\n    \
    \            }\n            } else {\n                if (max == null || i > max)\
    \ {\n                    max = Optional.of(i);\n                }\n          \
    \  }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> min = null;\n        Optional<Long> max = null;\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     if (min == null || i.compareTo(min) < 0) {\n                    min = Optional.of(i);\n\
    \                }\n            } else {\n                if (max == null || i.compareTo(max)\
    \ > 0) {\n                    max = Optional.of(i);\n                }\n     \
    \       }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return null;",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null || i.compareTo(min) < 0) {\n                    min = Optional.of(i);\n\
    \                }\n            } else {\n                if (max == null || i.compareTo(max)\
    \ > 0) {\n                    max = Optional.of(i);\n                }\n     \
    \       }\n        }\n        if (min == null && max == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        } else if (min == null)\
    \ {\n            return Pair.of(max, Optional.empty());\n        } else if (max\
    \ == null) {\n            return Pair.of(min, Optional.empty());\n        } else\
    \ {\n            return Pair.of(min, max);\n        }", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));", "        Optional<Long> a = Optional.empty();\n       \
    \ Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ } else if (i.signum() > 0) {\n                b = Optional.of(i);\n        \
    \    }\n        }\n        return Pair.of(a, b);", "        Optional<Long> max\
    \ = null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                if (max == null) {\n     \
    \               max = Optional.of(i);\n                } else {\n            \
    \        max = Optional.of(Math.max(max, i));\n                }\n           \
    \ } else {\n                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        if (max == null &&\
    \ min == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(max, min);\n  \
    \      } else if (min == null) {\n            return Pair.of(max, Optional.empty());\n\
    \        } else {\n            return Pair.of(max, min);\n        }", "      \
    \  Optional<Long> max = null;\n        Optional<Long> min = null;\n        for\
    \ (Long i : lst) {\n            if (i.signum() < 0) {\n                if (max\
    \ == null) {\n                    max = Optional.of(i);\n                } else\
    \ {\n                    max = Optional.of(Math.max(max, i));\n              \
    \  }\n            } else {\n                if (min == null) {\n             \
    \       min = Optional.of(i);\n                } else {\n                    min\
    \ = Optional.of(Math.min(min, i));\n                }\n            }\n       \
    \ }\n        return Pair.of(max, min);", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return Pair.of(maxNegative, minPositive);", "        Optional<Long> min\
    \ = null;\n        Optional<Long> max = null;\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                if (min == null) {\n     \
    \               min = Optional.of(i);\n                } else {\n            \
    \        min = Optional.min(min, Optional.of(i));\n                }\n       \
    \     } else {\n                if (max == null) {\n                    max =\
    \ Optional.of(i);\n                } else {\n                    max = Optional.max(max,\
    \ Optional.of(i));\n                }\n            }\n        }\n        if (min\
    \ == null && max == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (min == null) {\n            return Pair.of(Optional.empty(),\
    \ max);\n        } else if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        } else {\n            return Pair.of(min, max);\n        }", "      \
    \  Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> a = Optional.empty();\n       \
    \ Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ } else if (i.signum() > 0) {\n                b = Optional.of(i);\n        \
    \    }\n        }\n        return Pair.of(a, b);", "        Optional<Long> a =\
    \ Optional.empty();\n        Optional<Long> b = Optional.empty();\n        for\
    \ (Long i : lst) {\n            if (i.signum() < 0) {\n                a = Optional.of(i);\n\
    \            } else if (i.signum() > 0) {\n                b = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (i.signum() < 0) {\n\
    \                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            } else {\n                if (max == null)\
    \ {\n                    max = Optional.of(i);\n                } else {\n   \
    \                 max = Optional.of(Math.max(max, i));\n                }\n  \
    \          }\n        }\n        if (min == null && max == null) {\n         \
    \   return Pair.of(Optional.empty(), Optional.empty());\n        } else if (min\
    \ == null) {\n            return Pair.of(max, Optional.empty());\n        } else\
    \ if (max == null) {\n            return Pair.of(Optional.empty(), min);\n   \
    \     } else {\n            return Pair.of(min, max);\n        }", "        Optional<Long>\
    \ largest = lst.stream().max(Long::compareTo);\n        Optional<Long> smallest\
    \ = lst.stream().min(Long::compareTo);\n        return largest.map(Optional::of).orElse(smallest.map(Optional::of));",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> min = null;\n        Optional<Long> max = null;\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     if (min == null || i.compareTo(min) < 0) {\n                    min = Optional.of(i);\n\
    \                }\n            } else {\n                if (max == null || i.compareTo(max)\
    \ > 0) {\n                    max = Optional.of(i);\n                }\n     \
    \       }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> a = Optional.empty();\n       \
    \ Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ } else if (i.signum() > 0) {\n                b = Optional.of(i);\n        \
    \    }\n        }\n        return Pair.of(a, b);", "        Optional<Long> max\
    \ = null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n\
    \            if (i < 0) {\n                if (max == null) {\n              \
    \      max = Optional.of(i);\n                } else {\n                    max\
    \ = Optional.of(Math.max(max, i));\n                }\n            } else if (i\
    \ > 0) {\n                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        return Pair.of(max,\
    \ min);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(maxNegative, minPositive);\n        }\n      \
    \  return Pair.of(Optional.empty(), Optional.empty());", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).min();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return new Pair<>(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());", "  \
    \      Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.compareTo(min) < 0) {\n           \
    \     min = Optional.of(i);\n            }\n            if (i.compareTo(max) >\
    \ 0) {\n                max = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(min, max);", "        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).max();\n        Optional<Long> minPositive = lst.stream().filter(x\
    \ -> x > 0).min();\n        return Pair.of(maxNegative, minPositive);", "    \
    \    Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).max();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).min();\n        return Pair.of(maxNegative, minPositive);", "   \
    \     Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return null;",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null || i < min) {\n                    min = Optional.of(i);\n    \
    \            }\n            } else {\n                if (max == null || i > max)\
    \ {\n                    max = Optional.of(i);\n                }\n          \
    \  }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(x -> x > 0).min();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> maxOpt = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> minOpt = lst.stream().min(Comparator.naturalOrder());\n\
    \        return Pair.of(maxOpt, minOpt);", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).max();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).min();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        } else {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }", "        Optional<Long> max = null;\n        Optional<Long> min =\
    \ null;\n        for (long i : lst) {\n            if (i < 0) {\n            \
    \    if (max != null) {\n                    max = Optional.of(Math.max(max, i));\n\
    \                }\n            } else {\n                if (min != null) {\n\
    \                    min = Optional.of(Math.min(min, i));\n                }\n\
    \            }\n        }\n        if (min == null && max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        } else if (min\
    \ == null) {\n            return Pair.of(max, Optional.empty());\n        } else\
    \ if (max == null) {\n            return Pair.of(Optional.empty(), min);\n   \
    \     } else {\n            return Pair.of(min, max);\n        }", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (Long i : lst) {\n            if (i < 0) {\n                if (max ==\
    \ null) {\n                    max = Optional.of(i);\n                } else {\n\
    \                    max = Optional.of(Math.max(max, i));\n                }\n\
    \            } else if (i > 0) {\n                if (min == null) {\n       \
    \             min = Optional.of(i);\n                } else {\n              \
    \      min = Optional.of(Math.min(min, i));\n                }\n            }\n\
    \        }\n        return Pair.of(max, min);", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).max();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).min();\n        return maxNegative.map(Pair::of).orElse(minPositive.map(Pair::of));",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return Pair.of(largest, smallest);", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).findFirst();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).findFirst();\n        return maxNegative.map(Pair::of).orElseGet(()\
    \ -> minPositive.map(Pair::of));", "        Optional<Long> max = null;\n     \
    \   Optional<Long> min = null;\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                if (max == null) {\n                    max = Optional.of(i);\n\
    \                } else {\n                    max = Optional.of(Math.max(max,\
    \ i));\n                }\n            } else if (i.signum() > 0) {\n        \
    \        if (min == null) {\n                    min = Optional.of(i);\n     \
    \           } else {\n                    min = Optional.of(Math.min(min, i));\n\
    \                }\n            }\n        }\n        if (max == null && min ==\
    \ null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n \
    \       } else if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        } else if (min == null) {\n            return Pair.of(Optional.empty(),\
    \ max);\n        } else {\n            return Pair.of(max, min);\n        }",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null) {\n                    min = Optional.of(i);\n               \
    \ } else {\n                    min = Optional.of(Math.min(min, i));\n       \
    \         }\n            } else {\n                if (max == null) {\n      \
    \              max = Optional.of(i);\n                } else {\n             \
    \       max = Optional.of(Math.max(max, i));\n                }\n            }\n\
    \        }\n        if (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        } else if (min == null) {\n            return Pair.of(max,\
    \ Optional.empty());\n        } else if (max == null) {\n            return Pair.of(min,\
    \ Optional.empty());\n        } else {\n            return Pair.of(min, max);\n\
    \        }", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return new Pair<>(maxNegative, minPositive);\n        }\n   \
    \     return Pair.of(Optional.empty(), Optional.empty());", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).min();\n        return maxNegative.map(Pair::of).orElse(minPositive.map(Pair::of));",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return null;",
  "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return Pair.of(largest, smallest);", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).max();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).min();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());", "  \
    \      Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> max = null;\n        Optional<Long> min = null;\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     if (max == null) {\n                    max = Optional.of(i);\n        \
    \        } else {\n                    max = Optional.of(Math.max(max, i));\n\
    \                }\n            } else {\n                if (min == null) {\n\
    \                    min = Optional.of(i);\n                } else {\n       \
    \             min = Optional.of(Math.min(min, i));\n                }\n      \
    \      }\n        }\n        if (max == null && min == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        } else if (max == null)\
    \ {\n            return Pair.of(min, Optional.empty());\n        } else if (min\
    \ == null) {\n            return Pair.of(Optional.empty(), max);\n        } else\
    \ {\n            return Pair.of(max, min);\n        }", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (Long i : lst)\
    \ {\n            if (i.signum() < 0) {\n                if (max == null) {\n \
    \                   max = Optional.of(i);\n                } else {\n        \
    \            max = Optional.of(Math.max(max, i));\n                }\n       \
    \     } else {\n                if (min == null) {\n                    min =\
    \ Optional.of(i);\n                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        if (max == null)\
    \ {\n            return Pair.of(Optional.empty(), Optional.empty());\n       \
    \ } else if (min == null) {\n            return Pair.of(max, Optional.empty());\n\
    \        } else {\n            return Pair.of(max, min);\n        }", "      \
    \  Optional<Long> max = null;\n        Optional<Long> min = null;\n        for\
    \ (Long i : lst) {\n            if (i.signum() < 0) {\n                if (max\
    \ == null) {\n                    max = Optional.of(i);\n                } else\
    \ {\n                    max = Optional.of(Math.max(max, i));\n              \
    \  }\n            } else {\n                if (min == null) {\n             \
    \       min = Optional.of(i);\n                } else {\n                    min\
    \ = Optional.of(Math.min(min, i));\n                }\n            }\n       \
    \ }\n        if (max == null && min == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        } else if (max == null) {\n            return Pair.of(min,\
    \ Optional.empty());\n        } else if (min == null) {\n            return Pair.of(Optional.empty(),\
    \ max);\n        } else {\n            return Pair.of(max, min);\n        }",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null) {\n                    min = Optional.of(i);\n               \
    \ } else {\n                    min = Optional.of(Math.min(i.longValue(), min.longValue()));\n\
    \                }\n            } else {\n                if (max == null) {\n\
    \                    max = Optional.of(i);\n                } else {\n       \
    \             max = Optional.of(Math.max(i.longValue(), max.longValue()));\n \
    \               }\n            }\n        }\n        return Pair.of(min, max);",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null) {\n                    min = Optional.of(i);\n               \
    \ } else {\n                    min = Optional.min(min, Optional.of(i));\n   \
    \             }\n            } else {\n                if (max == null) {\n  \
    \                  max = Optional.of(i);\n                } else {\n         \
    \           max = Optional.max(max, Optional.of(i));\n                }\n    \
    \        }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (i.signum() < 0) {\n\
    \                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            } else {\n                if (max == null)\
    \ {\n                    max = Optional.of(i);\n                } else {\n   \
    \                 max = Optional.of(Math.max(max, i));\n                }\n  \
    \          }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> min = null;\n        Optional<Long> max = null;\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     if (min == null || i < min) {\n                    min = Optional.of(i);\n\
    \                }\n            } else if (i.signum() > 0) {\n               \
    \ if (max == null || i > max) {\n                    max = Optional.of(i);\n \
    \               }\n            }\n        }\n        if (min == null && max ==\
    \ null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n \
    \       } else if (min == null) {\n            return Pair.of(max, Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        } else {\n            return Pair.of(min, max);\n        }", "      \
    \  Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (i.compareTo(min) < 0) {\n                min = Optional.of(i);\n\
    \            } else if (i.compareTo(max) > 0) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> a = Optional.empty();\n \
    \       Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n \
    \           if (i.signum() < 0) {\n                a = Optional.of(i);\n     \
    \       } else if (i.signum() > 0) {\n                b = Optional.of(i);\n  \
    \          }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).max();\n        Optional<Long> minPositive = lst.stream().filter(x\
    \ -> x > 0).min();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return new Pair<>(maxNegative, minPositive);\n        }\n   \
    \     return null;", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (long i : lst) {\n            if (i < 0) {\n      \
    \          max = Optional.of(i);\n            } else if (i > 0) {\n          \
    \      min = Optional.of(i);\n            }\n        }\n        return Pair.of(max,\
    \ min);", "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return largest.map(x -> new Pair<>(x, smallest)).orElseGet(Pair::new);",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return Pair.of(maxNegative, minPositive);", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(x -> x < 0).max();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(x -> x > 0).min();\n        return Pair.of(maxNegative,\
    \ minPositive);", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).max();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).min();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(maxNegative, minPositive);\n        } else {\n\
    \            return Pair.of(Optional.empty(), Optional.empty());\n        }",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (min == null) {\n                    min = Optional.of(i);\n               \
    \ } else {\n                    min = Optional.of(Math.min(i.longValue(), min.longValue()));\n\
    \                }\n            } else {\n                if (max == null) {\n\
    \                    max = Optional.of(i);\n                } else {\n       \
    \             max = Optional.of(Math.max(i.longValue(), max.longValue()));\n \
    \               }\n            }\n        }\n        if (min == null && max ==\
    \ null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n \
    \       } else if (min == null) {\n            return Pair.of(max, Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(Optional.empty(),\
    \ min);\n        } else {\n            return Pair.of(min, max);\n        }",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return largest.map(x -> new Pair<>(x, smallest)).orElse(Optional.of(new\
    \ Pair<>(null, null)));", "        Optional<Long> maxOpt = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> minOpt = lst.stream().min(Comparator.naturalOrder());\n\
    \        return Pair.of(maxOpt, minOpt);", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (Long i : lst) {\n          \
    \  if (min == null || i < min) {\n                min = Optional.of(i);\n    \
    \        }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        if (min == null && max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        }\n       \
    \ return Pair.of(min, max);", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (long i : lst) {\n            if (min == null || i\
    \ < min.get()) {\n                min = Optional.of(i);\n            }\n     \
    \       if (max == null || i > max.get()) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        if (min == null && max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        }\n       \
    \ if (min == null) {\n            return Pair.of(max, Optional.empty());\n   \
    \     }\n        if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        }\n        return Pair.of(min, max);", "        Optional<Long> min =\
    \ null;\n        Optional<Long> max = null;\n        for (long i : lst) {\n  \
    \          if (min == null || i < min.get()) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max.get()) {\n            \
    \    max = Optional.of(i);\n            }\n        }\n        return Pair.of(min,\
    \ max);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (i.signum() < 0) {\n\
    \                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(i.longValue(),\
    \ min.longValue()));\n                }\n            } else {\n              \
    \  if (max == null) {\n                    max = Optional.of(i);\n           \
    \     } else {\n                    max = Optional.of(Math.max(i.longValue(),\
    \ max.longValue()));\n                }\n            }\n        }\n        if\
    \ (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        } else if (min == null) {\n            return Pair.of(max,\
    \ Optional.empty());\n        } else if (max == null) {\n            return Pair.of(min,\
    \ Optional.empty());\n        } else {\n            return Pair.of(min, max);\n\
    \        }", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        if (min == null && max == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        }\n        if (min ==\
    \ null) {\n            return Pair.of(max, Optional.empty());\n        }\n   \
    \     if (max == null) {\n            return Pair.of(Optional.empty(), min);\n\
    \        }\n        return Pair.of(min, max);", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).findFirst();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).findFirst();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        } else if (maxNegative.isPresent()) {\n            return Pair.of(maxNegative,\
    \ Optional.empty());\n        } else if (minPositive.isPresent()) {\n        \
    \    return Pair.of(Optional.empty(), minPositive);\n        } else {\n      \
    \      return Pair.of(Optional.empty(), Optional.empty());\n        }", "    \
    \    Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                largest = Optional.of(i);\n            } else if (i > 0) {\n\
    \                smallest = Optional.of(i);\n            }\n        }\n      \
    \  return Pair.of(largest, smallest);", "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (largest.isPresent() && smallest.isPresent()) {\n            return\
    \ new Pair<>(largest, smallest);\n        } else {\n            return new Pair<>(Optional.empty(),\
    \ Optional.empty());\n        }", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());", "  \
    \      Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (i.signum() < 0) {\n\
    \                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(i.longValue(),\
    \ min.longValue()));\n                }\n            } else {\n              \
    \  if (max == null) {\n                    max = Optional.of(i);\n           \
    \     } else {\n                    max = Optional.of(Math.max(i.longValue(),\
    \ max.longValue()));\n                }\n            }\n        }\n        if\
    \ (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        } else if (min == null) {\n            return Pair.of(max,\
    \ Optional.empty());\n        } else if (max == null) {\n            return Pair.of(min,\
    \ Optional.empty());\n        } else {\n            return Pair.of(min, max);\n\
    \        }", "        Optional<Long> maxNegative = lst.stream().filter(i -> i\
    \ < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return new Pair<>(maxNegative, minPositive);\n        }\n   \
    \     return null;", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return new Pair<>(maxNegative, minPositive);\n        }\n   \
    \     return Pair.of(Optional.empty(), Optional.empty());", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return Pair.of(maxNegative, minPositive);", "        Optional<Long> min\
    \ = null;\n        Optional<Long> max = null;\n        for (Long i : lst) {\n\
    \            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));", "        Optional<Long> a = Optional.empty();\n       \
    \ Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ } else if (i.signum() > 0) {\n                b = Optional.of(i);\n        \
    \    }\n        }\n        return Pair.of(a, b);", "        Optional<Long> max\
    \ = null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                if (max == null) {\n     \
    \               max = Optional.of(i);\n                } else {\n            \
    \        max = Optional.of(Math.max(max, i));\n                }\n           \
    \ } else {\n                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        return Pair.of(max,\
    \ min);", "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n\
    \        return Pair.of(maxNegative, minPositive);", "        Optional<Long> max\
    \ = null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                if (max == null) {\n     \
    \               max = Optional.of(i);\n                } else {\n            \
    \        max = Optional.of(Math.max(max, i));\n                }\n           \
    \ } else {\n                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        if (max == null &&\
    \ min == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(Optional.of(Long.MIN_VALUE),\
    \ min);\n        } else if (min == null) {\n            return Pair.of(max, Optional.of(Long.MAX_VALUE));\n\
    \        } else {\n            return Pair.of(max, min);\n        }", "      \
    \  Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        } else if (maxNegative.isPresent())\
    \ {\n            return new Pair<>(maxNegative, Optional.empty());\n        }\
    \ else if (minPositive.isPresent()) {\n            return new Pair<>(Optional.empty(),\
    \ minPositive);\n        } else {\n            return new Pair<>(Optional.empty(),\
    \ Optional.empty());\n        }", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return null;",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);", "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> a = Optional.empty();\n       \
    \ Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ } else if (i.signum() > 0) {\n                b = Optional.of(i);\n        \
    \    }\n        }\n        return Pair.of(a, b);", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).findFirst();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).findFirst();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        } else if (maxNegative.isPresent()) {\n            return Pair.of(Optional.of(maxNegative.get()),\
    \ Optional.empty());\n        } else if (minPositive.isPresent()) {\n        \
    \    return Pair.of(Optional.empty(), minPositive);\n        } else {\n      \
    \      return Pair.of(Optional.empty(), Optional.empty());\n        }", "    \
    \    Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> a = Optional.empty();\n       \
    \ Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ } else if (i.signum() > 0) {\n                b = Optional.of(i);\n        \
    \    }\n        }\n        return Pair.of(a, b);", "        Optional<Long> min\
    \ = null;\n        Optional<Long> max = null;\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                if (min == null) {\n     \
    \               min = Optional.of(i);\n                } else {\n            \
    \        min = Optional.of(Math.min(min, i));\n                }\n           \
    \ } else {\n                if (max == null) {\n                    max = Optional.of(i);\n\
    \                } else {\n                    max = Optional.of(Math.max(max,\
    \ i));\n                }\n            }\n        }\n        if (min == null &&\
    \ max == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        } else if (min == null) {\n            return Pair.of(max, Optional.empty());\n\
    \        } else if (max == null) {\n            return Pair.of(Optional.empty(),\
    \ min);\n        } else {\n            return Pair.of(min, max);\n        }",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(x -> x > 0).min();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> a = Optional.empty();\n       \
    \ Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ } else if (i.signum() > 0) {\n                b = Optional.of(i);\n        \
    \    }\n        }\n        return Pair.of(a, b);", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(x -> x < 0).max();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(x -> x > 0).min();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        } else {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }", "        Optional<Long> min = null;\n        Optional<Long> max =\
    \ null;\n        for (Long i : lst) {\n            if (min == null || i < min)\
    \ {\n                min = Optional.of(i);\n            }\n            if (max\
    \ == null || i > max) {\n                max = Optional.of(i);\n            }\n\
    \        }\n        if (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        }\n        if (min == null) {\n            return\
    \ Pair.of(max, Optional.empty());\n        }\n        if (max == null) {\n   \
    \         return Pair.of(min, Optional.empty());\n        }\n        return Pair.of(min,\
    \ max);", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);"]
stop_tokens:
- "\n    }\n"
