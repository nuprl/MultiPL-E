language: java
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n&(n-1))%p)|(n&(p-1));\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50ed2lg1.java:14)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n /= 2;\n        }\n      \
    \  return res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnikhpa__.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r * n % p;\n            n = n / p;\n        }\n        return\
    \ r;\n}\n    public static void main(String[] args) {\n    assert(modp((3), (5))\
    \ == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2vb7_hh.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n = n / 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotuaecn2.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int d = n&1;\n            n >>>= 1;\n            if (n>0) {\n   \
    \             r = (r*d) % p;\n            }\n        }\n        return r;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkulhoy_t.java:22)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) & -(n<<p)) % p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp19kzc43n.java:14)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n-- != 0)\
    \ {\n            r = (r * p) % p;\n        }\n        return r;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gactpbs.java:18)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        for (int i =\
    \ 0; i < n; i++) {\n            res = (res * p) % p;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu8g2sq2o.java:18)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n /= 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78p70w_y.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int t = n % p;\n            n = n / p;\n            r = r * t + p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pmxwgu4.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int tmp = n % p;\n            res = (res * tmp) % p;\n      \
    \      n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpneqskcde.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6cqvrk77.java:22)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*p % n;\n            n = n>>1;\n        }\n        return r;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa5jui38k.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            if (n&1) r += p;\n            n >>= 1;\n            p >>= 1;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdciqgh9.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) r += p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n = n / 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotuaecn2.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int d = n%p;\n            if (d==0) return r;\n            r = (r*p)%d;\n\
    \            n = n/d;\n        }\n        return r;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011636
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int t = n%p;\n            n = n/p;\n            r = r*t + 1;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo01w68pv.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n = n / 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotuaecn2.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << 1) ^ (n >> 63)) % p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6l3crzsc.java:14)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int t = n % p;\n            n = n / p;\n            r = r * t % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzcy4f5ay.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (r < p) {\n\
    \            r *= 2;\n        }\n        return n % p;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp455ktkse.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*p;\n            n = n>>1;\n        }\n        return r;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm42eklk8.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*p % n;\n            n = n-1;\n        }\n        return r;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx1djata.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            int d = n&1;\n            res = (res * p) % p;\n            n = n\
    \ >> 1;\n            res = (res * d) % p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92vg8ebb.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p = (p * p) % p;\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iv9amit.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n) {\n\
    \            if (n & 1) res = (res*p) % p;\n            n >>>= 1;\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzrnils0b.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n/tmp/tmpzrnils0b.java:13:\
    \ error: incompatible types: int cannot be converted to boolean\n            if\
    \ (n & 1) res = (res*p) % p;\n                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int t = n%p;\n            n = n/p;\n            r = r*p + t;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9zl7jo7.java:20)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n-- != 0)\
    \ {\n            r = (r * p) % p;\n        }\n        return r;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gactpbs.java:18)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n /= 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78p70w_y.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n >> 1) | (n & 1)) % p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ry69m1o.java:14)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n&-p) | (n|p)) % p;\n}\n \
    \   public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0cjph3f.java:14)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while ((n & 1)\
    \ == 0) {\n            n >>= 1;\n            r *= p;\n        }\n        return\
    \ r % p;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nv8sapk.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            res = (res * r) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0h5a2qe.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*p % n;\n            n = n-1;\n        }\n        return r;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx1djata.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << 1) ^ (n >> 63)) % p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6l3crzsc.java:14)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int t = n % p;\n            n = n / p;\n            r = r * t + p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pmxwgu4.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            r = r * p % n;\n            n = n / 2;\n        }\n        return\
    \ r;\n}\n    public static void main(String[] args) {\n    assert(modp((3), (5))\
    \ == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr7p1gh0_.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n) {\n\
    \            if (n % 2 == 0) {\n                res = (res * p) % p;\n       \
    \     }\n            n = n / 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpayj4emkb.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hz_xmmq.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n) {\n\
    \            if (n % 2 == 1) res *= p;\n            n /= 2;\n            p *=\
    \ p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uxa43na.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int d = n%p;\n            n = n/p;\n            r = (r*d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjibie_4l.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while ((n & 1)\
    \ == 0) {\n            r <<= 1;\n            n >>= 1;\n        }\n        while\
    \ ((p & 1) == 0) {\n            p >>= 1;\n        }\n        while ((n & p) ==\
    \ 0) {\n            n ^= p;\n            r ^= p;\n            p ^= n;\n      \
    \  }\n        return r;\n}\n    public static void main(String[] args) {\n   \
    \ assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n  \
    \  assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n   \
    \ assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n  \
    \  assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1t1paxpu.java:27)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n) {\n\
    \            if (n % 2 == 0) {\n                res = (res * p) % p;\n       \
    \     }\n            n /= 2;\n        }\n        return res;\n}\n    public static\
    \ void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5hyzr0j.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) ^ n) % p;\n}\n   \
    \ public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgdp_ieoj.java:14)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int t = n%p;\n            r = (r*t) % p;\n            n = n/p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgs28mqar.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n%p)+p) % p;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9o3q3v6.java:15)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res *= p;\n            n -= 1;\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsiotow2k.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int m = n % p;\n            n /= p;\n            r = (r * m) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi95mjzy4.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n-- > 0)\
    \ {\n            r = (r * p) % p;\n        }\n        return r;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6b_y9dn.java:18)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            res = (res * r) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0h5a2qe.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int tmp = n % p;\n            n = n / p;\n            r = r * tmp;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdg88lvj6.java:21)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n >> 1) | (n & 1)) % p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ry69m1o.java:14)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            if (n&1) r += p;\n            n >>= 1;\n            p >>= 1;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdciqgh9.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) r += p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) res *= p;\n            n /= 2;\n            p\
    \ *= p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ejo07zt.java:20)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n) {\n\
    \            if (n % 2 == 1) res *= p;\n            n /= 2;\n            p *=\
    \ p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uxa43na.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p = (p * p) % p;\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iv9amit.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n >> 1) | (n & 1)) % p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ry69m1o.java:14)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n) {\n\
    \            if (n % 2 == 1) res *= p;\n            n /= 2;\n            p *=\
    \ p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uxa43na.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int t = n % p;\n            res = (res * t) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpun8a2dlm.java:21)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n = n / 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotuaecn2.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n /= 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78p70w_y.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>>= 1;\n          \
    \  p = (p * p) % p;\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzlhard3c.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r * p % n;\n            n = n / 2;\n        }\n        return\
    \ r;\n}\n    public static void main(String[] args) {\n    assert(modp((3), (5))\
    \ == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ftrw2hw.java:19)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            n = n / p;\n            res = (res\
    \ * r) % p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_noh422_.java:21)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hz_xmmq.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6cqvrk77.java:22)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*p;\n            n = n>>1;\n        }\n        return r;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm42eklk8.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n   \
    \         }\n            n /= 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdwdduep9.java:21)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) ^ n) % (p << 1);\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpear7eh82.java:14)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) % (p << 1)) + p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02qysrw4.java:14)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            if (n&1) r += p;\n            n >>= 1;\n            p >>= 1;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdciqgh9.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) r += p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        for (int i =\
    \ 0; i < n; i++) {\n            res = (res * p) % p;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu8g2sq2o.java:18)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (r < n) {\n\
    \            r *= p;\n        }\n        return r;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqeuxwm6d.java:18)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*p;\n            n = n>>1;\n        }\n        return r;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm42eklk8.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hz_xmmq.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6cqvrk77.java:22)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p = (p * p) % p;\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iv9amit.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n&(n-1))%p)|(n&p);\n}\n  \
    \  public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvvdk6v8.java:15)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n = n / 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotuaecn2.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1)\n                res=res*p;\n            n>>=1;\n      \
    \      p=p<<1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8em7x6ag.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1)\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            res = (res * r) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0h5a2qe.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int t = n % p;\n            n = n / p;\n            r = r * t + p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pmxwgu4.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*2 % p;\n            n = n>>1;\n        }\n        return r;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktqa0nuu.java:19)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            r = r * p % n;\n            n = n / 2;\n        }\n        return\
    \ r;\n}\n    public static void main(String[] args) {\n    assert(modp((3), (5))\
    \ == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr7p1gh0_.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int t = n % p;\n            n = n / p;\n            r = r * t + p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pmxwgu4.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            int t = n%p;\n            res = (res * t) % p;\n            n = n/p;\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3v1ugv5.java:21)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int d = n&1;\n            n = n>>1;\n            r = (r*p)%d;\n \
    \       }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5mexxgf.java:20)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n % p) + p) % p;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeinf06in.java:15)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n) {\n \
    \           r <<= 1;\n            r |= n & 1;\n            n >>= 1;\n        }\n\
    \        return r % p;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjfzhh3cw.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl4ux83vu.java:22)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            n = n / p;\n            res = (res\
    \ * r) % p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_noh422_.java:21)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6cqvrk77.java:22)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) res = (res * p) % p;\n            n /= 2;\n \
    \       }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cdqi1wm.java:19)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int m = n%p;\n            n = n/p;\n            r = (r*m)%p;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnx2_ncsb.java:21)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int d = n&-p;\n            n ^= d;\n            r = (r*d)%p;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << 1) ^ n) % (p << 1);\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp8gt4eq6.java:14)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hz_xmmq.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            res = (res * r) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0h5a2qe.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            n /= p;\n            res = (res *\
    \ r) % p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckb3e2x1.java:21)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            res = (res * r) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0h5a2qe.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n%p) + p) % p;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpheady3eb.java:15)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            int d = n%p;\n            res = (res * d) % p;\n            n = n/p;\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3uocz5d.java:21)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) ^ n) % (p << 1);\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpear7eh82.java:14)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*p;\n            n = n>>1;\n        }\n        return r;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm42eklk8.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n-- > 0)\
    \ {\n            r = (r * p) % p;\n        }\n        return r;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6b_y9dn.java:18)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n = n / 2;\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotuaecn2.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res *= p;\n            n -= p & n;\n            p >>= 1;\n  \
    \      }\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8nlhskx0.java:20)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl4ux83vu.java:22)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) ^ n) % (p << 1);\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpear7eh82.java:14)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p = (p * p) % p;\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iv9amit.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n) {\n\
    \            if (n & 1) res = (res*p) % p;\n            n >>= 1;\n           \
    \ p = (p*p) % p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpivdbzbxd.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n/tmp/tmpivdbzbxd.java:13:\
    \ error: incompatible types: int cannot be converted to boolean\n            if\
    \ (n & 1) res = (res*p) % p;\n                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            res = (res * n) % p;\n            n /= 2;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppc54uy19.java:20)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) ^ n) % (p << 1);\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpear7eh82.java:14)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hz_xmmq.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int d = n % p;\n            res = (res * d) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptt719xja.java:21)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while ((n & 1)\
    \ == 0) {\n            r <<= 1;\n            n >>= 1;\n        }\n        while\
    \ ((p & 1) == 0) {\n            p >>= 1;\n        }\n        while ((n & p) ==\
    \ 0) {\n            n >>= 1;\n            p >>= 1;\n        }\n        while ((n\
    \ & 1) == 0) {\n            n >>= 1;\n        }\n        return r;\n}\n    public\
    \ static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3r9wx50.java:29)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int d = n%p;\n            n = n/p;\n            r = (r*d)%p;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphv9sd0mn.java:21)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int m = n%p;\n            r = (r*m)%p;\n            n = n/p;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptl7r5n22.java:21)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            int d = n%p;\n            res = (res * d) % p;\n            n = n/p;\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3uocz5d.java:21)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) & 0xff) % (p >> 8);\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.modp(tmp_pycwerx.java:11)\n\tat Problem.main(tmp_pycwerx.java:14)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << 1) ^ (n >> 63)) % p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6l3crzsc.java:14)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) % (p << 1)) + p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02qysrw4.java:14)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        for (int i =\
    \ 1; i < p; i++) {\n            res = (res * n) % p;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_alryhe7.java:18)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hz_xmmq.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) res *= p;\n            n /= 2;\n            p\
    \ *= p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ejo07zt.java:20)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        for (int i =\
    \ 0; i < n; i++) {\n            res = (res * p) % p;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu8g2sq2o.java:18)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            r = r * p % n;\n            n = n / 2;\n        }\n        return\
    \ r;\n}\n    public static void main(String[] args) {\n    assert(modp((3), (5))\
    \ == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr7p1gh0_.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n /= 2;\n        }\n      \
    \  return res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnikhpa__.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p = (p * p) % p;\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iv9amit.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n << p) ^ n) % (p << 1);\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpear7eh82.java:14)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int m = n%p;\n            r = (r*m)%p;\n            n = n/p;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptl7r5n22.java:21)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            r = r*p % n;\n            n = n-1;\n        }\n        return r;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx1djata.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p = (p*p) % p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpapg8ndg3.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            res = (res * r) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0h5a2qe.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int d = n%p;\n            r = (r*p)%d;\n            n = n/d;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011639
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res*2) + (n%p);\n            n /= p;\n        }\n    \
    \    return res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmh24x4_g.java:19)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hz_xmmq.java:19)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (r < n) {\n\
    \            r *= 2;\n        }\n        return r % p;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbue34phe.java:18)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            n = n / p;\n            res = (res\
    \ * r) % p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_noh422_.java:21)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            int r = n % p;\n            res = (res * r) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0h5a2qe.java:21)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p = (p * p) % p;\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iv9amit.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n >> 1) ^ p) & p;\n}\n   \
    \ public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6y_xo524.java:14)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n) {\n\
    \            if (n % 2 == 1) res *= p;\n            n /= 2;\n            p *=\
    \ p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uxa43na.java:12: error: incompatible types: int cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res *= p;\n            n -= p & -n;\n            p >>= 1;\n \
    \       }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3gy9qrgl.java:20)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6cqvrk77.java:22)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int t = n%p;\n            r = (r*t+p)%p;\n            n = n/p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphr4c5jah.java:21)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n        }\n    \
    \    return res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry9ut5jo.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        return ((n >> 1) | (n & 1)) % p;\n\
    }\n    public static void main(String[] args) {\n    assert(modp((3), (5)) ==\
    \ (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ry69m1o.java:14)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            int rem = n % p;\n            res = (rem * res) % p;\n          \
    \  n = n / p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41fqgbln.java:21)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6cqvrk77.java:22)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int d = n % p;\n            n /= p;\n            r = (r * d) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsxj9wrz.java:21)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int r = r * n % p;\n            n = n / p;\n        }\n        return\
    \ r;\n}\n    public static void main(String[] args) {\n    assert(modp((3), (5))\
    \ == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdyy9eajm.java:13: error: variable r is already defined in method\
    \ modp(int,int)\n            int r = r * n % p;\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res *= p;\n            }\n\
    \            n /= 2;\n            p *= p;\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(modp((3), (5)) == (3));\n\
    \    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101)) == (1));\n\
    \    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) == (1));\n\
    \    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6cqvrk77.java:22)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p >>= 1;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w6sm772.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res*p)%p;\n            n >>= 1;\n            p =\
    \ (p*p)%p;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101))\
    \ == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) ==\
    \ (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) ==\
    \ (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a7tp7dj.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res*p)%p;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n>0) {\n\
    \            if (n&1) res = (res * p) % p;\n            n >>= 1;\n           \
    \ p = (p * p) % p;\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101),\
    \ (101)) == (2));\n    assert(modp((0), (101)) == (1));\n    assert(modp((3),\
    \ (11)) == (8));\n    assert(modp((100), (101)) == (1));\n    assert(modp((30),\
    \ (5)) == (4));\n    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iv9amit.java:13: error: incompatible types: int cannot be converted\
    \ to boolean\n            if (n&1) res = (res * p) % p;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            r = r * n % p;\n            n = n / p;\n        }\n        return\
    \ r;\n}\n    public static void main(String[] args) {\n    assert(modp((3), (5))\
    \ == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
    \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101))\
    \ == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) ==\
    \ (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmporppxb2n.java:20)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n /= 2;\n        }\n      \
    \  return res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnikhpa__.java:20)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int m = n & -n, r = r * p + (m > 0 ? m : -m);\n            n >>>=\
    \ 1;\n        }\n        return r;\n}\n    public static void main(String[] args)\
    \ {\n    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsoukdph.java:13: error: variable r is already defined in method\
    \ modp(int,int)\n            int m = n & -n, r = r * p + (m > 0 ? m : -m);\n \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n\
    \            int t = n % p;\n            n /= p;\n            r = (r * t) % p;\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnysr19ve.java:21)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int r = 1;\n        while (n>0) {\n\
    \            int d = n%p;\n            r = (r*p)%d;\n            n = n/d;\n  \
    \      }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(modp((3), (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n\
    \    assert(modp((0), (101)) == (1));\n    assert(modp((3), (11)) == (8));\n \
    \   assert(modp((100), (101)) == (1));\n    assert(modp((30), (5)) == (4));\n\
    \    assert(modp((31), (5)) == (3));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011639
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
    \ static int modp(int n, int p) {\n        int res = 1;\n        while (n > 0)\
    \ {\n            res = (res * n) % p;\n            n--;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(modp((3),\
    \ (5)) == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0),\
    \ (101)) == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100),\
    \ (101)) == (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31),\
    \ (5)) == (3));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p1hfp7o.java:19)\n"
  stdout: ''
  timestamp: 1660011631
