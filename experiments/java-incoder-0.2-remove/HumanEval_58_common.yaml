name: HumanEval_58_common
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return sorted unique common elements for two lists.\n  \
  \  public static ArrayList<Integer> common(ArrayList<Integer> l1, ArrayList<Integer>\
  \ l2) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(common((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)4, (int)3, (int)34, (int)653, (int)2, (int)5))), (new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)7, (int)1, (int)5, (int)9, (int)653, (int)121)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)5, (int)653)))));\n    assert(common((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)3, (int)2, (int)8))), (new ArrayList<Integer>(Arrays.asList((int)3, (int)2)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)3)))));\n    assert(common((new\
  \ ArrayList<Integer>(Arrays.asList((int)4, (int)3, (int)2, (int)8))), (new ArrayList<Integer>(Arrays.asList((int)3,\
  \ (int)2, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
  \ (int)4)))));\n    assert(common((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)3, (int)2, (int)8))), (new ArrayList<Integer>(Arrays.asList()))).equals((new\
  \ ArrayList<Integer>(Arrays.asList()))));\n    }\n\n}\n"
completions: ["        ArrayList<Integer> result = new ArrayList<>();\n        for(int\
    \ i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++)\
    \ {\n                if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n\
    \                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   for(Integer i : set1) {\n            if(!set2.contains(i)) {\n           \
    \     result.add(i);\n            }\n        }\n        return result;", "   \
    \     ArrayList<Integer> common = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set1.removeAll(common);\n        set2.removeAll(common);\n        set1.addAll(common);\n\
    \        set2.addAll(common);\n        return set1;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        for(Integer i : set1)\
    \ {\n            if(!set2.contains(i)) {\n                result.add(i);\n   \
    \         }\n        }\n        return result;", "        ArrayList<Integer> common\
    \ = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<>();\n        for(int\
    \ i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++)\
    \ {\n                if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 =\
    \ set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n       \
    \     Integer i1 = it1.next();\n            Integer i2 = it2.next();\n       \
    \     if (i1.equals(i2)) {\n                result.add(i1);\n            }\n \
    \       }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer>\
    \ it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n \
    \           Integer i1 = it1.next();\n            Integer i2 = it2.next();\n \
    \           if (i1 == i2) {\n                result.add(i1);\n               \
    \ it1.remove();\n                it2.remove();\n            }\n        }\n   \
    \     return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n \
    \       Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        return common;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0;\
    \ i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n  \
    \              if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 =\
    \ set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n       \
    \     Integer i1 = it1.next();\n            Integer i2 = it2.next();\n       \
    \     if (i1 == i2) result.add(i1);\n        }\n        return result;", "   \
    \     ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        for(Integer i : set1) {\n            if(!set2.contains(i)) {\n      \
    \          result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   for(Integer i : set1) {\n            if(set2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   for(Integer i : set1) {\n            if(set2.contains(i)) {\n            \
    \    result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1\
    \ = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n     \
    \   while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next())\
    \ {\n                result.add(it1.next());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n         \
    \       result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        HashSet<Integer>\
    \ h1 = new HashSet<>(l1);\n        HashSet<Integer> h2 = new HashSet<>(l2);\n\
    \        h1.retainAll(h2);\n        h2.retainAll(h1);\n        h1.removeAll(h2);\n\
    \        h2.removeAll(h1);\n        result.addAll(h1);\n        result.addAll(h2);\n\
    \        return result;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        Set<Integer> common = new HashSet<>();\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n\
    \        set2.retainAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        common.addAll(set1);\n        return common;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        HashSet<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2\
    \ = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n     \
    \       if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\
    \        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2\
    \ = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n     \
    \       if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1\
    \ = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n     \
    \   while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next())\
    \ {\n                result.add(it1.next());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          result.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          result.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer>\
    \ it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n \
    \           if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1\
    \ = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n     \
    \   while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next())\
    \ {\n                result.add(it1.next());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Set<Integer> common = new HashSet<Integer>();\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        result.addAll(common);\n        return\
    \ result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n \
    \       for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size();\
    \ j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> common = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          result.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        result.addAll(set1);\n        result.addAll(set2);\n        return result;",
  "        ArrayList<Integer> common = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++)\
    \ {\n                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n\
    \                if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        for(Integer i : set1) {\n            if(set2.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        HashSet<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        for(Integer i : set1) {\n            if(set2.contains(i)) {\n       \
    \         result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   for(Integer i : set1) {\n            if(set2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2\
    \ = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n     \
    \       Integer i1 = it1.next();\n            Integer i2 = it2.next();\n     \
    \       if (i1.equals(i2)) {\n                result.add(i1);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> common = new\
    \ ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer>\
    \ set2 = new HashSet<>(l2);\n        for(Integer i : set1) {\n            if(set2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size();\
    \ j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Set<Integer> commonSet = new HashSet<Integer>();\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.removeAll(common);\n  \
    \      common.addAll(commonSet);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\
    \        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2\
    \ = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n     \
    \       if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> common\
    \ = new HashSet<Integer>();\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        result.addAll(common);\n\
    \        return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1\
    \ = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n     \
    \   while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next())\
    \ {\n                result.add(it1.next());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i=0; i<l1.size(); i++) {\n            for(int j=0; j<l2.size();\
    \ j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> common = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        for(Integer i : set1) {\n            if(set2.contains(i)) {\n       \
    \         common.add(i);\n            }\n        }\n        return common;", " \
    \       ArrayList<Integer> common = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n         \
    \       result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0;\
    \ i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n  \
    \              if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          result.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          result.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\
    \        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2\
    \ = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n     \
    \       if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer>\
    \ set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\
    \        for(Integer i : set1) {\n            if(set2.contains(i)) {\n       \
    \         result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        for(Integer i : set1)\
    \ {\n            if(set2.contains(i)) {\n                result.add(i);\n    \
    \        }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n     \
    \   Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n         \
    \       result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Integer> common = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++)\
    \ {\n                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> common = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer>\
    \ it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n \
    \           if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        for(int i=0; i<l1.size(); i++) {\n\
    \            for(int j=0; j<l2.size(); j++) {\n                if(l1.get(i) ==\
    \ l2.get(j)) {\n                    common.add(l1.get(i));\n                }\n\
    \            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i = 0; i<l1.size(); i++) {\n  \
    \          for(int j = 0; j<l2.size(); j++) {\n                if(l1.get(i) ==\
    \ l2.get(j)) {\n                    result.add(l1.get(i));\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Iterator<Integer>\
    \ it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n \
    \       while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() ==\
    \ it2.next()) {\n                result.add(it1.next());\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n\
    \        set2.retainAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          result.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n\
    \        set2.retainAll(set1);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer>\
    \ it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n \
    \           Integer i1 = it1.next();\n            Integer i2 = it2.next();\n \
    \           if (i1.equals(i2)) {\n                result.add(i1);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Integer> common =\
    \ new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n\
    \        set2.retainAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        return common;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0;\
    \ i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n  \
    \              if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n\
    \                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 =\
    \ set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n       \
    \     if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        for(Integer i : set1)\
    \ {\n            if(!set2.contains(i)) {\n                common.add(i);\n   \
    \         }\n        }\n        return common;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n     \
    \   Set<Integer> set2 = new HashSet<>(l2);\n        Set<Integer> common = new\
    \ HashSet<>();\n        common.addAll(set1);\n        common.addAll(set2);\n \
    \       common.removeAll(set1);\n        common.removeAll(set2);\n        result.addAll(common);\n\
    \        return result;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Set<Integer> commonSet = new HashSet<Integer>();\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        common.addAll(commonSet);\n     \
    \   Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        for(Integer i : set1)\
    \ {\n            if(set2.contains(i)) {\n                result.add(i);\n    \
    \        }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n     \
    \   Set<Integer> set2 = new HashSet<>(l2);\n        for(Integer i : set1) {\n\
    \            if(!set2.contains(i)) {\n                result.add(i);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Integer> common\
    \ = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<>();\n        for(int\
    \ i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++)\
    \ {\n                if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   for(Integer i : set1) {\n            if(set2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 =\
    \ set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n       \
    \     if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1\
    \ = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n     \
    \   while (it1.hasNext() && it2.hasNext()) {\n            Integer i1 = it1.next();\n\
    \            Integer i2 = it2.next();\n            if (i1 == i2) {\n         \
    \       result.add(i1);\n                it1.remove();\n                it2.remove();\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Iterator<Integer>\
    \ it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n \
    \       while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() ==\
    \ it2.next()) {\n                result.add(it1.next());\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        for(Integer i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n                set1.remove(i);\n       \
    \         set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2\
    \ = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n     \
    \       if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        for(Integer i : set1)\
    \ {\n            if(!set2.contains(i)) {\n                result.add(i);\n   \
    \         }\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n     \
    \   Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n         \
    \       result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Integer> common = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++)\
    \ {\n                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> common = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            Integer i1 = it1.next();\n            Integer\
    \ i2 = it2.next();\n            if (i1.equals(i2)) {\n                result.add(i1);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1\
    \ = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n     \
    \   while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next())\
    \ {\n                result.add(it1.next());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          result.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer>\
    \ it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n \
    \           if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Set<Integer> common =\
    \ new HashSet<>();\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        HashSet<Integer> set1 = new HashSet<>(l1);\n        HashSet<Integer>\
    \ set2 = new HashSet<>(l2);\n        for(Integer i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n                set1.remove(i);\n       \
    \         set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> common = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n \
    \       for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size();\
    \ j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer>\
    \ h1 = new HashSet<Integer>(l1);\n        HashSet<Integer> h2 = new HashSet<Integer>(l2);\n\
    \        h1.retainAll(h2);\n        h2.retainAll(h1);\n        h1.removeAll(h2);\n\
    \        h2.removeAll(h1);\n        for(int i : h1) {\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Integer> common = new\
    \ ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n         \
    \       result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Set<Integer>\
    \ set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n\
    \        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2\
    \ = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n     \
    \       if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n \
    \       for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size();\
    \ j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n\
    \                if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n\
    \                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> common = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n\
    \                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n\
    \                if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        for(int i = 0; i <\
    \ l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n      \
    \          if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            Integer i = it1.next();\n            Integer\
    \ j = it2.next();\n            if (i == j) continue;\n            if (result.contains(i))\
    \ {\n                it1.remove();\n                it2.remove();\n          \
    \  } else {\n                result.add(i);\n            }\n        }\n      \
    \  return result;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Iterator<Integer> it1\
    \ = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n     \
    \   while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next())\
    \ {\n                result.add(it1.next());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer>\
    \ it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n \
    \           if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Iterator<Integer>\
    \ it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n \
    \       while (it1.hasNext() && it2.hasNext()) {\n            Integer i1 = it1.next();\n\
    \            Integer i2 = it2.next();\n            if (i1.equals(i2)) {\n    \
    \            result.add(i1);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 =\
    \ set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n       \
    \     Integer i1 = it1.next();\n            Integer i2 = it2.next();\n       \
    \     if (i1.equals(i2)) {\n                result.add(i1);\n            }\n \
    \       }\n        return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> common\
    \ = new HashSet<Integer>();\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            Integer i1 = it1.next();\n            Integer\
    \ i2 = it2.next();\n            if (i1.equals(i2)) {\n                result.add(i1);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n\
    \        Set<Integer> set2 = new HashSet<>(l2);\n        Set<Integer> common =\
    \ new HashSet<>();\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        result.addAll(common);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer>\
    \ it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n \
    \           Integer i1 = it1.next();\n            Integer i2 = it2.next();\n \
    \           if (i1 == i2) {\n                result.add(i1);\n            }\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n         \
    \       result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 =\
    \ set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n       \
    \     if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       HashSet<Integer> set1 = new HashSet<Integer>(l1);\n        HashSet<Integer>\
    \ set2 = new HashSet<Integer>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n         \
    \       result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0;\
    \ i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n  \
    \              if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Integer> common = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        result.addAll(set1);\n        result.addAll(set2);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0;\
    \ i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n  \
    \              if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Integer> common = new ArrayList<>();\n\
    \        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new\
    \ HashSet<>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> commonSet\
    \ = new HashSet<Integer>();\n        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n\
    \        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n    \
    \    commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n", "   \
    \     ArrayList<Integer> common = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n\
    \                if(l1.get(i) == l2.get(j)) {\n                    common.add(l1.get(i));\n\
    \                }\n            }\n        }\n        return common;", "     \
    \   ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 =\
    \ set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n       \
    \     if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        HashSet<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        HashSet<Integer> set2 = new HashSet<Integer>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n \
    \       Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    result.add(l1.get(i));\n              \
    \      break;\n                }\n            }\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Set<Integer> set1\
    \ = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n     \
    \   Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 =\
    \ set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n       \
    \     if (it1.next() == it2.next()) {\n                result.add(it1.next());\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n\
    \        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Iterator<Integer>\
    \ it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n \
    \       while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() ==\
    \ it2.next()) {\n                result.add(it1.next());\n            }\n    \
    \    }\n        return result;", "        ArrayList<Integer> common = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j <\
    \ l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n          \
    \          common.add(l1.get(i));\n                }\n            }\n        }\n\
    \        return common;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2\
    \ = new HashSet<Integer>(l2);\n        Iterator<Integer> it1 = set1.iterator();\n\
    \        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()\
    \ && it2.hasNext()) {\n            Integer i1 = it1.next();\n            Integer\
    \ i2 = it2.next();\n            if (i1.equals(i2)) {\n                result.add(i1);\n\
    \            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ common = new ArrayList<Integer>();\n        for(int i = 0; i < l1.size(); i++)\
    \ {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;", "        ArrayList<Integer>\
    \ common = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n\
    \            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i)\
    \ == l2.get(j)) {\n                    common.add(l1.get(i));\n              \
    \  }\n            }\n        }\n        return common;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
