language: java
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else if (largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwo7s1x8.java:26)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                if (largestDivisor <\
    \ i) {\n                    largestDivisor = i;\n                }\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxxyofnm.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else if (largestDivisor\
    \ != i) {\n                    largestDivisor = Math.max(largestDivisor, i);\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkqkkuaym.java:24)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ i);\n            }\n        }\n        return maxDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4txveyb.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqil09m_p.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpol2jlr9_.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                if (largestDivisor <\
    \ i) {\n                    largestDivisor = i;\n                }\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vm1doa8.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzdtaj9tz.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int maxDivisorFactor = 1;\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                maxDivisorFactor\
    \ = i;\n                if (maxDivisor < maxDivisorFactor) {\n               \
    \     maxDivisor = maxDivisorFactor;\n                }\n            }\n     \
    \   }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7l0o902l.java:24)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzdtaj9tz.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for(int i = 1; i < n; i++) {\n       \
    \     if(n % i == 0) {\n                largestDivisor = i;\n            }\n \
    \       }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        int divisor = 1;\n   \
    \     while (divisor < n) {\n            if (n % divisor == 0) {\n           \
    \     largestDivisor = divisor;\n            }\n            divisor++;\n     \
    \   }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqil09m_p.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else if (largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwo7s1x8.java:26)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqil09m_p.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for(int i = 1; i < n; i++) {\n           \
    \ if(n % i == 0) {\n                maxDivisor = i;\n            }\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        int divisor = 1;\n   \
    \     while (divisor <= n) {\n            if (n % divisor == 0) {\n          \
    \      largestDivisor = divisor;\n            }\n            divisor++;\n    \
    \    }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfzg4iz6.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3sxgbjm.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        int currentDivisorFactor\
    \ = 1;\n        while (currentDivisor <= n) {\n            currentDivisorFactor\
    \ = currentDivisor / n;\n            if (currentDivisorFactor % 2 == 0) {\n  \
    \              currentDivisorFactor = currentDivisorFactor * 2;\n            }\n\
    \            if (currentDivisorFactor > maxDivisor) {\n                maxDivisor\
    \ = currentDivisorFactor;\n            }\n            currentDivisor++;\n    \
    \    }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5glmfhn3.java:29)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqil09m_p.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                maxDivisor = i;\n            }\n       \
    \ }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgfoqv0ds.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                if (largestDivisor <\
    \ i) {\n                    largestDivisor = i;\n                }\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vm1doa8.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                maxDivisor = i;\n            }\n       \
    \ }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      // Initialize a list to store all the divisors\n        List<Integer> divisors\
    \ = new ArrayList<>();\n        // Initialize a list to store all the divisors\
    \ less than n\n        List<Integer> divisorsLessThanN = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors greater than n\n     \
    \   List<Integer> divisorsGreaterThanN = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors less than n and greater than n\n        List<Integer>\
    \ divisorsLessThanNGreaterThanN = new ArrayList<>();\n        // Initialize a\
    \ list to store all the divisors less than n and less than n\n        List<Integer>\
    \ divisorsLessThanNLessThanN = new ArrayList<>();\n        // Initialize a list\
    \ to store all the divisors greater than n and greater than n\n        List<Integer>\
    \ divisorsGreaterThanNGreaterThanN = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors greater than n and less than n\n        List<Integer>\
    \ divisorsGreaterThanNLessThanN = new ArrayList<>();\n        // Initialize a\
    \ list to store all the divisors less than n and greater than n\n        List<Integer>\
    \ divisorsLessThanNGreaterThanNLessThanN = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors greater than n and less than n\n        List<Integer>\
    \ divisorsGreaterThanNGreaterThanNLessThanN = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors greater than n and greater than n\n       \
    \ List<Integer> divisorsGreaterThanNLessThanNGreaterThanN = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors less than n and less than\
    \ n\n        List<Integer> divisorsLessThanNLessThanNGreaterThanN = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors greater than n and greater\
    \ than n\n        List<Integer> divisorsGreaterThanNGreaterThanNLessThanN = new\
    \ ArrayList<>();\n        // Initialize a list to store all the divisors greater\
    \ than n and less than n\n        List<Integer> divisorsGreaterThanNLessThanNGreaterThanN\
    \ = new ArrayList<>();\n        // Initialize a list to store all the divisors\
    \ less than n and less than n\n        List<Integer> divisorsLessThanNLessThanNGreaterThanNLessThanN\
    \ = new ArrayList<>();\n        // Initialize a list to store all the divisors\
    \ greater than n and greater than n\n        List<Integer> divisorsGreaterThanNGreaterThanNLessThanNGreaterThanN\
    \ = new ArrayList<>();\n        // Initialize a list to store all the divisors\
    \ greater than n and less than n\n        List<Integer> divisorsGre\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpluofd7u_.java:42: error: ';' expected\n        List<Integer> divisorsGre\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        int divisor = 1;\n        while (divisor <\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else if (largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwo7s1x8.java:26)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else if (largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwo7s1x8.java:26)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        int divisor = 1;\n        while (divisor <=\
    \ maxDivisor) {\n            if (n % divisor == 0) {\n                maxDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kbd9b3i.java:24)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1 || largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vyhdczg.java:24)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqil09m_p.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                if (largestDivisor <\
    \ i) {\n                    largestDivisor = i;\n                }\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vm1doa8.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for(int i = 1; i < n; i++) {\n           \
    \ if(n%i == 0) {\n                maxDivisor = i;\n            }\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= maxDivisor) {\n            if (n % currentDivisor == 0) {\n             \
    \   maxDivisor = currentDivisor;\n            }\n            currentDivisor++;\n\
    \        }\n        return maxDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8zex8zc.java:24)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i < n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgfoqv0ds.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgfoqv0ds.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgfoqv0ds.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for(int i = 1; i < n; i++) {\n       \
    \     if(n%i == 0) {\n                largestDivisor = i;\n            }\n   \
    \     }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                if (largestDivisor <\
    \ i) {\n                    largestDivisor = i;\n                }\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vm1doa8.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3sxgbjm.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwfdjr50.java:20)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1 || largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vyhdczg.java:24)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                if (largestDivisor == 0 || largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxt9pjqt_.java:24)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = Integer.MIN_VALUE;\n        int currentDivisor = 1;\n\
    \        while (currentDivisor <= n) {\n            if (n % currentDivisor ==\
    \ 0) {\n                maxDivisor = Math.max(maxDivisor, currentDivisor);\n \
    \           }\n            currentDivisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkqzemlu8.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = -1;\n        int divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp026q7zvj.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        int divisor = 1;\n        while (divisor <=\
    \ maxDivisor) {\n            if (n % divisor == 0) {\n                maxDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kbd9b3i.java:24)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      // Initialize a list to store all the divisors\n        List<Integer> divisors\
    \ = new ArrayList<>();\n        // Initialize a list to store all the divisors\n\
    \        List<Integer> divisors2 = new ArrayList<>();\n        // Initialize a\
    \ list to store all the divisors\n        List<Integer> divisors3 = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors\n        List<Integer>\
    \ divisors4 = new ArrayList<>();\n        // Initialize a list to store all the\
    \ divisors\n        List<Integer> divisors5 = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors\n        List<Integer> divisors6 = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors\n        List<Integer>\
    \ divisors7 = new ArrayList<>();\n        // Initialize a list to store all the\
    \ divisors\n        List<Integer> divisors8 = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors\n        List<Integer> divisors9 = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors\n        List<Integer>\
    \ divisors10 = new ArrayList<>();\n        // Initialize a list to store all the\
    \ divisors\n        List<Integer> divisors11 = new ArrayList<>();\n        //\
    \ Initialize a list to store all the divisors\n        List<Integer> divisors12\
    \ = new ArrayList<>();\n        // Initialize a list to store all the divisors\n\
    \        List<Integer> divisors13 = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors\n        List<Integer> divisors14 = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors\n        List<Integer>\
    \ divisors15 = new ArrayList<>();\n        // Initialize a list to store all the\
    \ divisors\n        List<Integer> divisors16 = new ArrayList<>();\n        //\
    \ Initialize a list to store all the divisors\n        List<Integer> divisors17\
    \ = new ArrayList<>();\n        // Initialize a list to store all the divisors\n\
    \        List<Integer> divisors18 = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors\n        List<Integer> divisors19 = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors\n        List<Integer>\
    \ divisors20 = new ArrayList<>();\n        // Initialize a list to store all the\
    \ divisors\n        List<Integer> divisors21 = new ArrayList<>();\n        //\
    \ Initialize a list to store all the divisors\n        List<Integer> divisors22\
    \ = new ArrayList<>();\n        // Initialize a list to store all the divisors\n\
    \        List<Integer> divisors23 = new ArrayList<>();\n        // Initialize\
    \ a list to store all the divisors\n        List<Integer> divisors24 = new ArrayList<>();\n\
    \        // Initialize a list to store all the divisors\n        \n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7otujcsn.java:61: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                if (largestDivisor <\
    \ i) {\n                    largestDivisor = i;\n                }\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vm1doa8.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else if (largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwo7s1x8.java:26)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                if (largestDivisor == 0 || largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxt9pjqt_.java:24)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu15cg27a.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                if (maxDivisor < i) {\n               \
    \     maxDivisor = i;\n                }\n            }\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02ag7q7_.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = Integer.MIN_VALUE;\n        int divisor = 1;\n       \
    \ while (divisor <= n) {\n            if (n % divisor == 0) {\n              \
    \  maxDivisor = Math.max(maxDivisor, divisor);\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj33a6txh.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                if (maxDivisor < i) {\n               \
    \     maxDivisor = i;\n                }\n            }\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02ag7q7_.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3sxgbjm.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int maxDividend = 1;\n        while (maxDividend\
    \ < n) {\n            maxDividend = maxDividend * 2;\n            if (maxDividend\
    \ % 2 == 0) {\n                maxDivisor = maxDividend;\n            }\n    \
    \    }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04gkthe7.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3sxgbjm.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if (n % i == 0) {\n                maxDivisor = i;\n            }\n\
    \        }\n        return maxDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kjmtduj.java:20)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else if (largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwo7s1x8.java:26)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for(int i = 1; i < n; i++) {\n       \
    \     if((n % i) == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                maxDivisor = i;\n            }\n       \
    \ }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int maxDividend = 1;\n        for (int i =\
    \ 1; i <= n; i++) {\n            if (n % i == 0) {\n                maxDividend\
    \ = i;\n                maxDivisor = i;\n            }\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp96cvl72k.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        int divisor = 1;\n        while (divisor <\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 2; i <= n\
    \ / 2; i++) {\n            if (n % i == 0) {\n                largestDivisor =\
    \ i;\n            }\n        }\n        return largestDivisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdq3qjz4o.java:20)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3sxgbjm.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        int divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                largestDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvozcn8g0.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for(int i = 1; i < n; i++) {\n       \
    \     if(n % i == 0) {\n                largestDivisor = i;\n            }\n \
    \       }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n        \
    \    if (n % i == 0) {\n                if (maxDivisor == -1 || maxDivisor > i)\
    \ {\n                    maxDivisor = i;\n                }\n            }\n \
    \       }\n        return maxDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4742v213.java:24)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                if (maxDivisor < i) {\n               \
    \     maxDivisor = i;\n                }\n            }\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02ag7q7_.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        int divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                largestDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9191ar2.java:22)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for(int i = 1; i < n; i++) {\n           \
    \ if(n%i == 0) {\n                maxDivisor = i;\n            }\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                if (largestDivisor < i) {\n       \
    \             largestDivisor = i;\n                }\n            }\n        }\n\
    \        return largestDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdaaz3zpe.java:22)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                largestDivisor = i;\n            \
    \    break;\n            }\n        }\n        return largestDivisor;\n}\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9ai3d_7.java:23)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else {\n             \
    \       if (largestDivisor > i) {\n                        largestDivisor = i;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzww2et2.java:28)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for(int i = 1; i < n; i++) {\n       \
    \     if(n%i == 0) {\n                largestDivisor = i;\n            }\n   \
    \     }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for(int i = 1; i < n; i++) {\n       \
    \     if(n % i == 0) {\n                largestDivisor = i;\n            }\n \
    \       }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int maxDivisorFactor = 1;\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                int divisor\
    \ = i;\n                while (divisor <= n / i) {\n                    if (n\
    \ % divisor == 0) {\n                        divisor++;\n                    \
    \    maxDivisorFactor = divisor;\n                    }\n                    divisor++;\n\
    \                }\n                if (maxDivisor < maxDivisorFactor) {\n   \
    \                 maxDivisor = maxDivisorFactor;\n                }\n        \
    \    }\n        }\n        return maxDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpozgi5ygl.java:31)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for(int i = 1; i < n; i++) {\n       \
    \     if((n % i == 0) && (i != largestDivisor)) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        int divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                largestDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwn3e29wx.java:22)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = -1;\n        int divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp026q7zvj.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int maxDivisorIndex = 0;\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n                maxDivisorIndex = i;\n            }\n        }\n     \
    \   return maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdxcm3lt6.java:22)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int divisor = 2;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp18ud7nw7.java:22)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        int divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                largestDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvozcn8g0.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      // Write your code here\n        int maxDivisor = 0;\n        int divisor\
    \ = 1;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n\
    \                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnn612_82.java:23)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        int divisor = 1;\n        while (divisor\
    \ < n) {\n            if (n % divisor == 0) {\n                divisor++;\n  \
    \          } else {\n                divisor = 1;\n            }\n           \
    \ if (divisor > largestDivisor) {\n                largestDivisor = divisor;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        int divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                largestDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvozcn8g0.java:22)\n"
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010730
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int maxDividend = 1;\n        for (int i =\
    \ 1; i <= n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n                maxDividend = n;\n            }\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpac_npymh.java:22)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpol2jlr9_.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzdtaj9tz.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqil09m_p.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ i);\n            }\n        }\n        return maxDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4txveyb.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n        \
    \    if (n % i == 0) {\n                int divisor = i;\n                while\
    \ (divisor < n && n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_60f0m7.java:26)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3sxgbjm.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ac3jwn.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else {\n             \
    \       if (largestDivisor > i) {\n                        largestDivisor = i;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ largestDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzww2et2.java:28)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = n;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgfoqv0ds.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzdtaj9tz.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                if (largestDivisor <\
    \ i) {\n                    largestDivisor = i;\n                }\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vm1doa8.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqil09m_p.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes33oltp.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = n;\n        for (int i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwdddewe.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3sxgbjm.java:20)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = Integer.MIN_VALUE;\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                if (largestDivisor <\
    \ i) {\n                    largestDivisor = i;\n                }\n         \
    \   }\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vm1doa8.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int divisor = 2;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp18ud7nw7.java:22)\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 0;\n        int divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7ml7bka.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int maxDivisor = 1;\n        int currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8z0wdkj.java:22)\n"
  stdout: ''
  timestamp: 1660010729
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    public static int largestDivisor(int n) {\n  \
    \      int largestDivisor = -1;\n        for (int i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (largestDivisor == -1) {\n    \
    \                largestDivisor = i;\n                } else if (largestDivisor\
    \ > i) {\n                    largestDivisor = i;\n                }\n       \
    \     }\n        }\n        return largestDivisor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwo7s1x8.java:26)\n"
  stdout: ''
  timestamp: 1660010729
