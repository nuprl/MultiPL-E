language: java
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i += 1;\n        }\n     \
    \   return largestPrimeFactor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxy3elcmc.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ly_t36s.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i += 1;\n        }\n     \
    \   return largestPrimeFactor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxy3elcmc.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrkgtjr4.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrkgtjr4.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ly_t36s.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n <= 1) {\n            return n;\n        }\n        int largestPrimeFactor\
    \ = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1719lgc2.java:24)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \      }\n        }\n        return factors.stream().max(Comparator.naturalOrder()).get();\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpljr1_fac.java:20)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \      }\n        }\n        return largestPrimeFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc4nk6jjb.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n <= 1) return n;\n        int largestPrimeFactor = n;\n        for (int\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpueslz7wm.java:22)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largestPrimeFactor = i;\n          \
    \      break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vwd4zsw.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5duyy8oy.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 1;\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhjebcb2.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2z97d8bv.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                factors.add(i);\n   \
    \         }\n        }\n        if (factors.size() == 0) {\n            return\
    \ n;\n        }\n        int largest = factors.get(0);\n        for (int i = 1;\
    \ i < factors.size(); i++) {\n            if (factors.get(i) > largest) {\n  \
    \              largest = factors.get(i);\n            }\n        }\n        return\
    \ largest;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzz7b7h7.java:29)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ Set<Integer> factors = new HashSet<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \          while(n % i == 0) {\n                    factors.add(i);\n        \
    \            n /= i;\n                }\n            }\n        }\n        return\
    \ factors.isEmpty() ? n : factors.last();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzge5k35t.java:21: error: cannot find symbol\n        return factors.isEmpty()\
    \ ? n : factors.last();\n                                              ^\n  symbol:\
    \   method last()\n  location: variable factors of type Set<Integer>\n1 error\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n/2) {\n       \
    \     if (n % i == 0) {\n                maxFactor = i;\n            }\n     \
    \       i++;\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzu_7o231.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \      }\n        }\n        Collections.sort(factors);\n        return factors.get(factors.size()-1);\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmploan49pq.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for(int i = 2; i <= n/2; i++) {\n     \
    \       if(n%i == 0) {\n                largestPrimeFactor = i;\n            \
    \    break;\n            }\n        }\n        return largestPrimeFactor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xvzmdea.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n / 2) {\n     \
    \       if (n % i == 0) {\n                maxFactor = i;\n            }\n   \
    \         i++;\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lc0b6ti.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n % i == 0) {\n                largestPrimeFactor = i;\n \
    \               break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6m_oeyxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            while (n % i == 0) {\n                    n /= i;\n             \
    \   }\n            }\n            i++;\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                factors.add(i);\n   \
    \         }\n        }\n        int largestPrimeFactor = factors.stream().max((a,\
    \ b) -> {\n            return Integer.compare(a, b);\n        }).get();\n    \
    \    return largestPrimeFactor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0wsw7f_e.java:23)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                while (n % i == 0) {\n                    n = n / i;\n      \
    \          }\n            }\n            i++;\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_cvcm1q.java:25)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ly_t36s.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \      }\n        }\n        if(factors.size() > 0) {\n            return factors.get(factors.size()-1);\n\
    \        } else {\n            return n;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89g78cjl.java:24)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        int i = 2;\n        while (i <= Math.sqrt(n)) {\n\
    \            if (n % i == 0) {\n                maxFactor = i;\n             \
    \   break;\n            }\n            i++;\n        }\n        return maxFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppw94ln2m.java:23)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \          n /= i;\n            }\n        }\n        return factors.isEmpty()\
    \ ? n : factors.get(factors.size()-1);\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5w0mo9j.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \      }\n        }\n        return factors.stream().max(Comparator.naturalOrder()).get();\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpljr1_fac.java:20)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n % i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppre3v5cy.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxf9v0fr.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        int i = 2;\n        while (i <= Math.sqrt(n)) {\n\
    \            if (n % i == 0) {\n                maxFactor = i;\n             \
    \   break;\n            }\n            i += 1;\n        }\n        return maxFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzritne2n.java:23)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \      }\n        }\n        Collections.sort(factors);\n        return factors.get(factors.size()-1);\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmploan49pq.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprdduxncp.java:23)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n <= 1) return n;\n        int maxFactor = n;\n        for (int i = 2; i\
    \ <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                maxFactor\
    \ = i;\n                break;\n            }\n        }\n        return maxFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9t6tle9b.java:22)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrkgtjr4.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        int factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnpzde9ic.java:22)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n / 2) {\n     \
    \       if (n % i == 0) {\n                maxFactor = i;\n            }\n   \
    \         i += 2;\n        }\n        return maxFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpboqafe6h.java:22)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n    \
    \        if (n % i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfes4d2z.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largestPrimeFactor = i;\n          \
    \      break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vwd4zsw.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ Set<Integer> factors = new HashSet<>();\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                factors.add(i);\n   \
    \         }\n        }\n        if (factors.size() == 0) {\n            return\
    \ n;\n        }\n        int largest = factors.stream().max(Comparator.naturalOrder()).orElse(1);\n\
    \        for (int i : factors) {\n            if (largest % i == 0) {\n      \
    \          largest = i;\n            }\n        }\n        return largest;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp16b_ojdf.java:29)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5duyy8oy.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ Set<Integer> factors = new HashSet<>();\n        int largestPrimeFactor = n;\n\
    \        while (factors.size() < n) {\n            while (n % 2 == 0) {\n    \
    \            factors.add(2);\n                n = n / 2;\n            }\n    \
    \        while (n % 3 == 0) {\n                factors.add(3);\n             \
    \   n = n / 3;\n            }\n            while (n % 5 == 0) {\n            \
    \    factors.add(5);\n                n = n / 5;\n            }\n            while\
    \ (n % 7 == 0) {\n                factors.add(7);\n                n = n / 7;\n\
    \            }\n            while (n % 11 == 0) {\n                factors.add(11);\n\
    \                n = n / 11;\n            }\n            while (n % 13 == 0) {\n\
    \                factors.add(13);\n                n = n / 13;\n            }\n\
    \            while (n % 17 == 0) {\n                factors.add(17);\n       \
    \         n = n / 17;\n            }\n            while (n % 19 == 0) {\n    \
    \            factors.add(19);\n                n = n / 19;\n            }\n  \
    \          while (n % 23 == 0) {\n                factors.add(23);\n         \
    \       n = n / 23;\n            }\n            while (n % 29 == 0) {\n      \
    \          factors.add(29);\n                n = n / 29;\n            }\n    \
    \        while (n % 31 == 0) {\n                factors.add(31);\n           \
    \     n = n / 31;\n            }\n            while (n % 37 == 0) {\n        \
    \        factors.add(37);\n                n = n / 37;\n            }\n      \
    \      while (n % 41 == 0) {\n                factors.add(41);\n             \
    \   n = n / 41;\n            }\n            while (n % 43 == 0) {\n          \
    \      factors.add(43);\n                n = n / 43;\n            }\n        \
    \    while (n % 47 == 0) {\n                factors.add(47);\n               \
    \ n = n / 47;\n            }\n            while (n % 53 == 0) {\n            \
    \    factors.add(53);\n                n = n / 53;\n            }\n          \
    \  while (n % 59 == 0) {\n                factors.add(59);\n                n\
    \ = n / 59;\n            }\n            while (n % 61 == 0) {\n              \
    \  factors.add(61);\n                n = n / 61;\n            }\n            while\
    \ (n % 67 == 0) {\n                factors.add(67);\n                n = n / 67;\n\
    \            }\n            while (n % 71 == 0) {\n                factors.add(71);\n\
    \                n = n / 71;\n            }\n            while (n % 73 == 0) {\n\
    \                factors.add(73);\n                n = n / 73;\n            }\n\
    \            while (n % 79 == 0) {\n                factors.add(79);\n       \
    \         n = n / 79;\n            }\n            while (n % 83 == 0) {\n    \
    \            factors.add(83);\n                n = n / 83;\n            }\n  \
    \          while (n % 89 == 0) {\n                factors.add(89);\n         \
    \       n = n / \n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_anfrahc.java:109: error: illegal start of expression\n}\n^\n/tmp/tmp_anfrahc.java:110:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for(int i = 2; i <= n/2; i++) {\n     \
    \       if(n%i == 0) {\n                largestPrimeFactor = i;\n            \
    \    break;\n            }\n        }\n        return largestPrimeFactor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xvzmdea.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxf9v0fr.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n) {\n         \
    \   if (n % i == 0) {\n                maxFactor = i;\n            }\n       \
    \     i++;\n        }\n        return maxFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecm1o4wy.java:22)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprdduxncp.java:23)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxf9v0fr.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        int i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvo7114_q.java:22)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n    \
    \        if (n % i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfes4d2z.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxf9v0fr.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ly_t36s.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for(int i = 2; i <= n/2; i++) {\n     \
    \       if(n%i == 0) {\n                largestPrimeFactor = i;\n            \
    \    break;\n            }\n        }\n        return largestPrimeFactor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xvzmdea.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        int i = 2;\n        while (i <= Math.sqrt(n)) {\n\
    \            if (n % i == 0) {\n                maxFactor = i;\n             \
    \   break;\n            }\n            i++;\n        }\n        return maxFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppw94ln2m.java:23)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu6xi9si.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        int i = 2;\n        while (i <= maxFactor) {\n \
    \           if (n % i == 0) {\n                maxFactor = i;\n            }\n\
    \            i++;\n        }\n        return maxFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptofle5p1.java:22)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n % 2 == 0)\
    \ return 2;\n        if (n % 3 == 0) return 3;\n        if (n % 5 == 0) return\
    \ 5;\n        if (n % 7 == 0) return 7;\n        int max = 2;\n        int maxDivisor\
    \ = 3;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n\
    \ % i == 0) {\n                maxDivisor = i;\n                max = i;\n   \
    \         }\n        }\n        if (maxDivisor == 3) {\n            if (n % maxDivisor\
    \ == 0) return maxDivisor;\n        }\n        return max;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wxlz9md.java:31)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n / 2) {\n     \
    \       if (n % i == 0) {\n                maxFactor = i;\n            }\n   \
    \         i++;\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lc0b6ti.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2z97d8bv.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \         }\n        }\n        return largestPrimeFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvgpmdvb3.java:20)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n / 2) {\n     \
    \       if (n % i == 0) {\n                maxFactor = i;\n            }\n   \
    \         i += 2;\n        }\n        return maxFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpboqafe6h.java:22)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n <= 1) return n;\n        int largestPrimeFactor = n;\n        for (int\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n          \
    \      largestPrimeFactor = i;\n                break;\n            }\n      \
    \  }\n        return largestPrimeFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte0wql8n.java:22)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n    \
    \        if (n % i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfes4d2z.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n    \
    \        if (n % i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfes4d2z.java:21)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \      }\n        }\n        Collections.sort(factors);\n        return factors.get(factors.size()-1);\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmploan49pq.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n <= 1) return n;\n        int largestPrimeFactor = n;\n        for (int\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n          \
    \      largestPrimeFactor = i;\n                break;\n            }\n      \
    \  }\n        return largestPrimeFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte0wql8n.java:22)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrkgtjr4.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        int factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011790
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ Set<Integer> factors = new HashSet<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n % i == 0) {\n                factors.add(i);\n    \
    \        }\n        }\n        return factors.stream().max().getAsInt();\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6cwexne.java:17: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        return factors.stream().max().getAsInt();\n\
    \                               ^\n  required: Comparator<? super Integer>\n \
    \ found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n1 error\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \         }\n        }\n        return largestPrimeFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvgpmdvb3.java:20)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        int i = 2;\n        while (i <= n / 2)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i += 2;\n        }\n     \
    \   return largestPrimeFactor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc9jofx6c.java:23)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ Set<Integer> factors = new HashSet<>();\n        for(int i = 1; i <= n; i++)\
    \ {\n            while(n % i == 0) {\n                factors.add(i);\n      \
    \          n /= i;\n            }\n        }\n        return factors.isEmpty()\
    \ ? n : factors.stream().max().getAsInt();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwerba00.java:18: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        return factors.isEmpty() ? n : factors.stream().max().getAsInt();\n\
    \                                                       ^\n  required: Comparator<?\
    \ super Integer>\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n  where T is a type-variable:\n    T extends Object\
    \ declared in interface Stream\n1 error\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n    \
    \        if (n % i == 0) {\n                while (n % i == 0) {\n           \
    \         maxFactor = i;\n                    n = n / i;\n                }\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0afq2vy.java:23)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for(int i = 2; i <= n/2; i++) {\n     \
    \       if(n%i == 0) {\n                largestPrimeFactor = i;\n            \
    \    break;\n            }\n        }\n        return largestPrimeFactor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xvzmdea.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n < 2) {\n            return n;\n        }\n        ArrayList<Integer> factors\
    \ = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n  \
    \          if (n % i == 0) {\n                factors.add(i);\n            }\n\
    \        }\n        if (factors.size() > 0) {\n            return factors.get(factors.size()\
    \ - 1);\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8we9opyg.java:26)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ly_t36s.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        int i = 2;\n        while (i < n) {\n \
    \           if (n % i == 0) {\n                largestPrimeFactor = i;\n     \
    \           break;\n            }\n            i += 2;\n        }\n        return\
    \ largestPrimeFactor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp33pcve4n.java:23)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2z97d8bv.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if(n%i == 0) {\n                largestPrimeFactor = i;\n   \
    \             break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo511y5r7.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        int largestPrimeFactor =\
    \ 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i\
    \ == 0) {\n                factors.add(i);\n                if (i > largestPrimeFactor)\
    \ {\n                    largestPrimeFactor = i;\n                }\n        \
    \    }\n        }\n        return largestPrimeFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ivurtp5.java:24)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                factors.add(i);\n   \
    \         }\n        }\n        Collections.sort(factors);\n        return factors.get(factors.size()\
    \ - 1);\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnbtif90v.java:21)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n < 2) {\n            return n;\n        }\n        int i = 2;\n       \
    \ while (i <= n / i) {\n            if (n % i == 0) {\n                n = n /\
    \ i;\n                return i;\n            }\n            i++;\n        }\n\
    \        return n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa12eego3.java:25)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        int i = 2;\n        while (i <= Math.sqrt(n)) {\n\
    \            if (n % i == 0) {\n                maxFactor = i;\n             \
    \   break;\n            }\n            i++;\n        }\n        return maxFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppw94ln2m.java:23)\n"
  stdout: ''
  timestamp: 1660011785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tb0a66h.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        int i = 2;\n        while (i <= Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzd2ktkzy.java:23)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n / 2) {\n     \
    \       if (n % i == 0) {\n                maxFactor = i;\n            }\n   \
    \         i++;\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lc0b6ti.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                while (n % i == 0) {\n         \
    \           largestPrimeFactor = i;\n                    n = n / i;\n        \
    \        }\n            }\n        }\n        return largestPrimeFactor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxqebcgo7.java:23)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n < 2) return n;\n        int largestPrimeFactor = n;\n        for (int\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n          \
    \      largestPrimeFactor = i;\n                break;\n            }\n      \
    \  }\n        return largestPrimeFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxgmoti5_.java:22)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n / 2) {\n     \
    \       if (n % i == 0) {\n                maxFactor = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n            i++;\n        }\n        return maxFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0zbjqx5k.java:25)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8gshkxa.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ List<Integer> factors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if(n%i == 0) {\n                factors.add(i);\n      \
    \          n = n/i;\n            }\n        }\n        return factors.stream().max().getAsInt();\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ebfa3m.java:18: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        return factors.stream().max().getAsInt();\n\
    \                               ^\n  required: Comparator<? super Integer>\n \
    \ found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n1 error\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ if (n == 1) {\n            return 1;\n        }\n        int largestPrimeFactor\
    \ = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_fw4udyg.java:24)\n"
  stdout: ''
  timestamp: 1660011786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = n;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n     \
    \       if(n%i == 0) {\n                maxFactor = i;\n                break;\n\
    \            }\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47up2g1a.java:21)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int maxFactor = 0;\n        int i = 2;\n        while (i <= n / 2) {\n     \
    \       if (n % i == 0) {\n                maxFactor = i;\n            }\n   \
    \         i++;\n        }\n        return maxFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lc0b6ti.java:23)\n"
  stdout: ''
  timestamp: 1660011784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    public static int largestPrimeFactor(int n) {\n       \
    \ int largestPrimeFactor = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ly_t36s.java:21)\n"
  stdout: ''
  timestamp: 1660011784
