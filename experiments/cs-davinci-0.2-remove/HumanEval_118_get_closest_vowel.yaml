name: HumanEval_118_get_closest_vowel
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    public static string GetClosestVowel(string word) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
  yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
  u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
  most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
  i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  Above\")).Equals((\"o\")));\n    }\n\n}\n"
completions: ["        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // Your code goes here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // Write your\
    \ code here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // Write your\
    \ code here\n        return \"\";", "        // Write your code here\n       \
    \ return \"\";", "        // Write your code here\n        return \"\";", "  \
    \      // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Your code here\n        return null;",
  "        // Your code here\n        return \"\";", "        // your code goes here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // your code here\n        return \"\";", "        // your code goes here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // TODO: Implement\
    \ your solution here.\n        return \"\";", "        // your code here\n   \
    \     return \"\";", "        // Your code here\n        return \"\";", "    \
    \    var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result\
    \ = new List<char>();\n        for (int i = word.Length - 1; i >= 0; i--) {\n\
    \            if (vowels.Contains(word[i])) {\n                result.Add(word[i]);\n\
    \            } else if (consonants.Contains(word[i])) {\n                if (result.Count\
    \ > 0) {\n                    return result.Last().ToString();\n             \
    \   }\n            }\n        }\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // Write your code here\n       \
    \ return \"\";", "        // Your code here\n        return \"\";", "        //\
    \ Your code here\n        return \"\";", "        // Your code goes here\n   \
    \     return \"\";", "        // TODO: Implement this method\n        return \"\
    \";", "        // TODO: Implement your solution here\n        return \"\";", " \
    \       // your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        var\
    \ vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants\
    \ = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result = \"\
    \";\n        var lastConsonant = -1;\n        for (var i = word.Length - 1; i\
    \ >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n                if\
    \ (lastConsonant != -1) {\n                    result = word[i].ToString();\n\
    \                    break;\n                }\n            } else if (consonants.Contains(word[i]))\
    \ {\n                lastConsonant = i;\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return \"\";", "       \
    \ // TODO: Implement this method\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ Your code here\n        return \"\";", "        // Your code goes here\n   \
    \     return \"\";", "        // Your code goes here\n        return \"\";", " \
    \       // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // Your code here\n        return \"\";", "      \
    \  // Write your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Write your code\
    \ here\n        return \"\";", "        // Write your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ Your code goes here\n        return \"\";", "        // Your code here\n   \
    \     return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // your code goes here\n        return \"\";", "        // Write your code\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // Write your code here\n        return \"\";", "        // TODO:\
    \ Implement\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n\
    \        var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var result = \"\";\n        var lastConsonant = -1;\n        for (var i\
    \ = word.Length - 1; i >= 0; i--) {\n            if (consonants.Contains(word[i]))\
    \ {\n                lastConsonant = i;\n                break;\n            }\n\
    \        }\n        if (lastConsonant == -1) return result;\n        for (var\
    \ i = lastConsonant - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                result = word[i].ToString();\n                break;\n  \
    \          }\n        }\n        return result;", "        // Your code goes here\n\
    \        return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // your code goes here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ TODO: Implement this method\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // TODO: Implement this method.\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ TODO: Implement this method\n        return \"\";", "        // TODO: Implement\
    \ this method\n        return \"\";", "        int i = word.Length - 1;\n    \
    \    while (i >= 0 && !IsVowel(word[i])) {\n            i--;\n        }\n    \
    \    if (i < 0) {\n            return \"\";\n        }\n        int j = i - 1;\n\
    \        while (j >= 0 && IsVowel(word[j])) {\n            j--;\n        }\n \
    \       if (j < 0) {\n            return \"\";\n        }\n        return word[i].ToString();",
  "        // Write your code here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // TODO: Implement this function\n        return \"\";", "      \
    \  // TODO: Implement this method\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // TODO: Implement this method\n        return null;", "  \
    \      // Your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Write your code here\n        return \"\";", "        // Your code\
    \ here\n        return \"\";", "        var vowels = new HashSet<char> { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        var result = new List<char>();\n        for (int i\
    \ = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                result.Add(word[i]);\n            } else if (consonants.Contains(word[i]))\
    \ {\n                if (result.Count > 0) {\n                    return result.Last().ToString();\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ // Write your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // your code here\n        return \"\";", " \
    \       // TODO\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ Your code goes here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // TODO: Implement\
    \ this method\n        return \"\";", "        // Write your code here\n     \
    \   return \"\";", "        // Your code here\n        return \"\";", "      \
    \  // TODO: Implement this method\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ TODO: Implement your solution here\n        return \"\";", "        // Write\
    \ your code here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ Your code goes here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // TODO: Implement this method\n     \
    \   //throw new NotImplementedException();\n        string vowels = \"aeiou\"\
    ;\n        int index = -1;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                index = i;\n\
    \                break;\n            }\n        }\n        if (index == -1) {\n\
    \            return \"\";\n        }\n        int min = word.Length;\n       \
    \ int minIndex = -1;\n        for (int i = index - 1; i >= 0; i--) {\n       \
    \     if (!vowels.Contains(word[i])) {\n                if (index - i < min) {\n\
    \                    min = index - i;\n                    minIndex = i;\n   \
    \             }\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return \"\";\n        }\n        return word[index].ToString();", " \
    \       // Your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        // TODO: Implement this method\n        return \"\";", "  \
    \      int i = word.Length - 1;\n        while (i >= 0 && !IsVowel(word[i])) {\n\
    \            i--;\n        }\n        if (i < 0) {\n            return \"\";\n\
    \        }\n        int j = i - 1;\n        while (j >= 0 && IsVowel(word[j]))\
    \ {\n            j--;\n        }\n        if (j < 0) {\n            return \"\"\
    ;\n        }\n        return word[i].ToString();", "        // Your code goes\
    \ here\n        return \"\";", "        if (word.Length < 3) return \"\";\n  \
    \      int i = word.Length - 1;\n        while (i > 0 && !IsVowel(word[i])) i--;\n\
    \        if (i == 0) return \"\";\n        int j = i - 1;\n        while (j >\
    \ 0 && IsVowel(word[j])) j--;\n        if (j == 0) return \"\";\n        return\
    \ word[i].ToString();", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // Your code goes here\n        return \"\";", " \
    \       // Your code goes here.\n        return \"\";", "        // Write your\
    \ code here\n        return \"\";", "        // TODO: Implement this method\n\
    \        //throw new NotImplementedException();\n        string vowels = \"aeiou\"\
    ;\n        int len = word.Length;\n        int i = len - 1;\n        while (i\
    \ >= 0) {\n            if (vowels.Contains(word[i])) {\n                if (i\
    \ == len - 1) {\n                    return \"\";\n                }\n       \
    \         else if (i == 0) {\n                    return \"\";\n             \
    \   }\n                else if (vowels.Contains(word[i - 1]) || vowels.Contains(word[i\
    \ + 1])) {\n                    i--;\n                }\n                else\
    \ {\n                    return word[i].ToString();\n                }\n     \
    \       }\n            else {\n                i--;\n            }\n        }\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // TODO: Implement this method\n        return \"\";", "        // Write\
    \ your code here\n        return \"\";", "        // Write your code here\n  \
    \      return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n\
    \        var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var result = \"\";\n        var lastConsonant = -1;\n        for (var i\
    \ = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (lastConsonant != -1) {\n                    result =\
    \ word[i].ToString();\n                    break;\n                }\n       \
    \     } else if (consonants.Contains(word[i])) {\n                lastConsonant\
    \ = i;\n            }\n        }\n        return result;", "        // Write your\
    \ code here\n        return \"\";", "        var vowels = new HashSet<char> {\
    \ 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var closestVowel = ' ';\n        var closestVowelIndex\
    \ = -1;\n        var closestConsonantIndex = -1;\n        for (var i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       closestVowel = word[i];\n                closestVowelIndex = i;\n    \
    \            if (closestConsonantIndex != -1) {\n                    break;\n\
    \                }\n            } else if (consonants.Contains(word[i])) {\n \
    \               closestConsonantIndex = i;\n                if (closestVowelIndex\
    \ != -1) {\n                    break;\n                }\n            }\n   \
    \     }\n        return closestVowelIndex > closestConsonantIndex ? closestVowel.ToString()\
    \ : \"\";", "        // TODO: Implement this method\n        return \"\";", " \
    \       // TODO: Implement this method\n        return \"\";", "        // Write\
    \ your code here\n        return \"\";", "        // Your code goes here\n   \
    \     return null;", "        // your code here\n        return \"\";", "    \
    \    var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var closestVowel\
    \ = ' ';\n        var closestVowelIndex = -1;\n        var closestConsonantIndex\
    \ = -1;\n        for (var i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                if (closestVowelIndex == -1) {\n\
    \                    closestVowelIndex = i;\n                    closestVowel\
    \ = word[i];\n                }\n            } else if (consonants.Contains(word[i]))\
    \ {\n                if (closestVowelIndex != -1 && closestConsonantIndex == -1)\
    \ {\n                    closestConsonantIndex = i;\n                    break;\n\
    \                }\n            }\n        }\n        if (closestVowelIndex ==\
    \ -1 || closestConsonantIndex == -1) {\n            return \"\";\n        }\n\
    \        return closestVowel.ToString();", "        // Your code here\n      \
    \  return \"\";", "        // TODO: Implement this method\n        return \"\"\
    ;", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n   \
    \     var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var closestVowel = \"\";\n        var closestDistance = int.MaxValue;\n\
    \        for (var i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                var distance = 0;\n                for (var j = i + 1; j\
    \ < word.Length; j++) {\n                    if (consonants.Contains(word[j]))\
    \ {\n                        distance = j - i;\n                        break;\n\
    \                    }\n                }\n                if (distance < closestDistance)\
    \ {\n                    closestDistance = distance;\n                    closestVowel\
    \ = word[i].ToString();\n                }\n            }\n        }\n       \
    \ return closestVowel;", "        // Write your code here\n        return \"\"\
    ;", "        // TODO: Implement this method\n        return \"\";", "        //\
    \ Write your code here\n        return \"\";", "        // your code here\n  \
    \      return \"\";", "        // Write your code here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Your code goes here.\n        return\
    \ \"\";", "        // TODO: Implement this method\n        return \"\";", "  \
    \      // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Write your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ Write your code here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        int i = word.Length - 1;\n        while (i >=\
    \ 0 && !IsVowel(word[i])) {\n            i--;\n        }\n        if (i < 0) {\n\
    \            return \"\";\n        }\n        int j = i - 1;\n        while (j\
    \ >= 0 && IsVowel(word[j])) {\n            j--;\n        }\n        if (j < 0)\
    \ {\n            return \"\";\n        }\n        return word[i].ToString();",
  "        // your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Write your code here\n        return \"\";", "        int i = word.Length\
    \ - 1;\n        while (i >= 0 && !IsVowel(word[i])) {\n            i--;\n    \
    \    }\n        if (i < 0) {\n            return \"\";\n        }\n        int\
    \ j = i - 1;\n        while (j >= 0 && IsVowel(word[j])) {\n            j--;\n\
    \        }\n        if (j < 0) {\n            return \"\";\n        }\n      \
    \  return word[i].ToString();", "        // Write your code here\n        return\
    \ \"\";", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n\
    \        var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var closestVowel = string.Empty;\n        var closestVowelDistance = int.MaxValue;\n\
    \        for (var i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                var leftConsonant = i > 0 && consonants.Contains(word[i -\
    \ 1]);\n                var rightConsonant = i < word.Length - 1 && consonants.Contains(word[i\
    \ + 1]);\n                if (leftConsonant && rightConsonant) {\n           \
    \         var distance = i - word.LastIndexOfAny(consonants.ToArray(), i - 1)\
    \ - 1;\n                    if (distance < closestVowelDistance) {\n         \
    \               closestVowelDistance = distance;\n                        closestVowel\
    \ = word[i].ToString();\n                    }\n                }\n          \
    \  }\n        }\n        return closestVowel;", "        // Your code here\n \
    \       return \"\";", "        // your code here\n        return \"\";", "  \
    \      // Your code goes here\n        return \"\";", "        // Write your code\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // Write your code here\n        return \"\";", "        // Your\
    \ code goes here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        // TODO: Implement this method\n        return \"\";", "  \
    \      // Write your code here\n        return \"\";"]
stop_tokens:
- "\n    }\n"
