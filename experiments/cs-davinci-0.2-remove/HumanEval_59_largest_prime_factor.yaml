name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long largest = 0;\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     while (n % i == 0) {\n                    n /= i;\n                }\n \
    \           }\n        }\n        if (n > 1) {\n            largest = n;\n   \
    \     }\n        return largest;", "        long p = 2;\n        while (n % p\
    \ == 0) {\n            n /= p;\n        }\n        p = 3;\n        while (n >\
    \ 1) {\n            while (n % p == 0) {\n                n /= p;\n          \
    \  }\n            p += 2;\n        }\n        return p - 2;", "        long factor\
    \ = 2;\n        while (n % factor != 0) {\n            factor++;\n        }\n\
    \        if (n == factor) {\n            return n;\n        }\n        return\
    \ LargestPrimeFactor(n / factor);", "        long largest = 1;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largest = n;\n        }\n        return largest;", "        long largest = 0;\n\
    \        while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n\
    \        }\n        for (long i = 3; i * i <= n; i += 2) {\n            while\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \        }\n        }\n        if (n > 2) {\n            largest = n;\n      \
    \  }\n        return largest;", "        long largest = 1;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largest = n;\n        }\n        return largest;", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i--;\n   \
    \         }\n        }\n        return largest;", "        long largest = 0;\n\
    \        long d = 2;\n        while (n > 1) {\n            while (n % d == 0)\
    \ {\n                largest = d;\n                n /= d;\n            }\n  \
    \          d++;\n        }\n        return largest;", "        long largest =\
    \ 1;\n        while (n % 2 == 0) {\n            largest = 2;\n            n /=\
    \ 2;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n            while\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \        }\n        }\n        if (n > 1) {\n            largest = n;\n      \
    \  }\n        return largest;", "        long largest = 0;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largest = n;\n        }\n        return largest;", "        long largest = 0;\n\
    \        long factor = 2;\n        while (n > 1) {\n            if (n % factor\
    \ == 0) {\n                largest = factor;\n                while (n % factor\
    \ == 0) {\n                    n /= factor;\n                }\n            }\n\
    \            factor++;\n        }\n        return largest;", "        long largest\
    \ = 0;\n        while (n % 2 == 0) {\n            largest = 2;\n            n\
    \ /= 2;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n         \
    \   while (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \            }\n        }\n        if (n > 2) {\n            largest = n;\n  \
    \      }\n        return largest;", "        long factor = 2;\n        while (n\
    \ % factor != 0) {\n            factor++;\n        }\n        if (n == factor)\
    \ {\n            return n;\n        }\n        return LargestPrimeFactor(n / factor);",
  "        long largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 0;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor++;\n        }\n        return\
    \ largest;", "        long largestPrimeFactor = 1;\n        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ largestPrimeFactor = factor;\n                n /= factor;\n               \
    \ while (n % factor == 0) {\n                    n /= factor;\n              \
    \  }\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n      \
    \  }\n        p = 3;\n        while (n > 1) {\n            while (n % p == 0)\
    \ {\n                n /= p;\n            }\n            p += 2;\n        }\n\
    \        return p - 2;", "        long largest = 2;\n        while (n % 2 == 0)\
    \ {\n            n /= 2;\n        }\n        long factor = 3;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 2;\n        }\n     \
    \   return largest;", "        long largest = 0;\n        long factor = 2;\n \
    \       while (n > 1) {\n            while (n % factor == 0) {\n             \
    \   largest = factor;\n                n /= factor;\n            }\n         \
    \   factor++;\n        }\n        return largest;", "        long p = 2;\n   \
    \     while (n % p == 0) {\n            n /= p;\n        }\n        p = 3;\n \
    \       while (n > 1) {\n            while (n % p == 0) {\n                n /=\
    \ p;\n            }\n            p += 2;\n        }\n        return p - 2;", " \
    \       long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0)\n                    n /= i;\n            }\n        }\n      \
    \  if (n > 1)\n            largest = n;\n        return largest;", "        long\
    \ largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                while (n % i == 0) {\n            \
    \        n /= i;\n                }\n            }\n        }\n        if (n >\
    \ 1) {\n            largest = n;\n        }\n        return largest;", "     \
    \   long largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \            i--;\n            }\n        }\n        return largest;", "     \
    \   long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                while (n\
    \ % i == 0) {\n                    n /= i;\n                }\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;", "        long p = 2;\n        while (n % p == 0) {\n    \
    \        n /= p;\n        }\n        p = 3;\n        while (n > 1) {\n       \
    \     while (n % p == 0) {\n                n /= p;\n            }\n         \
    \   p += 2;\n        }\n        return p - 2;", "        long largest = 0;\n \
    \       for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n \
    \               largest = i;\n                while (n % i == 0) {\n         \
    \           n /= i;\n                }\n            }\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;", "   \
    \     long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return n;", "        long p = 2;\n        while (n\
    \ % p == 0) {\n            n /= p;\n        }\n        p = 3;\n        while (n\
    \ > 1) {\n            while (n % p == 0) {\n                n /= p;\n        \
    \    }\n            p += 2;\n        }\n        return p - 2;", "        long\
    \ largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                largest = i;\n                while (n % i == 0)\
    \ {\n                    n /= i;\n                }\n            }\n        }\n\
    \        if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long factor = 2;\n        while (n > 1) {\n            if\
    \ (n % factor == 0) {\n                n /= factor;\n            } else {\n  \
    \              factor++;\n            }\n        }\n        return factor;", " \
    \       long largest = 0;\n        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                largest = factor;\n     \
    \           n /= factor;\n                while (n % factor == 0) {\n        \
    \            n /= factor;\n                }\n            }\n            factor++;\n\
    \        }\n        return largest;", "        long largest = 0;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n \
    \               largest = factor;\n                while (n % factor == 0) {\n\
    \                    n /= factor;\n                }\n            }\n        \
    \    factor++;\n        }\n        return largest;", "        long i = 2;\n  \
    \      while (i * i <= n) {\n            if (n % i == 0) {\n                n\
    \ /= i;\n            } else {\n                i++;\n            }\n        }\n\
    \        return n;", "        long largest = 1;\n        while (n % 2 == 0) {\n\
    \            largest = 2;\n            n /= 2;\n        }\n        long p = 3;\n\
    \        while (p * p <= n) {\n            if (n % p == 0) {\n               \
    \ largest = p;\n                n /= p;\n            } else {\n              \
    \  p += 2;\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                largest = factor;\n                n /= factor;\n \
    \           }\n            factor++;\n        }\n        return largest;", " \
    \       long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long p = 2;\n        while (n % p == 0) {\n\
    \            n /= p;\n        }\n        p = 3;\n        while (n > 1) {\n   \
    \         while (n % p == 0) {\n                n /= p;\n            }\n     \
    \       p += 2;\n        }\n        return p - 2;", "        long factor = 2;\n\
    \        while (n % factor != 0) {\n            factor++;\n        }\n       \
    \ return factor;", "        long p = 2;\n        while (n % p == 0) {\n      \
    \      n /= p;\n        }\n        p = 3;\n        while (n > 1) {\n         \
    \   while (n % p == 0) {\n                n /= p;\n            }\n           \
    \ p += 2;\n        }\n        return p - 2;", "        long largest = 1;\n   \
    \     for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n   \
    \             largest = i;\n                while (n % i == 0) {\n           \
    \         n /= i;\n                }\n            }\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;", "   \
    \     long largest = 0;\n        long d = 2;\n        while (n > 1) {\n      \
    \      if (n % d == 0) {\n                largest = d;\n                while\
    \ (n % d == 0) {\n                    n /= d;\n                }\n           \
    \ }\n            d++;\n        }\n        return largest;", "        long largest\
    \ = 1;\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                largest = factor;\n                n /= factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor++;\n        }\n        return\
    \ largest;", "        long factor = 2;\n        while (n % factor != 0) {\n  \
    \          factor++;\n        }\n        return factor;", "        // TODO: Implement\
    \ this method.\n        long largestPrimeFactor = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;", "        long largest = 0;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                while (n % i == 0) {\n                   \
    \ n /= i;\n                }\n            }\n        }\n        return largest;",
  "        long largest = 0;\n        while (n % 2 == 0) {\n            largest =\
    \ 2;\n            n /= 2;\n        }\n        long i = 3;\n        while (i *\
    \ i <= n) {\n            if (n % i == 0) {\n                largest = i;\n   \
    \             n /= i;\n            } else {\n                i += 2;\n       \
    \     }\n        }\n        if (n > largest) {\n            largest = n;\n   \
    \     }\n        return largest;", "        long i = 2;\n        while (i * i\
    \ <= n) {\n            if (n % i == 0) {\n                n /= i;\n          \
    \  } else {\n                i++;\n            }\n        }\n        return n;",
  "        long largest = 0;\n        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                largest = factor;\n     \
    \           while (n % factor == 0) {\n                    n /= factor;\n    \
    \            }\n            }\n            factor++;\n        }\n        return\
    \ largest;", "        long largest = 1;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 1;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n \
    \               largest = factor;\n                while (n % factor == 0) {\n\
    \                    n /= factor;\n                }\n            }\n        \
    \    factor++;\n        }\n        return largest;", "        long factor = 2;\n\
    \        while (n % factor != 0) {\n            factor++;\n        }\n       \
    \ return factor;", "        long largest = 1;\n        while (n % 2 == 0) {\n\
    \            largest = 2;\n            n /= 2;\n        }\n        for (long i\
    \ = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n             \
    \   largest = i;\n                n /= i;\n            }\n        }\n        if\
    \ (n > 1) {\n            largest = n;\n        }\n        return largest;", " \
    \       long largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 1;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long factor = 2;\n        while\
    \ (n % factor != 0) {\n            factor++;\n        }\n        if (n == factor)\
    \ {\n            return n;\n        }\n        return LargestPrimeFactor(n / factor);",
  "        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n      \
    \  }\n        p = 3;\n        while (n > 1) {\n            while (n % p == 0)\
    \ {\n                n /= p;\n            }\n            p += 2;\n        }\n\
    \        return p - 2;", "        long largest = 1;\n        long p = 2;\n   \
    \     while (p * p <= n) {\n            if (n % p == 0) {\n                largest\
    \ = p;\n                while (n % p == 0) {\n                    n /= p;\n  \
    \              }\n            }\n            p++;\n        }\n        if (n >\
    \ 1) {\n            largest = n;\n        }\n        return largest;", "     \
    \   long largestPrimeFactor = 1;\n        long p = 2;\n        while (p * p <=\
    \ n) {\n            if (n % p == 0) {\n                largestPrimeFactor = p;\n\
    \                while (n % p == 0) {\n                    n /= p;\n         \
    \       }\n            }\n            p++;\n        }\n        if (n > 1) {\n\
    \            largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;",
  "        long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return factor;", "        long largest = 1;\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                while (n % i == 0) {\n        \
    \            n /= i;\n                }\n            }\n        }\n        if\
    \ (n > 1) {\n            largest = n;\n        }\n        return largest;", " \
    \       long largest = 0;\n        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                largest = factor;\n     \
    \           while (n % factor == 0) {\n                    n /= factor;\n    \
    \            }\n            }\n            factor++;\n        }\n        return\
    \ largest;", "        long largest = 1;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 0;\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                while (n % i == 0) {\n                   \
    \ n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n\
    \            largest = n;\n        }\n        return largest;", "        long\
    \ p = 2;\n        while (n % p == 0) {\n            n /= p;\n        }\n     \
    \   p = 3;\n        long sqrt = (long)Math.Sqrt(n);\n        while (n > 1 && p\
    \ <= sqrt) {\n            if (n % p == 0) {\n                n /= p;\n       \
    \         sqrt = (long)Math.Sqrt(n);\n            } else {\n                p\
    \ += 2;\n            }\n        }\n        if (n == 1) {\n            return p;\n\
    \        } else {\n            return n;\n        }", "        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ n /= factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return factor;", "        long largest = 0;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largest = n;\n        }\n        return largest;", "        long factor = 2;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ factor - 1;", "        long largest = 1;\n        for (long i = 2; i * i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                largest = i;\n   \
    \             while (n % i == 0) {\n                    n /= i;\n            \
    \    }\n            }\n        }\n        if (n > 1) {\n            largest =\
    \ n;\n        }\n        return largest;", "        long p = 2;\n        while\
    \ (n % p == 0) {\n            n /= p;\n        }\n        p = 3;\n        while\
    \ (n > 1) {\n            while (n % p == 0) {\n                n /= p;\n     \
    \       }\n            p += 2;\n        }\n        return p - 2;", "        long\
    \ largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                largest = i;\n                while (n % i == 0)\
    \ {\n                    n /= i;\n                }\n            }\n        }\n\
    \        if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0)\
    \ {\n                n /= p;\n            } else {\n                p++;\n   \
    \         }\n        }\n        return n;", "        long largestPrimeFactor =\
    \ 1;\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                largestPrimeFactor = factor;\n           \
    \     n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;", "        long largestPrimeFactor = 1;\n        long factor\
    \ = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           largestPrimeFactor = factor;\n                n /= factor;\n     \
    \       }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 1;\n        long i = 2;\n   \
    \     while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        if (n > 1) {\n            largest = n;\n  \
    \      }\n        return largest;", "        long p = 2;\n        while (n % p\
    \ == 0)\n            n /= p;\n        p = 3;\n        while (n > 1) {\n      \
    \      while (n % p == 0)\n                n /= p;\n            p += 2;\n    \
    \    }\n        return p - 2;", "        long largest = 1;\n        while (n %\
    \ 2 == 0) {\n            largest = 2;\n            n /= 2;\n        }\n      \
    \  for (long i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n            }\n      \
    \  }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long factor = 2;\n        while (n % factor != 0) {\n  \
    \          factor++;\n        }\n        return factor;", "        long largest\
    \ = 0;\n        long p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                largest = p;\n                n /= p;\n              \
    \  while (n % p == 0) {\n                    n /= p;\n                }\n    \
    \        }\n            p++;\n        }\n        return largest;", "        long\
    \ largestPrimeFactor = 1;\n        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \                n /= factor;\n                while (n % factor == 0) {\n   \
    \                 n /= factor;\n                }\n            }\n           \
    \ factor++;\n        }\n        return largestPrimeFactor;", "        long largest\
    \ = 0;\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                largest = i;\n                n /= i;\n         \
    \   } else {\n                i++;\n            }\n        }\n        return Math.Max(largest,\
    \ n);", "        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;", "        long factor = 2;\n        while (n > 1)\
    \ {\n            if (n % factor == 0) {\n                n /= factor;\n      \
    \      } else {\n                factor++;\n            }\n        }\n       \
    \ return factor;", "        long largest = 0;\n        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n\
    \        return largest;", "        long largest = 1;\n        long i = 2;\n \
    \       while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return Math.Max(largest, n);", "        long\
    \ largest = 1;\n        while (n % 2 == 0) {\n            largest = 2;\n     \
    \       n /= 2;\n        }\n        long p = 3;\n        while (p * p <= n) {\n\
    \            if (n % p == 0) {\n                largest = p;\n               \
    \ n /= p;\n            } else {\n                p += 2;\n            }\n    \
    \    }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 1;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 1;\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                while (n % i == 0) {\n                   \
    \ n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n\
    \            largest = n;\n        }\n        return largest;", "        long\
    \ p = 2;\n        while (n % p == 0) {\n            n /= p;\n        }\n     \
    \   p = 3;\n        long max = (long)Math.Sqrt(n);\n        while (n > 1 && p\
    \ <= max) {\n            while (n % p == 0) {\n                n /= p;\n     \
    \       }\n            p += 2;\n        }\n        if (n == 1) {\n           \
    \ return p - 2;\n        } else {\n            return n;\n        }", "      \
    \  long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                while (n %\
    \ i == 0) {\n                    n /= i;\n                }\n            }\n \
    \       }\n        if (n > 1) {\n            largest = n;\n        }\n       \
    \ return largest;", "        long factor = 2;\n        while (n > 1) {\n     \
    \       if (n % factor == 0) {\n                n /= factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return factor;",
  "        long factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
    \        }\n        return factor;", "        long largest = 0;\n        long\
    \ i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                n /= i;\n            } else {\n     \
    \           i++;\n            }\n        }\n        if (n > 1) {\n           \
    \ largest = n;\n        }\n        return largest;", "        long largestPrimeFactor\
    \ = 1;\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                largestPrimeFactor = factor;\n           \
    \     n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 0;\n        for (long i = 2; i\
    \ * i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    long d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n\
    \                largest = d;\n                n /= d;\n            }\n      \
    \      d++;\n        }\n        return largest;", "        long factor = 2;\n\
    \        while (n % factor != 0) {\n            factor++;\n        }\n       \
    \ return factor;", "        long factor = 2;\n        while (n % factor != 0)\
    \ {\n            factor++;\n        }\n        if (factor == n) {\n          \
    \  return n;\n        }\n        return LargestPrimeFactor(n / factor);", "  \
    \      long largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 1;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 0;\n        long\
    \ i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                n /= i;\n            } else {\n     \
    \           i++;\n            }\n        }\n        return Math.Max(largest, n);",
  "        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 1;\n        long i = 2;\n   \
    \     while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n            i++;\n        }\n        if (n >\
    \ 1) {\n            largest = n;\n        }\n        return largest;", "     \
    \   long largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n   \
    \         if (n % i == 0) {\n                largest = i;\n                n /=\
    \ i;\n            } else {\n                i++;\n            }\n        }\n \
    \       if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 1;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 0;\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                while (n % i == 0) {\n                   \
    \ n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n\
    \            largest = n;\n        }\n        return largest;", "        long\
    \ largest = 0;\n        while (n % 2 == 0) {\n            largest = 2;\n     \
    \       n /= 2;\n        }\n        long p = 3;\n        while (p * p <= n) {\n\
    \            if (n % p == 0) {\n                largest = p;\n               \
    \ n /= p;\n            } else {\n                p += 2;\n            }\n    \
    \    }\n        if (n > largest) {\n            largest = n;\n        }\n    \
    \    return largest;", "        long largest = 0;\n        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ largest = factor;\n                n /= factor;\n                while (n %\
    \ factor == 0) {\n                    n /= factor;\n                }\n      \
    \      }\n            factor++;\n        }\n        return largest;", "      \
    \  long largest = 1;\n        long i = 2;\n        while (i * i <= n) {\n    \
    \        if (n % i == 0) {\n                largest = i;\n                n /=\
    \ i;\n            } else {\n                i++;\n            }\n        }\n \
    \       if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long max = 0;\n        for (long i = 2; i *\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n  \
    \              while (n % i == 0) {\n                    n /= i;\n           \
    \     }\n            }\n        }\n        if (n > 1) {\n            max = n;\n\
    \        }\n        return max;", "        long largestPrimeFactor = 1;\n    \
    \    long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                largestPrimeFactor = factor;\n                n /= factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 1;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        return largest;", "        long largest\
    \ = 1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i ==\
    \ 0) {\n                largest = i;\n                while (n % i == 0) {\n \
    \                   n /= i;\n                }\n            }\n        }\n   \
    \     if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 1;\n        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                largest = factor;\n     \
    \           n /= factor;\n                while (n % factor == 0) {\n        \
    \            n /= factor;\n                }\n            }\n            factor++;\n\
    \        }\n        return largest;", "        long largest = 1;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n \
    \               largest = factor;\n                while (n % factor == 0) {\n\
    \                    n /= factor;\n                }\n            }\n        \
    \    factor++;\n        }\n        return largest;", "        long factor = 2;\n\
    \        while (n % factor != 0) {\n            factor++;\n        }\n       \
    \ return factor;", "        long largest = 1;\n        for (long i = 2; i * i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                while (n % i == 0) {\n            \
    \        n /= i;\n                }\n            }\n        }\n        if (n >\
    \ 1) {\n            largest = n;\n        }\n        return largest;", "     \
    \   long largestPrimeFactor = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            while (n % i == 0) {\n                    n /= i;\n             \
    \   }\n            }\n        }\n        if (n > 1) {\n            largestPrimeFactor\
    \ = n;\n        }\n        return largestPrimeFactor;", "        long largest\
    \ = 1;\n        long d = 2;\n        while (n > 1) {\n            while (n % d\
    \ == 0) {\n                largest = d;\n                n /= d;\n           \
    \ }\n            d++;\n        }\n        return largest;", "        long factor\
    \ = 2;\n        while (n % factor != 0) {\n            factor++;\n        }\n\
    \        if (n == factor) {\n            return n;\n        }\n        return\
    \ LargestPrimeFactor(n / factor);", "        long factor = 2;\n        while (n\
    \ % factor != 0) {\n            factor++;\n        }\n        return factor;",
  "        long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return factor;", "        long largest = 1;\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                while (n % i == 0) {\n        \
    \            n /= i;\n                }\n            }\n        }\n        if\
    \ (n > 1) {\n            largest = n;\n        }\n        return largest;", " \
    \       long largest = 0;\n        long p = 2;\n        while (n > 1) {\n    \
    \        if (n % p == 0) {\n                largest = p;\n                n /=\
    \ p;\n                while (n % p == 0) {\n                    n /= p;\n    \
    \            }\n            }\n            p++;\n        }\n        return largest;",
  "        long largest = 1;\n        while (n % 2 == 0) {\n            largest =\
    \ 2;\n            n /= 2;\n        }\n        for (long i = 3; i * i <= n; i +=\
    \ 2) {\n            while (n % i == 0) {\n                largest = i;\n     \
    \           n /= i;\n            }\n        }\n        if (n > 1) {\n        \
    \    largest = n;\n        }\n        return largest;", "        long largest\
    \ = 1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i ==\
    \ 0) {\n                largest = i;\n                while (n % i == 0) {\n \
    \                   n /= i;\n                }\n            }\n        }\n   \
    \     if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long factor = 2;\n      \
    \  while (n > 1) {\n            if (n % factor == 0) {\n                n /= factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return factor;", "        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                n /= factor;\n          \
    \  } else {\n                factor++;\n            }\n        }\n        return\
    \ factor;", "        long largest = 0;\n        long i = 2;\n        while (i\
    \ * i <= n) {\n            if (n % i == 0) {\n                largest = i;\n \
    \               n /= i;\n            } else {\n                i++;\n        \
    \    }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n\
    \        return largest;", "        long factor = 2;\n        while (n % factor\
    \ != 0) {\n            factor++;\n        }\n        if (n == factor) {\n    \
    \        return n;\n        }\n        return LargestPrimeFactor(n / factor);",
  "        long largest = 1;\n        while (n % 2 == 0) {\n            largest =\
    \ 2;\n            n /= 2;\n        }\n        long p = 3;\n        while (p *\
    \ p <= n) {\n            if (n % p == 0) {\n                largest = p;\n   \
    \             n /= p;\n            } else {\n                p += 2;\n       \
    \     }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n\
    \        return largest;", "        long factor = 2;\n        while (n % factor\
    \ != 0) {\n            factor++;\n        }\n        return factor;", "      \
    \  long p = 2;\n        while (n % p == 0) {\n            n /= p;\n        }\n\
    \        p = 3;\n        while (n > 1) {\n            while (n % p == 0) {\n \
    \               n /= p;\n            }\n            p += 2;\n        }\n     \
    \   return p - 2;", "        long largest = 1;\n        long p = 2;\n        while\
    \ (n > 1) {\n            if (n % p == 0) {\n                largest = p;\n   \
    \             while (n % p == 0) {\n                    n /= p;\n            \
    \    }\n            }\n            p++;\n        }\n        return largest;",
  "        var factors = new List<long>();\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                factors.Add(i);\n        \
    \        while (n % i == 0) {\n                    n /= i;\n                }\n\
    \            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors.Max();", "        long largest = 1;\n     \
    \   for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           largest = i;\n                while (n % i == 0) {\n             \
    \       n /= i;\n                }\n            }\n        }\n        if (n >\
    \ 1) {\n            largest = n;\n        }\n        return largest;", "     \
    \   long largest = 1;\n        while (n % 2 == 0) {\n            largest = 2;\n\
    \            n /= 2;\n        }\n        long p = 3;\n        while (p * p <=\
    \ n) {\n            if (n % p == 0) {\n                largest = p;\n        \
    \        n /= p;\n            } else {\n                p += 2;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;", "        long largest = 1;\n        long d = 2;\n       \
    \ while (n > 1) {\n            if (n % d == 0) {\n                largest = d;\n\
    \                while (n % d == 0) {\n                    n /= d;\n         \
    \       }\n            }\n            d++;\n        }\n        return largest;",
  "        long factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
    \        }\n        if (n == factor) {\n            return n;\n        }\n   \
    \     return LargestPrimeFactor(n / factor);", "        long largest = 1;\n  \
    \      for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n  \
    \              largest = i;\n                while (n % i == 0) {\n          \
    \          n /= i;\n                }\n            }\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;", "   \
    \     long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                largest = i;\n                while (n\
    \ % i == 0) {\n                    n /= i;\n                }\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;", "        long largest = 1;\n        long factor = 2;\n  \
    \      while (n > 1) {\n            if (n % factor == 0) {\n                largest\
    \ = factor;\n                while (n % factor == 0) {\n                    n\
    \ /= factor;\n                }\n            }\n            factor++;\n      \
    \  }\n        return largest;", "        long largest = 0;\n        long i = 2;\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ largest = i;\n                n /= i;\n            } else {\n              \
    \  i++;\n            }\n        }\n        if (n > 1) {\n            largest =\
    \ n;\n        }\n        return largest;", "        long largestPrimeFactor =\
    \ 1;\n        long factor = 2;\n        while (n > 1) {\n            if (n % factor\
    \ == 0) {\n                largestPrimeFactor = factor;\n                n /=\
    \ factor;\n                while (n % factor == 0) {\n                    n /=\
    \ factor;\n                }\n            }\n            factor++;\n        }\n\
    \        return largestPrimeFactor;", "        long largest = 0;\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                while (n % i == 0) {\n                   \
    \ n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n\
    \            largest = n;\n        }\n        return largest;", "        long\
    \ largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                largest = i;\n                while (n % i == 0)\
    \ {\n                    n /= i;\n                }\n            }\n        }\n\
    \        if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 0;\n    \
    \    for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                while (n % i == 0) {\n            \
    \        n /= i;\n                }\n            }\n        }\n        if (n >\
    \ 1) {\n            largest = n;\n        }\n        return largest;", "     \
    \   long factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
    \        }\n        long nextFactor = factor + 1;\n        while (n % nextFactor\
    \ != 0) {\n            nextFactor++;\n        }\n        return Math.Max(factor,\
    \ LargestPrimeFactor(n / factor));", "        long largest = 1;\n        while\
    \ (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n        }\n \
    \       for (long i = 3; i * i <= n; i += 2) {\n            while (n % i == 0)\
    \ {\n                largest = i;\n                n /= i;\n            }\n  \
    \      }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 0;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 1;\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                while (n % i == 0) {\n                   \
    \ n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n\
    \            largest = n;\n        }\n        return largest;", "        long\
    \ largest = 0;\n        long d = 2;\n        while (n > 1) {\n            while\
    \ (n % d == 0) {\n                largest = d;\n                n /= d;\n    \
    \        }\n            d++;\n        }\n        return largest;", "        long\
    \ factor = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n \
    \               n /= factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return factor;", "        long largestPrimeFactor\
    \ = 1;\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                largestPrimeFactor = factor;\n             \
    \   while (n % factor == 0) {\n                    n /= factor;\n            \
    \    }\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
    \        }\n        long nextFactor = factor + 1;\n        while (n % nextFactor\
    \ != 0) {\n            nextFactor++;\n        }\n        return LargestPrimeFactor(n\
    \ / nextFactor);", "        long p = 2;\n        while (n % p == 0) {\n      \
    \      n /= p;\n        }\n        p = 3;\n        while (n > 1) {\n         \
    \   while (n % p == 0) {\n                n /= p;\n            }\n           \
    \ p += 2;\n        }\n        return p - 2;", "        long p = 2;\n        while\
    \ (n % p == 0) {\n            n /= p;\n        }\n        p = 3;\n        while\
    \ (n > 1) {\n            while (n % p == 0) {\n                n /= p;\n     \
    \       }\n            p += 2;\n        }\n        return p - 2;", "        long\
    \ largest = 0;\n        long factor = 2;\n        while (n > 1) {\n          \
    \  if (n % factor == 0) {\n                largest = factor;\n               \
    \ while (n % factor == 0) {\n                    n /= factor;\n              \
    \  }\n            }\n            factor++;\n        }\n        return largest;",
  "        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 0;\n        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ largest = factor;\n                while (n % factor == 0) {\n             \
    \       n /= factor;\n                }\n            }\n            factor++;\n\
    \        }\n        return largest;", "        long largest = 0;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n \
    \               largest = factor;\n                while (n % factor == 0) {\n\
    \                    n /= factor;\n                }\n            }\n        \
    \    factor++;\n        }\n        return largest;", "        long p = 2;\n  \
    \      while (n % p == 0) {\n            n /= p;\n        }\n        p = 3;\n\
    \        while (n > 1) {\n            while (n % p == 0) {\n                n\
    \ /= p;\n            }\n            p += 2;\n        }\n        return p - 2;",
  "        long largest = 0;\n        long p = 2;\n        while (n > 1) {\n     \
    \       if (n % p == 0) {\n                largest = p;\n                while\
    \ (n % p == 0) {\n                    n /= p;\n                }\n           \
    \ }\n            p++;\n        }\n        return largest;", "        long largest\
    \ = 1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i ==\
    \ 0) {\n                largest = i;\n                while (n % i == 0) {\n \
    \                   n /= i;\n                }\n            }\n        }\n   \
    \     if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 1;\n        long p = 2;\n        while (p * p <= n) {\n\
    \            if (n % p == 0) {\n                largest = p;\n               \
    \ while (n % p == 0) {\n                    n /= p;\n                }\n     \
    \       }\n            p++;\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n            } else {\n\
    \                i++;\n            }\n        }\n        if (n > 1) {\n      \
    \      largest = n;\n        }\n        return largest;", "        long largest\
    \ = 0;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i ==\
    \ 0) {\n                largest = i;\n                while (n % i == 0) {\n \
    \                   n /= i;\n                }\n            }\n        }\n   \
    \     if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long p = 2;\n        while (n % p == 0) {\n            n\
    \ /= p;\n        }\n        p = 3;\n        while (n > 1) {\n            while\
    \ (n % p == 0) {\n                n /= p;\n            }\n            p += 2;\n\
    \        }\n        return p - 2;", "        long factor = 2;\n        while (n\
    \ % factor != 0) {\n            factor++;\n        }\n        return factor;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largest = 1;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n            i++;\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long factor = 2;\n     \
    \   while (n % factor != 0) {\n            factor++;\n        }\n        return\
    \ factor;", "        long largest = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     while (n % i == 0) {\n                    n /= i;\n                }\n \
    \           }\n        }\n        return largest;", "        long factor = 2;\n\
    \        while (n % factor != 0) {\n            factor++;\n        }\n       \
    \ return factor;", "        long largest = 0;\n        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n\
    \        return largest;", "        long largest = 0;\n        long i = 2;\n \
    \       while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        if (n > 1) {\n            largest = n;\n  \
    \      }\n        return largest;", "        long largest = 1;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largest = n;\n        }\n        return largest;", "        long p = 2;\n  \
    \      while (n % p == 0) {\n            n /= p;\n        }\n        p = 3;\n\
    \        while (n > 1) {\n            while (n % p == 0) {\n                n\
    \ /= p;\n            }\n            p += 2;\n        }\n        return p - 2;",
  "        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 1;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long factor = 2;\n     \
    \   while (n % factor != 0) {\n            factor++;\n        }\n        return\
    \ factor;", "        long p = 2;\n        while (n % p == 0) {\n            n\
    \ /= p;\n        }\n        p = 3;\n        while (n > 1) {\n            while\
    \ (n % p == 0) {\n                n /= p;\n            }\n            p += 2;\n\
    \        }\n        return p - 2;", "        long largest = 0;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largest = n;\n        }\n        return largest;", "        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ n /= factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return factor;", "        long largest = 1;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largest = n;\n        }\n        return largest;", "        // We know that\
    \ n is not a prime, so it must have a factor <= sqrt(n).\n        // We also know\
    \ that n is not divisible by 2, so we can start with 3.\n        for (long i =\
    \ 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return\
    \ LargestPrimeFactor(n / i);\n            }\n        }\n        // If we get here,\
    \ n must be a prime.\n        return n;", "        long largestPrimeFactor = 1;\n\
    \        long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                largestPrimeFactor = factor;\n                n /=\
    \ factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n                while (n % factor ==\
    \ 0) {\n                    n /= factor;\n                }\n            }\n \
    \           factor++;\n        }\n        return largestPrimeFactor;", "     \
    \   long largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \            i--;\n            }\n        }\n        return largest;"]
stop_tokens:
- "\n    }\n"
