language: cs
name: HumanEval_87_get_row
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <882f60e35d724268b9543c1a7e991fe8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <882f60e35d724268b9543c1a7e991fe8>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6e7a8a67bb3496aa8c724d9f530acd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6e7a8a67bb3496aa8c724d9f530acd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 < b.Item1) {\n                return -1;\n            } else if (a.Item1
    > b.Item1) {\n                return 1;\n            } else {\n                if
    (a.Item2 > b.Item2) {\n                    return -1;\n                } else
    if (a.Item2 < b.Item2) {\n                    return 1;\n                } else
    {\n                    return 0;\n                }\n            }\n        });\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5621ce777aac47888dfcfe99865180cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5621ce777aac47888dfcfe99865180cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return -a.Item2.CompareTo(b.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f078784c19144aeca80915adc37fb7b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f078784c19144aeca80915adc37fb7b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce4cf5a888a245cfa25de5b224b937d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce4cf5a888a245cfa25de5b224b937d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return -a.Item2.CompareTo(b.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f078784c19144aeca80915adc37fb7b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f078784c19144aeca80915adc37fb7b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <882f60e35d724268b9543c1a7e991fe8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <882f60e35d724268b9543c1a7e991fe8>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 < b.Item1) {\n                return -1;\n            } else if (a.Item1
    > b.Item1) {\n                return 1;\n            } else {\n                if
    (a.Item2 > b.Item2) {\n                    return -1;\n                } else
    if (a.Item2 < b.Item2) {\n                    return 1;\n                } else
    {\n                    return 0;\n                }\n            }\n        });\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5621ce777aac47888dfcfe99865180cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5621ce777aac47888dfcfe99865180cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce4cf5a888a245cfa25de5b224b937d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce4cf5a888a245cfa25de5b224b937d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)
    {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n                if
    (lst[(int)i][(int)j] == x) {\n                    result.Add(new Tuple<long, long>(i,
    j));\n                }\n            }\n        }\n        result.Sort((a, b)
    => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0a4cc844bcb4095917217a35d92d41b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0a4cc844bcb4095917217a35d92d41b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L,
    0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L,
    0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})),
    (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long,
    long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,
    1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L,
    2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L,
    3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L,
    4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L,
    5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2353745f93a4d83ac302f28b97ec3c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2353745f93a4d83ac302f28b97ec3c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5110a5ede0fe453ebaf9a393131b4c13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5110a5ede0fe453ebaf9a393131b4c13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return b.Item2.CompareTo(a.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff852b91f37c41ceb8da9635ffa16058>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff852b91f37c41ceb8da9635ffa16058>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return -a.Item2.CompareTo(b.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07e495de6b35497496ae0316858af23a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07e495de6b35497496ae0316858af23a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Implement
    this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <9149a95558914266a23cf38141bfe5d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <9149a95558914266a23cf38141bfe5d3>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae18f4d255484f1babc8ced991600ff2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae18f4d255484f1babc8ced991600ff2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f79b536d35d4998b58d6210bede76e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f79b536d35d4998b58d6210bede76e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j <
    lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dec738f1f4e64bc897e3df884aca57f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dec738f1f4e64bc897e3df884aca57f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L,
    0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L,
    0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})),
    (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long,
    long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,
    1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L,
    2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L,
    3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L,
    4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L,
    5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6dee2f1e92a439e97651a259b4cced9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6dee2f1e92a439e97651a259b4cced9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var res
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1
    == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d30d96f82d2741f2bf39e7e35fdbd86b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d30d96f82d2741f2bf39e7e35fdbd86b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Implement
    this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <9149a95558914266a23cf38141bfe5d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <9149a95558914266a23cf38141bfe5d3>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <035d9f140bca42f18f33508807a11055>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <035d9f140bca42f18f33508807a11055>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5110a5ede0fe453ebaf9a393131b4c13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5110a5ede0fe453ebaf9a393131b4c13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j <
    lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <146d02da7a2e49cabd06d97b3d755408>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <146d02da7a2e49cabd06d97b3d755408>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j <
    lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <146d02da7a2e49cabd06d97b3d755408>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <146d02da7a2e49cabd06d97b3d755408>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L,
    0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L,
    0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})),
    (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long,
    long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,
    1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L,
    2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L,
    3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L,
    4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L,
    5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6dee2f1e92a439e97651a259b4cced9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6dee2f1e92a439e97651a259b4cced9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j <
    lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <146d02da7a2e49cabd06d97b3d755408>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <146d02da7a2e49cabd06d97b3d755408>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return (int)(b.Item2 -
    a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e50aa6f7e944160b0089ed0a32dec78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e50aa6f7e944160b0089ed0a32dec78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)
    {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n                if
    (lst[(int)i][(int)j] == x) {\n                    result.Add(new Tuple<long, long>(i,
    j));\n                }\n            }\n        }\n        result.Sort((a, b)
    => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072dd4bcb6934ed899cff8ba5eeb0fe7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072dd4bcb6934ed899cff8ba5eeb0fe7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 < b.Item1) {\n                return -1;\n            } else if (a.Item1
    > b.Item1) {\n                return 1;\n            } else {\n                if
    (a.Item2 > b.Item2) {\n                    return -1;\n                } else
    if (a.Item2 < b.Item2) {\n                    return 1;\n                } else
    {\n                    return 0;\n                }\n            }\n        });\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5621ce777aac47888dfcfe99865180cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5621ce777aac47888dfcfe99865180cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return b.Item2.CompareTo(a.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff852b91f37c41ceb8da9635ffa16058>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff852b91f37c41ceb8da9635ffa16058>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69b8c8f5f3449fab42df465a4cd06f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        var result = new List<Tuple<long, long>>();\n        for
    (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;
    j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return
    result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L,
    0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L,
    0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})),
    (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long,
    long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,
    1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L,
    2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L,
    3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L,
    4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L,
    5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4a543fa67b94ced93e1f16099969c18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4a543fa67b94ced93e1f16099969c18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6e7a8a67bb3496aa8c724d9f530acd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6e7a8a67bb3496aa8c724d9f530acd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <882f60e35d724268b9543c1a7e991fe8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <882f60e35d724268b9543c1a7e991fe8>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var res
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ae3b7c98ce3429a9b29dca097eb341d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ae3b7c98ce3429a9b29dca097eb341d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)
    {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n                if
    (lst[(int)i][(int)j] == x) {\n                    result.Add(new Tuple<long, long>(i,
    j));\n                }\n            }\n        }\n        result.Sort((a, b)
    => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efaf330dbe944c7bae86dba62a30485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efaf330dbe944c7bae86dba62a30485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return (int)(b.Item2
    - a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb87c376cb7c43afbc41a9d49b14d85b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb87c376cb7c43afbc41a9d49b14d85b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return b.Item2.CompareTo(a.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff852b91f37c41ceb8da9635ffa16058>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff852b91f37c41ceb8da9635ffa16058>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)
    {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n                if
    (lst[(int)i][(int)j] == x) {\n                    result.Add(new Tuple<long, long>(i,
    j));\n                }\n            }\n        }\n        result.Sort((a, b)
    => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072dd4bcb6934ed899cff8ba5eeb0fe7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072dd4bcb6934ed899cff8ba5eeb0fe7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L,
    0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L,
    0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})),
    (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long,
    long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,
    1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L,
    2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L,
    3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L,
    4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L,
    5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6dee2f1e92a439e97651a259b4cced9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6dee2f1e92a439e97651a259b4cced9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return -a.Item2.CompareTo(b.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f078784c19144aeca80915adc37fb7b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f078784c19144aeca80915adc37fb7b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 < b.Item1) {\n                return -1;\n            } else if (a.Item1
    > b.Item1) {\n                return 1;\n            } else {\n                if
    (a.Item2 > b.Item2) {\n                    return -1;\n                } else
    if (a.Item2 < b.Item2) {\n                    return 1;\n                } else
    {\n                    return 0;\n                }\n            }\n        });\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5621ce777aac47888dfcfe99865180cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5621ce777aac47888dfcfe99865180cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d91912c5cfc4f23b0eab749be531986>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d91912c5cfc4f23b0eab749be531986>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)
    {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n                if
    (lst[(int)i][(int)j] == x) {\n                    result.Add(new Tuple<long, long>(i,
    j));\n                }\n            }\n        }\n        result.Sort((a, b)
    => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd6fcb60584543338eef911b2070f6b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd6fcb60584543338eef911b2070f6b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <c475a7fd1b774804a2fbc94d7ac84d6e>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57c3043df98a4c74911681cf7492633d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)
    {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n                if
    (lst[(int)i][(int)j] == x) {\n                    result.Add(new Tuple<long, long>(i,
    j));\n                }\n            }\n        }\n        result.Sort((a, b)
    => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072dd4bcb6934ed899cff8ba5eeb0fe7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072dd4bcb6934ed899cff8ba5eeb0fe7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5110a5ede0fe453ebaf9a393131b4c13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5110a5ede0fe453ebaf9a393131b4c13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a616c5baaeb46e186f5fc3b344eb1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6e7a8a67bb3496aa8c724d9f530acd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6e7a8a67bb3496aa8c724d9f530acd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ee7861b0102b41379462fe9846bac043>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j <
    lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dec738f1f4e64bc897e3df884aca57f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dec738f1f4e64bc897e3df884aca57f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ccf0aea15114f57b317863f1e40d5f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result
    = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)
    {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n                if
    (lst[(int)i][(int)j] == x) {\n                    result.Add(new Tuple<long, long>(i,
    j));\n                }\n            }\n        }\n        result.Sort((a, b)
    => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072dd4bcb6934ed899cff8ba5eeb0fe7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072dd4bcb6934ed899cff8ba5eeb0fe7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j <
    lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1932e35783a448dd8cf73005f645d388>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1932e35783a448dd8cf73005f645d388>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977079
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c641a30ad5c41fda9142bca70b6af86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        // your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <768b0fd100b94ee18911425bb474eb8b>:0
    \n"
  stdout: ''
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    public static
    List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4abadfb24caf4bbbb9ee83395f86e773>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977078
