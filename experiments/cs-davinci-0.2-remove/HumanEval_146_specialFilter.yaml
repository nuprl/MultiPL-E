name: HumanEval_146_specialFilter
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes an array of numbers as input and\
  \ returns \n    // the number of elements in the array that are greater than 10\
  \ and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \    // For example:\n    public static long Specialfilter(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
  \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==\
  \ (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,\
  \ (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,\
  \ (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
  \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\
  \n}\n"
completions: ['        return nums.Where(x => x > 10 && x % 2 == 1 && x % 10 == 1).Count();',
  "        // Implement the function here\n        return 0;", '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  '        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', '        return nums.Count(n => n > 10 && n % 2 == 1 && n
    % 10 == 1);', "        // your code goes here\n        long count = 0;\n     \
    \   foreach (long num in nums) {\n            if (num > 10 && num % 2 != 0 &&\
    \ num % 10 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;", '        return nums.Count(x => x > 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0);', '        return nums.Count(n => n
    > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0);', "  \
    \      // Your code here\n        return 0;", "        // TODO: Implement this\
    \ function\n        return nums.Count(x => x > 10 && FirstDigit(x) % 2 != 0 &&\
    \ LastDigit(x) % 2 != 0);", "        // Implement this function\n        return\
    \ nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()\
    \ % 2 != 0).Count();", '        return nums.Where(x => x > 10 && (x % 10) % 2
    == 1 && x / 10 % 2 == 1).Count();', '        return nums.Where(x => x > 10 &&
    x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', "  \
    \      // TODO: Implement this function\n        return 0;", '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  "        // TODO: Implement this function\n        return 0;", "        // Your\
    \ code goes here.\n        // You can add helper functions as needed.\n      \
    \  return 0;", "        // Write your code here\n        return nums.Where(x =>\
    \ x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).Count();", "        // TODO:\
    \ Implement this function\n        return 0;", '        return nums.Where(n =>
    n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  '        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', "        // Write your code\
    \ here\n        // To print results to the standard output you can use Console.WriteLine()\n\
    \        // Example: Console.WriteLine(\"Hello world!\");\n        return nums.Where(x\
    \ => x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 != 0).Count();", "        //\
    \ Write your code here\n        return 0;", "        // TODO: Implement this function\n\
    \        return nums.Where(x => x > 10 && (x % 10) % 2 != 0 && (x / 10) % 2 !=\
    \ 0).Count();", "        // your code here\n        return 0;", "        // TODO:\
    \ Implement this function\n        return 0;", "        // TODO: Implement this\
    \ function.\n        // You can add additional functions as needed.\n        return\
    \ nums.Where(n => n > 10 && IsOdd(n) && IsOdd(n % 10)).Count();", "        //\
    \ your code here\n        return nums.Where(n => n > 10 && n.ToString().First()\
    \ % 2 != 0 && n.ToString().Last() % 2 != 0).Count();", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Write your code here\n      \
    \  return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()\
    \ % 2 != 0).Count();", "        // your code goes here\n        return nums.Where(x\
    \ => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();",
  "        // TODO: Implement this function\n        return 0;", "        // your\
    \ code goes here\n        return nums.Where(n => n > 10 && IsOdd(n.ToString()[0])\
    \ && IsOdd(n.ToString()[n.ToString().Length - 1])).Count();", '        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', "        // TODO: Implement this function\n        return\
    \ 0;", '        return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0
    && n.ToString().Last() % 2 != 0).Count();', "        // TODO: Implement this function\n\
    \        return 0;", "        // Write your code here\n        // To print results\
    \ to the standard output you can use Console.WriteLine()\n        // Example:\
    \ Console.WriteLine(\"Hello world!\");\n        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10) {\n                if (num %\
    \ 2 != 0) {\n                    if (num % 10 % 2 != 0) {\n                  \
    \      count++;\n                    }\n                }\n            }\n   \
    \     }\n        return count;", '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', "        // Implement this\
    \ function\n        return 0;", "        // TODO: Implement this function\n  \
    \      return 0;", "        // Implement your solution here\n        return 0;",
  "        // TODO: Implement this function\n        return 0;", "        // Your\
    \ code here\n        return 0;", "        // TODO: Implement this function\n \
    \       return 0;", "        // Your code here\n        return 0;", "        //\
    \ Write your code here\n        return 0;", "        // TODO: Implement this function.\n\
    \        // You can add additional functions as needed.\n        return nums.Where(n\
    \ => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();",
  "        // Write your code here\n        return 0;", '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  "        // TODO: Implement this function.\n        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10 && num % 2 != 0 && num / 10 %\
    \ 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // TODO: Write your code here\n        return 0;", "     \
    \   // Your code here.\n        return 0;", '        return nums.Where(x => x
    > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  '        return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', "        // Write your code here\n        return nums.Where(x\
    \ => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();",
  "        // Implement the function here\n        return 0;", "        // Your code\
    \ goes here.\n        return nums.Where(n => n > 10 && IsOdd(n) && IsOdd(n % 10)).Count();",
  "        // Your code goes here\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // TODO: Implement this function\n\
    \        return 0;", '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', "        // Write your code\
    \ here\n        return 0;", '        return nums.Count(n => n > 10 && IsOdd(n)
    && IsOdd(n % 10));', "        // TODO: Implement this function\n        return\
    \ 0;", '        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0
    && x.ToString().Last() % 2 != 0).Count();', '        return nums.Where(n => n
    > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  "        // Your code here\n        return 0;", "        // TODO: Implement this\
    \ function\n        return 0;", '        return nums.Where(x => x > 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', '        return nums.Count(n
    => n > 10 && (n % 10) % 2 == 1 && n / 10 % 2 == 1);', "        // your code here\n\
    \        long count = 0;\n        foreach (long num in nums) {\n            if\
    \ (num > 10 && (num % 10) % 2 != 0 && num / 10 % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;", '        return nums.Where(x
    => x > 10 && (x % 10) % 2 == 1 && x / 10 % 2 == 1).Count();', "        // TODO:\
    \ Implement this function\n        return 0;", "        // Write your code here\n\
    \        return 0;", "        // Write your code here\n        return 0;", '        return
    nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', "        // TODO: Implement this function\n        //throw\
    \ new NotImplementedException();\n        long count = 0;\n        foreach (long\
    \ num in nums)\n        {\n            if (num > 10)\n            {\n        \
    \        long first = num;\n                long last = num % 10;\n          \
    \      while (first > 10)\n                {\n                    first = first\
    \ / 10;\n                }\n                if (first % 2 != 0 && last % 2 !=\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n        return count;", "        // your code here\n \
    \       return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()\
    \ % 2 != 0).Count();", '        return nums.Count(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0);', "        // Your code here\n    \
    \    return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()\
    \ % 2 != 0).Count();", "        // Write your code here\n        return nums.Where(x\
    \ => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();",
  "        // Your code here\n        return nums.Where(x => x > 10 && x.ToString().First()\
    \ % 2 != 0 && x.ToString().Last() % 2 != 0).Count();", "        long count = 0;\n\
    \        foreach (long num in nums) {\n            if (num > 10 && IsOdd(num)\
    \ && IsOdd(num % 10)) {\n                count++;\n            }\n        }\n\
    \        return count;", "        // Your code here\n        return nums.Where(x\
    \ => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();",
  "        // Write your code here\n        return nums.Where(x => x > 10 && x.ToString().First()\
    \ % 2 != 0 && x.ToString().Last() % 2 != 0).Count();", "        // Your code here\n\
    \        return 0;", "        // TODO: implement this function\n        return\
    \ 0;", "        // your code goes here\n        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10 && (num % 10) % 2 != 0 && num\
    \ / 10 % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;", "        // TODO: Implement this function\n        long count\
    \ = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]\
    \ > 10) {\n                string num = nums[i].ToString();\n                if\
    \ (num[0] % 2 != 0 && num[num.Length - 1] % 2 != 0) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  // Write your code here\n        return 0;", "        // your code here\n \
    \       return nums.Count(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()\
    \ % 2 != 0);", "        // TODO: Implement this function\n        return 0;",
  '        return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', "        // TODO: Implement this function\n        // You\
    \ can add additional functions as needed\n        return 0;", "        // TODO:\
    \ Implement this function\n        return 0;", "        // your code here\n  \
    \      return nums.Count(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()\
    \ % 2 != 0);", "        // TODO: Implement this function\n        return 0;",
  '        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', "        // TODO: Implement\
    \ this function\n        return 0;", "        // TODO: Implement this function\n\
    \        return 0;", "        // your code goes here\n        return 0;", "  \
    \      // Your code goes here.\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code here\n        return\
    \ 0;", '        return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0
    && n.ToString().Last() % 2 != 0).Count();', '        return nums.Where(x => x
    > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  "        // Your code here\n        return nums.Count(n => n > 10 && n.ToString().First()\
    \ % 2 != 0 && n.ToString().Last() % 2 != 0);", '        return nums.Where(n =>
    n > 10 && (n % 10) % 2 == 1 && n / 10 % 2 == 1).Count();', '        return nums.Where(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  "        // TODO: Implement this function\n        return 0;", "        // Implement\
    \ your solution here\n        return 0;", "        // TODO: Implement this function\n\
    \        return 0;", "        // TODO: Implement this function\n        return\
    \ 0;", "        // Implement this function\n        return 0;", "        // TODO:\
    \ Implement your solution here\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", '        return nums.Where(x => x > 10 &&
    x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', "  \
    \      // TODO: Implement this function\n        return 0;", '        return nums.Where(x
    => x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).Count();', "        // TODO:\
    \ Implement this function\n        return 0;", "        // your code goes here\n\
    \        long count = 0;\n        foreach (long num in nums) {\n            if\
    \ (num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last() % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n        return count;",
  '        return nums.Count(x => x > 10 && IsOdd(x) && IsOdd(x % 10));', "      \
    \  // Write your code here\n        return 0;", "        // TODO: Implement this\
    \ function.\n        // You can add additional functions as needed.\n        //\
    \ You are not allowed to use LINQ.\n        // You are not allowed to use loops\
    \ (for, while, do, etc.).\n        // You are not allowed to use if statements.\n\
    \        // You are not allowed to use the ternary operator.\n        // You are\
    \ not allowed to use any built-in functions.\n        // You are not allowed to\
    \ use any external libraries.\n        // You are not allowed to use any goto\
    \ statements.\n        // You are not allowed to use any break or continue statements.\n\
    \        // You are not allowed to use any try-catch blocks.\n        // You are\
    \ not allowed to use any switch statements.\n        // You are not allowed to\
    \ use any ternary operators.\n        // You are not allowed to use any casting.\n\
    \        // You are not allowed to use any bitwise operators.\n        // You\
    \ are not allowed to use any pointers.\n        // You are not allowed to use\
    \ any unsafe code.\n        // You are not allowed to use any recursion.\n   \
    \     // You are not allowed to use any ref or out parameters.\n        // You\
    \ are not allowed to use any properties.\n        // You are not allowed to use\
    \ any indexers.\n        // You are not allowed to use any events.\n        //\
    \ You are not allowed to use any delegates.\n        // You are not allowed to\
    \ use any lambdas.\n        // You are not allowed to use any extension methods.\n\
    \        // You are not allowed to use any LINQ methods.\n        // You are not\
    \ allowed to use any LINQ query expressions.\n        // You are not allowed to\
    \ use any LINQ operators.\n        // You are not allowed to use any LINQ aggregates.\n\
    \        // You are not allowed to use any LINQ quantifiers.\n        // You are\
    \ not allowed to use any LINQ ordering methods.\n        // You are not allowed\
    \ to use any LINQ set methods.\n        // You are not allowed to use any LINQ\
    \ element operators.\n        // You are not allowed to use any LINQ generation\
    \ methods.\n        // You are not allowed to use any LINQ conversion methods.\n\
    \        // You are not allowed to use any LINQ joining methods.\n        // You\
    \ are not allowed to use any LINQ grouping methods.\n", "        // Your code\
    \ here\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0\
    \ && n.ToString().Last() % 2 != 0).Count();", "        // your code goes here\n\
    \        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()\
    \ % 2 != 0).Count();", "        // Write your code here\n        return nums.Count(x\
    \ => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0);",
  "        // Write your code here\n        return 0;", "        // your code goes\
    \ here\n        return 0;", '        return nums.Where(x => x > 10 && (x % 10)
    % 2 == 1 && x / 10 % 2 == 1).Count();', "        // Implement this function\n\
    \        return 0;", "        // TODO: Implement this function\n        return\
    \ 0;", "        // Your code here\n        return 0;", '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  '        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && x / 10 % 2 == 1).Count();',
  "        // your code here\n        return nums.Count(x => x > 10 && x.ToString().First()\
    \ % 2 != 0 && x.ToString().Last() % 2 != 0);", "        // Implement the function\
    \ here\n        return 0;", "        // TODO: Implement this function\n      \
    \  return 0;", "        // Write your code here\n        return 0;", "       \
    \ // your code goes here\n        long count = 0;\n        foreach (long num in\
    \ nums) {\n            if (num > 10 && (num % 10) % 2 != 0 && (num / 10) % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n        return count;",
  "        // TODO: Implement this function\n        //throw new NotImplementedException();\n\
    \        long count = 0;\n        foreach (long num in nums)\n        {\n    \
    \        if (num > 10)\n            {\n                string numString = num.ToString();\n\
    \                if (numString[0] % 2 != 0 && numString[numString.Length - 1]\
    \ % 2 != 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n        return count;", "        // TODO: Write\
    \ your code here\n        return 0;", "        // Write your code here\n     \
    \   return 0;", "        // Implement this function.\n        return nums.Where(x\
    \ => x > 10 && (x % 10) % 2 != 0 && (x / (long)Math.Pow(10, Math.Floor(Math.Log10(x))))\
    \ % 2 != 0).Count();", '        return nums.Where(x => x > 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', "        // your code here\n\
    \        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()\
    \ % 2 != 0).Count();", "        // your code here\n        return nums.Count(n\
    \ => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0);",
  "        // TODO: Implement this function\n        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10 && (num % 10) % 2 != 0 && num\
    \ / 10 % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;", "        // TODO: Write your code here\n        return 0;",
  '        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', '        return nums.Where(x => x > 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', "        // TODO: Implement\
    \ this function.\n        // You can add additional functions as needed.\n   \
    \     long count = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        // your code here\n     \
    \   return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()\
    \ % 2 != 0).Count();", '        return nums.Count(n => n > 10 && IsOdd(n) && IsOdd(n
    % 10));', "        // your code here\n        return nums.Where(x => x > 10 &&\
    \ x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();", '        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', "        // TODO: Implement this function\n        return\
    \ 0;", "        // Write your code here\n        return 0;", "        // TODO:\
    \ Implement this function\n        //throw new NotImplementedException();\n  \
    \      long count = 0;\n        foreach (long num in nums)\n        {\n      \
    \      if (num > 10)\n            {\n                string str = num.ToString();\n\
    \                if (str[0] % 2 != 0 && str[str.Length - 1] % 2 != 0)\n      \
    \          {\n                    count++;\n                }\n            }\n\
    \        }\n        return count;", "        // Your code goes here\n        return\
    \ nums.Count(n => n > 10 && (n % 10) % 2 == 1 && n / 10 % 2 == 1);", "       \
    \ // your code here\n        return nums.Count(n => n > 10 && n.ToString().First()\
    \ % 2 != 0 && n.ToString().Last() % 2 != 0);", "        // Implement the function\
    \ here\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 != 0\
    \ && x.ToString().Last() % 2 != 0);", "        // Write your code here\n     \
    \   return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()\
    \ % 2 != 0).Count();", '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', "        // your code goes\
    \ here\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0\
    \ && x.ToString().Last() % 2 != 0).Count();", "        // your code here\n   \
    \     return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()\
    \ % 2 != 0).Count();", "        // TODO: Implement this function\n        return\
    \ 0;", "        // Write your code here\n        return nums.Where(x => x > 10\
    \ && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();",
  '        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  "        // your code goes here\n        long count = 0;\n        foreach (long\
    \ num in nums) {\n            if (num > 10 && (num % 10) % 2 != 0 && num / 10\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", '        return nums.Where(x => x > 10 && x.ToString().First() % 2
    != 0 && x.ToString().Last() % 2 != 0).Count();', "        // TODO: Implement this\
    \ function\n        return 0;", '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', '        return nums.Where(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  "        // Write your code here\n        return 0;", '        return nums.Where(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  '        return nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', "        // Your code goes here\n        return nums.Where(x\
    \ => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();",
  '        return nums.Count(n => n > 10 && (n % 10) % 2 == 1 && n / 10 % 2 == 1);',
  "        // TODO: Implement this function\n        return 0;", "        // your\
    \ code here\n        return nums.Where(x => x > 10 && x.ToString().First() % 2\
    \ != 0 && x.ToString().Last() % 2 != 0).Count();", '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  "        // Implement this function\n        return nums.Where(x => x > 10 && x.ToString().First()\
    \ % 2 != 0 && x.ToString().Last() % 2 != 0).Count();", '        return nums.Where(x
    => x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).Count();', '        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', '        return nums.Where(x => x > 10 && x % 2 == 1 && x
    / 10 % 2 == 1).Count();', "        // Write your code here\n        return nums.Where(x\
    \ => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();",
  "        // Implement this function\n        return nums.Where(x => x > 10 && x.ToString().First()\
    \ % 2 != 0 && x.ToString().Last() % 2 != 0).Count();", "        // TODO: Implement\
    \ this function.\n        long count = 0;\n        foreach (long num in nums)\
    \ {\n            if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n          \
    \      count++;\n            }\n        }\n        return count;", "        //\
    \ Implement this function\n        return 0;", "        // TODO: Implement this\
    \ function\n        return 0;", "        // TODO: Implement this function\n  \
    \      //throw new NotImplementedException();\n        long count = 0;\n     \
    \   foreach (long num in nums)\n        {\n            if (num > 10)\n       \
    \     {\n                long first = num;\n                long last = num %\
    \ 10;\n                while (first > 10)\n                {\n               \
    \     first = first / 10;\n                }\n                if (first % 2 !=\
    \ 0 && last % 2 != 0)\n                {\n                    count++;\n     \
    \           }\n            }\n        }\n        return count;", '        return
    nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', '        return nums.Where(x => x > 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', "        // Write your code\
    \ here\n        return nums.Where(x => x > 10 && IsOdd(x) && IsOdd(x % 10)).Count();"]
stop_tokens:
- "\n    }\n"
