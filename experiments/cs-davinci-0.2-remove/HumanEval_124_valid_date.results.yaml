language: cs
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        try {\n            var
    d = DateTime.Parse(date);\n            return true;\n        } catch (Exception)
    {\n            return false;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ef1e718596949859c4eb9c5984bedcd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ef1e718596949859c4eb9c5984bedcd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] dateSplit = date.Split('-');\n
    \       if (dateSplit.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(dateSplit[0]);\n        int day = int.Parse(dateSplit[1]);\n
    \       int year = int.Parse(dateSplit[2]);\n        if (month < 1 || month >
    12) {\n            return false;\n        }\n        if (month == 2) {\n            if
    (day < 1 || day > 29) {\n                return false;\n            }\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day < 1 || day > 30) {\n                return false;\n            }\n        }
    else {\n            if (day < 1 || day > 31) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        var
    parts = date.Split('-');\n        if (parts.Length != 3) {\n            return
    false;\n        }\n        var month = int.Parse(parts[0]);\n        var day =
    int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) {\n            return false;\n        }\n        if (day <
    1) {\n            return false;\n        }\n        if (month == 2) {\n            if
    (day > 29) {\n                return false;\n            }\n        } else if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) {\n                return false;\n            }\n        } else {\n            if
    (day > 31) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date == null || date.Length == 0) {\n            return false;\n        }\n
    \       string[] parts = date.Split('-');\n        if (parts.Length != 3) {\n
    \           return false;\n        }\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1 || day > 31) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)
    {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83df907a893e40409b5a0502c9d703b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83df907a893e40409b5a0502c9d703b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) {\n            return false;\n        }\n        string[] dateArray
    = date.Split('-');\n        if (dateArray.Length != 3) {\n            return false;\n
    \       }\n        int month = int.Parse(dateArray[0]);\n        int day = int.Parse(dateArray[1]);\n
    \       int year = int.Parse(dateArray[2]);\n        if (month < 1 || month >
    12) {\n            return false;\n        }\n        if (month == 2) {\n            if
    (day < 1 || day > 29) {\n                return false;\n            }\n        }
    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||
    month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 30)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] dateSplit = date.Split('-');\n
    \       if (dateSplit.Length != 3) return false;\n        int month = int.Parse(dateSplit[0]);\n
    \       int day = int.Parse(dateSplit[1]);\n        int year = int.Parse(dateSplit[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] dateParts = date.Split('-');\n
    \       if (dateParts.Length != 3) return false;\n        int month = int.Parse(dateParts[0]);\n
    \       int day = int.Parse(dateParts[1]);\n        int year = int.Parse(dateParts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] dateArr = date.Split('-');\n
    \       int month = Int32.Parse(dateArr[0]);\n        int day = Int32.Parse(dateArr[1]);\n
    \       int year = Int32.Parse(dateArr[2]);\n        if (month < 1 || month >
    12) return false;\n        if (month == 2) {\n            if (day < 1 || day >
    29) return false;\n        } else if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day < 1 || day > 30) return false;\n        }
    else {\n            if (day < 1 || day > 31) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0002b]
    in <84ee15f3e8ee4403b0e8f1a88ed9a33b>:0 \n  at Problem.Main (System.String[] args)
    [0x000c3] in <84ee15f3e8ee4403b0e8f1a88ed9a33b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0002b] in <84ee15f3e8ee4403b0e8f1a88ed9a33b>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <84ee15f3e8ee4403b0e8f1a88ed9a33b>:0
    \n"
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        var s = date.Split('-');\n
    \       if (s.Length != 3) return false;\n        var m = int.Parse(s[0]);\n        var
    d = int.Parse(s[1]);\n        var y = int.Parse(s[2]);\n        if (m < 1 || m
    > 12) return false;\n        if (d < 1 || d > 31) return false;\n        if (m
    == 2) {\n            if (d > 29) return false;\n            if (d == 29) {\n                if
    (y % 4 != 0) return false;\n                if (y % 100 == 0 && y % 400 != 0)
    return false;\n            }\n        } else if (m == 4 || m == 6 || m == 9 ||
    m == 11) {\n            if (d > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2) {\n            if (day < 1 || day >
    29) {\n                return false;\n            }\n        } else if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||
    day > 30) {\n                return false;\n            }\n        } else {\n
    \           if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        string[] dateSplit =
    date.Split('-');\n        int month = int.Parse(dateSplit[0]);\n        int day
    = int.Parse(dateSplit[1]);\n        int year = int.Parse(dateSplit[2]);\n        if
    (month < 1 || month > 12) return false;\n        if (month == 2) {\n            if
    (year % 4 == 0) {\n                if (day < 1 || day > 29) return false;\n            }
    else {\n                if (day < 1 || day > 28) return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day < 1 || day > 30) return false;\n        } else {\n            if
    (day < 1 || day > 31) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <9ec3ad86dade49c7b316690de619fde7>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <9ec3ad86dade49c7b316690de619fde7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <9ec3ad86dade49c7b316690de619fde7>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <9ec3ad86dade49c7b316690de619fde7>:0
    \n"
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (year < 0) return false;\n        if (month < 1 || month > 12) return
    false;\n        if (day < 1) return false;\n        if (month == 2) {\n            if
    (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n                if
    (day > 29) return false;\n            } else {\n                if (day > 28)
    return false;\n            }\n        } else if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day > 30) return false;\n        } else
    {\n            if (day > 31) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) {\n            return false;\n        }\n        string[] dateArray
    = date.Split('-');\n        if (dateArray.Length != 3) {\n            return false;\n
    \       }\n        int month = Convert.ToInt32(dateArray[0]);\n        int day
    = Convert.ToInt32(dateArray[1]);\n        int year = Convert.ToInt32(dateArray[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       string[] dateParts = date.Split('-');\n        int month = int.Parse(dateParts[0]);\n
    \       int day = int.Parse(dateParts[1]);\n        int year = int.Parse(dateParts[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1 || day > 31) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)
    {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <f42872dc502d4c1393f7496cc8ea4bcb>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <f42872dc502d4c1393f7496cc8ea4bcb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <f42872dc502d4c1393f7496cc8ea4bcb>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <f42872dc502d4c1393f7496cc8ea4bcb>:0
    \n"
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1) return false;\n        if
    (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month ==
    10 || month == 12) {\n            if (day > 31) return false;\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        } else if (month == 2) {\n            if (day > 29)
    return false;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       var parts = date.Split('-');\n        if (parts.Length != 3) {\n            return
    false;\n        }\n        var month = int.Parse(parts[0]);\n        var day =
    int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) {\n            return false;\n        }\n        if (day <
    1) {\n            return false;\n        }\n        if (month == 2) {\n            if
    (day > 29) {\n                return false;\n            }\n        } else if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) {\n                return false;\n            }\n        } else {\n            if
    (day > 31) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] dateSplit = date.Split('-');\n
    \       if (dateSplit.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(dateSplit[0]);\n        int day = int.Parse(dateSplit[1]);\n
    \       int year = int.Parse(dateSplit[2]);\n        if (month < 1 || month >
    12) {\n            return false;\n        }\n        if (month == 2) {\n            if
    (day < 1 || day > 29) {\n                return false;\n            }\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day < 1 || day > 30) {\n                return false;\n            }\n        }
    else {\n            if (day < 1 || day > 31) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2) {\n            if (day < 1 || day >
    29) {\n                return false;\n            }\n        } else if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||
    day > 30) {\n                return false;\n            }\n        } else {\n
    \           if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        var parts = date.Split('-');\n        if
    (parts.Length != 3) return false;\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83df907a893e40409b5a0502c9d703b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83df907a893e40409b5a0502c9d703b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        //
    Split the string into an array of strings\n        string[] dateArray = date.Split('-');\n
    \       // Check if the array is empty\n        if (dateArray.Length == 0) {\n
    \           return false;\n        }\n        // Check if the array has 3 elements\n
    \       if (dateArray.Length != 3) {\n            return false;\n        }\n        //
    Check if the month is between 1 and 12\n        if (int.Parse(dateArray[0]) <
    1 || int.Parse(dateArray[0]) > 12) {\n            return false;\n        }\n        //
    Check if the day is between 1 and 31\n        if (int.Parse(dateArray[1]) < 1
    || int.Parse(dateArray[1]) > 31) {\n            return false;\n        }\n        //
    Check if the day is between 1 and 30\n        if (int.Parse(dateArray[0]) == 4
    || int.Parse(dateArray[0]) == 6 || int.Parse(dateArray[0]) == 9 || int.Parse(dateArray[0])
    == 11) {\n            if (int.Parse(dateArray[1]) < 1 || int.Parse(dateArray[1])
    > 30) {\n                return false;\n            }\n        }\n        // Check
    if the day is between 1 and 29\n        if (int.Parse(dateArray[0]) == 2) {\n
    \           if (int.Parse(dateArray[1]) < 1 || int.Parse(dateArray[1]) > 29) {\n
    \               return false;\n            }\n        }\n        // Check if the
    year is between 1 and 9999\n        if (int.Parse(dateArray[2]) < 1 || int.Parse(dateArray[2])
    > 9999) {\n            return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date.Length == 0) return false;\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        var month = int.Parse(parts[0]);\n
    \       var day = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        var
    parts = date.Split('-');\n        if (parts.Length != 3) return false;\n        int
    month, day, year;\n        if (!int.TryParse(parts[0], out month) || !int.TryParse(parts[1],
    out day) || !int.TryParse(parts[2], out year)) return false;\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (string.IsNullOrEmpty(date))\n            return false;\n        var
    parts = date.Split('-');\n        if (parts.Length != 3)\n            return false;\n
    \       int month, day, year;\n        if (!int.TryParse(parts[0], out month)
    || !int.TryParse(parts[1], out day) || !int.TryParse(parts[2], out year))\n            return
    false;\n        if (month < 1 || month > 12)\n            return false;\n        if
    (day < 1 || day > 31)\n            return false;\n        if (month == 2) {\n
    \           if (day > 29)\n                return false;\n            if (day
    == 29) {\n                if (year % 4 != 0)\n                    return false;\n
    \               if (year % 100 == 0 && year % 400 != 0)\n                    return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day > 30)\n                return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] date_parts = date.Split('-');\n        if (date_parts.Length
    != 3) return false;\n        int month = int.Parse(date_parts[0]);\n        int
    day = int.Parse(date_parts[1]);\n        int year = int.Parse(date_parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here.\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d18af2414e924eb292552ffaae31d9fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d18af2414e924eb292552ffaae31d9fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1) return false;\n        if
    (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month ==
    10 || month == 12) {\n            if (day > 31) return false;\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        } else if (month == 2) {\n            if (day > 29)
    return false;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date == \"\") return false;\n        string[] dateArr = date.Split('-');\n        if
    (dateArr.Length != 3) return false;\n        int month = int.Parse(dateArr[0]);\n
    \       int day = int.Parse(dateArr[1]);\n        int year = int.Parse(dateArr[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] dateParts = date.Split('-');\n
    \       if (dateParts.Length != 3) return false;\n        int month = int.Parse(dateParts[0]);\n
    \       int day = int.Parse(dateParts[1]);\n        int year = int.Parse(dateParts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date == \"\") return false;\n        var split = date.Split('-');\n
    \       if (split.Length != 3) return false;\n        var month = int.Parse(split[0]);\n
    \       var day = int.Parse(split[1]);\n        var year = int.Parse(split[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        var
    parts = date.Split('-');\n        if (parts.Length != 3) return false;\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) return false;\n
    \       if (day < 1) return false;\n        if (month == 2) {\n            if
    (day > 29) return false;\n            if (day == 29) {\n                if (year
    % 4 != 0) return false;\n                if (year % 100 == 0 && year % 400 !=
    0) return false;\n            }\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day > 30) return false;\n        }
    else {\n            if (day > 31) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date == \"\") return false;\n        string[] dateArr = date.Split('-');\n        if
    (dateArr.Length != 3) return false;\n        int month = int.Parse(dateArr[0]);\n
    \       int day = int.Parse(dateArr[1]);\n        int year = int.Parse(dateArr[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (string.IsNullOrEmpty(date)) return false;\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        int month, day, year;\n
    \       if (!int.TryParse(parts[0], out month) || !int.TryParse(parts[1], out
    day) || !int.TryParse(parts[2], out year)) return false;\n        if (month <
    1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date == \"\") return false;\n        string[] dateArr = date.Split('-');\n        int
    month = int.Parse(dateArr[0]);\n        int day = int.Parse(dateArr[1]);\n        int
    year = int.Parse(dateArr[2]);\n        if (month < 1 || month > 12) return false;\n
    \       if (month == 2) {\n            if (day < 1 || day > 29) return false;\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day < 1 || day > 30) return false;\n        } else {\n            if
    (day < 1 || day > 31) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0002d]
    in <87dd85a3142048f893c5baeea3f8e610>:0 \n  at Problem.Main (System.String[] args)
    [0x000c3] in <87dd85a3142048f893c5baeea3f8e610>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0002d] in <87dd85a3142048f893c5baeea3f8e610>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <87dd85a3142048f893c5baeea3f8e610>:0
    \n"
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2) {\n            if (day < 1 || day >
    29) {\n                return false;\n            }\n        } else if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||
    day > 30) {\n                return false;\n            }\n        } else {\n
    \           if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date == \"\") return false;\n        string[] dateArr = date.Split('-');\n
    \       if (dateArr.Length != 3) return false;\n        if (int.Parse(dateArr[0])
    < 1 || int.Parse(dateArr[0]) > 12) return false;\n        if (int.Parse(dateArr[0])
    == 2) {\n            if (int.Parse(dateArr[1]) < 1 || int.Parse(dateArr[1]) >
    29) return false;\n        } else if (int.Parse(dateArr[0]) == 1 || int.Parse(dateArr[0])
    == 3 || int.Parse(dateArr[0]) == 5 || int.Parse(dateArr[0]) == 7 || int.Parse(dateArr[0])
    == 8 || int.Parse(dateArr[0]) == 10 || int.Parse(dateArr[0]) == 12) {\n            if
    (int.Parse(dateArr[1]) < 1 || int.Parse(dateArr[1]) > 31) return false;\n        }
    else {\n            if (int.Parse(dateArr[1]) < 1 || int.Parse(dateArr[1]) > 30)
    return false;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        string[]
    dateArray = date.Split('-');\n        int month = int.Parse(dateArray[0]);\n        int
    day = int.Parse(dateArray[1]);\n        int year = int.Parse(dateArray[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <1913c5d30cf14584ad9d10e342ae76dc>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <1913c5d30cf14584ad9d10e342ae76dc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <1913c5d30cf14584ad9d10e342ae76dc>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <1913c5d30cf14584ad9d10e342ae76dc>:0
    \n"
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1) return false;\n        if
    (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month ==
    10 || month == 12) {\n            if (day > 31) return false;\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        } else if (month == 2) {\n            if (day > 29)
    return false;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        var parts = date.Split('-');\n        if
    (parts.Length != 3) return false;\n        var month = int.Parse(parts[0]);\n
    \       var day = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        string[]
    dateArr = date.Split('-');\n        if (dateArr.Length != 3) {\n            return
    false;\n        }\n        int month = int.Parse(dateArr[0]);\n        int day
    = int.Parse(dateArr[1]);\n        int year = int.Parse(dateArr[2]);\n        if
    (month < 1 || month > 12) {\n            return false;\n        }\n        if
    (day < 1 || day > 31) {\n            return false;\n        }\n        if (month
    == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)
    {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] date_split = date.Split('-');\n
    \       if (date_split.Length != 3) return false;\n        int month = int.Parse(date_split[0]);\n
    \       int day = int.Parse(date_split[1]);\n        int year = int.Parse(date_split[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        string[]
    dateArr = date.Split('-');\n        if (dateArr.Length != 3) {\n            return
    false;\n        }\n        int month = Convert.ToInt32(dateArr[0]);\n        int
    day = Convert.ToInt32(dateArr[1]);\n        int year = Convert.ToInt32(dateArr[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        string[]
    dateArray = date.Split('-');\n        if (dateArray.Length != 3) return false;\n
    \       int month = int.Parse(dateArray[0]);\n        int day = int.Parse(dateArray[1]);\n
    \       int year = int.Parse(dateArray[2]);\n        if (month < 1 || month >
    12) return false;\n        if (day < 1 || day > 31) return false;\n        if
    (month == 2) {\n            if (day > 29) return false;\n            if (day ==
    29) {\n                if (year % 4 != 0) return false;\n                if (year
    % 100 == 0 && year % 400 != 0) return false;\n            }\n        }\n        if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (string.IsNullOrEmpty(date))
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n
    \       if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        var parts = date.Split('-');\n        if
    (parts.Length != 3) return false;\n        var month = int.Parse(parts[0]);\n
    \       var day = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date == \"\") {\n            return false;\n        }\n        string[] dateSplit
    = date.Split('-');\n        if (dateSplit.Length != 3) {\n            return false;\n
    \       }\n        int month = int.Parse(dateSplit[0]);\n        int day = int.Parse(dateSplit[1]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (string.IsNullOrEmpty(date))\n            return false;\n        var
    parts = date.Split('-');\n        if (parts.Length != 3)\n            return false;\n
    \       int month, day, year;\n        if (!int.TryParse(parts[0], out month)
    || !int.TryParse(parts[1], out day) || !int.TryParse(parts[2], out year))\n            return
    false;\n        if (month < 1 || month > 12)\n            return false;\n        if
    (day < 1 || day > 31)\n            return false;\n        if (month == 2) {\n
    \           if (year % 4 == 0) {\n                if (day > 29)\n                    return
    false;\n            } else {\n                if (day > 28)\n                    return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day > 30)\n                return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1) return false;\n        if
    (month == 2) {\n            if (day > 29) return false;\n            if (day ==
    29) {\n                if (year % 4 != 0) return false;\n                if (year
    % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        } else {\n            if (day > 31) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length != 10) return false;\n        if (date[2] != '-' || date[5] != '-')
    return false;\n        int month = int.Parse(date.Substring(0, 2));\n        int
    day = int.Parse(date.Substring(3, 2));\n        int year = int.Parse(date.Substring(6,
    4));\n        if (month < 1 || month > 12) return false;\n        if (day < 1
    || day > 31) return false;\n        if (month == 2) {\n            if (day > 29)
    return false;\n            if (day == 29) {\n                if (year % 4 != 0)
    return false;\n                if (year % 100 == 0 && year % 400 != 0) return
    false;\n            }\n        }\n        if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (day < 1) return false;\n        if
    (month == 2) {\n            if (day > 29) return false;\n            if (day ==
    29) {\n                if (year % 4 != 0) return false;\n                if (year
    % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        } else {\n            if (day > 31) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month = int.Parse(parts[0]);\n        int day
    = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n        if (month
    < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day
    < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n
    \       } else {\n            if (day < 1 || day > 31) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date == \"\") return false;\n        string[] date_split = date.Split('-');\n
    \       if (date_split.Length != 3) return false;\n        int month = int.Parse(date_split[0]);\n
    \       int day = int.Parse(date_split[1]);\n        int year = int.Parse(date_split[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        string[]
    dateArr = date.Split('-');\n        if (dateArr.Length != 3) {\n            return
    false;\n        }\n        int month = int.Parse(dateArr[0]);\n        int day
    = int.Parse(dateArr[1]);\n        int year = int.Parse(dateArr[2]);\n        if
    (month < 1 || month > 12) {\n            return false;\n        }\n        if
    (day < 1 || day > 31) {\n            return false;\n        }\n        if (month
    == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)
    {\n            if (day > 30) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] split = date.Split('-');\n
    \       if (split.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(split[0]);\n        int day = int.Parse(split[1]);\n        int
    year = int.Parse(split[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2) {\n            if (day < 1 || day >
    29) {\n                return false;\n            }\n        } else if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||
    day > 30) {\n                return false;\n            }\n        } else {\n
    \           if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2) {\n            if (day < 1 || day >
    29) {\n                return false;\n            }\n        } else if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||
    day > 30) {\n                return false;\n            }\n        } else {\n
    \           if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date.Length == 0) {\n            return false;\n        }\n        string[]
    dateArray = date.Split('-');\n        if (dateArray.Length != 3) {\n            return
    false;\n        }\n        int month = int.Parse(dateArray[0]);\n        int day
    = int.Parse(dateArray[1]);\n        int year = int.Parse(dateArray[2]);\n        if
    (month < 1 || month > 12) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date == \"\") return false;\n        string[] dateArr = date.Split('-');\n        if
    (dateArr.Length != 3) return false;\n        int month = int.Parse(dateArr[0]);\n
    \       int day = int.Parse(dateArr[1]);\n        int year = int.Parse(dateArr[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) {\n            return false;\n        }\n        string[] dateSplit
    = date.Split('-');\n        if (dateSplit.Length != 3) {\n            return false;\n
    \       }\n        int month = int.Parse(dateSplit[0]);\n        int day = int.Parse(dateSplit[1]);\n
    \       int year = int.Parse(dateSplit[2]);\n        if (month < 1 || month >
    12) {\n            return false;\n        }\n        if (month == 2) {\n            if
    (day < 1 || day > 29) {\n                return false;\n            }\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day < 1 || day > 30) {\n                return false;\n            }\n        }
    else {\n            if (day < 1 || day > 31) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date.Length == 0) return false;\n        string[] split = date.Split('-');\n
    \       if (split.Length != 3) return false;\n        int month = int.Parse(split[0]);\n
    \       int day = int.Parse(split[1]);\n        int year = int.Parse(split[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month, day, year;\n        if (!int.TryParse(parts[0], out month) || !int.TryParse(parts[1],
    out day) || !int.TryParse(parts[2], out year)) {\n            return false;\n
    \       }\n        if (month < 1 || month > 12) {\n            return false;\n
    \       }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n
    \               return false;\n            }\n        } else if (month == 4 ||
    month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30)
    {\n                return false;\n            }\n        } else {\n            if
    (day < 1 || day > 31) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        var month = int.Parse(parts[0]);\n
    \       var day = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here.\n
    \       // You can add other methods as well if you want.\n        string[] dateArray
    = date.Split('-');\n        if (dateArray.Length != 3) {\n            return false;\n
    \       }\n        int month = int.Parse(dateArray[0]);\n        int day = int.Parse(dateArray[1]);\n
    \       int year = int.Parse(dateArray[2]);\n        if (month < 1 || month >
    12) {\n            return false;\n        }\n        if (month == 1 || month ==
    3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n
    \           if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day < 1 || day > 30) {\n                return false;\n            }\n
    \       } else if (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date.Length == 0) return false;\n        string[] dateSplit = date.Split('-');\n
    \       if (dateSplit.Length != 3) return false;\n        int month = int.Parse(dateSplit[0]);\n
    \       int day = int.Parse(dateSplit[1]);\n        int year = int.Parse(dateSplit[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] dateArray = date.Split('-');\n
    \       int month = int.Parse(dateArray[0]);\n        int day = int.Parse(dateArray[1]);\n
    \       int year = int.Parse(dateArray[2]);\n        if (month < 1 || month >
    12) return false;\n        if (day < 1 || day > 31) return false;\n        if
    (month == 2) {\n            if (day > 29) return false;\n            if (day ==
    29) {\n                if (year % 4 != 0) return false;\n                if (year
    % 100 == 0 && year % 400 != 0) return false;\n            }\n        }\n        if
    (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0002b]
    in <629e388d65204086ab0ea0a5c632deb0>:0 \n  at Problem.Main (System.String[] args)
    [0x000c3] in <629e388d65204086ab0ea0a5c632deb0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0002b] in <629e388d65204086ab0ea0a5c632deb0>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <629e388d65204086ab0ea0a5c632deb0>:0
    \n"
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        var dateParts = date.Split('-');\n        if
    (dateParts.Length != 3) return false;\n        var month = int.Parse(dateParts[0]);\n
    \       var day = int.Parse(dateParts[1]);\n        var year = int.Parse(dateParts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       string[] date_split = date.Split('-');\n        if (date_split.Length
    != 3) {\n            return false;\n        }\n        int month = int.Parse(date_split[0]);\n
    \       int day = int.Parse(date_split[1]);\n        int year = int.Parse(date_split[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date == \"\") {\n            return false;\n        }\n        string[]
    dateParts = date.Split('-');\n        if (dateParts.Length != 3) {\n            return
    false;\n        }\n        int month = int.Parse(dateParts[0]);\n        int day
    = int.Parse(dateParts[1]);\n        int year = int.Parse(dateParts[2]);\n        if
    (month < 1 || month > 12) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] split = date.Split('-');\n
    \       if (split.Length != 3) return false;\n        int month = int.Parse(split[0]);\n
    \       int day = int.Parse(split[1]);\n        int year = int.Parse(split[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month, day, year;\n        if (!int.TryParse(parts[0], out month) || !int.TryParse(parts[1],
    out day) || !int.TryParse(parts[2], out year)) {\n            return false;\n
    \       }\n        if (month < 1 || month > 12) {\n            return false;\n
    \       }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day > 30) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (day < 1) {\n            return false;\n        }\n
    \       if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8
    || month == 10 || month == 12) {\n            if (day > 31) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day > 30) {\n                return false;\n
    \           }\n        } else if (month == 2) {\n            if (day > 29) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        string[]
    dateSplit = date.Split('-');\n        if (dateSplit.Length != 3) {\n            return
    false;\n        }\n        int month = int.Parse(dateSplit[0]);\n        int day
    = int.Parse(dateSplit[1]);\n        int year = int.Parse(dateSplit[2]);\n        if
    (month < 1 || month > 12) {\n            return false;\n        }\n        if
    (month == 2) {\n            if (year % 4 == 0) {\n                if (day < 1
    || day > 29) {\n                    return false;\n                }\n            }
    else {\n                if (day < 1 || day > 28) {\n                    return
    false;\n                }\n            }\n        } else if (month == 1 || month
    == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
    {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       } else {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date == \"\") return false;\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] dateParts = date.Split('-');\n
    \       if (dateParts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(dateParts[0]);\n        int day = int.Parse(dateParts[1]);\n
    \       int year = int.Parse(dateParts[2]);\n        if (month < 1 || month >
    12) {\n            return false;\n        }\n        if (month == 2) {\n            if
    (day < 1 || day > 29) {\n                return false;\n            }\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day < 1 || day > 30) {\n                return false;\n            }\n        }
    else {\n            if (day < 1 || day > 31) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        string[]
    parts = date.Split('-');\n        if (parts.Length != 3) return false;\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) return false;\n
    \       if (day < 1) return false;\n        if (month == 2) {\n            if
    (day > 29) return false;\n            if (day == 29) {\n                if (year
    % 4 != 0) return false;\n                if (year % 100 == 0 && year % 400 !=
    0) return false;\n            }\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day > 30) return false;\n        }
    else {\n            if (day > 31) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date == \"\") return false;\n        string[] dateArr = date.Split('-');\n        if
    (dateArr.Length != 3) return false;\n        int month = Int32.Parse(dateArr[0]);\n
    \       int day = Int32.Parse(dateArr[1]);\n        int year = Int32.Parse(dateArr[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] dateSplit = date.Split('-');\n
    \       if (dateSplit.Length != 3) return false;\n        int month = int.Parse(dateSplit[0]);\n
    \       int day = int.Parse(dateSplit[1]);\n        int year = int.Parse(dateSplit[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       try {\n            DateTime dt = DateTime.Parse(date);\n            return
    true;\n        } catch (Exception) {\n            return false;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6519c3efe7414258ad26b31876e82d63>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6519c3efe7414258ad26b31876e82d63>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] dateSplit = date.Split('-');\n        if (dateSplit.Length
    != 3) return false;\n        int month = int.Parse(dateSplit[0]);\n        int
    day = int.Parse(dateSplit[1]);\n        int year = int.Parse(dateSplit[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        }\n        if (month == 4 || month == 6 || month == 9 ||
    month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        var parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        var
    month = int.Parse(parts[0]);\n        var day = int.Parse(parts[1]);\n        var
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (day < 1) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day > 30) {\n                return false;\n
    \           }\n        } else {\n            if (day > 31) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date.Length == 0) return false;\n        string[] dateSplit = date.Split('-');\n
    \       if (dateSplit.Length != 3) return false;\n        int month = int.Parse(dateSplit[0]);\n
    \       int day = int.Parse(dateSplit[1]);\n        int year = int.Parse(dateSplit[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008841
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date.Length == 0) return false;\n        string[] dateArr = date.Split('-');\n
    \       int month = int.Parse(dateArr[0]);\n        int day = int.Parse(dateArr[1]);\n
    \       int year = int.Parse(dateArr[2]);\n        if (month < 1 || month > 12)
    return false;\n        if (day < 1 || day > 31) return false;\n        if (month
    == 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n
    \               if (year % 4 != 0) return false;\n                if (year % 100
    == 0 && year % 400 != 0) return false;\n            }\n        }\n        if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)
    return false;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0002b]
    in <0fc61ff06a47471d8fcb32d5edcd4367>:0 \n  at Problem.Main (System.String[] args)
    [0x000c3] in <0fc61ff06a47471d8fcb32d5edcd4367>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0002b] in <0fc61ff06a47471d8fcb32d5edcd4367>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <0fc61ff06a47471d8fcb32d5edcd4367>:0
    \n"
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83df907a893e40409b5a0502c9d703b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83df907a893e40409b5a0502c9d703b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // your code here\n        //
    split the date string into parts\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) return false;\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1) return
    false;\n        if (month == 2) {\n            if (day > 29) return false;\n            if
    (day == 29) {\n                if (year % 4 != 0) return false;\n                if
    (year % 100 == 0 && year % 400 != 0) return false;\n            }\n        } else
    if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day
    > 30) return false;\n        } else {\n            if (day > 31) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cbdf5a765c949c293f0c7fc58f31498>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (day < 1) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day > 30) {\n                return false;\n
    \           }\n        } else {\n            if (day > 31) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        int month, day, year;\n        if (!int.TryParse(parts[0],
    out month) || !int.TryParse(parts[1], out day) || !int.TryParse(parts[2], out
    year)) return false;\n        if (month < 1 || month > 12) return false;\n        if
    (day < 1 || day > 31) return false;\n        if (month == 2) {\n            if
    (day > 29) return false;\n            if (day == 29) {\n                if (year
    % 4 != 0) return false;\n                if (year % 100 == 0 && year % 400 !=
    0) return false;\n            }\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day > 30) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       if (date.Length == 0) return false;\n        string[] dateArr = date.Split('-');\n
    \       if (dateArr.Length != 3) return false;\n        int month = Int32.Parse(dateArr[0]);\n
    \       int day = Int32.Parse(dateArr[1]);\n        int year = Int32.Parse(dateArr[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        var month = int.Parse(parts[0]);\n        var day
    = int.Parse(parts[1]);\n        var year = int.Parse(parts[2]);\n        if (year
    < 0) return false;\n        if (month < 1 || month > 12) return false;\n        if
    (day < 1) return false;\n        if (month == 2) {\n            if (day > 29)
    return false;\n            if (day == 29) {\n                if (year % 4 != 0)
    return false;\n                if (year % 100 == 0 && year % 400 != 0) return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day > 30) return false;\n        } else {\n
    \           if (day > 31) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       string[] dateParts = date.Split('-');\n        if (dateParts.Length !=
    3) return false;\n        int month = int.Parse(dateParts[0]);\n        int day
    = int.Parse(dateParts[1]);\n        int year = int.Parse(dateParts[2]);\n        if
    (month < 1 || month > 12) return false;\n        if (day < 1) return false;\n
    \       if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8
    || month == 10 || month == 12) {\n            if (day > 31) return false;\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day > 30) return false;\n        } else if (month == 2) {\n            if (day
    > 29) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       string[] dateArray = date.Split('-');\n        int month = Int32.Parse(dateArray[0]);\n
    \       int day = Int32.Parse(dateArray[1]);\n        int year = Int32.Parse(dateArray[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 2) {\n            if (day < 1 || day > 29) {\n                return
    false;\n            }\n        } else if (month == 4 || month == 6 || month ==
    9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        } else {\n            if (day < 1 || day > 31)
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <86fbd901d0b74668845d15a5f75d0188>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <86fbd901d0b74668845d15a5f75d0188>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.ValidDate (System.String date) [0x0000b] in <86fbd901d0b74668845d15a5f75d0188>:0
    \n  at Problem.Main (System.String[] args) [0x0006a] in <86fbd901d0b74668845d15a5f75d0188>:0
    \n"
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] parts = date.Split('-');\n
    \       if (parts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(parts[0]);\n        int day = int.Parse(parts[1]);\n        int
    year = int.Parse(parts[2]);\n        if (month < 1 || month > 12) {\n            return
    false;\n        }\n        if (month == 2) {\n            if (day < 1 || day >
    29) {\n                return false;\n            }\n        } else if (month
    == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||
    day > 30) {\n                return false;\n            }\n        } else {\n
    \           if (day < 1 || day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code goes here\n
    \       string[] parts = date.Split('-');\n        if (parts.Length != 3) {\n
    \           return false;\n        }\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1) {\n            return false;\n        }\n        if (month
    == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day > 30) {\n                return false;\n            }\n        }
    else {\n            if (day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    return false;\n        string[] dateParts = date.Split('-');\n        if (dateParts.Length
    != 3) return false;\n        int month = int.Parse(dateParts[0]);\n        int
    day = int.Parse(dateParts[1]);\n        int year = int.Parse(dateParts[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (day < 1 || day
    > 31) return false;\n        if (month == 2) {\n            if (day > 29) return
    false;\n            if (day == 29) {\n                if (year % 4 != 0) return
    false;\n                if (year % 100 == 0 && year % 400 != 0) return false;\n
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month
    == 11) {\n            if (day > 30) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpys5emvam.cs(16,24): error CS0161: ''Problem.ValidDate(string)'': not all
    code paths return a value

    '
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date == \"\") {\n            return false;\n        }\n        string[] dateArray
    = date.Split('-');\n        int month = int.Parse(dateArray[0]);\n        int
    day = int.Parse(dateArray[1]);\n        int year = int.Parse(dateArray[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8
    || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return
    false;\n            }\n        }\n        if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return
    false;\n            }\n        }\n        if (month == 2) {\n            if (day
    < 1 || day > 29) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0002e]
    in <0635c524db064eb4b1bc9312cc78fb53>:0 \n  at Problem.Main (System.String[] args)
    [0x000c3] in <0635c524db064eb4b1bc9312cc78fb53>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0002e] in <0635c524db064eb4b1bc9312cc78fb53>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <0635c524db064eb4b1bc9312cc78fb53>:0
    \n"
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        if (date.Length == 0)
    {\n            return false;\n        }\n        string[] dateParts = date.Split('-');\n
    \       if (dateParts.Length != 3) {\n            return false;\n        }\n        int
    month = int.Parse(dateParts[0]);\n        int day = int.Parse(dateParts[1]);\n
    \       int year = int.Parse(dateParts[2]);\n        if (month < 1 || month >
    12) {\n            return false;\n        }\n        if (month == 2) {\n            if
    (day < 1 || day > 29) {\n                return false;\n            }\n        }
    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if
    (day < 1 || day > 30) {\n                return false;\n            }\n        }
    else {\n            if (day < 1 || day > 31) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a76483aeeb854c23b89c68619f3dbb75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        if
    (date.Length == 0) return false;\n        string[] dateArr = date.Split('-');\n
    \       if (dateArr.Length != 3) return false;\n        int month = int.Parse(dateArr[0]);\n
    \       int day = int.Parse(dateArr[1]);\n        int year = int.Parse(dateArr[2]);\n
    \       if (month < 1 || month > 12) return false;\n        if (month == 2) {\n
    \           if (day < 1 || day > 29) return false;\n        } else if (month ==
    4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day
    > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008842
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   public static bool ValidDate(string date) {\n        // Your code here\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <434f7654134849a28516b21594f4b555>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008839
