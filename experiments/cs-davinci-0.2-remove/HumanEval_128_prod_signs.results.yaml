language: cs
name: HumanEval_128_prod_signs
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n                sum +=\
    \ x;\n            } else if (x < 0) {\n                prod *= -1;\n         \
    \       sum += -x;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            sum += Math.Abs(arr[i]);\n  \
    \          prod *= Math.Sign(arr[i]);\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prodSigns = 1;\n        long sumMagnitudes = 0;\n        foreach (long\
    \ n in arr) {\n            if (n > 0) prodSigns *= 1;\n            else if (n\
    \ < 0) prodSigns *= -1;\n            else prodSigns *= 0;\n            sumMagnitudes\
    \ += Math.Abs(n);\n        }\n        return sumMagnitudes * prodSigns;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        if (arr.Count\
    \ == 0)\n            return null;\n        long prod = 1;\n        long sum =\
    \ 0;\n        foreach (long i in arr) {\n            if (i > 0)\n            \
    \    prod *= 1;\n            else if (i < 0)\n                prod *= -1;\n  \
    \          else\n                prod *= 0;\n            sum += Math.Abs(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long n in arr) {\n            if (n == 0) {\n                continue;\n  \
    \          }\n            prod *= Math.Sign(n);\n            sum += Math.Abs(n);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <040ffcd8a8ee46f5893e293b25d5ed4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <040ffcd8a8ee46f5893e293b25d5ed4e>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prodSigns = 1;\n        long sumMagnitudes =\
    \ 0;\n        foreach (long num in arr) {\n            if (num > 0) {\n      \
    \          prodSigns *= 1;\n            } else if (num < 0) {\n              \
    \  prodSigns *= -1;\n            } else {\n                prodSigns *= 0;\n \
    \           }\n            sumMagnitudes += Math.Abs(num);\n        }\n      \
    \  return sumMagnitudes * prodSigns;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n                sum +=\
    \ x;\n            } else if (x < 0) {\n                prod *= -1;\n         \
    \       sum += -x;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return prod * sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            sum += Math.Abs(num);\n            prod *= Math.Sign(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x == 0) continue;\n            prod *= Math.Sign(x);\n      \
    \      sum += Math.Abs(x);\n        }\n        return prod * sum;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa172412ab664829b9ae47568599435f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa172412ab664829b9ae47568599435f>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long n in arr) {\n            if (n < 0) {\n                prod *= -1;\n \
    \           } else if (n == 0) {\n                prod = 0;\n                break;\n\
    \            }\n            sum += Math.Abs(n);\n        }\n        return sum\
    \ * prod;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n\
    \        foreach (long x in arr) {\n            sum += Math.Abs(x);\n        \
    \    if (x > 0) {\n                prod *= 1;\n            } else if (x < 0) {\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1aade9e743641bfb5e44b1b99f892e4>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n                sum +=\
    \ x;\n            } else if (x < 0) {\n                prod *= -1;\n         \
    \       sum += -x;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return prod * sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 0) {\n                continue;\n  \
    \          }\n            prod *= Math.Sign(i);\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b9c00a8c42e45b5b56e7308f3ff09d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b9c00a8c42e45b5b56e7308f3ff09d4>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 0) continue;\n            prod *= Math.Sign(i);\n      \
    \      sum += Math.Abs(i);\n        }\n        return sum * prod;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccabb32448cb4a67abc7260e9c454fce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccabb32448cb4a67abc7260e9c454fce>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 0) {\n                continue;\n  \
    \          }\n            prod *= Math.Sign(i);\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b9c00a8c42e45b5b56e7308f3ff09d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b9c00a8c42e45b5b56e7308f3ff09d4>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n\
    \                prod *= 1;\n            } else if (x < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        if (arr.Count\
    \ == 0) return null;\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (var item in arr) {\n            if (item == 0) continue;\n            prod\
    \ *= Math.Sign(item);\n            sum += Math.Abs(item);\n        }\n       \
    \ return prod * sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2e35d45fc14d36b7202d8761f204fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2e35d45fc14d36b7202d8761f204fc>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) prod *= 1;\n            else if (x < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(x);\n        }\n   \
    \     return prod * sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long n in arr) {\n            if (n > 0) {\n                prod *= 1;\n  \
    \          } else if (n < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(n);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long n in arr) {\n            if (n == 0) {\n                continue;\n  \
    \          }\n            prod *= Math.Sign(n);\n            sum += Math.Abs(n);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <040ffcd8a8ee46f5893e293b25d5ed4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <040ffcd8a8ee46f5893e293b25d5ed4e>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            sum += Math.Abs(num);\n            prod *= Math.Sign(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            prod *=\
    \ Math.Sign(num);\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n\
    \                prod *= 1;\n            } else if (x < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            prod *= Math.Sign(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n\
    \                prod *= 1;\n            } else if (x < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            if (x != 0)\
    \ {\n                prod *= Math.Sign(x);\n            }\n        }\n       \
    \ return sum * prod;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42f576843fe940cb9e09512917eaec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42f576843fe940cb9e09512917eaec08>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x < 0) {\n                prod *= -1;\n \
    \           } else if (x > 0) {\n                sum += x;\n            }\n  \
    \      }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc04f8dc19f54cbba5b88a2c03824527>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc04f8dc19f54cbba5b88a2c03824527>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        if (arr.Count\
    \ == 0)\n            return null;\n        long prod = 1;\n        long sum =\
    \ 0;\n        foreach (long num in arr) {\n            if (num > 0)\n        \
    \        prod *= 1;\n            else if (num < 0)\n                prod *= -1;\n\
    \            else\n                prod *= 0;\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            if (i > 0) {\n\
    \                prod *= 1;\n            } else if (i < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        if (arr.Count\
    \ == 0)\n            return null;\n        long prod = 1;\n        long sum =\
    \ 0;\n        foreach (long i in arr) {\n            if (i > 0)\n            \
    \    prod *= 1;\n            else if (i < 0)\n                prod *= -1;\n  \
    \          else\n                prod *= 0;\n            sum += Math.Abs(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                sum += x;\n   \
    \             prod *= 1;\n            } else if (x < 0) {\n                sum\
    \ += -x;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) prod *= 1;\n            else if (x < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(x);\n        }\n   \
    \     return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prodSigns = 1;\n        long sumMagnitudes =\
    \ 0;\n        foreach (long x in arr) {\n            if (x == 0) {\n         \
    \       continue;\n            }\n            prodSigns *= Math.Sign(x);\n   \
    \         sumMagnitudes += Math.Abs(x);\n        }\n        return prodSigns *\
    \ sumMagnitudes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9e59a0ce88f4f6993dda87fd11938e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9e59a0ce88f4f6993dda87fd11938e2>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long sum = 0;\n        long prod = 1;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                sum += num;\n\
    \                prod *= 1;\n            } else if (num < 0) {\n             \
    \   sum += -num;\n                prod *= -1;\n            } else {\n        \
    \        prod *= 0;\n            }\n        }\n        return sum * prod;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long sum = 0;\n        long prod = 1;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                sum += x;\n                prod *=\
    \ 1;\n            } else if (x < 0) {\n                sum += -x;\n          \
    \      prod *= -1;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                sum += x;\n   \
    \             prod *= 1;\n            } else if (x < 0) {\n                sum\
    \ += -x;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            prod *= Math.Sign(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 0) {\n                continue;\n  \
    \          }\n            prod *= Math.Sign(i);\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b9c00a8c42e45b5b56e7308f3ff09d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b9c00a8c42e45b5b56e7308f3ff09d4>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                sum += num;\n\
    \                prod *= 1;\n            } else if (num < 0) {\n             \
    \   sum += Math.Abs(num);\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sum = 0;\n      \
    \  long prod = 1;\n        foreach (long num in arr) {\n            if (num >\
    \ 0) {\n                sum += num;\n                prod *= 1;\n            }\
    \ else if (num < 0) {\n                sum += Math.Abs(num);\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 0) {\n                continue;\n  \
    \          }\n            prod *= Math.Sign(i);\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b9c00a8c42e45b5b56e7308f3ff09d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b9c00a8c42e45b5b56e7308f3ff09d4>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                sum += num;\n\
    \                prod *= 1;\n            } else if (num < 0) {\n             \
    \   sum += -num;\n                prod *= -1;\n            } else {\n        \
    \        prod *= 0;\n            }\n        }\n        return sum * prod;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            sum += Math.Abs(num);\n            prod *= Math.Sign(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                sum += i;\n   \
    \             prod *= 1;\n            } else if (i < 0) {\n                sum\
    \ += -i;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n                sum +=\
    \ x;\n            } else if (x < 0) {\n                prod *= -1;\n         \
    \       sum += -x;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return prod * sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prodSigns = 1;\n        long sumMagnitudes =\
    \ 0;\n        foreach (long num in arr) {\n            if (num > 0) {\n      \
    \          prodSigns *= 1;\n            } else if (num < 0) {\n              \
    \  prodSigns *= -1;\n            } else {\n                prodSigns *= 0;\n \
    \           }\n            sumMagnitudes += Math.Abs(num);\n        }\n      \
    \  return prodSigns * sumMagnitudes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            sum += Math.Abs(num);\n            prod *= Math.Sign(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prodSigns = 1;\n        long sumMagnitudes =\
    \ 0;\n        foreach (long num in arr) {\n            if (num < 0) {\n      \
    \          prodSigns *= -1;\n            } else if (num > 0) {\n             \
    \   prodSigns *= 1;\n            } else {\n                prodSigns *= 0;\n \
    \           }\n            sumMagnitudes += Math.Abs(num);\n        }\n      \
    \  return sumMagnitudes * prodSigns;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long sum = 0;\n        long prod = 1;\n        foreach (long n in arr) {\n\
    \            sum += Math.Abs(n);\n            if (n > 0) prod *= 1;\n        \
    \    else if (n < 0) prod *= -1;\n            else prod *= 0;\n        }\n   \
    \     return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) prod *= 1;\n            else if (x < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(x);\n        }\n   \
    \     return prod * sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                sum += x;\n   \
    \             prod *= 1;\n            } else if (x < 0) {\n                sum\
    \ += -x;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n\
    \            if (i > 0) prod *= 1;\n            else if (i < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(i);\n        }\n   \
    \     return prod * sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n\
    \            if (i > 0) prod *= 1;\n            else if (i < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(i);\n        }\n   \
    \     return prod * sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (var x in arr) {\n            if (x > 0) {\n                sum += x;\n    \
    \            prod *= 1;\n            } else if (x < 0) {\n                sum\
    \ += -x;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                sum += x;\n   \
    \             prod *= 1;\n            } else if (x < 0) {\n                sum\
    \ += -x;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) prod *= 1;\n            else if (x < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(x);\n        }\n   \
    \     return prod * sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long a in arr) {\n            if (a > 0) {\n                sum += a;\n   \
    \             prod *= 1;\n            } else if (a < 0) {\n                sum\
    \ += -a;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                sum += x;\n   \
    \             prod *= 1;\n            } else if (x < 0) {\n                sum\
    \ += -x;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            prod *= Math.Sign(num);\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f360970b2c2404da0a4e3c5c916be6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f360970b2c2404da0a4e3c5c916be6c>:0 \n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ < 0) {\n                prod *= -1;\n            }\n        }\n        return\
    \ sum * prod;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47bae5c5d14545afad76e9002ba7435c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47bae5c5d14545afad76e9002ba7435c>:0 \n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                sum += num;\n\
    \                prod *= 1;\n            } else if (num < 0) {\n             \
    \   sum += Math.Abs(num);\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i < 0) {\n                prod *= -1;\n \
    \           } else if (i > 0) {\n                sum += i;\n            }\n  \
    \      }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ff89cf44d7a4320adea71240e454de4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ff89cf44d7a4320adea71240e454de4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            prod *= Math.Sign(num);\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f360970b2c2404da0a4e3c5c916be6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f360970b2c2404da0a4e3c5c916be6c>:0 \n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n\
    \                prod *= 1;\n            } else if (x < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prodSigns = 1;\n        long sumMagnitudes =\
    \ 0;\n        foreach (long num in arr) {\n            if (num == 0) {\n     \
    \           prodSigns = 0;\n                break;\n            }\n          \
    \  if (num < 0) {\n                prodSigns *= -1;\n            }\n         \
    \   sumMagnitudes += Math.Abs(num);\n        }\n        return sumMagnitudes *\
    \ prodSigns;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long item in arr) {\n            if (item > 0) {\n                sum += item;\n\
    \                prod *= 1;\n            } else if (item < 0) {\n            \
    \    sum += -item;\n                prod *= -1;\n            } else {\n      \
    \          prod *= 0;\n            }\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                sum += num;\n\
    \                prod *= 1;\n            } else if (num < 0) {\n             \
    \   sum += -num;\n                prod *= -1;\n            } else {\n        \
    \        prod *= 0;\n            }\n        }\n        return sum * prod;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n\
    \            if (i > 0) prod *= 1;\n            else if (i < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(i);\n        }\n   \
    \     return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (var x in arr) {\n\
    \            if (x > 0) prod *= 1;\n            else if (x < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(x);\n        }\n   \
    \     return prod * sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ < 0) {\n                prod *= -1;\n            }\n        }\n        return\
    \ sum * prod;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47bae5c5d14545afad76e9002ba7435c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47bae5c5d14545afad76e9002ba7435c>:0 \n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                sum += i;\n   \
    \             prod *= 1;\n            } else if (i < 0) {\n                sum\
    \ += -i;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                sum += i;\n   \
    \             prod *= 1;\n            } else if (i < 0) {\n                sum\
    \ += -i;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            if (i != 0)\
    \ {\n                prod *= Math.Sign(i);\n            }\n        }\n       \
    \ return sum * prod;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18644e6fea1643878339494e45c0ac10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18644e6fea1643878339494e45c0ac10>:0 \n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n                sum +=\
    \ x;\n            } else if (x < 0) {\n                prod *= -1;\n         \
    \       sum += -x;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            if (i != 0)\
    \ {\n                prod *= Math.Sign(i);\n            }\n        }\n       \
    \ return sum * prod;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18644e6fea1643878339494e45c0ac10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18644e6fea1643878339494e45c0ac10>:0 \n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prodSigns = 1;\n        long sumMagnitudes =\
    \ 0;\n        foreach (long num in arr) {\n            if (num > 0) {\n      \
    \          prodSigns *= 1;\n            } else if (num < 0) {\n              \
    \  prodSigns *= -1;\n            } else {\n                prodSigns *= 0;\n \
    \           }\n            sumMagnitudes += Math.Abs(num);\n        }\n      \
    \  return sumMagnitudes * prodSigns;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        long prod = 1;\n        long sum = 0;\n\
    \        foreach (long i in arr) {\n            if (i > 0) {\n               \
    \ prod *= 1;\n                sum += i;\n            } else if (i < 0) {\n   \
    \             prod *= -1;\n                sum += Math.Abs(i);\n            }\
    \ else {\n                prod *= 0;\n            }\n        }\n        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        return prod * sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                sum += i;\n   \
    \             prod *= 1;\n            } else if (i < 0) {\n                sum\
    \ += Math.Abs(i);\n                prod *= -1;\n            } else {\n       \
    \         prod *= 0;\n            }\n        }\n        return sum * prod;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num < 0) {\n                prod *= -1;\n\
    \            } else if (num == 0) {\n                prod = 0;\n             \
    \   break;\n            }\n            sum += Math.Abs(num);\n        }\n    \
    \    return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add other functions as well if needed.\n        return null;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8da2413f17404137acd0fd358d658716>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8da2413f17404137acd0fd358d658716>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            if (i > 0) {\n\
    \                prod *= 1;\n            } else if (i < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n\
    \                prod *= 1;\n            } else if (x < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long n in arr) {\n            if (n > 0) {\n                prod *= 1;\n  \
    \          } else if (n < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(n);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            sum += Math.Abs(num);\n            prod *= Math.Sign(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292d7c13a64544ea95c9fdb523ce5fa0>:0 \n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            sum += Math.Abs(num);\n            if (num != 0) prod *= Math.Sign(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c0c873aec8e40d8a358a7b06181673c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c0c873aec8e40d8a358a7b06181673c>:0 \n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long n in arr) {\n            prod *= Math.Sign(n);\n            sum += Math.Abs(n);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n\
    \                prod *= 1;\n            } else if (x < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                sum += i;\n   \
    \             prod *= 1;\n            } else if (i < 0) {\n                sum\
    \ += -i;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x < 0) {\n                prod *= -1;\n \
    \           } else if (x > 0) {\n                sum += x;\n            }\n  \
    \      }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc04f8dc19f54cbba5b88a2c03824527>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc04f8dc19f54cbba5b88a2c03824527>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n                sum +=\
    \ x;\n            } else if (x < 0) {\n                prod *= -1;\n         \
    \       sum += -x;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return prod * sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long n in arr) {\n            sum += Math.Abs(n);\n            if (n > 0) {\n\
    \                prod *= 1;\n            } else if (n < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long a in arr) {\n            prod *= Math.Sign(a);\n            sum += Math.Abs(a);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (var i in arr) {\n\
    \            if (i > 0) {\n                prod *= 1;\n                sum +=\
    \ i;\n            } else if (i < 0) {\n                prod *= -1;\n         \
    \       sum += Math.Abs(i);\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x == 0) {\n                continue;\n  \
    \          }\n            prod *= Math.Sign(x);\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a09ff61387142729c9863a9d1362ec1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a09ff61387142729c9863a9d1362ec1>:0 \n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        long prod = 1;\n        long sum = 0;\n\
    \        if (arr.Count == 0) {\n            return null;\n        }\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            prod *= Math.Sign(x);\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prodSigns = 1;\n        long sumMagnitudes =\
    \ 0;\n        foreach (long x in arr) {\n            if (x > 0) {\n          \
    \      prodSigns *= 1;\n            } else if (x < 0) {\n                prodSigns\
    \ *= -1;\n            } else {\n                prodSigns *= 0;\n            }\n\
    \            sumMagnitudes += Math.Abs(x);\n        }\n        return sumMagnitudes\
    \ * prodSigns;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            if (i > 0) {\n\
    \                prod *= 1;\n            } else if (i < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ != 0) {\n                prod *= Math.Sign(num);\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe181a5776104cd78c4ebe53f4df9f74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe181a5776104cd78c4ebe53f4df9f74>:0 \n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > 0) {\n                prod *= 1;\n\
    \            } else if (num < 0) {\n                prod *= -1;\n            }\
    \ else {\n                prod *= 0;\n            }\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a7285d29e104066bab6cd91be4ffe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39533979078f4ad9a11e47cc1bb709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            prod *= Math.Sign(x);\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            if (num\
    \ > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n    \
    \            prod *= -1;\n            } else {\n                prod *= 0;\n \
    \           }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            prod *= Math.Sign(num);\n            sum += Math.Abs(num);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f5739590a4b4facb0130f3ced6de08e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f5739590a4b4facb0130f3ced6de08e>:0 \n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long n in arr) {\n\
    \            if (n > 0) prod *= 1;\n            else if (n < 0) prod *= -1;\n\
    \            else prod *= 0;\n            sum += Math.Abs(n);\n        }\n   \
    \     return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                sum += i;\n   \
    \             prod *= 1;\n            } else if (i < 0) {\n                sum\
    \ += Math.Abs(i);\n                prod *= -1;\n            } else {\n       \
    \         prod *= 0;\n            }\n        }\n        return sum * prod;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                continue;\n\
    \            }\n            prod *= Math.Sign(num);\n            sum += Math.Abs(num);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f5739590a4b4facb0130f3ced6de08e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f5739590a4b4facb0130f3ced6de08e>:0 \n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n\
    \                prod *= 1;\n            } else if (x < 0) {\n               \
    \ prod *= -1;\n            } else {\n                prod *= 0;\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i < 0) {\n                prod *= -1;\n \
    \           } else if (i > 0) {\n                sum += i;\n            }\n  \
    \      }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ff89cf44d7a4320adea71240e454de4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ff89cf44d7a4320adea71240e454de4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                prod *= 1;\n  \
    \          } else if (i < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (var x in arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n                sum +=\
    \ x;\n            } else if (x < 0) {\n                prod *= -1;\n         \
    \       sum += -x;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x > 0) {\n                prod *= 1;\n  \
    \          } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    public static Nullable<long>\
    \ ProdSigns(List<long> arr) {\n        if (arr.Count == 0) return null;\n    \
    \    long prod = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n\
    \            if (x > 0) {\n                prod *= 1;\n                sum +=\
    \ x;\n            } else if (x < 0) {\n                prod *= -1;\n         \
    \       sum += -x;\n            } else {\n                prod *= 0;\n       \
    \     }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008768
