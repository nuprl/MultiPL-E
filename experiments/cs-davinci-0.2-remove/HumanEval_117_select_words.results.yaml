language: cs
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> words = new List<string>();\n        string[]
    wordsArray = s.Split(' ');\n        foreach (string word in wordsArray) {\n            if
    (CountConsonants(word) == n) {\n                words.Add(word);\n            }\n
    \       }\n        return words;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8sh_ml0.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !\"aeiou\".Contains(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb9be16483b40c5b7f5fe38fef64c7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb9be16483b40c5b7f5fe38fef64c7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this method\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <1a8da5892e964474a6a6996c7853fe29>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <1a8da5892e964474a6a6996c7853fe29>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function.\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f9e61f757640efaff45aa585a32ac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f9e61f757640efaff45aa585a32ac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = 0;\n            foreach
    (var c in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c !=
    'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa5d92ca2a847d1b317253f56daae37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa5d92ca2a847d1b317253f56daae37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       var result = new List<string>();\n        foreach (var word in words)
    {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33lxqlrl.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = 0;\n            foreach
    (var c in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c !=
    'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa5d92ca2a847d1b317253f56daae37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa5d92ca2a847d1b317253f56daae37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement the function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <7162c0b8450f4d2f9656181d6fcf96e3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <7162c0b8450f4d2f9656181d6fcf96e3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function.\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <539cd85cc855405f84eca7cf15b42a97>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <539cd85cc855405f84eca7cf15b42a97>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function.\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f9e61f757640efaff45aa585a32ac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f9e61f757640efaff45aa585a32ac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = word.Where(c
    => !\"aeiou\".Contains(c)).Count();\n            if (consonants == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c9df7bc25c40f7b32f02e93eda0ff0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c9df7bc25c40f7b32f02e93eda0ff0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = word.Where(c
    => !\"aeiou\".Contains(c)).Count();\n            if (consonants == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c9df7bc25c40f7b32f02e93eda0ff0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c9df7bc25c40f7b32f02e93eda0ff0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d3023dcde482420a8f4fa5fa52819194>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d3023dcde482420a8f4fa5fa52819194>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        return s.Split(' ').Where(x => x.Count(y => !\"aeiou\".Contains(y))
    == n).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1ef7bdc8a5d45efab6e7200b4d863df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1ef7bdc8a5d45efab6e7200b4d863df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Your code goes here.\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1425107f8d0b4233a45c819b943f3aa5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1425107f8d0b4233a45c819b943f3aa5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function.\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <539cd85cc855405f84eca7cf15b42a97>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <539cd85cc855405f84eca7cf15b42a97>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var count = 0;\n            foreach
    (var c in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c !=
    'o' && c != 'u') {\n                    count++;\n                }\n            }\n
    \           if (count == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3689a4cfeff54021a577d6117a1841c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3689a4cfeff54021a577d6117a1841c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> words = new List<string>();\n        string[]
    split = s.Split(' ');\n        foreach (string word in split) {\n            if
    (word.Length > 0) {\n                if (Consonants(word) == n) {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq6hfl2a5.cs(20,21): error CS0103: The name ''Consonants'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = 0;\n            foreach
    (var c in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c !=
    'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa5d92ca2a847d1b317253f56daae37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa5d92ca2a847d1b317253f56daae37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var consonants = new
    HashSet<char>(\"bcdfghjklmnpqrstvwxyz\".ToCharArray());\n        var result =
    new List<string>();\n        foreach (var word in words) {\n            var count
    = 0;\n            foreach (var c in word) {\n                if (consonants.Contains(c))
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75b7ad7a25a46f1bf4db7829967f63b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75b7ad7a25a46f1bf4db7829967f63b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement your solution here\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <7cd8a0bb6e10490396c4d744895ad597>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <7cd8a0bb6e10490396c4d744895ad597>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <505067c65cba4f04b8bf4347e0a37b22>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <505067c65cba4f04b8bf4347e0a37b22>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !\"aeiou\".Contains(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb9be16483b40c5b7f5fe38fef64c7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb9be16483b40c5b7f5fe38fef64c7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function.\n        // Hint: You
    may find the following functions useful:\n        //       - s.Split(new char[]
    { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n        //       - s.Count(c
    => c == 'a')\n        //       - s.ToLower()\n        //       - s.Contains(c)\n
    \       //       - s.IndexOf(c)\n        //       - s.Substring(i, j)\n        //
    \      - s.Remove(i, j)\n        //       - s.Insert(i, c)\n        //       -
    s.Append(c)\n        //       - s.Append(s)\n        //       - s.Remove(i, j)\n
    \       //       - s.Remove(c)\n        //       - s.Remove(c, i)\n        //
    \      - s.Remove(c, i, j)\n        //       - s.Remove(s)\n        //       -
    s.Remove(s, i)\n        //       - s.Remove(s, i, j)\n        //       - s.Replace(c,
    c)\n        //       - s.Replace(c, c, i)\n        //       - s.Replace(c, c,
    i, j)\n        //       - s.Replace(s, s)\n        //       - s.Replace(s, s,
    i)\n        //       - s.Replace(s, s, i, j)\n        //       - s.ToCharArray()\n
    \       //       - s.ToCharArray(i, j)\n        //       - s.ToLower()\n        //
    \      - s.ToUpper()\n        //       - s.Trim()\n        //       - s.Trim(c)\n
    \       //       - s.Trim(c, i)\n        //       - s.Trim(c, i, j)\n        //
    \      - s.Trim(s)\n        //       - s.Trim(s, i)\n        //       - s.Trim(s,
    i, j)\n        //       - s.TrimStart()\n        //       - s.TrimStart\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygowlfu8.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       var result = new List<string>();\n        foreach (var word in words)
    {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33lxqlrl.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string[]
    words = s.Split(' ');\n        foreach (string word in words) {\n            if
    (word.Length == 0) continue;\n            if (CountConsonants(word) == n) {\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9jj2pqe9.cs(20,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !isVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1uk3jo8c.cs(19,34): error CS0103: The name ''isVowel'' does not exist
    in the current context

    '
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        // TODO:
    Implement your solution here\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af05097aaa65499db98fe45bbbd75538>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af05097aaa65499db98fe45bbbd75538>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> words
    = new List<string>();\n        string[] wordsArray = s.Split(' ');\n        foreach
    (string word in wordsArray) {\n            if (ConsonantsCount(word) == n) {\n
    \               words.Add(word);\n            }\n        }\n        return words;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplot08hrc.cs(20,17): error CS0103: The name ''ConsonantsCount'' does not
    exist in the current context

    '
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Implement this function\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f202a3f4900341b2881c8ddc659fde25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f202a3f4900341b2881c8ddc659fde25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = 0;\n            foreach
    (var c in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c !=
    'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa5d92ca2a847d1b317253f56daae37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa5d92ca2a847d1b317253f56daae37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <cfb9848e75a3491795f112b02090eeed>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <cfb9848e75a3491795f112b02090eeed>:0
    \n"
  stdout: ''
  timestamp: 1659977201
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var consonants = new
    HashSet<char>(\"bcdfghjklmnpqrstvwxyz\".ToCharArray());\n        var result =
    new List<string>();\n        foreach (var word in words) {\n            var count
    = 0;\n            foreach (var c in word) {\n                if (consonants.Contains(c))
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75b7ad7a25a46f1bf4db7829967f63b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75b7ad7a25a46f1bf4db7829967f63b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Implement this function\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d8234481f93840cc9216a50827d14b9a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d8234481f93840cc9216a50827d14b9a>:0
    \n"
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function.\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f9e61f757640efaff45aa585a32ac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f9e61f757640efaff45aa585a32ac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = 0;\n            foreach
    (var ch in word) {\n                if (ch != 'a' && ch != 'e' && ch != 'i' &&
    ch != 'o' && ch != 'u') {\n                    consonants++;\n                }\n
    \           }\n            if (consonants == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f392fbfcd91f4c1fb9eef72aaca5ad65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f392fbfcd91f4c1fb9eef72aaca5ad65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function.\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <539cd85cc855405f84eca7cf15b42a97>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <539cd85cc855405f84eca7cf15b42a97>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var result = new List<string>();\n        var words = s.Split('
    ');\n        foreach (var word in words) {\n            var consonants = 0;\n
    \           foreach (var c in word) {\n                if (c != 'a' && c != 'e'
    && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n                }\n
    \           }\n            if (consonants == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f229dfc8db848afac1b8e75f543e286>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f229dfc8db848afac1b8e75f543e286>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function.\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f9e61f757640efaff45aa585a32ac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f9e61f757640efaff45aa585a32ac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement the function here.\n        return new
    List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38847a114c8d457d91368ff70dee3839>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38847a114c8d457d91368ff70dee3839>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> words = new List<string>();\n        string[]
    split = s.Split(' ');\n        foreach (string word in split) {\n            if
    (word.Length == 0) {\n                continue;\n            }\n            int
    count = 0;\n            foreach (char c in word) {\n                if (c != 'a'
    && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <085a4e2e51c744fe93f609ab3f85fefb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <085a4e2e51c744fe93f609ab3f85fefb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = 0;\n            foreach
    (var letter in word) {\n                if (letter != 'a' && letter != 'e' &&
    letter != 'i' && letter != 'o' && letter != 'u') {\n                    consonants++;\n
    \               }\n            }\n            if (consonants == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <541a3c393fdd46ab9d3e2d6f32f4531a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <541a3c393fdd46ab9d3e2d6f32f4531a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Implement this function\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f202a3f4900341b2881c8ddc659fde25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f202a3f4900341b2881c8ddc659fde25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wvwihji.cs(19,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement the function here.\n        return new
    List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38847a114c8d457d91368ff70dee3839>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38847a114c8d457d91368ff70dee3839>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Implement this function\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d8234481f93840cc9216a50827d14b9a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d8234481f93840cc9216a50827d14b9a>:0
    \n"
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Write your code here\n        return new List<string>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22fef381152c4e00bfddd45f52082489>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22fef381152c4e00bfddd45f52082489>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var consonants = word.Where(c
    => \"bcdfghjklmnpqrstvwxyz\".Contains(c)).Count();\n            if (consonants
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9539520aee4c6d92e74550dd9fedd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9539520aee4c6d92e74550dd9fedd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Your code goes here.\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <c3fc1a0104cf4a23a2eac1bb6a90a09b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <c3fc1a0104cf4a23a2eac1bb6a90a09b>:0
    \n"
  stdout: ''
  timestamp: 1659977201
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement the function here\n        return new
    List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <864a2b7c79fa4253b31aa87497c83066>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <864a2b7c79fa4253b31aa87497c83066>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977201
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            var count = 0;\n            foreach
    (var c in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c !=
    'o' && c != 'u') {\n                    count++;\n                }\n            }\n
    \           if (count == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3689a4cfeff54021a577d6117a1841c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3689a4cfeff54021a577d6117a1841c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n
    \       foreach (var word in words) {\n            if (CountConsonants(word) ==
    n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpn6re3d.cs(19,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
